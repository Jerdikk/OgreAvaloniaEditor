//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class StaticGeometry : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal StaticGeometry(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StaticGeometry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StaticGeometry() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_StaticGeometry(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public class OptimisedSubMeshGeometry : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal OptimisedSubMeshGeometry(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OptimisedSubMeshGeometry obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~OptimisedSubMeshGeometry() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_StaticGeometry_OptimisedSubMeshGeometry(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public OptimisedSubMeshGeometry() : this(OgrePINVOKE.new_StaticGeometry_OptimisedSubMeshGeometry(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public VertexData vertexData {
      set {
        OgrePINVOKE.StaticGeometry_OptimisedSubMeshGeometry_vertexData_set(swigCPtr, VertexData.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_OptimisedSubMeshGeometry_vertexData_get(swigCPtr);
        VertexData ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexData(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public IndexData indexData {
      set {
        OgrePINVOKE.StaticGeometry_OptimisedSubMeshGeometry_indexData_set(swigCPtr, IndexData.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_OptimisedSubMeshGeometry_indexData_get(swigCPtr);
        IndexData ret = (cPtr == global::System.IntPtr.Zero) ? null : new IndexData(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
  }

  public class SubMeshLodGeometryLink : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal SubMeshLodGeometryLink(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SubMeshLodGeometryLink obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~SubMeshLodGeometryLink() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_StaticGeometry_SubMeshLodGeometryLink(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public VertexData vertexData {
      set {
        OgrePINVOKE.StaticGeometry_SubMeshLodGeometryLink_vertexData_set(swigCPtr, VertexData.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_SubMeshLodGeometryLink_vertexData_get(swigCPtr);
        VertexData ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexData(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public IndexData indexData {
      set {
        OgrePINVOKE.StaticGeometry_SubMeshLodGeometryLink_indexData_set(swigCPtr, IndexData.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_SubMeshLodGeometryLink_indexData_get(swigCPtr);
        IndexData ret = (cPtr == global::System.IntPtr.Zero) ? null : new IndexData(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public SubMeshLodGeometryLink() : this(OgrePINVOKE.new_StaticGeometry_SubMeshLodGeometryLink(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public class QueuedSubMesh : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal QueuedSubMesh(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(QueuedSubMesh obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~QueuedSubMesh() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_StaticGeometry_QueuedSubMesh(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public SubMesh submesh {
      set {
        OgrePINVOKE.StaticGeometry_QueuedSubMesh_submesh_set(swigCPtr, SubMesh.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_QueuedSubMesh_submesh_get(swigCPtr);
        SubMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new SubMesh(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public MaterialPtr material {
      set {
        OgrePINVOKE.StaticGeometry_QueuedSubMesh_material_set(swigCPtr, MaterialPtr.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_QueuedSubMesh_material_get(swigCPtr);
        MaterialPtr ret = (cPtr == global::System.IntPtr.Zero) ? null : new MaterialPtr(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public SWIGTYPE_p_std__vectorT_Ogre__StaticGeometry__SubMeshLodGeometryLink_t geometryLodList {
      set {
        OgrePINVOKE.StaticGeometry_QueuedSubMesh_geometryLodList_set(swigCPtr, SWIGTYPE_p_std__vectorT_Ogre__StaticGeometry__SubMeshLodGeometryLink_t.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_QueuedSubMesh_geometryLodList_get(swigCPtr);
        SWIGTYPE_p_std__vectorT_Ogre__StaticGeometry__SubMeshLodGeometryLink_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_Ogre__StaticGeometry__SubMeshLodGeometryLink_t(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Vector3 position {
      set {
        OgrePINVOKE.StaticGeometry_QueuedSubMesh_position_set(swigCPtr, Vector3.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_QueuedSubMesh_position_get(swigCPtr);
        Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Quaternion orientation {
      set {
        OgrePINVOKE.StaticGeometry_QueuedSubMesh_orientation_set(swigCPtr, Quaternion.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_QueuedSubMesh_orientation_get(swigCPtr);
        Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Vector3 scale {
      set {
        OgrePINVOKE.StaticGeometry_QueuedSubMesh_scale_set(swigCPtr, Vector3.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_QueuedSubMesh_scale_get(swigCPtr);
        Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public AxisAlignedBox worldBounds {
      set {
        OgrePINVOKE.StaticGeometry_QueuedSubMesh_worldBounds_set(swigCPtr, AxisAlignedBox.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_QueuedSubMesh_worldBounds_get(swigCPtr);
        AxisAlignedBox ret = (cPtr == global::System.IntPtr.Zero) ? null : new AxisAlignedBox(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public QueuedSubMesh() : this(OgrePINVOKE.new_StaticGeometry_QueuedSubMesh(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public class QueuedGeometry : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal QueuedGeometry(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(QueuedGeometry obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~QueuedGeometry() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_StaticGeometry_QueuedGeometry(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public StaticGeometry.SubMeshLodGeometryLink geometry {
      set {
        OgrePINVOKE.StaticGeometry_QueuedGeometry_geometry_set(swigCPtr, StaticGeometry.SubMeshLodGeometryLink.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_QueuedGeometry_geometry_get(swigCPtr);
        StaticGeometry.SubMeshLodGeometryLink ret = (cPtr == global::System.IntPtr.Zero) ? null : new StaticGeometry.SubMeshLodGeometryLink(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Vector3 position {
      set {
        OgrePINVOKE.StaticGeometry_QueuedGeometry_position_set(swigCPtr, Vector3.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_QueuedGeometry_position_get(swigCPtr);
        Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Quaternion orientation {
      set {
        OgrePINVOKE.StaticGeometry_QueuedGeometry_orientation_set(swigCPtr, Quaternion.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_QueuedGeometry_orientation_get(swigCPtr);
        Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Vector3 scale {
      set {
        OgrePINVOKE.StaticGeometry_QueuedGeometry_scale_set(swigCPtr, Vector3.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_QueuedGeometry_scale_get(swigCPtr);
        Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public QueuedGeometry() : this(OgrePINVOKE.new_StaticGeometry_QueuedGeometry(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public class GeometryBucket : Renderable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
    internal GeometryBucket(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.StaticGeometry_GeometryBucket_SWIGUpcast(cPtr), cMemoryOwn) {
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GeometryBucket obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    protected override void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_StaticGeometry_GeometryBucket(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        base.Dispose(disposing);
      }
    }
  
    public GeometryBucket(StaticGeometry.MaterialBucket parent, VertexData vData, IndexData iData) : this(OgrePINVOKE.new_StaticGeometry_GeometryBucket(StaticGeometry.MaterialBucket.getCPtr(parent), VertexData.getCPtr(vData), IndexData.getCPtr(iData)), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public StaticGeometry.MaterialBucket getParent() {
      global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_GeometryBucket_getParent(swigCPtr);
      StaticGeometry.MaterialBucket ret = (cPtr == global::System.IntPtr.Zero) ? null : new StaticGeometry.MaterialBucket(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public VertexData getVertexData() {
      global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_GeometryBucket_getVertexData(swigCPtr);
      VertexData ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexData(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public IndexData getIndexData() {
      global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_GeometryBucket_getIndexData(swigCPtr);
      IndexData ret = (cPtr == global::System.IntPtr.Zero) ? null : new IndexData(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public MaterialPtr getMaterial() {
      MaterialPtr ret = new MaterialPtr(OgrePINVOKE.StaticGeometry_GeometryBucket_getMaterial(swigCPtr), false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public override Technique getTechnique() {
      global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_GeometryBucket_getTechnique(swigCPtr);
      Technique ret = (cPtr == global::System.IntPtr.Zero) ? null : new Technique(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public void getRenderOperation(RenderOperation op) {
      OgrePINVOKE.StaticGeometry_GeometryBucket_getRenderOperation(swigCPtr, RenderOperation.getCPtr(op));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void getWorldTransforms(Matrix4 xform) {
      OgrePINVOKE.StaticGeometry_GeometryBucket_getWorldTransforms(swigCPtr, Matrix4.getCPtr(xform));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public float getSquaredViewDepth(Camera cam) {
      float ret = OgrePINVOKE.StaticGeometry_GeometryBucket_getSquaredViewDepth(swigCPtr, Camera.getCPtr(cam));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public SWIGTYPE_p_std__vectorT_Ogre__Light_p_t getLights() {
      SWIGTYPE_p_std__vectorT_Ogre__Light_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__Light_p_t(OgrePINVOKE.StaticGeometry_GeometryBucket_getLights(swigCPtr), false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public override bool getCastsShadows() {
      bool ret = OgrePINVOKE.StaticGeometry_GeometryBucket_getCastsShadows(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public bool assign(StaticGeometry.QueuedGeometry qsm) {
      bool ret = OgrePINVOKE.StaticGeometry_GeometryBucket_assign(swigCPtr, StaticGeometry.QueuedGeometry.getCPtr(qsm));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public void build(bool stencilShadows) {
      OgrePINVOKE.StaticGeometry_GeometryBucket_build(swigCPtr, stencilShadows);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public class MaterialBucket : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal MaterialBucket(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MaterialBucket obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~MaterialBucket() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_StaticGeometry_MaterialBucket(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public MaterialBucket(StaticGeometry.LODBucket parent, MaterialPtr material) : this(OgrePINVOKE.new_StaticGeometry_MaterialBucket(StaticGeometry.LODBucket.getCPtr(parent), MaterialPtr.getCPtr(material)), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public StaticGeometry.LODBucket getParent() {
      global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_MaterialBucket_getParent(swigCPtr);
      StaticGeometry.LODBucket ret = (cPtr == global::System.IntPtr.Zero) ? null : new StaticGeometry.LODBucket(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public string getMaterialName() {
      string ret = OgrePINVOKE.StaticGeometry_MaterialBucket_getMaterialName(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public void assign(StaticGeometry.QueuedGeometry qsm) {
      OgrePINVOKE.StaticGeometry_MaterialBucket_assign(swigCPtr, StaticGeometry.QueuedGeometry.getCPtr(qsm));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void build(bool stencilShadows) {
      OgrePINVOKE.StaticGeometry_MaterialBucket_build(swigCPtr, stencilShadows);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void addRenderables(RenderQueue queue, byte group, float lodValue) {
      OgrePINVOKE.StaticGeometry_MaterialBucket_addRenderables(swigCPtr, RenderQueue.getCPtr(queue), group, lodValue);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public MaterialPtr getMaterial() {
      MaterialPtr ret = new MaterialPtr(OgrePINVOKE.StaticGeometry_MaterialBucket_getMaterial(swigCPtr), false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public void _setMaterial(MaterialPtr material) {
      OgrePINVOKE.StaticGeometry_MaterialBucket__setMaterial(swigCPtr, MaterialPtr.getCPtr(material));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public SWIGTYPE_p_std__vectorT_Ogre__StaticGeometry__GeometryBucket_p_t getGeometryList() {
      SWIGTYPE_p_std__vectorT_Ogre__StaticGeometry__GeometryBucket_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__StaticGeometry__GeometryBucket_p_t(OgrePINVOKE.StaticGeometry_MaterialBucket_getGeometryList(swigCPtr), false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public Technique getCurrentTechnique() {
      global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_MaterialBucket_getCurrentTechnique(swigCPtr);
      Technique ret = (cPtr == global::System.IntPtr.Zero) ? null : new Technique(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public void visitRenderables(Renderable.Visitor visitor, bool debugRenderables) {
      OgrePINVOKE.StaticGeometry_MaterialBucket_visitRenderables(swigCPtr, Renderable.Visitor.getCPtr(visitor), debugRenderables);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public class LODBucket : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal LODBucket(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LODBucket obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~LODBucket() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_StaticGeometry_LODBucket(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public LODBucket(StaticGeometry.Region parent, ushort lod, float lodValue) : this(OgrePINVOKE.new_StaticGeometry_LODBucket(StaticGeometry.Region.getCPtr(parent), lod, lodValue), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public StaticGeometry.Region getParent() {
      global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_LODBucket_getParent(swigCPtr);
      StaticGeometry.Region ret = (cPtr == global::System.IntPtr.Zero) ? null : new StaticGeometry.Region(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public ushort getLod() {
      ushort ret = OgrePINVOKE.StaticGeometry_LODBucket_getLod(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public float getLodValue() {
      float ret = OgrePINVOKE.StaticGeometry_LODBucket_getLodValue(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public void assign(StaticGeometry.QueuedSubMesh qsm, ushort atLod) {
      OgrePINVOKE.StaticGeometry_LODBucket_assign(swigCPtr, StaticGeometry.QueuedSubMesh.getCPtr(qsm), atLod);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void build(bool stencilShadows) {
      OgrePINVOKE.StaticGeometry_LODBucket_build(swigCPtr, stencilShadows);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void addRenderables(RenderQueue queue, byte group, float lodValue) {
      OgrePINVOKE.StaticGeometry_LODBucket_addRenderables(swigCPtr, RenderQueue.getCPtr(queue), group, lodValue);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public SWIGTYPE_p_std__mapT_std__string_Ogre__StaticGeometry__MaterialBucket_p_std__lessT_std__string_t_t getMaterialBuckets() {
      SWIGTYPE_p_std__mapT_std__string_Ogre__StaticGeometry__MaterialBucket_p_std__lessT_std__string_t_t ret = new SWIGTYPE_p_std__mapT_std__string_Ogre__StaticGeometry__MaterialBucket_p_std__lessT_std__string_t_t(OgrePINVOKE.StaticGeometry_LODBucket_getMaterialBuckets(swigCPtr), false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public void visitRenderables(Renderable.Visitor visitor, bool debugRenderables) {
      OgrePINVOKE.StaticGeometry_LODBucket_visitRenderables(swigCPtr, Renderable.Visitor.getCPtr(visitor), debugRenderables);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public SWIGTYPE_p_Ogre__EdgeData getEdgeList() {
      global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_LODBucket_getEdgeList(swigCPtr);
      SWIGTYPE_p_Ogre__EdgeData ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Ogre__EdgeData(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t getShadowRenderableList() {
      SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t(OgrePINVOKE.StaticGeometry_LODBucket_getShadowRenderableList(swigCPtr), false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public bool isVertexProgramInUse() {
      bool ret = OgrePINVOKE.StaticGeometry_LODBucket_isVertexProgramInUse(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public void updateShadowRenderables(Vector4 lightPos, HardwareIndexBufferPtr indexBuffer, float extrusionDistance, int flags) {
      OgrePINVOKE.StaticGeometry_LODBucket_updateShadowRenderables__SWIG_0(swigCPtr, Vector4.getCPtr(lightPos), HardwareIndexBufferPtr.getCPtr(indexBuffer), extrusionDistance, flags);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void updateShadowRenderables(Vector4 lightPos, HardwareIndexBufferPtr indexBuffer, float extrusionDistance) {
      OgrePINVOKE.StaticGeometry_LODBucket_updateShadowRenderables__SWIG_1(swigCPtr, Vector4.getCPtr(lightPos), HardwareIndexBufferPtr.getCPtr(indexBuffer), extrusionDistance);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public class Region : MovableObject {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
    internal Region(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.StaticGeometry_Region_SWIGUpcast(cPtr), cMemoryOwn) {
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Region obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    protected override void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_StaticGeometry_Region(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        base.Dispose(disposing);
      }
    }
  
    public Region(StaticGeometry parent, string name, SceneManager mgr, uint regionID, Vector3 centre) : this(OgrePINVOKE.new_StaticGeometry_Region(StaticGeometry.getCPtr(parent), name, SceneManager.getCPtr(mgr), regionID, Vector3.getCPtr(centre)), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public StaticGeometry getParent() {
      global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_Region_getParent(swigCPtr);
      StaticGeometry ret = (cPtr == global::System.IntPtr.Zero) ? null : new StaticGeometry(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public void assign(StaticGeometry.QueuedSubMesh qmesh) {
      OgrePINVOKE.StaticGeometry_Region_assign(swigCPtr, StaticGeometry.QueuedSubMesh.getCPtr(qmesh));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void build(bool stencilShadows) {
      OgrePINVOKE.StaticGeometry_Region_build(swigCPtr, stencilShadows);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public uint getID() {
      uint ret = OgrePINVOKE.StaticGeometry_Region_getID(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public Vector3 getCentre() {
      Vector3 ret = new Vector3(OgrePINVOKE.StaticGeometry_Region_getCentre(swigCPtr), false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public string getMovableType() {
      string ret = OgrePINVOKE.StaticGeometry_Region_getMovableType(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public void _notifyCurrentCamera(Camera cam) {
      OgrePINVOKE.StaticGeometry_Region__notifyCurrentCamera(swigCPtr, Camera.getCPtr(cam));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public AxisAlignedBox getBoundingBox() {
      AxisAlignedBox ret = new AxisAlignedBox(OgrePINVOKE.StaticGeometry_Region_getBoundingBox(swigCPtr), false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public float getBoundingRadius() {
      float ret = OgrePINVOKE.StaticGeometry_Region_getBoundingRadius(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public void _updateRenderQueue(RenderQueue queue) {
      OgrePINVOKE.StaticGeometry_Region__updateRenderQueue(swigCPtr, RenderQueue.getCPtr(queue));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void visitRenderables(Renderable.Visitor visitor, bool debugRenderables) {
      OgrePINVOKE.StaticGeometry_Region_visitRenderables__SWIG_0(swigCPtr, Renderable.Visitor.getCPtr(visitor), debugRenderables);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void visitRenderables(Renderable.Visitor visitor) {
      OgrePINVOKE.StaticGeometry_Region_visitRenderables__SWIG_1(swigCPtr, Renderable.Visitor.getCPtr(visitor));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public override bool isVisible() {
      bool ret = OgrePINVOKE.StaticGeometry_Region_isVisible(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public uint getTypeFlags() {
      uint ret = OgrePINVOKE.StaticGeometry_Region_getTypeFlags(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public SWIGTYPE_p_std__vectorT_Ogre__StaticGeometry__LODBucket_p_t getLODBuckets() {
      SWIGTYPE_p_std__vectorT_Ogre__StaticGeometry__LODBucket_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__StaticGeometry__LODBucket_p_t(OgrePINVOKE.StaticGeometry_Region_getLODBuckets(swigCPtr), false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public override SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t getShadowVolumeRenderableList(Light light, HardwareIndexBufferPtr indexBuffer, SWIGTYPE_p_size_t indexBufferUsedSize, float extrusionDistance, int flags) {
      SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t(OgrePINVOKE.StaticGeometry_Region_getShadowVolumeRenderableList__SWIG_0(swigCPtr, Light.getCPtr(light), HardwareIndexBufferPtr.getCPtr(indexBuffer), SWIGTYPE_p_size_t.getCPtr(indexBufferUsedSize), extrusionDistance, flags), false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public override SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t getShadowVolumeRenderableList(Light light, HardwareIndexBufferPtr indexBuffer, SWIGTYPE_p_size_t indexBufferUsedSize, float extrusionDistance) {
      SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t(OgrePINVOKE.StaticGeometry_Region_getShadowVolumeRenderableList__SWIG_1(swigCPtr, Light.getCPtr(light), HardwareIndexBufferPtr.getCPtr(indexBuffer), SWIGTYPE_p_size_t.getCPtr(indexBufferUsedSize), extrusionDistance), false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public override SWIGTYPE_p_Ogre__EdgeData getEdgeList() {
      global::System.IntPtr cPtr = OgrePINVOKE.StaticGeometry_Region_getEdgeList(swigCPtr);
      SWIGTYPE_p_Ogre__EdgeData ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Ogre__EdgeData(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public override void _releaseManualHardwareResources() {
      OgrePINVOKE.StaticGeometry_Region__releaseManualHardwareResources(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public override void _restoreManualHardwareResources() {
      OgrePINVOKE.StaticGeometry_Region__restoreManualHardwareResources(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public StaticGeometry(SceneManager owner, string name) : this(OgrePINVOKE.new_StaticGeometry(SceneManager.getCPtr(owner), name), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getName() {
    string ret = OgrePINVOKE.StaticGeometry_getName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void addEntity(Entity ent, Vector3 position, Quaternion orientation, Vector3 scale) {
    OgrePINVOKE.StaticGeometry_addEntity__SWIG_0(swigCPtr, Entity.getCPtr(ent), Vector3.getCPtr(position), Quaternion.getCPtr(orientation), Vector3.getCPtr(scale));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addEntity(Entity ent, Vector3 position, Quaternion orientation) {
    OgrePINVOKE.StaticGeometry_addEntity__SWIG_1(swigCPtr, Entity.getCPtr(ent), Vector3.getCPtr(position), Quaternion.getCPtr(orientation));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addEntity(Entity ent, Vector3 position) {
    OgrePINVOKE.StaticGeometry_addEntity__SWIG_2(swigCPtr, Entity.getCPtr(ent), Vector3.getCPtr(position));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addSceneNode(SceneNode node) {
    OgrePINVOKE.StaticGeometry_addSceneNode(swigCPtr, SceneNode.getCPtr(node));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void build() {
    OgrePINVOKE.StaticGeometry_build(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroy() {
    OgrePINVOKE.StaticGeometry_destroy(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    OgrePINVOKE.StaticGeometry_reset(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setRenderingDistance(float dist) {
    OgrePINVOKE.StaticGeometry_setRenderingDistance(swigCPtr, dist);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float getRenderingDistance() {
    float ret = OgrePINVOKE.StaticGeometry_getRenderingDistance(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float getSquaredRenderingDistance() {
    float ret = OgrePINVOKE.StaticGeometry_getSquaredRenderingDistance(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setVisible(bool visible) {
    OgrePINVOKE.StaticGeometry_setVisible(swigCPtr, visible);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool isVisible() {
    bool ret = OgrePINVOKE.StaticGeometry_isVisible(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setCastShadows(bool castShadows) {
    OgrePINVOKE.StaticGeometry_setCastShadows(swigCPtr, castShadows);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool getCastShadows() {
    bool ret = OgrePINVOKE.StaticGeometry_getCastShadows(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setRegionDimensions(Vector3 size) {
    OgrePINVOKE.StaticGeometry_setRegionDimensions(swigCPtr, Vector3.getCPtr(size));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Vector3 getRegionDimensions() {
    Vector3 ret = new Vector3(OgrePINVOKE.StaticGeometry_getRegionDimensions(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setOrigin(Vector3 origin) {
    OgrePINVOKE.StaticGeometry_setOrigin(swigCPtr, Vector3.getCPtr(origin));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Vector3 getOrigin() {
    Vector3 ret = new Vector3(OgrePINVOKE.StaticGeometry_getOrigin(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setVisibilityFlags(uint flags) {
    OgrePINVOKE.StaticGeometry_setVisibilityFlags(swigCPtr, flags);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getVisibilityFlags() {
    uint ret = OgrePINVOKE.StaticGeometry_getVisibilityFlags(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setRenderQueueGroup(byte queueID) {
    OgrePINVOKE.StaticGeometry_setRenderQueueGroup(swigCPtr, queueID);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual byte getRenderQueueGroup() {
    byte ret = OgrePINVOKE.StaticGeometry_getRenderQueueGroup(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void visitRenderables(Renderable.Visitor visitor, bool debugRenderables) {
    OgrePINVOKE.StaticGeometry_visitRenderables__SWIG_0(swigCPtr, Renderable.Visitor.getCPtr(visitor), debugRenderables);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void visitRenderables(Renderable.Visitor visitor) {
    OgrePINVOKE.StaticGeometry_visitRenderables__SWIG_1(swigCPtr, Renderable.Visitor.getCPtr(visitor));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__mapT_unsigned_int_Ogre__StaticGeometry__Region_p_std__lessT_unsigned_int_t_t getRegions() {
    SWIGTYPE_p_std__mapT_unsigned_int_Ogre__StaticGeometry__Region_p_std__lessT_unsigned_int_t_t ret = new SWIGTYPE_p_std__mapT_unsigned_int_Ogre__StaticGeometry__Region_p_std__lessT_unsigned_int_t_t(OgrePINVOKE.StaticGeometry_getRegions(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
