//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class Plane : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Plane(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Plane obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Plane() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_Plane(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Vector3 normal {
    set {
      OgrePINVOKE.Plane_normal_set(swigCPtr, Vector3.getCPtr(value));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.Plane_normal_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float d {
    set {
      OgrePINVOKE.Plane_d_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgrePINVOKE.Plane_d_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Plane() : this(OgrePINVOKE.new_Plane__SWIG_0(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Plane(Vector3 rkNormal, float fConstant) : this(OgrePINVOKE.new_Plane__SWIG_1(Vector3.getCPtr(rkNormal), fConstant), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Plane(float a, float b, float c, float _d) : this(OgrePINVOKE.new_Plane__SWIG_2(a, b, c, _d), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Plane(Vector4 v) : this(OgrePINVOKE.new_Plane__SWIG_3(Vector4.getCPtr(v)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Plane(Vector3 rkNormal, Vector3 rkPoint) : this(OgrePINVOKE.new_Plane__SWIG_4(Vector3.getCPtr(rkNormal), Vector3.getCPtr(rkPoint)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Plane(Vector3 p0, Vector3 p1, Vector3 p2) : this(OgrePINVOKE.new_Plane__SWIG_5(Vector3.getCPtr(p0), Vector3.getCPtr(p1), Vector3.getCPtr(p2)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Plane.Side getSide(Vector3 rkPoint) {
    Plane.Side ret = (Plane.Side)OgrePINVOKE.Plane_getSide__SWIG_0(swigCPtr, Vector3.getCPtr(rkPoint));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Plane.Side getSide(AxisAlignedBox box) {
    Plane.Side ret = (Plane.Side)OgrePINVOKE.Plane_getSide__SWIG_1(swigCPtr, AxisAlignedBox.getCPtr(box));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Plane.Side getSide(Vector3 centre, Vector3 halfSize) {
    Plane.Side ret = (Plane.Side)OgrePINVOKE.Plane_getSide__SWIG_2(swigCPtr, Vector3.getCPtr(centre), Vector3.getCPtr(halfSize));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getDistance(Vector3 rkPoint) {
    float ret = OgrePINVOKE.Plane_getDistance(swigCPtr, Vector3.getCPtr(rkPoint));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void redefine(Vector3 p0, Vector3 p1, Vector3 p2) {
    OgrePINVOKE.Plane_redefine__SWIG_0(swigCPtr, Vector3.getCPtr(p0), Vector3.getCPtr(p1), Vector3.getCPtr(p2));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void redefine(Vector3 rkNormal, Vector3 rkPoint) {
    OgrePINVOKE.Plane_redefine__SWIG_1(swigCPtr, Vector3.getCPtr(rkNormal), Vector3.getCPtr(rkPoint));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 projectVector(Vector3 v) {
    Vector3 ret = new Vector3(OgrePINVOKE.Plane_projectVector(swigCPtr, Vector3.getCPtr(v)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float normalise() {
    float ret = OgrePINVOKE.Plane_normalise(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Plane __sub__() {
    Plane ret = new Plane(OgrePINVOKE.Plane___sub__(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string ToString() {
    string ret = OgrePINVOKE.Plane_ToString(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum Side {
    NO_SIDE,
    POSITIVE_SIDE,
    NEGATIVE_SIDE,
    BOTH_SIDE
  }

}

}
