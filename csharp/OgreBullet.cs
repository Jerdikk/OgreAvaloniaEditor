//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class OgreBullet {
  public static SWIGTYPE_p_btQuaternion convert(Quaternion q) {
    SWIGTYPE_p_btQuaternion ret = new SWIGTYPE_p_btQuaternion(OgreBulletPINVOKE.convert__SWIG_0(Quaternion.getCPtr(q)), true);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static btVector3 convert(Vector3 v) {
    btVector3 ret = new btVector3(OgreBulletPINVOKE.convert__SWIG_1(Vector3.getCPtr(v)), true);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Quaternion convert(SWIGTYPE_p_btQuaternion q) {
    Quaternion ret = new Quaternion(OgreBulletPINVOKE.convert__SWIG_2(SWIGTYPE_p_btQuaternion.getCPtr(q)), true);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector3 convert(btVector3 v) {
    Vector3 ret = new Vector3(OgreBulletPINVOKE.convert__SWIG_3(btVector3.getCPtr(v)), true);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_btSphereShape createSphereCollider(MovableObject mo) {
    global::System.IntPtr cPtr = OgreBulletPINVOKE.createSphereCollider(MovableObject.getCPtr(mo));
    SWIGTYPE_p_btSphereShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btSphereShape(cPtr, false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_btBoxShape createBoxCollider(MovableObject mo) {
    global::System.IntPtr cPtr = OgreBulletPINVOKE.createBoxCollider(MovableObject.getCPtr(mo));
    SWIGTYPE_p_btBoxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btBoxShape(cPtr, false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_btCapsuleShape createCapsuleCollider(MovableObject mo) {
    global::System.IntPtr cPtr = OgreBulletPINVOKE.createCapsuleCollider(MovableObject.getCPtr(mo));
    SWIGTYPE_p_btCapsuleShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btCapsuleShape(cPtr, false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_btCylinderShape createCylinderCollider(MovableObject mo) {
    global::System.IntPtr cPtr = OgreBulletPINVOKE.createCylinderCollider(MovableObject.getCPtr(mo));
    SWIGTYPE_p_btCylinderShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btCylinderShape(cPtr, false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float btDot(btVector3 v1, btVector3 v2) {
    float ret = OgreBulletPINVOKE.btDot(btVector3.getCPtr(v1), btVector3.getCPtr(v2));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float btDistance2(btVector3 v1, btVector3 v2) {
    float ret = OgreBulletPINVOKE.btDistance2(btVector3.getCPtr(v1), btVector3.getCPtr(v2));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float btDistance(btVector3 v1, btVector3 v2) {
    float ret = OgreBulletPINVOKE.btDistance(btVector3.getCPtr(v1), btVector3.getCPtr(v2));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float btAngle(btVector3 v1, btVector3 v2) {
    float ret = OgreBulletPINVOKE.btAngle(btVector3.getCPtr(v1), btVector3.getCPtr(v2));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static btVector3 btCross(btVector3 v1, btVector3 v2) {
    btVector3 ret = new btVector3(OgreBulletPINVOKE.btCross(btVector3.getCPtr(v1), btVector3.getCPtr(v2)), true);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float btTriple(btVector3 v1, btVector3 v2, btVector3 v3) {
    float ret = OgreBulletPINVOKE.btTriple(btVector3.getCPtr(v1), btVector3.getCPtr(v2), btVector3.getCPtr(v3));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static btVector3 lerp(btVector3 v1, btVector3 v2, float t) {
    btVector3 ret = new btVector3(OgreBulletPINVOKE.lerp(btVector3.getCPtr(v1), btVector3.getCPtr(v2), t), true);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void btSwapScalarEndian(float sourceVal, SWIGTYPE_p_float destVal) {
    OgreBulletPINVOKE.btSwapScalarEndian(sourceVal, SWIGTYPE_p_float.getCPtr(destVal));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void btSwapVector3Endian(btVector3 sourceVec, btVector3 destVec) {
    OgreBulletPINVOKE.btSwapVector3Endian(btVector3.getCPtr(sourceVec), btVector3.getCPtr(destVec));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void btUnSwapVector3Endian(btVector3 vector) {
    OgreBulletPINVOKE.btUnSwapVector3Endian(btVector3.getCPtr(vector));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public static float gDeactivationTime {
    set {
      OgreBulletPINVOKE.gDeactivationTime_set(value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.gDeactivationTime_get();
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool gDisableDeactivation {
    set {
      OgreBulletPINVOKE.gDisableDeactivation_set(value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = OgreBulletPINVOKE.gDisableDeactivation_get();
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static readonly string btVector3DataName = OgreBulletPINVOKE.btVector3DataName_get();
  public static readonly int ACTIVE_TAG = OgreBulletPINVOKE.ACTIVE_TAG_get();
  public static readonly int ISLAND_SLEEPING = OgreBulletPINVOKE.ISLAND_SLEEPING_get();
  public static readonly int WANTS_DEACTIVATION = OgreBulletPINVOKE.WANTS_DEACTIVATION_get();
  public static readonly int DISABLE_DEACTIVATION = OgreBulletPINVOKE.DISABLE_DEACTIVATION_get();
  public static readonly int DISABLE_SIMULATION = OgreBulletPINVOKE.DISABLE_SIMULATION_get();
  public static readonly int FIXED_BASE_MULTI_BODY = OgreBulletPINVOKE.FIXED_BASE_MULTI_BODY_get();
  public static readonly string btCollisionObjectDataName = OgreBulletPINVOKE.btCollisionObjectDataName_get();
  public static readonly string btRigidBodyDataName = OgreBulletPINVOKE.btRigidBodyDataName_get();
}

}
