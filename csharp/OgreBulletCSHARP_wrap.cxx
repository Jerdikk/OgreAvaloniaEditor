/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_OgreBullet(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_OgreBullet(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_OgreBullet(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#include "Ogre.h"
#include "OgreBullet.h"


#include <string>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header

SWIGINTERN int Ogre_Bullet_DynamicsWorld_stepSimulation(Ogre::Bullet::DynamicsWorld *self,float timeStep){
    return self->getBtWorld()->stepSimulation(timeStep);
  }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "OgreBulletCSHARP_wrap.h"

SwigDirector_CollisionListener::SwigDirector_CollisionListener() : Ogre::Bullet::CollisionListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_CollisionListener::~SwigDirector_CollisionListener() {
  
}


void SwigDirector_CollisionListener::contact(Ogre::MovableObject const *other, btManifoldPoint const &manifoldPoint) {
  void * jother = 0 ;
  void * jmanifoldPoint = 0 ;
  
  if (!swig_callbackcontact) {
    Swig::DirectorPureVirtualException::raise("Ogre::Bullet::CollisionListener::contact");
    return;
  } else {
    jother = (void *) other; 
    jmanifoldPoint = (btManifoldPoint *) &manifoldPoint; 
    swig_callbackcontact(jother, jmanifoldPoint);
  }
}

void SwigDirector_CollisionListener::swig_connect_director(SWIG_Callback0_t callbackcontact) {
  swig_callbackcontact = callbackcontact;
}

void SwigDirector_CollisionListener::swig_init_callbacks() {
  swig_callbackcontact = 0;
}

SwigDirector_RayResultCallback::SwigDirector_RayResultCallback() : Ogre::Bullet::RayResultCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_RayResultCallback::~SwigDirector_RayResultCallback() {
  
}


void SwigDirector_RayResultCallback::addSingleResult(Ogre::MovableObject const *other, float distance) {
  void * jother = 0 ;
  float jdistance  ;
  
  if (!swig_callbackaddSingleResult) {
    Swig::DirectorPureVirtualException::raise("Ogre::Bullet::RayResultCallback::addSingleResult");
    return;
  } else {
    jother = (void *) other; 
    jdistance = distance;
    swig_callbackaddSingleResult(jother, jdistance);
  }
}

void SwigDirector_RayResultCallback::swig_connect_director(SWIG_Callback0_t callbackaddSingleResult) {
  swig_callbackaddSingleResult = callbackaddSingleResult;
}

void SwigDirector_RayResultCallback::swig_init_callbacks() {
  swig_callbackaddSingleResult = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_convert__SWIG_0___(void * jarg1) {
  void * jresult ;
  Ogre::Quaternion *arg1 = 0 ;
  btQuaternion result;
  
  arg1 = (Ogre::Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Quaternion const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = Ogre::Bullet::convert((Ogre::Quaternion const &)*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_convert__SWIG_1___(void * jarg1) {
  void * jresult ;
  Ogre::Vector3 *arg1 = 0 ;
  btVector3 result;
  
  arg1 = (Ogre::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = Ogre::Bullet::convert((Ogre::Vector< 3,float > const &)*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_convert__SWIG_2___(void * jarg1) {
  void * jresult ;
  btQuaternion *arg1 = 0 ;
  Ogre::Quaternion result;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = Ogre::Bullet::convert((btQuaternion const &)*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::Quaternion((const Ogre::Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_convert__SWIG_3___(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  Ogre::Vector3 result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = Ogre::Bullet::convert((btVector3 const &)*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::Vector3((const Ogre::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_RigidBodyState___(void * jarg1) {
  void * jresult ;
  Ogre::Node *arg1 = (Ogre::Node *) 0 ;
  Ogre::Bullet::RigidBodyState *result = 0 ;
  
  arg1 = (Ogre::Node *)jarg1; 
  {
    try {
      result = (Ogre::Bullet::RigidBodyState *)new Ogre::Bullet::RigidBodyState(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_RigidBodyState_getWorldTransform___(void * jarg1, void * jarg2) {
  Ogre::Bullet::RigidBodyState *arg1 = (Ogre::Bullet::RigidBodyState *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (Ogre::Bullet::RigidBodyState *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform & type is null", 0);
    return ;
  } 
  {
    try {
      ((Ogre::Bullet::RigidBodyState const *)arg1)->getWorldTransform(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_RigidBodyState_setWorldTransform___(void * jarg1, void * jarg2) {
  Ogre::Bullet::RigidBodyState *arg1 = (Ogre::Bullet::RigidBodyState *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (Ogre::Bullet::RigidBodyState *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setWorldTransform((btTransform const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_RigidBodyState___(void * jarg1) {
  Ogre::Bullet::RigidBodyState *arg1 = (Ogre::Bullet::RigidBodyState *) 0 ;
  
  arg1 = (Ogre::Bullet::RigidBodyState *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_createSphereCollider___(void * jarg1) {
  void * jresult ;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  btSphereShape *result = 0 ;
  
  arg1 = (Ogre::MovableObject *)jarg1; 
  {
    try {
      result = (btSphereShape *)Ogre::Bullet::createSphereCollider((Ogre::MovableObject const *)arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_createBoxCollider___(void * jarg1) {
  void * jresult ;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  btBoxShape *result = 0 ;
  
  arg1 = (Ogre::MovableObject *)jarg1; 
  {
    try {
      result = (btBoxShape *)Ogre::Bullet::createBoxCollider((Ogre::MovableObject const *)arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_createCapsuleCollider___(void * jarg1) {
  void * jresult ;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  btCapsuleShape *result = 0 ;
  
  arg1 = (Ogre::MovableObject *)jarg1; 
  {
    try {
      result = (btCapsuleShape *)Ogre::Bullet::createCapsuleCollider((Ogre::MovableObject const *)arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_createCylinderCollider___(void * jarg1) {
  void * jresult ;
  Ogre::MovableObject *arg1 = (Ogre::MovableObject *) 0 ;
  btCylinderShape *result = 0 ;
  
  arg1 = (Ogre::MovableObject *)jarg1; 
  {
    try {
      result = (btCylinderShape *)Ogre::Bullet::createCylinderCollider((Ogre::MovableObject const *)arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_CollisionListener___(void * jarg1) {
  Ogre::Bullet::CollisionListener *arg1 = (Ogre::Bullet::CollisionListener *) 0 ;
  
  arg1 = (Ogre::Bullet::CollisionListener *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_CollisionListener_contact___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::Bullet::CollisionListener *arg1 = (Ogre::Bullet::CollisionListener *) 0 ;
  Ogre::MovableObject *arg2 = (Ogre::MovableObject *) 0 ;
  btManifoldPoint *arg3 = 0 ;
  
  arg1 = (Ogre::Bullet::CollisionListener *)jarg1; 
  arg2 = (Ogre::MovableObject *)jarg2; 
  arg3 = (btManifoldPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btManifoldPoint const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->contact((Ogre::MovableObject const *)arg2,(btManifoldPoint const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_CollisionListener___() {
  void * jresult ;
  Ogre::Bullet::CollisionListener *result = 0 ;
  
  {
    try {
      result = (Ogre::Bullet::CollisionListener *)new SwigDirector_CollisionListener();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_CollisionListener_director_connect___(void *objarg, SwigDirector_CollisionListener::SWIG_Callback0_t callback0) {
  Ogre::Bullet::CollisionListener *obj = (Ogre::Bullet::CollisionListener *)objarg;
  SwigDirector_CollisionListener *director = static_cast<SwigDirector_CollisionListener *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_RayResultCallback___(void * jarg1) {
  Ogre::Bullet::RayResultCallback *arg1 = (Ogre::Bullet::RayResultCallback *) 0 ;
  
  arg1 = (Ogre::Bullet::RayResultCallback *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_RayResultCallback_addSingleResult___(void * jarg1, void * jarg2, float jarg3) {
  Ogre::Bullet::RayResultCallback *arg1 = (Ogre::Bullet::RayResultCallback *) 0 ;
  Ogre::MovableObject *arg2 = (Ogre::MovableObject *) 0 ;
  float arg3 ;
  
  arg1 = (Ogre::Bullet::RayResultCallback *)jarg1; 
  arg2 = (Ogre::MovableObject *)jarg2; 
  arg3 = (float)jarg3; 
  {
    try {
      (arg1)->addSingleResult((Ogre::MovableObject const *)arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_RayResultCallback___() {
  void * jresult ;
  Ogre::Bullet::RayResultCallback *result = 0 ;
  
  {
    try {
      result = (Ogre::Bullet::RayResultCallback *)new SwigDirector_RayResultCallback();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_RayResultCallback_director_connect___(void *objarg, SwigDirector_RayResultCallback::SWIG_Callback0_t callback0) {
  Ogre::Bullet::RayResultCallback *obj = (Ogre::Bullet::RayResultCallback *)objarg;
  SwigDirector_RayResultCallback *director = static_cast<SwigDirector_RayResultCallback *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_CollisionWorld___(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  Ogre::Bullet::CollisionWorld *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  {
    try {
      result = (Ogre::Bullet::CollisionWorld *)new Ogre::Bullet::CollisionWorld(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_CollisionWorld___(void * jarg1) {
  Ogre::Bullet::CollisionWorld *arg1 = (Ogre::Bullet::CollisionWorld *) 0 ;
  
  arg1 = (Ogre::Bullet::CollisionWorld *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_CollisionWorld_addCollisionObject__SWIG_0___(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  Ogre::Bullet::CollisionWorld *arg1 = (Ogre::Bullet::CollisionWorld *) 0 ;
  Ogre::Entity *arg2 = (Ogre::Entity *) 0 ;
  Ogre::Bullet::ColliderType arg3 ;
  int arg4 ;
  int arg5 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (Ogre::Bullet::CollisionWorld *)jarg1; 
  arg2 = (Ogre::Entity *)jarg2; 
  arg3 = (Ogre::Bullet::ColliderType)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (btCollisionObject *)(arg1)->addCollisionObject(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_CollisionWorld_addCollisionObject__SWIG_1___(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  Ogre::Bullet::CollisionWorld *arg1 = (Ogre::Bullet::CollisionWorld *) 0 ;
  Ogre::Entity *arg2 = (Ogre::Entity *) 0 ;
  Ogre::Bullet::ColliderType arg3 ;
  int arg4 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (Ogre::Bullet::CollisionWorld *)jarg1; 
  arg2 = (Ogre::Entity *)jarg2; 
  arg3 = (Ogre::Bullet::ColliderType)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (btCollisionObject *)(arg1)->addCollisionObject(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_CollisionWorld_addCollisionObject__SWIG_2___(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Ogre::Bullet::CollisionWorld *arg1 = (Ogre::Bullet::CollisionWorld *) 0 ;
  Ogre::Entity *arg2 = (Ogre::Entity *) 0 ;
  Ogre::Bullet::ColliderType arg3 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (Ogre::Bullet::CollisionWorld *)jarg1; 
  arg2 = (Ogre::Entity *)jarg2; 
  arg3 = (Ogre::Bullet::ColliderType)jarg3; 
  {
    try {
      result = (btCollisionObject *)(arg1)->addCollisionObject(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_CollisionWorld_rayTest__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  Ogre::Bullet::CollisionWorld *arg1 = (Ogre::Bullet::CollisionWorld *) 0 ;
  Ogre::Ray *arg2 = 0 ;
  Ogre::Bullet::RayResultCallback *arg3 = (Ogre::Bullet::RayResultCallback *) 0 ;
  float arg4 ;
  
  arg1 = (Ogre::Bullet::CollisionWorld *)jarg1; 
  arg2 = (Ogre::Ray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Ray const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Bullet::RayResultCallback *)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      (arg1)->rayTest((Ogre::Ray const &)*arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_CollisionWorld_rayTest__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::Bullet::CollisionWorld *arg1 = (Ogre::Bullet::CollisionWorld *) 0 ;
  Ogre::Ray *arg2 = 0 ;
  Ogre::Bullet::RayResultCallback *arg3 = (Ogre::Bullet::RayResultCallback *) 0 ;
  
  arg1 = (Ogre::Bullet::CollisionWorld *)jarg1; 
  arg2 = (Ogre::Ray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Ray const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Bullet::RayResultCallback *)jarg3; 
  {
    try {
      (arg1)->rayTest((Ogre::Ray const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_DynamicsWorld__SWIG_0___(void * jarg1) {
  void * jresult ;
  Ogre::Vector3 *arg1 = 0 ;
  Ogre::Bullet::DynamicsWorld *result = 0 ;
  
  arg1 = (Ogre::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Ogre::Bullet::DynamicsWorld *)new Ogre::Bullet::DynamicsWorld((Ogre::Vector3 const &)*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_DynamicsWorld__SWIG_1___(void * jarg1) {
  void * jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  Ogre::Bullet::DynamicsWorld *result = 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  {
    try {
      result = (Ogre::Bullet::DynamicsWorld *)new Ogre::Bullet::DynamicsWorld(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_DynamicsWorld_addRigidBody__SWIG_0___(void * jarg1, float jarg2, void * jarg3, int jarg4, void * jarg5, int jarg6, int jarg7) {
  void * jresult ;
  Ogre::Bullet::DynamicsWorld *arg1 = (Ogre::Bullet::DynamicsWorld *) 0 ;
  float arg2 ;
  Ogre::Entity *arg3 = (Ogre::Entity *) 0 ;
  Ogre::Bullet::ColliderType arg4 ;
  Ogre::Bullet::CollisionListener *arg5 = (Ogre::Bullet::CollisionListener *) 0 ;
  int arg6 ;
  int arg7 ;
  btRigidBody *result = 0 ;
  
  arg1 = (Ogre::Bullet::DynamicsWorld *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Ogre::Entity *)jarg3; 
  arg4 = (Ogre::Bullet::ColliderType)jarg4; 
  arg5 = (Ogre::Bullet::CollisionListener *)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  {
    try {
      result = (btRigidBody *)(arg1)->addRigidBody(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_DynamicsWorld_addRigidBody__SWIG_1___(void * jarg1, float jarg2, void * jarg3, int jarg4, void * jarg5, int jarg6) {
  void * jresult ;
  Ogre::Bullet::DynamicsWorld *arg1 = (Ogre::Bullet::DynamicsWorld *) 0 ;
  float arg2 ;
  Ogre::Entity *arg3 = (Ogre::Entity *) 0 ;
  Ogre::Bullet::ColliderType arg4 ;
  Ogre::Bullet::CollisionListener *arg5 = (Ogre::Bullet::CollisionListener *) 0 ;
  int arg6 ;
  btRigidBody *result = 0 ;
  
  arg1 = (Ogre::Bullet::DynamicsWorld *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Ogre::Entity *)jarg3; 
  arg4 = (Ogre::Bullet::ColliderType)jarg4; 
  arg5 = (Ogre::Bullet::CollisionListener *)jarg5; 
  arg6 = (int)jarg6; 
  {
    try {
      result = (btRigidBody *)(arg1)->addRigidBody(arg2,arg3,arg4,arg5,arg6);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_DynamicsWorld_addRigidBody__SWIG_2___(void * jarg1, float jarg2, void * jarg3, int jarg4, void * jarg5) {
  void * jresult ;
  Ogre::Bullet::DynamicsWorld *arg1 = (Ogre::Bullet::DynamicsWorld *) 0 ;
  float arg2 ;
  Ogre::Entity *arg3 = (Ogre::Entity *) 0 ;
  Ogre::Bullet::ColliderType arg4 ;
  Ogre::Bullet::CollisionListener *arg5 = (Ogre::Bullet::CollisionListener *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (Ogre::Bullet::DynamicsWorld *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Ogre::Entity *)jarg3; 
  arg4 = (Ogre::Bullet::ColliderType)jarg4; 
  arg5 = (Ogre::Bullet::CollisionListener *)jarg5; 
  {
    try {
      result = (btRigidBody *)(arg1)->addRigidBody(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_DynamicsWorld_addRigidBody__SWIG_3___(void * jarg1, float jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  Ogre::Bullet::DynamicsWorld *arg1 = (Ogre::Bullet::DynamicsWorld *) 0 ;
  float arg2 ;
  Ogre::Entity *arg3 = (Ogre::Entity *) 0 ;
  Ogre::Bullet::ColliderType arg4 ;
  btRigidBody *result = 0 ;
  
  arg1 = (Ogre::Bullet::DynamicsWorld *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Ogre::Entity *)jarg3; 
  arg4 = (Ogre::Bullet::ColliderType)jarg4; 
  {
    try {
      result = (btRigidBody *)(arg1)->addRigidBody(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_DynamicsWorld_getBtWorld___(void * jarg1) {
  void * jresult ;
  Ogre::Bullet::DynamicsWorld *arg1 = (Ogre::Bullet::DynamicsWorld *) 0 ;
  btDynamicsWorld *result = 0 ;
  
  arg1 = (Ogre::Bullet::DynamicsWorld *)jarg1; 
  {
    try {
      result = (btDynamicsWorld *)((Ogre::Bullet::DynamicsWorld const *)arg1)->getBtWorld();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_DynamicsWorld_stepSimulation___(void * jarg1, float jarg2) {
  int jresult ;
  Ogre::Bullet::DynamicsWorld *arg1 = (Ogre::Bullet::DynamicsWorld *) 0 ;
  float arg2 ;
  int result;
  
  arg1 = (Ogre::Bullet::DynamicsWorld *)jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      result = (int)Ogre_Bullet_DynamicsWorld_stepSimulation(arg1,arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_DynamicsWorld___(void * jarg1) {
  Ogre::Bullet::DynamicsWorld *arg1 = (Ogre::Bullet::DynamicsWorld *) 0 ;
  
  arg1 = (Ogre::Bullet::DynamicsWorld *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_BulletDebugDrawer___(void * jarg1, void * jarg2) {
  void * jresult ;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  Ogre::Bullet::DebugDrawer *result = 0 ;
  
  arg1 = (Ogre::SceneNode *)jarg1; 
  arg2 = (btCollisionWorld *)jarg2; 
  {
    try {
      result = (Ogre::Bullet::DebugDrawer *)new Ogre::Bullet::DebugDrawer(arg1,arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_BulletDebugDrawer_update___(void * jarg1) {
  Ogre::Bullet::DebugDrawer *arg1 = (Ogre::Bullet::DebugDrawer *) 0 ;
  
  arg1 = (Ogre::Bullet::DebugDrawer *)jarg1; 
  {
    try {
      (arg1)->update();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_BulletDebugDrawer_drawLine___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Ogre::Bullet::DebugDrawer *arg1 = (Ogre::Bullet::DebugDrawer *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (Ogre::Bullet::DebugDrawer *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->drawLine((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_BulletDebugDrawer_drawContactPoint___(void * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5, void * jarg6) {
  Ogre::Bullet::DebugDrawer *arg1 = (Ogre::Bullet::DebugDrawer *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  int arg5 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (Ogre::Bullet::DebugDrawer *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->drawContactPoint((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,(btVector3 const &)*arg6);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_BulletDebugDrawer_reportErrorWarning___(void * jarg1, char * jarg2) {
  Ogre::Bullet::DebugDrawer *arg1 = (Ogre::Bullet::DebugDrawer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Ogre::Bullet::DebugDrawer *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      (arg1)->reportErrorWarning((char const *)arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_BulletDebugDrawer_draw3dText___(void * jarg1, void * jarg2, char * jarg3) {
  Ogre::Bullet::DebugDrawer *arg1 = (Ogre::Bullet::DebugDrawer *) 0 ;
  btVector3 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Ogre::Bullet::DebugDrawer *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  {
    try {
      (arg1)->draw3dText((btVector3 const &)*arg2,(char const *)arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_BulletDebugDrawer_setDebugMode___(void * jarg1, int jarg2) {
  Ogre::Bullet::DebugDrawer *arg1 = (Ogre::Bullet::DebugDrawer *) 0 ;
  int arg2 ;
  
  arg1 = (Ogre::Bullet::DebugDrawer *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setDebugMode(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_BulletDebugDrawer_clear___(void * jarg1) {
  Ogre::Bullet::DebugDrawer *arg1 = (Ogre::Bullet::DebugDrawer *) 0 ;
  
  arg1 = (Ogre::Bullet::DebugDrawer *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_BulletDebugDrawer_getDebugMode___(void * jarg1) {
  int jresult ;
  Ogre::Bullet::DebugDrawer *arg1 = (Ogre::Bullet::DebugDrawer *) 0 ;
  int result;
  
  arg1 = (Ogre::Bullet::DebugDrawer *)jarg1; 
  {
    try {
      result = (int)((Ogre::Bullet::DebugDrawer const *)arg1)->getDebugMode();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_BulletDebugDrawer___(void * jarg1) {
  Ogre::Bullet::DebugDrawer *arg1 = (Ogre::Bullet::DebugDrawer *) 0 ;
  
  arg1 = (Ogre::Bullet::DebugDrawer *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_btVector3DataName_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btVector3FloatData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3_m_floats_set___(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *arg2 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  {
    size_t ii;
    btScalar *b = (btScalar *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((btScalar *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btVector3_m_floats_get___(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar *)(btScalar *) ((arg1)->m_floats);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btVector3__SWIG_0___() {
  void * jresult ;
  btVector3 *result = 0 ;
  
  {
    try {
      result = (btVector3 *)new btVector3();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btVector3__SWIG_1___(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btVector3 *result = 0 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  {
    try {
      result = (btVector3 *)new btVector3((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btVector3_dot___(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (btScalar)((btVector3 const *)arg1)->dot((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btVector3_length2___(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (btScalar)((btVector3 const *)arg1)->length2();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btVector3_length___(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (btScalar)((btVector3 const *)arg1)->length();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btVector3_norm___(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (btScalar)((btVector3 const *)arg1)->norm();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btVector3_safeNorm___(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (btScalar)((btVector3 const *)arg1)->safeNorm();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btVector3_distance2___(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (btScalar)((btVector3 const *)arg1)->distance2((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btVector3_distance___(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (btScalar)((btVector3 const *)arg1)->distance((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btVector3_safeNormalize___(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (btVector3 *) &(arg1)->safeNormalize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btVector3_normalize___(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (btVector3 *) &(arg1)->normalize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btVector3_normalized___(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = ((btVector3 const *)arg1)->normalized();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btVector3_rotate___(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  {
    try {
      result = ((btVector3 const *)arg1)->rotate((btVector3 const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btVector3_angle___(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (btScalar)((btVector3 const *)arg1)->angle((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btVector3_absolute___(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = ((btVector3 const *)arg1)->absolute();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btVector3_cross___(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = ((btVector3 const *)arg1)->cross((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btVector3_triple___(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (btScalar)((btVector3 const *)arg1)->triple((btVector3 const &)*arg2,(btVector3 const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btVector3_minAxis___(void * jarg1) {
  int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (int)((btVector3 const *)arg1)->minAxis();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btVector3_maxAxis___(void * jarg1) {
  int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (int)((btVector3 const *)arg1)->maxAxis();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btVector3_furthestAxis___(void * jarg1) {
  int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (int)((btVector3 const *)arg1)->furthestAxis();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btVector3_closestAxis___(void * jarg1) {
  int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (int)((btVector3 const *)arg1)->closestAxis();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3_setInterpolate3___(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  {
    try {
      (arg1)->setInterpolate3((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btVector3_lerp___(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp3 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  {
    try {
      result = ((btVector3 const *)arg1)->lerp((btVector3 const &)*arg2,(btScalar const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btVector3_getX___(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (btScalar *) &((btVector3 const *)arg1)->getX();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btVector3_getY___(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (btScalar *) &((btVector3 const *)arg1)->getY();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btVector3_getZ___(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (btScalar *) &((btVector3 const *)arg1)->getZ();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3_setX___(void * jarg1, float jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->setX(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3_setY___(void * jarg1, float jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->setY(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3_setZ___(void * jarg1, float jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->setZ(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3_setW___(void * jarg1, float jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->setW(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btVector3_x___(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (btScalar *) &((btVector3 const *)arg1)->x();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btVector3_y___(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (btScalar *) &((btVector3 const *)arg1)->y();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btVector3_z___(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (btScalar *) &((btVector3 const *)arg1)->z();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btVector3_w___(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (btScalar *) &((btVector3 const *)arg1)->w();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3_setMax___(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setMax((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3_setMin___(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setMin((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3_setValue___(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  
  arg1 = (btVector3 *)jarg1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  {
    try {
      (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3_getSkewSymmetricMatrix___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  btVector3 *arg4 = (btVector3 *) 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (btVector3 *)jarg4; 
  {
    try {
      ((btVector3 const *)arg1)->getSkewSymmetricMatrix(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3_setZero___(void * jarg1) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      (arg1)->setZero();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btVector3_isZero___(void * jarg1) {
  unsigned int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  bool result;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (bool)((btVector3 const *)arg1)->isZero();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btVector3_fuzzyZero___(void * jarg1) {
  unsigned int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  bool result;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      result = (bool)((btVector3 const *)arg1)->fuzzyZero();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3_serialize___(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3FloatData & type is null", 0);
    return ;
  } 
  {
    try {
      ((btVector3 const *)arg1)->serialize(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3_deSerialize__SWIG_0___(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3DoubleData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3DoubleData const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->deSerialize((btVector3DoubleData const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3_deSerialize__SWIG_1___(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3FloatData const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->deSerialize((btVector3FloatData const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3_serializeFloat___(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3FloatData & type is null", 0);
    return ;
  } 
  {
    try {
      ((btVector3 const *)arg1)->serializeFloat(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3_deSerializeFloat___(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3FloatData const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->deSerializeFloat((btVector3FloatData const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3_serializeDouble___(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3DoubleData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3DoubleData & type is null", 0);
    return ;
  } 
  {
    try {
      ((btVector3 const *)arg1)->serializeDouble(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3_deSerializeDouble___(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3DoubleData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3DoubleData const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->deSerializeDouble((btVector3DoubleData const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT long SWIGSTDCALL CSharp_orgfogre_btVector3_maxDot___(void * jarg1, void * jarg2, long jarg3, void * jarg4) {
  long jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  long arg3 ;
  btScalar *arg4 = 0 ;
  long result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (long)((btVector3 const *)arg1)->maxDot((btVector3 const *)arg2,arg3,*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_orgfogre_btVector3_minDot___(void * jarg1, void * jarg2, long jarg3, void * jarg4) {
  long jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  long arg3 ;
  btScalar *arg4 = 0 ;
  long result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (long)((btVector3 const *)arg1)->minDot((btVector3 const *)arg2,arg3,*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btVector3_dot3___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = ((btVector3 const *)arg1)->dot3((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btVector3___(void * jarg1) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btDot___(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (btScalar)btDot((btVector3 const &)*arg1,(btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btDistance2___(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (btScalar)btDistance2((btVector3 const &)*arg1,(btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btDistance___(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (btScalar)btDistance((btVector3 const &)*arg1,(btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btAngle___(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (btScalar)btAngle((btVector3 const &)*arg1,(btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCross___(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = btCross((btVector3 const &)*arg1,(btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btTriple___(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (btScalar)btTriple((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_lerp___(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp3 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  {
    try {
      result = lerp((btVector3 const &)*arg1,(btVector3 const &)*arg2,(float const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btVector4__SWIG_0___() {
  void * jresult ;
  btVector4 *result = 0 ;
  
  {
    try {
      result = (btVector4 *)new btVector4();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btVector4__SWIG_1___(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btVector4 *result = 0 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  {
    try {
      result = (btVector4 *)new btVector4((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btVector4_absolute4___(void * jarg1) {
  void * jresult ;
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector4 result;
  
  arg1 = (btVector4 *)jarg1; 
  {
    try {
      result = ((btVector4 const *)arg1)->absolute4();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector4((const btVector4 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btVector4_getW___(void * jarg1) {
  float jresult ;
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar result;
  
  arg1 = (btVector4 *)jarg1; 
  {
    try {
      result = (btScalar)((btVector4 const *)arg1)->getW();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btVector4_maxAxis4___(void * jarg1) {
  int jresult ;
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  arg1 = (btVector4 *)jarg1; 
  {
    try {
      result = (int)((btVector4 const *)arg1)->maxAxis4();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btVector4_minAxis4___(void * jarg1) {
  int jresult ;
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  arg1 = (btVector4 *)jarg1; 
  {
    try {
      result = (int)((btVector4 const *)arg1)->minAxis4();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btVector4_closestAxis4___(void * jarg1) {
  int jresult ;
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  arg1 = (btVector4 *)jarg1; 
  {
    try {
      result = (int)((btVector4 const *)arg1)->closestAxis4();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector4_setValue___(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btScalar temp5 ;
  
  arg1 = (btVector4 *)jarg1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  temp5 = (btScalar)jarg5; 
  arg5 = &temp5; 
  {
    try {
      (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4,(btScalar const &)*arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btVector4___(void * jarg1) {
  btVector4 *arg1 = (btVector4 *) 0 ;
  
  arg1 = (btVector4 *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btSwapScalarEndian___(float jarg1, void * jarg2) {
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar temp1 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  arg2 = (btScalar *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  {
    try {
      btSwapScalarEndian((float const &)*arg1,*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btSwapVector3Endian___(void * jarg1, void * jarg2) {
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  {
    try {
      btSwapVector3Endian((btVector3 const &)*arg1,*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btUnSwapVector3Endian___(void * jarg1) {
  btVector3 *arg1 = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  {
    try {
      btUnSwapVector3Endian(*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3FloatData_m_floats_set___(void * jarg1, void * jarg2) {
  btVector3FloatData *arg1 = (btVector3FloatData *) 0 ;
  float *arg2 ;
  
  arg1 = (btVector3FloatData *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btVector3FloatData_m_floats_get___(void * jarg1) {
  void * jresult ;
  btVector3FloatData *arg1 = (btVector3FloatData *) 0 ;
  float *result = 0 ;
  
  arg1 = (btVector3FloatData *)jarg1; 
  result = (float *)(float *) ((arg1)->m_floats);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btVector3FloatData___() {
  void * jresult ;
  btVector3FloatData *result = 0 ;
  
  {
    try {
      result = (btVector3FloatData *)new btVector3FloatData();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btVector3FloatData___(void * jarg1) {
  btVector3FloatData *arg1 = (btVector3FloatData *) 0 ;
  
  arg1 = (btVector3FloatData *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btVector3DoubleData_m_floats_set___(void * jarg1, void * jarg2) {
  btVector3DoubleData *arg1 = (btVector3DoubleData *) 0 ;
  double *arg2 ;
  
  arg1 = (btVector3DoubleData *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    size_t ii;
    double *b = (double *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((double *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btVector3DoubleData_m_floats_get___(void * jarg1) {
  void * jresult ;
  btVector3DoubleData *arg1 = (btVector3DoubleData *) 0 ;
  double *result = 0 ;
  
  arg1 = (btVector3DoubleData *)jarg1; 
  result = (double *)(double *) ((arg1)->m_floats);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btVector3DoubleData___() {
  void * jresult ;
  btVector3DoubleData *result = 0 ;
  
  {
    try {
      result = (btVector3DoubleData *)new btVector3DoubleData();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btVector3DoubleData___(void * jarg1) {
  btVector3DoubleData *arg1 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btVector3DoubleData *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btConstraintRow_m_normal_set___(void * jarg1, void * jarg2) {
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar *arg2 ;
  
  arg1 = (btConstraintRow *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  {
    size_t ii;
    btScalar *b = (btScalar *) arg1->m_normal;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((btScalar *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btConstraintRow_m_normal_get___(void * jarg1) {
  void * jresult ;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btConstraintRow *)jarg1; 
  result = (btScalar *)(btScalar *) ((arg1)->m_normal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btConstraintRow_m_rhs_set___(void * jarg1, float jarg2) {
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintRow *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_rhs = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btConstraintRow_m_rhs_get___(void * jarg1) {
  float jresult ;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintRow *)jarg1; 
  result = (btScalar) ((arg1)->m_rhs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btConstraintRow_m_jacDiagInv_set___(void * jarg1, float jarg2) {
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintRow *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_jacDiagInv = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btConstraintRow_m_jacDiagInv_get___(void * jarg1) {
  float jresult ;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintRow *)jarg1; 
  result = (btScalar) ((arg1)->m_jacDiagInv);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btConstraintRow_m_lowerLimit_set___(void * jarg1, float jarg2) {
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintRow *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_lowerLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btConstraintRow_m_lowerLimit_get___(void * jarg1) {
  float jresult ;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintRow *)jarg1; 
  result = (btScalar) ((arg1)->m_lowerLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btConstraintRow_m_upperLimit_set___(void * jarg1, float jarg2) {
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintRow *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_upperLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btConstraintRow_m_upperLimit_get___(void * jarg1) {
  float jresult ;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintRow *)jarg1; 
  result = (btScalar) ((arg1)->m_upperLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btConstraintRow_m_accumImpulse_set___(void * jarg1, float jarg2) {
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintRow *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_accumImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btConstraintRow_m_accumImpulse_get___(void * jarg1) {
  float jresult ;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintRow *)jarg1; 
  result = (btScalar) ((arg1)->m_accumImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btConstraintRow___() {
  void * jresult ;
  btConstraintRow *result = 0 ;
  
  {
    try {
      result = (btConstraintRow *)new btConstraintRow();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btConstraintRow___(void * jarg1) {
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  
  arg1 = (btConstraintRow *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btManifoldPoint__SWIG_0___() {
  void * jresult ;
  btManifoldPoint *result = 0 ;
  
  {
    try {
      result = (btManifoldPoint *)new btManifoldPoint();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btManifoldPoint__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  btManifoldPoint *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btScalar)jarg4; 
  {
    try {
      result = (btManifoldPoint *)new btManifoldPoint((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_localPointA_set___(void * jarg1, void * jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_localPointA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_localPointA_get___(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_localPointA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_localPointB_set___(void * jarg1, void * jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_localPointB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_localPointB_get___(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_localPointB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_positionWorldOnB_set___(void * jarg1, void * jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_positionWorldOnB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_positionWorldOnB_get___(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_positionWorldOnB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_positionWorldOnA_set___(void * jarg1, void * jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_positionWorldOnA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_positionWorldOnA_get___(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_positionWorldOnA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_normalWorldOnB_set___(void * jarg1, void * jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_normalWorldOnB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_normalWorldOnB_get___(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_normalWorldOnB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_distance1_set___(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_distance1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_distance1_get___(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_distance1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_combinedFriction_set___(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_combinedFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_combinedFriction_get___(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_combinedFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_combinedRollingFriction_set___(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_combinedRollingFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_combinedRollingFriction_get___(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_combinedRollingFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_combinedSpinningFriction_set___(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_combinedSpinningFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_combinedSpinningFriction_get___(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_combinedSpinningFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_combinedRestitution_set___(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_combinedRestitution = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_combinedRestitution_get___(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_combinedRestitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_partId0_set___(void * jarg1, int jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_partId0 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_partId0_get___(void * jarg1) {
  int jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (int) ((arg1)->m_partId0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_partId1_set___(void * jarg1, int jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_partId1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_partId1_get___(void * jarg1) {
  int jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (int) ((arg1)->m_partId1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_index0_set___(void * jarg1, int jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_index0 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_index0_get___(void * jarg1) {
  int jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (int) ((arg1)->m_index0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_index1_set___(void * jarg1, int jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_index1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_index1_get___(void * jarg1) {
  int jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (int) ((arg1)->m_index1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_userPersistentData_set___(void * jarg1, void * jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_userPersistentData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_userPersistentData_get___(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  void *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (void *) ((arg1)->m_userPersistentData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_contactPointFlags_set___(void * jarg1, int jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_contactPointFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_contactPointFlags_get___(void * jarg1) {
  int jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (int) ((arg1)->m_contactPointFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_appliedImpulse_set___(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_appliedImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_appliedImpulse_get___(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_appliedImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_prevRHS_set___(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_prevRHS = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_prevRHS_get___(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_prevRHS);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_appliedImpulseLateral1_set___(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_appliedImpulseLateral1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_appliedImpulseLateral1_get___(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_appliedImpulseLateral1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_appliedImpulseLateral2_set___(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_appliedImpulseLateral2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_appliedImpulseLateral2_get___(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_appliedImpulseLateral2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_contactMotion1_set___(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_contactMotion1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_contactMotion1_get___(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_contactMotion1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_contactMotion2_set___(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_contactMotion2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_contactMotion2_get___(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_contactMotion2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_contactCFM_set___(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_contactCFM = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_contactCFM_get___(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_contactCFM);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_combinedContactStiffness1_set___(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_combinedContactStiffness1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_combinedContactStiffness1_get___(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_combinedContactStiffness1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_contactERP_set___(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_contactERP = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_contactERP_get___(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_contactERP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_combinedContactDamping1_set___(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_combinedContactDamping1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_combinedContactDamping1_get___(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_combinedContactDamping1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_frictionCFM_set___(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_frictionCFM = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_frictionCFM_get___(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_frictionCFM);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_lifeTime_set___(void * jarg1, int jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_lifeTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_lifeTime_get___(void * jarg1) {
  int jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (int) ((arg1)->m_lifeTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_lateralFrictionDir1_set___(void * jarg1, void * jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_lateralFrictionDir1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_lateralFrictionDir1_get___(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_lateralFrictionDir1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_lateralFrictionDir2_set___(void * jarg1, void * jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_lateralFrictionDir2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_m_lateralFrictionDir2_get___(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_lateralFrictionDir2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_getDistance___(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  {
    try {
      result = (btScalar)((btManifoldPoint const *)arg1)->getDistance();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_getLifeTime___(void * jarg1) {
  int jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  {
    try {
      result = (int)((btManifoldPoint const *)arg1)->getLifeTime();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_getPositionWorldOnA___(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  {
    try {
      result = (btVector3 *) &((btManifoldPoint const *)arg1)->getPositionWorldOnA();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_getPositionWorldOnB___(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  {
    try {
      result = (btVector3 *) &((btManifoldPoint const *)arg1)->getPositionWorldOnB();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_setDistance___(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->setDistance(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btManifoldPoint_getAppliedImpulse___(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  {
    try {
      result = (btScalar)((btManifoldPoint const *)arg1)->getAppliedImpulse();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btManifoldPoint___(void * jarg1) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_ACTIVE_TAG_get___() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_ISLAND_SLEEPING_get___() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_WANTS_DEACTIVATION_get___() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_DISABLE_DEACTIVATION_get___() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_DISABLE_SIMULATION_get___() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_FIXED_BASE_MULTI_BODY_get___() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDataName_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btCollisionObjectFloatData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_mergesSimulationIslands___(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (bool)((btCollisionObject const *)arg1)->mergesSimulationIslands();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getAnisotropicFriction___(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btVector3 *) &((btCollisionObject const *)arg1)->getAnisotropicFriction();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setAnisotropicFriction__SWIG_0___(void * jarg1, void * jarg2, int jarg3) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->setAnisotropicFriction((btVector3 const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setAnisotropicFriction__SWIG_1___(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setAnisotropicFriction((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_hasAnisotropicFriction__SWIG_0___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((btCollisionObject const *)arg1)->hasAnisotropicFriction(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_hasAnisotropicFriction__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (bool)((btCollisionObject const *)arg1)->hasAnisotropicFriction();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setContactProcessingThreshold___(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->setContactProcessingThreshold(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getContactProcessingThreshold___(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btScalar)((btCollisionObject const *)arg1)->getContactProcessingThreshold();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_isStaticObject___(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (bool)((btCollisionObject const *)arg1)->isStaticObject();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_isKinematicObject___(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (bool)((btCollisionObject const *)arg1)->isKinematicObject();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_isStaticOrKinematicObject___(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (bool)((btCollisionObject const *)arg1)->isStaticOrKinematicObject();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_hasContactResponse___(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (bool)((btCollisionObject const *)arg1)->hasContactResponse();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btCollisionObject___() {
  void * jresult ;
  btCollisionObject *result = 0 ;
  
  {
    try {
      result = (btCollisionObject *)new btCollisionObject();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btCollisionObject___(void * jarg1) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setCollisionShape___(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btCollisionShape *)jarg2; 
  {
    try {
      (arg1)->setCollisionShape(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getCollisionShape__SWIG_0___(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionShape *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btCollisionShape *)((btCollisionObject const *)arg1)->getCollisionShape();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setIgnoreCollisionCheck___(void * jarg1, void * jarg2, unsigned int jarg3) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  bool arg3 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setIgnoreCollisionCheck((btCollisionObject const *)arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getNumObjectsWithoutCollision___(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (int)((btCollisionObject const *)arg1)->getNumObjectsWithoutCollision();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getObjectWithoutCollision___(void * jarg1, int jarg2) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (btCollisionObject *)(arg1)->getObjectWithoutCollision(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_checkCollideWithOverride___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  {
    try {
      result = (bool)((btCollisionObject const *)arg1)->checkCollideWithOverride((btCollisionObject const *)arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObject_internalGetExtensionPointer___(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (void *)((btCollisionObject const *)arg1)->internalGetExtensionPointer();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_internalSetExtensionPointer___(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (void *)jarg2; 
  {
    try {
      (arg1)->internalSetExtensionPointer(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getActivationState___(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (int)((btCollisionObject const *)arg1)->getActivationState();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setActivationState___(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      ((btCollisionObject const *)arg1)->setActivationState(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setDeactivationTime___(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->setDeactivationTime(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getDeactivationTime___(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btScalar)((btCollisionObject const *)arg1)->getDeactivationTime();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_forceActivationState___(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      ((btCollisionObject const *)arg1)->forceActivationState(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_activate__SWIG_0___(void * jarg1, unsigned int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      ((btCollisionObject const *)arg1)->activate(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_activate__SWIG_1___(void * jarg1) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      ((btCollisionObject const *)arg1)->activate();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_isActive___(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (bool)((btCollisionObject const *)arg1)->isActive();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setRestitution___(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->setRestitution(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getRestitution___(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btScalar)((btCollisionObject const *)arg1)->getRestitution();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setFriction___(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->setFriction(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getFriction___(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btScalar)((btCollisionObject const *)arg1)->getFriction();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setRollingFriction___(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->setRollingFriction(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getRollingFriction___(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btScalar)((btCollisionObject const *)arg1)->getRollingFriction();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setSpinningFriction___(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->setSpinningFriction(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getSpinningFriction___(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btScalar)((btCollisionObject const *)arg1)->getSpinningFriction();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setContactStiffnessAndDamping___(void * jarg1, float jarg2, float jarg3) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  {
    try {
      (arg1)->setContactStiffnessAndDamping(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getContactStiffness___(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btScalar)((btCollisionObject const *)arg1)->getContactStiffness();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getContactDamping___(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btScalar)((btCollisionObject const *)arg1)->getContactDamping();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getInternalType___(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (int)((btCollisionObject const *)arg1)->getInternalType();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getWorldTransform__SWIG_0___(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btTransform *) &(arg1)->getWorldTransform();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setWorldTransform___(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setWorldTransform((btTransform const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getBroadphaseHandle__SWIG_0___(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btBroadphaseProxy *)(arg1)->getBroadphaseHandle();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setBroadphaseHandle___(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  {
    try {
      (arg1)->setBroadphaseHandle(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getInterpolationWorldTransform__SWIG_0___(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btTransform *) &((btCollisionObject const *)arg1)->getInterpolationWorldTransform();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setInterpolationWorldTransform___(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setInterpolationWorldTransform((btTransform const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setInterpolationLinearVelocity___(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setInterpolationLinearVelocity((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setInterpolationAngularVelocity___(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setInterpolationAngularVelocity((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getInterpolationLinearVelocity___(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btVector3 *) &((btCollisionObject const *)arg1)->getInterpolationLinearVelocity();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getInterpolationAngularVelocity___(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btVector3 *) &((btCollisionObject const *)arg1)->getInterpolationAngularVelocity();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getIslandTag___(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (int)((btCollisionObject const *)arg1)->getIslandTag();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setIslandTag___(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setIslandTag(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getCompanionId___(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (int)((btCollisionObject const *)arg1)->getCompanionId();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setCompanionId___(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setCompanionId(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getWorldArrayIndex___(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (int)((btCollisionObject const *)arg1)->getWorldArrayIndex();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setWorldArrayIndex___(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setWorldArrayIndex(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getHitFraction___(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btScalar)((btCollisionObject const *)arg1)->getHitFraction();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setHitFraction___(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->setHitFraction(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getCollisionFlags___(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (int)((btCollisionObject const *)arg1)->getCollisionFlags();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setCollisionFlags___(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setCollisionFlags(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getCcdSweptSphereRadius___(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btScalar)((btCollisionObject const *)arg1)->getCcdSweptSphereRadius();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setCcdSweptSphereRadius___(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->setCcdSweptSphereRadius(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getCcdMotionThreshold___(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btScalar)((btCollisionObject const *)arg1)->getCcdMotionThreshold();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getCcdSquareMotionThreshold___(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btScalar)((btCollisionObject const *)arg1)->getCcdSquareMotionThreshold();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setCcdMotionThreshold___(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->setCcdMotionThreshold(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getUserPointer___(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (void *)((btCollisionObject const *)arg1)->getUserPointer();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getUserIndex___(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (int)((btCollisionObject const *)arg1)->getUserIndex();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getUserIndex2___(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (int)((btCollisionObject const *)arg1)->getUserIndex2();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getUserIndex3___(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (int)((btCollisionObject const *)arg1)->getUserIndex3();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setUserPointer___(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (void *)jarg2; 
  {
    try {
      (arg1)->setUserPointer(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setUserIndex___(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setUserIndex(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setUserIndex2___(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setUserIndex2(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setUserIndex3___(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setUserIndex3(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getUpdateRevisionInternal___(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (int)((btCollisionObject const *)arg1)->getUpdateRevisionInternal();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_setCustomDebugColor___(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setCustomDebugColor((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_removeCustomDebugColor___(void * jarg1) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      (arg1)->removeCustomDebugColor();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_getCustomDebugColor___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((btCollisionObject const *)arg1)->getCustomDebugColor(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_checkCollideWith___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  {
    try {
      result = (bool)((btCollisionObject const *)arg1)->checkCollideWith((btCollisionObject const *)arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObject_calculateSerializeBufferSize___(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (int)((btCollisionObject const *)arg1)->calculateSerializeBufferSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_btCollisionObject_serialize___(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  {
    try {
      result = (char *)((btCollisionObject const *)arg1)->serialize(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObject_serializeSingleObject___(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btSerializer *)jarg2; 
  {
    try {
      ((btCollisionObject const *)arg1)->serializeSingleObject(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_broadphaseHandle_set___(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_broadphaseHandle = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_broadphaseHandle_get___(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (void *) ((arg1)->m_broadphaseHandle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_collisionShape_set___(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_collisionShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_collisionShape_get___(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (void *) ((arg1)->m_collisionShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_rootCollisionShape_set___(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (btCollisionShapeData *)jarg2; 
  if (arg1) (arg1)->m_rootCollisionShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_rootCollisionShape_get___(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (btCollisionShapeData *) ((arg1)->m_rootCollisionShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_name_set___(void * jarg1, char * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_name_get___(void * jarg1) {
  char * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (char *) ((arg1)->m_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_worldTransform_set___(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData arg2 ;
  btTransformDoubleData *argp2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  argp2 = (btTransformDoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformDoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_worldTransform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_worldTransform_get___(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result =  ((arg1)->m_worldTransform);
  jresult = new btTransformDoubleData((const btTransformDoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_interpolationWorldTransform_set___(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData arg2 ;
  btTransformDoubleData *argp2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  argp2 = (btTransformDoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformDoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_interpolationWorldTransform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_interpolationWorldTransform_get___(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result =  ((arg1)->m_interpolationWorldTransform);
  jresult = new btTransformDoubleData((const btTransformDoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_interpolationLinearVelocity_set___(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_interpolationLinearVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_interpolationLinearVelocity_get___(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_interpolationLinearVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_interpolationAngularVelocity_set___(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_interpolationAngularVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_interpolationAngularVelocity_get___(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_interpolationAngularVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_anisotropicFriction_set___(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_anisotropicFriction = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_anisotropicFriction_get___(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_anisotropicFriction);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_contactProcessingThreshold_set___(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_contactProcessingThreshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_contactProcessingThreshold_get___(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_contactProcessingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_deactivationTime_set___(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_deactivationTime = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_deactivationTime_get___(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_deactivationTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_friction_set___(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_friction_get___(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_rollingFriction_set___(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_rollingFriction = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_rollingFriction_get___(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_rollingFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_contactDamping_set___(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_contactDamping = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_contactDamping_get___(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_contactDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_contactStiffness_set___(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_contactStiffness = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_contactStiffness_get___(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_contactStiffness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_restitution_set___(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_restitution_get___(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_hitFraction_set___(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_hitFraction = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_hitFraction_get___(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_hitFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_ccdSweptSphereRadius_set___(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_ccdSweptSphereRadius = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_ccdSweptSphereRadius_get___(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_ccdSweptSphereRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_ccdMotionThreshold_set___(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_ccdMotionThreshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_ccdMotionThreshold_get___(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_ccdMotionThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_hasAnisotropicFriction_set___(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_hasAnisotropicFriction = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_hasAnisotropicFriction_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_hasAnisotropicFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_collisionFlags_set___(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_collisionFlags_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_collisionFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_islandTag1_set___(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_islandTag1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_islandTag1_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_islandTag1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_companionId_set___(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_companionId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_companionId_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_companionId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_activationState1_set___(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_activationState1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_activationState1_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_activationState1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_internalType_set___(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_internalType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_internalType_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_internalType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_checkCollideWith_set___(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_checkCollideWith = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_checkCollideWith_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_checkCollideWith);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_collisionFilterGroup_set___(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFilterGroup = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_collisionFilterGroup_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_collisionFilterGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_collisionFilterMask_set___(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFilterMask = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_collisionFilterMask_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_collisionFilterMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_uniqueId_set___(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_uniqueId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectDoubleData_m_uniqueId_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_uniqueId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btCollisionObjectDoubleData___() {
  void * jresult ;
  btCollisionObjectDoubleData *result = 0 ;
  
  {
    try {
      result = (btCollisionObjectDoubleData *)new btCollisionObjectDoubleData();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btCollisionObjectDoubleData___(void * jarg1) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_broadphaseHandle_set___(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_broadphaseHandle = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_broadphaseHandle_get___(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (void *) ((arg1)->m_broadphaseHandle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_collisionShape_set___(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_collisionShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_collisionShape_get___(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (void *) ((arg1)->m_collisionShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_rootCollisionShape_set___(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (btCollisionShapeData *)jarg2; 
  if (arg1) (arg1)->m_rootCollisionShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_rootCollisionShape_get___(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (btCollisionShapeData *) ((arg1)->m_rootCollisionShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_name_set___(void * jarg1, char * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_name_get___(void * jarg1) {
  char * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (char *) ((arg1)->m_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_worldTransform_set___(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData arg2 ;
  btTransformFloatData *argp2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  argp2 = (btTransformFloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformFloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_worldTransform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_worldTransform_get___(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result =  ((arg1)->m_worldTransform);
  jresult = new btTransformFloatData((const btTransformFloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_interpolationWorldTransform_set___(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData arg2 ;
  btTransformFloatData *argp2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  argp2 = (btTransformFloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformFloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_interpolationWorldTransform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_interpolationWorldTransform_get___(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result =  ((arg1)->m_interpolationWorldTransform);
  jresult = new btTransformFloatData((const btTransformFloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_interpolationLinearVelocity_set___(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_interpolationLinearVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_interpolationLinearVelocity_get___(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_interpolationLinearVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_interpolationAngularVelocity_set___(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_interpolationAngularVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_interpolationAngularVelocity_get___(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_interpolationAngularVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_anisotropicFriction_set___(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_anisotropicFriction = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_anisotropicFriction_get___(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_anisotropicFriction);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_contactProcessingThreshold_set___(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_contactProcessingThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_contactProcessingThreshold_get___(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_contactProcessingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_deactivationTime_set___(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_deactivationTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_deactivationTime_get___(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_deactivationTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_friction_set___(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_friction_get___(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_rollingFriction_set___(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_rollingFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_rollingFriction_get___(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_rollingFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_contactDamping_set___(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_contactDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_contactDamping_get___(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_contactDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_contactStiffness_set___(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_contactStiffness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_contactStiffness_get___(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_contactStiffness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_restitution_set___(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_restitution_get___(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_hitFraction_set___(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_hitFraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_hitFraction_get___(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_hitFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_ccdSweptSphereRadius_set___(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_ccdSweptSphereRadius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_ccdSweptSphereRadius_get___(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_ccdSweptSphereRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_ccdMotionThreshold_set___(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_ccdMotionThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_ccdMotionThreshold_get___(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_ccdMotionThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_hasAnisotropicFriction_set___(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_hasAnisotropicFriction = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_hasAnisotropicFriction_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_hasAnisotropicFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_collisionFlags_set___(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_collisionFlags_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_collisionFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_islandTag1_set___(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_islandTag1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_islandTag1_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_islandTag1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_companionId_set___(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_companionId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_companionId_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_companionId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_activationState1_set___(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_activationState1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_activationState1_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_activationState1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_internalType_set___(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_internalType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_internalType_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_internalType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_checkCollideWith_set___(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_checkCollideWith = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_checkCollideWith_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_checkCollideWith);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_collisionFilterGroup_set___(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFilterGroup = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_collisionFilterGroup_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_collisionFilterGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_collisionFilterMask_set___(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFilterMask = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_collisionFilterMask_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_collisionFilterMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_uniqueId_set___(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_uniqueId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionObjectFloatData_m_uniqueId_get___(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_uniqueId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btCollisionObjectFloatData___() {
  void * jresult ;
  btCollisionObjectFloatData *result = 0 ;
  
  {
    try {
      result = (btCollisionObjectFloatData *)new btCollisionObjectFloatData();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btCollisionObjectFloatData___(void * jarg1) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_gDeactivationTime_set___(float jarg1) {
  btScalar arg1 ;
  
  arg1 = (btScalar)jarg1; 
  gDeactivationTime = arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_gDeactivationTime_get___() {
  float jresult ;
  btScalar result;
  
  result = (btScalar)gDeactivationTime;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_gDisableDeactivation_set___(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  gDisableDeactivation = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_gDisableDeactivation_get___() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)gDisableDeactivation;
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_btRigidBodyDataName_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btRigidBodyFloatData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_mass_set___(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_mass = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_mass_get___(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_mass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_motionState_set___(void * jarg1, void * jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btMotionState *)jarg2; 
  if (arg1) (arg1)->m_motionState = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_motionState_get___(void * jarg1) {
  void * jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btMotionState *result = 0 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btMotionState *) ((arg1)->m_motionState);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_startWorldTransform_set___(void * jarg1, void * jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btTransform arg2 ;
  btTransform *argp2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  argp2 = (btTransform *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransform", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_startWorldTransform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_startWorldTransform_get___(void * jarg1) {
  void * jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btTransform result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result =  ((arg1)->m_startWorldTransform);
  jresult = new btTransform((const btTransform &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_collisionShape_set___(void * jarg1, void * jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btCollisionShape *)jarg2; 
  if (arg1) (arg1)->m_collisionShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_collisionShape_get___(void * jarg1) {
  void * jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btCollisionShape *result = 0 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btCollisionShape *) ((arg1)->m_collisionShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_localInertia_set___(void * jarg1, void * jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_localInertia = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_localInertia_get___(void * jarg1) {
  void * jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_localInertia);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_linearDamping_set___(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_linearDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_linearDamping_get___(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_linearDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_angularDamping_set___(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_angularDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_angularDamping_get___(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_angularDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_friction_set___(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_friction_get___(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_rollingFriction_set___(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_rollingFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_rollingFriction_get___(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_rollingFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_spinningFriction_set___(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_spinningFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_spinningFriction_get___(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_spinningFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_restitution_set___(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_restitution_get___(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_linearSleepingThreshold_set___(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_linearSleepingThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_linearSleepingThreshold_get___(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_linearSleepingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_angularSleepingThreshold_set___(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_angularSleepingThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_angularSleepingThreshold_get___(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_angularSleepingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_additionalDamping_set___(void * jarg1, unsigned int jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_additionalDamping = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_additionalDamping_get___(void * jarg1) {
  unsigned int jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  bool result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (bool) ((arg1)->m_additionalDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_additionalDampingFactor_set___(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_additionalDampingFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_additionalDampingFactor_get___(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_additionalDampingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_additionalLinearDampingThresholdSqr_set___(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_additionalLinearDampingThresholdSqr = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_additionalLinearDampingThresholdSqr_get___(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_additionalLinearDampingThresholdSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_additionalAngularDampingThresholdSqr_set___(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingThresholdSqr = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_additionalAngularDampingThresholdSqr_get___(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_additionalAngularDampingThresholdSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_additionalAngularDampingFactor_set___(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_btRigidBodyConstructionInfo_m_additionalAngularDampingFactor_get___(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_additionalAngularDampingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btRigidBody_btRigidBodyConstructionInfo__SWIG_0___(float jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btScalar arg1 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btVector3 *arg4 = 0 ;
  btRigidBody::btRigidBodyConstructionInfo *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btMotionState *)jarg2; 
  arg3 = (btCollisionShape *)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (btRigidBody::btRigidBodyConstructionInfo *)new btRigidBody::btRigidBodyConstructionInfo(arg1,arg2,arg3,(btVector3 const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btRigidBody_btRigidBodyConstructionInfo__SWIG_1___(float jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btScalar arg1 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btRigidBody::btRigidBodyConstructionInfo *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btMotionState *)jarg2; 
  arg3 = (btCollisionShape *)jarg3; 
  {
    try {
      result = (btRigidBody::btRigidBodyConstructionInfo *)new btRigidBody::btRigidBodyConstructionInfo(arg1,arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btRigidBody_btRigidBodyConstructionInfo___(void * jarg1) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btRigidBody__SWIG_0___(void * jarg1) {
  void * jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody::btRigidBodyConstructionInfo const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (btRigidBody *)new btRigidBody((btRigidBody::btRigidBodyConstructionInfo const &)*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btRigidBody__SWIG_1___(float jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btScalar arg1 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btVector3 *arg4 = 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btMotionState *)jarg2; 
  arg3 = (btCollisionShape *)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (btRigidBody *)new btRigidBody(arg1,arg2,arg3,(btVector3 const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btRigidBody__SWIG_2___(float jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btScalar arg1 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btMotionState *)jarg2; 
  arg3 = (btCollisionShape *)jarg3; 
  {
    try {
      result = (btRigidBody *)new btRigidBody(arg1,arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btRigidBody___(void * jarg1) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_proceedToTransform___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->proceedToTransform((btTransform const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_upcast__SWIG_0___(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  {
    try {
      result = (btRigidBody *)btRigidBody::upcast((btCollisionObject const *)arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_predictIntegratedTransform___(void * jarg1, float jarg2, void * jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->predictIntegratedTransform(arg2,*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_saveKinematicState___(void * jarg1, float jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->saveKinematicState(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_applyGravity___(void * jarg1) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      (arg1)->applyGravity();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_clearGravity___(void * jarg1) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      (arg1)->clearGravity();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_setGravity___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setGravity((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getGravity___(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btVector3 *) &((btRigidBody const *)arg1)->getGravity();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_setDamping___(void * jarg1, float jarg2, float jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  {
    try {
      (arg1)->setDamping(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_getLinearDamping___(void * jarg1) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btScalar)((btRigidBody const *)arg1)->getLinearDamping();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_getAngularDamping___(void * jarg1) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btScalar)((btRigidBody const *)arg1)->getAngularDamping();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_getLinearSleepingThreshold___(void * jarg1) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btScalar)((btRigidBody const *)arg1)->getLinearSleepingThreshold();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_getAngularSleepingThreshold___(void * jarg1) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btScalar)((btRigidBody const *)arg1)->getAngularSleepingThreshold();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_applyDamping___(void * jarg1, float jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->applyDamping(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getCollisionShape__SWIG_0___(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btCollisionShape *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btCollisionShape *)((btRigidBody const *)arg1)->getCollisionShape();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_setMassProps___(void * jarg1, float jarg2, void * jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setMassProps(arg2,(btVector3 const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getLinearFactor___(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btVector3 *) &((btRigidBody const *)arg1)->getLinearFactor();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_setLinearFactor___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setLinearFactor((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_getInvMass___(void * jarg1) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btScalar)((btRigidBody const *)arg1)->getInvMass();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_getMass___(void * jarg1) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btScalar)((btRigidBody const *)arg1)->getMass();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getInvInertiaTensorWorld___(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btMatrix3x3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btMatrix3x3 *) &((btRigidBody const *)arg1)->getInvInertiaTensorWorld();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_integrateVelocities___(void * jarg1, float jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->integrateVelocities(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_setCenterOfMassTransform___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setCenterOfMassTransform((btTransform const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_applyCentralForce___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->applyCentralForce((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getTotalForce___(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btVector3 *) &((btRigidBody const *)arg1)->getTotalForce();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getTotalTorque___(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btVector3 *) &((btRigidBody const *)arg1)->getTotalTorque();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getInvInertiaDiagLocal___(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btVector3 *) &((btRigidBody const *)arg1)->getInvInertiaDiagLocal();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_setInvInertiaDiagLocal___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setInvInertiaDiagLocal((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_setSleepingThresholds___(void * jarg1, float jarg2, float jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  {
    try {
      (arg1)->setSleepingThresholds(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_applyTorque___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->applyTorque((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_applyForce___(void * jarg1, void * jarg2, void * jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->applyForce((btVector3 const &)*arg2,(btVector3 const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_applyCentralImpulse___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->applyCentralImpulse((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_applyTorqueImpulse___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->applyTorqueImpulse((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_applyImpulse___(void * jarg1, void * jarg2, void * jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->applyImpulse((btVector3 const &)*arg2,(btVector3 const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_applyPushImpulse___(void * jarg1, void * jarg2, void * jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->applyPushImpulse((btVector3 const &)*arg2,(btVector3 const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getPushVelocity___(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 result;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = ((btRigidBody const *)arg1)->getPushVelocity();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getTurnVelocity___(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 result;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = ((btRigidBody const *)arg1)->getTurnVelocity();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_setPushVelocity___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setPushVelocity((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_setTurnVelocity___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setTurnVelocity((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_applyCentralPushImpulse___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->applyCentralPushImpulse((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_applyTorqueTurnImpulse___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->applyTorqueTurnImpulse((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_clearForces___(void * jarg1) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      (arg1)->clearForces();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_updateInertiaTensor___(void * jarg1) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      (arg1)->updateInertiaTensor();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getCenterOfMassPosition___(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btVector3 *) &((btRigidBody const *)arg1)->getCenterOfMassPosition();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getOrientation___(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btQuaternion result;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = ((btRigidBody const *)arg1)->getOrientation();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getCenterOfMassTransform___(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btTransform *) &((btRigidBody const *)arg1)->getCenterOfMassTransform();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getLinearVelocity___(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btVector3 *) &((btRigidBody const *)arg1)->getLinearVelocity();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getAngularVelocity___(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btVector3 *) &((btRigidBody const *)arg1)->getAngularVelocity();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_setLinearVelocity___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setLinearVelocity((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_setAngularVelocity___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setAngularVelocity((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getVelocityInLocalPoint___(void * jarg1, void * jarg2) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = ((btRigidBody const *)arg1)->getVelocityInLocalPoint((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getPushVelocityInLocalPoint___(void * jarg1, void * jarg2) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = ((btRigidBody const *)arg1)->getPushVelocityInLocalPoint((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_translate___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->translate((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_getAabb___(void * jarg1, void * jarg2, void * jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  {
    try {
      ((btRigidBody const *)arg1)->getAabb(*arg2,*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_computeImpulseDenominator___(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (btScalar)((btRigidBody const *)arg1)->computeImpulseDenominator((btVector3 const &)*arg2,(btVector3 const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBody_computeAngularImpulseDenominator___(void * jarg1, void * jarg2) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (btScalar)((btRigidBody const *)arg1)->computeAngularImpulseDenominator((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_updateDeactivation___(void * jarg1, float jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->updateDeactivation(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btRigidBody_wantsSleeping___(void * jarg1) {
  unsigned int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  bool result;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (bool)(arg1)->wantsSleeping();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getBroadphaseProxy__SWIG_0___(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btBroadphaseProxy *)((btRigidBody const *)arg1)->getBroadphaseProxy();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_setNewBroadphaseProxy___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  {
    try {
      (arg1)->setNewBroadphaseProxy(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getMotionState__SWIG_0___(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btMotionState *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btMotionState *)(arg1)->getMotionState();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_setMotionState___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btMotionState *)jarg2; 
  {
    try {
      (arg1)->setMotionState(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_m_contactSolverType_set___(void * jarg1, int jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_contactSolverType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btRigidBody_m_contactSolverType_get___(void * jarg1) {
  int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (int) ((arg1)->m_contactSolverType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_m_frictionSolverType_set___(void * jarg1, int jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_frictionSolverType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btRigidBody_m_frictionSolverType_get___(void * jarg1) {
  int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (int) ((arg1)->m_frictionSolverType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_setAngularFactor__SWIG_0___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setAngularFactor((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_setAngularFactor__SWIG_1___(void * jarg1, float jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      (arg1)->setAngularFactor(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getAngularFactor___(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (btVector3 *) &((btRigidBody const *)arg1)->getAngularFactor();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btRigidBody_isInWorld___(void * jarg1) {
  unsigned int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  bool result;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (bool)((btRigidBody const *)arg1)->isInWorld();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_addConstraintRef___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  {
    try {
      (arg1)->addConstraintRef(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_removeConstraintRef___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  {
    try {
      (arg1)->removeConstraintRef(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getConstraintRef___(void * jarg1, int jarg2) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (btTypedConstraint *)(arg1)->getConstraintRef(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btRigidBody_getNumConstraintRefs___(void * jarg1) {
  int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (int)((btRigidBody const *)arg1)->getNumConstraintRefs();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_setFlags___(void * jarg1, int jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setFlags(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btRigidBody_getFlags___(void * jarg1) {
  int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (int)((btRigidBody const *)arg1)->getFlags();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_computeGyroscopicImpulseImplicit_World___(void * jarg1, float jarg2) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btVector3 result;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      result = ((btRigidBody const *)arg1)->computeGyroscopicImpulseImplicit_World(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_computeGyroscopicImpulseImplicit_Body___(void * jarg1, float jarg2) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btVector3 result;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      result = ((btRigidBody const *)arg1)->computeGyroscopicImpulseImplicit_Body(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_computeGyroscopicForceExplicit___(void * jarg1, float jarg2) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btVector3 result;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      result = ((btRigidBody const *)arg1)->computeGyroscopicForceExplicit(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBody_getLocalInertia___(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 result;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = ((btRigidBody const *)arg1)->getLocalInertia();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btRigidBody_calculateSerializeBufferSize___(void * jarg1) {
  int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  arg1 = (btRigidBody *)jarg1; 
  {
    try {
      result = (int)((btRigidBody const *)arg1)->calculateSerializeBufferSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_btRigidBody_serialize___(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  {
    try {
      result = (char *)((btRigidBody const *)arg1)->serialize(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBody_serializeSingleObject___(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btSerializer *)jarg2; 
  {
    try {
      ((btRigidBody const *)arg1)->serializeSingleObject(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_collisionObjectData_set___(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btCollisionObjectFloatData *arg2 = (btCollisionObjectFloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btCollisionObjectFloatData *)jarg2; 
  if (arg1) (arg1)->m_collisionObjectData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_collisionObjectData_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btCollisionObjectFloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btCollisionObjectFloatData *)& ((arg1)->m_collisionObjectData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_invInertiaTensorWorld_set___(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btMatrix3x3FloatData arg2 ;
  btMatrix3x3FloatData *argp2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  argp2 = (btMatrix3x3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btMatrix3x3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_invInertiaTensorWorld = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_invInertiaTensorWorld_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btMatrix3x3FloatData result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result =  ((arg1)->m_invInertiaTensorWorld);
  jresult = new btMatrix3x3FloatData((const btMatrix3x3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_linearVelocity_set___(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_linearVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_linearVelocity_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_linearVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_angularVelocity_set___(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_angularVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_angularVelocity_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_angularVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_angularFactor_set___(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_angularFactor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_angularFactor_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_angularFactor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_linearFactor_set___(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_linearFactor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_linearFactor_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_linearFactor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_gravity_set___(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_gravity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_gravity_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_gravity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_gravity_acceleration_set___(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_gravity_acceleration = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_gravity_acceleration_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_gravity_acceleration);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_invInertiaLocal_set___(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_invInertiaLocal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_invInertiaLocal_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_invInertiaLocal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_totalForce_set___(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_totalForce = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_totalForce_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_totalForce);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_totalTorque_set___(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_totalTorque = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_totalTorque_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_totalTorque);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_inverseMass_set___(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_inverseMass = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_inverseMass_get___(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_inverseMass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_linearDamping_set___(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linearDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_linearDamping_get___(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_linearDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_angularDamping_set___(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_angularDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_angularDamping_get___(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_angularDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_additionalDampingFactor_set___(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_additionalDampingFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_additionalDampingFactor_get___(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_additionalDampingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_set___(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_additionalLinearDampingThresholdSqr = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_get___(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_additionalLinearDampingThresholdSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_set___(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingThresholdSqr = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_get___(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_additionalAngularDampingThresholdSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_additionalAngularDampingFactor_set___(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_additionalAngularDampingFactor_get___(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_additionalAngularDampingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_linearSleepingThreshold_set___(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linearSleepingThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_linearSleepingThreshold_get___(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_linearSleepingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_angularSleepingThreshold_set___(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_angularSleepingThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_angularSleepingThreshold_get___(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_angularSleepingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_additionalDamping_set___(void * jarg1, int jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_additionalDamping = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btRigidBodyFloatData_m_additionalDamping_get___(void * jarg1) {
  int jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  int result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (int) ((arg1)->m_additionalDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btRigidBodyFloatData___() {
  void * jresult ;
  btRigidBodyFloatData *result = 0 ;
  
  {
    try {
      result = (btRigidBodyFloatData *)new btRigidBodyFloatData();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btRigidBodyFloatData___(void * jarg1) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_collisionObjectData_set___(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btCollisionObjectDoubleData *arg2 = (btCollisionObjectDoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btCollisionObjectDoubleData *)jarg2; 
  if (arg1) (arg1)->m_collisionObjectData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_collisionObjectData_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btCollisionObjectDoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btCollisionObjectDoubleData *)& ((arg1)->m_collisionObjectData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_invInertiaTensorWorld_set___(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btMatrix3x3DoubleData arg2 ;
  btMatrix3x3DoubleData *argp2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  argp2 = (btMatrix3x3DoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btMatrix3x3DoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_invInertiaTensorWorld = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_invInertiaTensorWorld_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btMatrix3x3DoubleData result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result =  ((arg1)->m_invInertiaTensorWorld);
  jresult = new btMatrix3x3DoubleData((const btMatrix3x3DoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_linearVelocity_set___(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_linearVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_linearVelocity_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_linearVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_angularVelocity_set___(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_angularVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_angularVelocity_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_angularVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_angularFactor_set___(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_angularFactor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_angularFactor_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_angularFactor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_linearFactor_set___(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_linearFactor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_linearFactor_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_linearFactor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_gravity_set___(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_gravity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_gravity_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_gravity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_gravity_acceleration_set___(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_gravity_acceleration = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_gravity_acceleration_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_gravity_acceleration);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_invInertiaLocal_set___(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_invInertiaLocal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_invInertiaLocal_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_invInertiaLocal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_totalForce_set___(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_totalForce = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_totalForce_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_totalForce);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_totalTorque_set___(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_totalTorque = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_totalTorque_get___(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_totalTorque);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_inverseMass_set___(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_inverseMass = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_inverseMass_get___(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_inverseMass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_linearDamping_set___(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_linearDamping = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_linearDamping_get___(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_linearDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_angularDamping_set___(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_angularDamping = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_angularDamping_get___(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_angularDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_additionalDampingFactor_set___(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_additionalDampingFactor = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_additionalDampingFactor_get___(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_additionalDampingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_set___(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_additionalLinearDampingThresholdSqr = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_get___(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_additionalLinearDampingThresholdSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_set___(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingThresholdSqr = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_get___(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_additionalAngularDampingThresholdSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_additionalAngularDampingFactor_set___(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingFactor = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_additionalAngularDampingFactor_get___(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_additionalAngularDampingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_linearSleepingThreshold_set___(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_linearSleepingThreshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_linearSleepingThreshold_get___(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_linearSleepingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_angularSleepingThreshold_set___(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_angularSleepingThreshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_angularSleepingThreshold_get___(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_angularSleepingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_additionalDamping_set___(void * jarg1, int jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_additionalDamping = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_additionalDamping_get___(void * jarg1) {
  int jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  int result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (int) ((arg1)->m_additionalDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_padding_set___(void * jarg1, char * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  char *arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_btRigidBodyDoubleData_m_padding_get___(void * jarg1) {
  char * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btRigidBodyDoubleData___() {
  void * jresult ;
  btRigidBodyDoubleData *result = 0 ;
  
  {
    try {
      result = (btRigidBodyDoubleData *)new btRigidBodyDoubleData();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btRigidBodyDoubleData___(void * jarg1) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btCollisionWorld___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  btCollisionConfiguration *arg3 = (btCollisionConfiguration *) 0 ;
  btCollisionWorld *result = 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (btBroadphaseInterface *)jarg2; 
  arg3 = (btCollisionConfiguration *)jarg3; 
  {
    try {
      result = (btCollisionWorld *)new btCollisionWorld(arg1,arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btCollisionWorld___(void * jarg1) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_setBroadphase___(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btBroadphaseInterface *)jarg2; 
  {
    try {
      (arg1)->setBroadphase(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_getBroadphase__SWIG_0___(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btBroadphaseInterface *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  {
    try {
      result = (btBroadphaseInterface *)((btCollisionWorld const *)arg1)->getBroadphase();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_getPairCache___(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  {
    try {
      result = (btOverlappingPairCache *)(arg1)->getPairCache();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_getDispatcher__SWIG_0___(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btDispatcher *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  {
    try {
      result = (btDispatcher *)(arg1)->getDispatcher();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_updateSingleAabb___(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  {
    try {
      (arg1)->updateSingleAabb(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_updateAabbs___(void * jarg1) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  {
    try {
      (arg1)->updateAabbs();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_computeOverlappingPairs___(void * jarg1) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  {
    try {
      (arg1)->computeOverlappingPairs();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_setDebugDrawer___(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  {
    try {
      (arg1)->setDebugDrawer(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_getDebugDrawer___(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btIDebugDraw *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  {
    try {
      result = (btIDebugDraw *)(arg1)->getDebugDrawer();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_debugDrawWorld___(void * jarg1) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  {
    try {
      (arg1)->debugDrawWorld();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_debugDrawObject___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btTransform *arg2 = 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btCollisionShape *)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->debugDrawObject((btTransform const &)*arg2,(btCollisionShape const *)arg3,(btVector3 const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalShapeInfo_m_shapePart_set___(void * jarg1, int jarg2) {
  btCollisionWorld::LocalShapeInfo *arg1 = (btCollisionWorld::LocalShapeInfo *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionWorld::LocalShapeInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_shapePart = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalShapeInfo_m_shapePart_get___(void * jarg1) {
  int jresult ;
  btCollisionWorld::LocalShapeInfo *arg1 = (btCollisionWorld::LocalShapeInfo *) 0 ;
  int result;
  
  arg1 = (btCollisionWorld::LocalShapeInfo *)jarg1; 
  result = (int) ((arg1)->m_shapePart);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalShapeInfo_m_triangleIndex_set___(void * jarg1, int jarg2) {
  btCollisionWorld::LocalShapeInfo *arg1 = (btCollisionWorld::LocalShapeInfo *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionWorld::LocalShapeInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_triangleIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalShapeInfo_m_triangleIndex_get___(void * jarg1) {
  int jresult ;
  btCollisionWorld::LocalShapeInfo *arg1 = (btCollisionWorld::LocalShapeInfo *) 0 ;
  int result;
  
  arg1 = (btCollisionWorld::LocalShapeInfo *)jarg1; 
  result = (int) ((arg1)->m_triangleIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btCollisionWorld_LocalShapeInfo___() {
  void * jresult ;
  btCollisionWorld::LocalShapeInfo *result = 0 ;
  
  {
    try {
      result = (btCollisionWorld::LocalShapeInfo *)new btCollisionWorld::LocalShapeInfo();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btCollisionWorld_LocalShapeInfo___(void * jarg1) {
  btCollisionWorld::LocalShapeInfo *arg1 = (btCollisionWorld::LocalShapeInfo *) 0 ;
  
  arg1 = (btCollisionWorld::LocalShapeInfo *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btCollisionWorld_LocalRayResult___(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionWorld::LocalShapeInfo *arg2 = (btCollisionWorld::LocalShapeInfo *) 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  btCollisionWorld::LocalRayResult *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btCollisionWorld::LocalShapeInfo *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btScalar)jarg4; 
  {
    try {
      result = (btCollisionWorld::LocalRayResult *)new btCollisionWorld::LocalRayResult((btCollisionObject const *)arg1,arg2,(btVector3 const &)*arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalRayResult_m_collisionObject_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::LocalRayResult *arg1 = (btCollisionWorld::LocalRayResult *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionWorld::LocalRayResult *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  if (arg1) (arg1)->m_collisionObject = (btCollisionObject const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalRayResult_m_collisionObject_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::LocalRayResult *arg1 = (btCollisionWorld::LocalRayResult *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (btCollisionWorld::LocalRayResult *)jarg1; 
  result = (btCollisionObject *) ((arg1)->m_collisionObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalRayResult_m_localShapeInfo_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::LocalRayResult *arg1 = (btCollisionWorld::LocalRayResult *) 0 ;
  btCollisionWorld::LocalShapeInfo *arg2 = (btCollisionWorld::LocalShapeInfo *) 0 ;
  
  arg1 = (btCollisionWorld::LocalRayResult *)jarg1; 
  arg2 = (btCollisionWorld::LocalShapeInfo *)jarg2; 
  if (arg1) (arg1)->m_localShapeInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalRayResult_m_localShapeInfo_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::LocalRayResult *arg1 = (btCollisionWorld::LocalRayResult *) 0 ;
  btCollisionWorld::LocalShapeInfo *result = 0 ;
  
  arg1 = (btCollisionWorld::LocalRayResult *)jarg1; 
  result = (btCollisionWorld::LocalShapeInfo *) ((arg1)->m_localShapeInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalRayResult_m_hitNormalLocal_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::LocalRayResult *arg1 = (btCollisionWorld::LocalRayResult *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::LocalRayResult *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_hitNormalLocal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalRayResult_m_hitNormalLocal_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::LocalRayResult *arg1 = (btCollisionWorld::LocalRayResult *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::LocalRayResult *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_hitNormalLocal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalRayResult_m_hitFraction_set___(void * jarg1, float jarg2) {
  btCollisionWorld::LocalRayResult *arg1 = (btCollisionWorld::LocalRayResult *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionWorld::LocalRayResult *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_hitFraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalRayResult_m_hitFraction_get___(void * jarg1) {
  float jresult ;
  btCollisionWorld::LocalRayResult *arg1 = (btCollisionWorld::LocalRayResult *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::LocalRayResult *)jarg1; 
  result = (btScalar) ((arg1)->m_hitFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btCollisionWorld_LocalRayResult___(void * jarg1) {
  btCollisionWorld::LocalRayResult *arg1 = (btCollisionWorld::LocalRayResult *) 0 ;
  
  arg1 = (btCollisionWorld::LocalRayResult *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_RayResultCallback_m_closestHitFraction_set___(void * jarg1, float jarg2) {
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_closestHitFraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_RayResultCallback_m_closestHitFraction_get___(void * jarg1) {
  float jresult ;
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  result = (btScalar) ((arg1)->m_closestHitFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_RayResultCallback_m_collisionObject_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  if (arg1) (arg1)->m_collisionObject = (btCollisionObject const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_RayResultCallback_m_collisionObject_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  result = (btCollisionObject *) ((arg1)->m_collisionObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_RayResultCallback_m_collisionFilterGroup_set___(void * jarg1, int jarg2) {
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFilterGroup = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_RayResultCallback_m_collisionFilterGroup_get___(void * jarg1) {
  int jresult ;
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  int result;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  result = (int) ((arg1)->m_collisionFilterGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_RayResultCallback_m_collisionFilterMask_set___(void * jarg1, int jarg2) {
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFilterMask = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_RayResultCallback_m_collisionFilterMask_get___(void * jarg1) {
  int jresult ;
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  int result;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  result = (int) ((arg1)->m_collisionFilterMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_RayResultCallback_m_flags_set___(void * jarg1, unsigned int jarg2) {
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->m_flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_RayResultCallback_m_flags_get___(void * jarg1) {
  unsigned int jresult ;
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  unsigned int result;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  result = (unsigned int) ((arg1)->m_flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btCollisionWorld_RayResultCallback___(void * jarg1) {
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_RayResultCallback_hasHit___(void * jarg1) {
  unsigned int jresult ;
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  bool result;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  {
    try {
      result = (bool)((btCollisionWorld::RayResultCallback const *)arg1)->hasHit();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_RayResultCallback_needsCollision___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  {
    try {
      result = (bool)((btCollisionWorld::RayResultCallback const *)arg1)->needsCollision(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_RayResultCallback_addSingleResult___(void * jarg1, void * jarg2, unsigned int jarg3) {
  float jresult ;
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  btCollisionWorld::LocalRayResult *arg2 = 0 ;
  bool arg3 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  arg2 = (btCollisionWorld::LocalRayResult *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::LocalRayResult & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (btScalar)(arg1)->addSingleResult(*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btCollisionWorld_ClosestRayResultCallback___(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btCollisionWorld::ClosestRayResultCallback *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (btCollisionWorld::ClosestRayResultCallback *)new btCollisionWorld::ClosestRayResultCallback((btVector3 const &)*arg1,(btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestRayResultCallback_m_rayFromWorld_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_rayFromWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestRayResultCallback_m_rayFromWorld_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_rayFromWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestRayResultCallback_m_rayToWorld_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_rayToWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestRayResultCallback_m_rayToWorld_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_rayToWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestRayResultCallback_m_hitNormalWorld_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_hitNormalWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestRayResultCallback_m_hitNormalWorld_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_hitNormalWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestRayResultCallback_m_hitPointWorld_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_hitPointWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestRayResultCallback_m_hitPointWorld_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_hitPointWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestRayResultCallback_addSingleResult___(void * jarg1, void * jarg2, unsigned int jarg3) {
  float jresult ;
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  btCollisionWorld::LocalRayResult *arg2 = 0 ;
  bool arg3 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  arg2 = (btCollisionWorld::LocalRayResult *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::LocalRayResult & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (btScalar)(arg1)->addSingleResult(*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btCollisionWorld_ClosestRayResultCallback___(void * jarg1) {
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btCollisionWorld_AllHitsRayResultCallback___(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btCollisionWorld::AllHitsRayResultCallback *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (btCollisionWorld::AllHitsRayResultCallback *)new btCollisionWorld::AllHitsRayResultCallback((btVector3 const &)*arg1,(btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_AllHitsRayResultCallback_m_collisionObjects_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btAlignedObjectArray< btCollisionObject const * > *arg2 = (btAlignedObjectArray< btCollisionObject const * > *) 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  arg2 = (btAlignedObjectArray< btCollisionObject const * > *)jarg2; 
  if (arg1) (arg1)->m_collisionObjects = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_AllHitsRayResultCallback_m_collisionObjects_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btAlignedObjectArray< btCollisionObject const * > *result = 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  result = (btAlignedObjectArray< btCollisionObject const * > *)& ((arg1)->m_collisionObjects);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_AllHitsRayResultCallback_m_rayFromWorld_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_rayFromWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_AllHitsRayResultCallback_m_rayFromWorld_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_rayFromWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_AllHitsRayResultCallback_m_rayToWorld_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_rayToWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_AllHitsRayResultCallback_m_rayToWorld_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_rayToWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_AllHitsRayResultCallback_m_hitNormalWorld_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btAlignedObjectArray< btVector3 > *arg2 = (btAlignedObjectArray< btVector3 > *) 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  arg2 = (btAlignedObjectArray< btVector3 > *)jarg2; 
  if (arg1) (arg1)->m_hitNormalWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_AllHitsRayResultCallback_m_hitNormalWorld_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btAlignedObjectArray< btVector3 > *result = 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  result = (btAlignedObjectArray< btVector3 > *)& ((arg1)->m_hitNormalWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_AllHitsRayResultCallback_m_hitPointWorld_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btAlignedObjectArray< btVector3 > *arg2 = (btAlignedObjectArray< btVector3 > *) 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  arg2 = (btAlignedObjectArray< btVector3 > *)jarg2; 
  if (arg1) (arg1)->m_hitPointWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_AllHitsRayResultCallback_m_hitPointWorld_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btAlignedObjectArray< btVector3 > *result = 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  result = (btAlignedObjectArray< btVector3 > *)& ((arg1)->m_hitPointWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_AllHitsRayResultCallback_m_hitFractions_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btAlignedObjectArray< btScalar > arg2 ;
  btAlignedObjectArray< btScalar > *argp2 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  argp2 = (btAlignedObjectArray< btScalar > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btAlignedObjectArray< btScalar >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_hitFractions = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_AllHitsRayResultCallback_m_hitFractions_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btAlignedObjectArray< btScalar > result;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  result =  ((arg1)->m_hitFractions);
  jresult = new btAlignedObjectArray< btScalar >((const btAlignedObjectArray< btScalar > &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_AllHitsRayResultCallback_addSingleResult___(void * jarg1, void * jarg2, unsigned int jarg3) {
  float jresult ;
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btCollisionWorld::LocalRayResult *arg2 = 0 ;
  bool arg3 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  arg2 = (btCollisionWorld::LocalRayResult *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::LocalRayResult & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (btScalar)(arg1)->addSingleResult(*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btCollisionWorld_AllHitsRayResultCallback___(void * jarg1) {
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btCollisionWorld_LocalConvexResult___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionWorld::LocalShapeInfo *arg2 = (btCollisionWorld::LocalShapeInfo *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btCollisionWorld::LocalConvexResult *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btCollisionWorld::LocalShapeInfo *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btScalar)jarg5; 
  {
    try {
      result = (btCollisionWorld::LocalConvexResult *)new btCollisionWorld::LocalConvexResult((btCollisionObject const *)arg1,arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalConvexResult_m_hitCollisionObject_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  if (arg1) (arg1)->m_hitCollisionObject = (btCollisionObject const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalConvexResult_m_hitCollisionObject_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  result = (btCollisionObject *) ((arg1)->m_hitCollisionObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalConvexResult_m_localShapeInfo_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btCollisionWorld::LocalShapeInfo *arg2 = (btCollisionWorld::LocalShapeInfo *) 0 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  arg2 = (btCollisionWorld::LocalShapeInfo *)jarg2; 
  if (arg1) (arg1)->m_localShapeInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalConvexResult_m_localShapeInfo_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btCollisionWorld::LocalShapeInfo *result = 0 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  result = (btCollisionWorld::LocalShapeInfo *) ((arg1)->m_localShapeInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalConvexResult_m_hitNormalLocal_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_hitNormalLocal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalConvexResult_m_hitNormalLocal_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_hitNormalLocal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalConvexResult_m_hitPointLocal_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_hitPointLocal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalConvexResult_m_hitPointLocal_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_hitPointLocal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalConvexResult_m_hitFraction_set___(void * jarg1, float jarg2) {
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_hitFraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_LocalConvexResult_m_hitFraction_get___(void * jarg1) {
  float jresult ;
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  result = (btScalar) ((arg1)->m_hitFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btCollisionWorld_LocalConvexResult___(void * jarg1) {
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ConvexResultCallback_m_closestHitFraction_set___(void * jarg1, float jarg2) {
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_closestHitFraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ConvexResultCallback_m_closestHitFraction_get___(void * jarg1) {
  float jresult ;
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  result = (btScalar) ((arg1)->m_closestHitFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ConvexResultCallback_m_collisionFilterGroup_set___(void * jarg1, int jarg2) {
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFilterGroup = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ConvexResultCallback_m_collisionFilterGroup_get___(void * jarg1) {
  int jresult ;
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  int result;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  result = (int) ((arg1)->m_collisionFilterGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ConvexResultCallback_m_collisionFilterMask_set___(void * jarg1, int jarg2) {
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFilterMask = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ConvexResultCallback_m_collisionFilterMask_get___(void * jarg1) {
  int jresult ;
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  int result;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  result = (int) ((arg1)->m_collisionFilterMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btCollisionWorld_ConvexResultCallback___(void * jarg1) {
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ConvexResultCallback_hasHit___(void * jarg1) {
  unsigned int jresult ;
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  bool result;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  {
    try {
      result = (bool)((btCollisionWorld::ConvexResultCallback const *)arg1)->hasHit();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ConvexResultCallback_needsCollision___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  {
    try {
      result = (bool)((btCollisionWorld::ConvexResultCallback const *)arg1)->needsCollision(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ConvexResultCallback_addSingleResult___(void * jarg1, void * jarg2, unsigned int jarg3) {
  float jresult ;
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  btCollisionWorld::LocalConvexResult *arg2 = 0 ;
  bool arg3 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  arg2 = (btCollisionWorld::LocalConvexResult *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::LocalConvexResult & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (btScalar)(arg1)->addSingleResult(*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btCollisionWorld_ClosestConvexResultCallback___(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btCollisionWorld::ClosestConvexResultCallback *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (btCollisionWorld::ClosestConvexResultCallback *)new btCollisionWorld::ClosestConvexResultCallback((btVector3 const &)*arg1,(btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestConvexResultCallback_m_convexFromWorld_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_convexFromWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestConvexResultCallback_m_convexFromWorld_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_convexFromWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestConvexResultCallback_m_convexToWorld_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_convexToWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestConvexResultCallback_m_convexToWorld_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_convexToWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestConvexResultCallback_m_hitNormalWorld_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_hitNormalWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestConvexResultCallback_m_hitNormalWorld_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_hitNormalWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestConvexResultCallback_m_hitPointWorld_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_hitPointWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestConvexResultCallback_m_hitPointWorld_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_hitPointWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestConvexResultCallback_m_hitCollisionObject_set___(void * jarg1, void * jarg2) {
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  if (arg1) (arg1)->m_hitCollisionObject = (btCollisionObject const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestConvexResultCallback_m_hitCollisionObject_get___(void * jarg1) {
  void * jresult ;
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  result = (btCollisionObject *) ((arg1)->m_hitCollisionObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestConvexResultCallback_addSingleResult___(void * jarg1, void * jarg2, unsigned int jarg3) {
  float jresult ;
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btCollisionWorld::LocalConvexResult *arg2 = 0 ;
  bool arg3 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  arg2 = (btCollisionWorld::LocalConvexResult *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::LocalConvexResult & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (btScalar)(arg1)->addSingleResult(*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btCollisionWorld_ClosestConvexResultCallback___(void * jarg1) {
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ContactResultCallback_m_collisionFilterGroup_set___(void * jarg1, int jarg2) {
  btCollisionWorld::ContactResultCallback *arg1 = (btCollisionWorld::ContactResultCallback *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionWorld::ContactResultCallback *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFilterGroup = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ContactResultCallback_m_collisionFilterGroup_get___(void * jarg1) {
  int jresult ;
  btCollisionWorld::ContactResultCallback *arg1 = (btCollisionWorld::ContactResultCallback *) 0 ;
  int result;
  
  arg1 = (btCollisionWorld::ContactResultCallback *)jarg1; 
  result = (int) ((arg1)->m_collisionFilterGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ContactResultCallback_m_collisionFilterMask_set___(void * jarg1, int jarg2) {
  btCollisionWorld::ContactResultCallback *arg1 = (btCollisionWorld::ContactResultCallback *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionWorld::ContactResultCallback *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFilterMask = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ContactResultCallback_m_collisionFilterMask_get___(void * jarg1) {
  int jresult ;
  btCollisionWorld::ContactResultCallback *arg1 = (btCollisionWorld::ContactResultCallback *) 0 ;
  int result;
  
  arg1 = (btCollisionWorld::ContactResultCallback *)jarg1; 
  result = (int) ((arg1)->m_collisionFilterMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ContactResultCallback_m_closestDistanceThreshold_set___(void * jarg1, float jarg2) {
  btCollisionWorld::ContactResultCallback *arg1 = (btCollisionWorld::ContactResultCallback *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionWorld::ContactResultCallback *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_closestDistanceThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ContactResultCallback_m_closestDistanceThreshold_get___(void * jarg1) {
  float jresult ;
  btCollisionWorld::ContactResultCallback *arg1 = (btCollisionWorld::ContactResultCallback *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::ContactResultCallback *)jarg1; 
  result = (btScalar) ((arg1)->m_closestDistanceThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btCollisionWorld_ContactResultCallback___(void * jarg1) {
  btCollisionWorld::ContactResultCallback *arg1 = (btCollisionWorld::ContactResultCallback *) 0 ;
  
  arg1 = (btCollisionWorld::ContactResultCallback *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ContactResultCallback_needsCollision___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btCollisionWorld::ContactResultCallback *arg1 = (btCollisionWorld::ContactResultCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  arg1 = (btCollisionWorld::ContactResultCallback *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  {
    try {
      result = (bool)((btCollisionWorld::ContactResultCallback const *)arg1)->needsCollision(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ContactResultCallback_addSingleResult___(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, void * jarg6, int jarg7, int jarg8) {
  float jresult ;
  btCollisionWorld::ContactResultCallback *arg1 = (btCollisionWorld::ContactResultCallback *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  int arg4 ;
  int arg5 ;
  btCollisionObjectWrapper *arg6 = (btCollisionObjectWrapper *) 0 ;
  int arg7 ;
  int arg8 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::ContactResultCallback *)jarg1; 
  arg2 = (btManifoldPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btManifoldPoint & type is null", 0);
    return 0;
  } 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (btCollisionObjectWrapper *)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  {
    try {
      result = (btScalar)(arg1)->addSingleResult(*arg2,(btCollisionObjectWrapper const *)arg3,arg4,arg5,(btCollisionObjectWrapper const *)arg6,arg7,arg8);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_getNumCollisionObjects___(void * jarg1) {
  int jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  int result;
  
  arg1 = (btCollisionWorld *)jarg1; 
  {
    try {
      result = (int)((btCollisionWorld const *)arg1)->getNumCollisionObjects();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_rayTest___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btCollisionWorld::RayResultCallback *arg4 = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btCollisionWorld::RayResultCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::RayResultCallback & type is null", 0);
    return ;
  } 
  {
    try {
      ((btCollisionWorld const *)arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_convexSweepTest__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btCollisionWorld::ConvexResultCallback *arg5 = 0 ;
  btScalar arg6 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btConvexShape *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btCollisionWorld::ConvexResultCallback *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::ConvexResultCallback & type is null", 0);
    return ;
  } 
  arg6 = (btScalar)jarg6; 
  {
    try {
      ((btCollisionWorld const *)arg1)->convexSweepTest((btConvexShape const *)arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,*arg5,arg6);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_convexSweepTest__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btCollisionWorld::ConvexResultCallback *arg5 = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btConvexShape *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btCollisionWorld::ConvexResultCallback *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::ConvexResultCallback & type is null", 0);
    return ;
  } 
  {
    try {
      ((btCollisionWorld const *)arg1)->convexSweepTest((btConvexShape const *)arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,*arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_contactTest___(void * jarg1, void * jarg2, void * jarg3) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionWorld::ContactResultCallback *arg3 = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionWorld::ContactResultCallback *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::ContactResultCallback & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->contactTest(arg2,*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_contactPairTest___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btCollisionWorld::ContactResultCallback *arg4 = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  arg4 = (btCollisionWorld::ContactResultCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::ContactResultCallback & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->contactPairTest(arg2,arg3,*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_rayTestSingle___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btCollisionShape *arg4 = (btCollisionShape *) 0 ;
  btTransform *arg5 = 0 ;
  btCollisionWorld::RayResultCallback *arg6 = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btCollisionObject *)jarg3; 
  arg4 = (btCollisionShape *)jarg4; 
  arg5 = (btTransform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg6 = (btCollisionWorld::RayResultCallback *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::RayResultCallback & type is null", 0);
    return ;
  } 
  {
    try {
      btCollisionWorld::rayTestSingle((btTransform const &)*arg1,(btTransform const &)*arg2,arg3,(btCollisionShape const *)arg4,(btTransform const &)*arg5,*arg6);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_rayTestSingleInternal___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionWorld::RayResultCallback *arg4 = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btCollisionWorld::RayResultCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::RayResultCallback & type is null", 0);
    return ;
  } 
  {
    try {
      btCollisionWorld::rayTestSingleInternal((btTransform const &)*arg1,(btTransform const &)*arg2,(btCollisionObjectWrapper const *)arg3,*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_objectQuerySingle___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, float jarg8) {
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btCollisionObject *arg4 = (btCollisionObject *) 0 ;
  btCollisionShape *arg5 = (btCollisionShape *) 0 ;
  btTransform *arg6 = 0 ;
  btCollisionWorld::ConvexResultCallback *arg7 = 0 ;
  btScalar arg8 ;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btCollisionObject *)jarg4; 
  arg5 = (btCollisionShape *)jarg5; 
  arg6 = (btTransform *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg7 = (btCollisionWorld::ConvexResultCallback *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::ConvexResultCallback & type is null", 0);
    return ;
  } 
  arg8 = (btScalar)jarg8; 
  {
    try {
      btCollisionWorld::objectQuerySingle((btConvexShape const *)arg1,(btTransform const &)*arg2,(btTransform const &)*arg3,arg4,(btCollisionShape const *)arg5,(btTransform const &)*arg6,*arg7,arg8);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_objectQuerySingleInternal___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btCollisionObjectWrapper *arg4 = (btCollisionObjectWrapper *) 0 ;
  btCollisionWorld::ConvexResultCallback *arg5 = 0 ;
  btScalar arg6 ;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btCollisionObjectWrapper *)jarg4; 
  arg5 = (btCollisionWorld::ConvexResultCallback *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::ConvexResultCallback & type is null", 0);
    return ;
  } 
  arg6 = (btScalar)jarg6; 
  {
    try {
      btCollisionWorld::objectQuerySingleInternal((btConvexShape const *)arg1,(btTransform const &)*arg2,(btTransform const &)*arg3,(btCollisionObjectWrapper const *)arg4,*arg5,arg6);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_addCollisionObject__SWIG_0___(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      (arg1)->addCollisionObject(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_addCollisionObject__SWIG_1___(void * jarg1, void * jarg2, int jarg3) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  int arg3 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->addCollisionObject(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_addCollisionObject__SWIG_2___(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  {
    try {
      (arg1)->addCollisionObject(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_refreshBroadphaseProxy___(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  {
    try {
      (arg1)->refreshBroadphaseProxy(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_getCollisionObjectArray__SWIG_0___(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObjectArray *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  {
    try {
      result = (btCollisionObjectArray *) &(arg1)->getCollisionObjectArray();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_removeCollisionObject___(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  {
    try {
      (arg1)->removeCollisionObject(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_performDiscreteCollisionDetection___(void * jarg1) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  {
    try {
      (arg1)->performDiscreteCollisionDetection();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_getDispatchInfo__SWIG_0___(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btDispatcherInfo *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  {
    try {
      result = (btDispatcherInfo *) &(arg1)->getDispatchInfo();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_getForceUpdateAllAabbs___(void * jarg1) {
  unsigned int jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  bool result;
  
  arg1 = (btCollisionWorld *)jarg1; 
  {
    try {
      result = (bool)((btCollisionWorld const *)arg1)->getForceUpdateAllAabbs();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_setForceUpdateAllAabbs___(void * jarg1, unsigned int jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  bool arg2 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setForceUpdateAllAabbs(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_serialize___(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btSerializer *)jarg2; 
  {
    try {
      (arg1)->serialize(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btDynamicsWorld___(void * jarg1) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_stepSimulation__SWIG_0___(void * jarg1, float jarg2, int jarg3, float jarg4) {
  int jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  btScalar arg4 ;
  int result;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (btScalar)jarg4; 
  {
    try {
      result = (int)(arg1)->stepSimulation(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_stepSimulation__SWIG_1___(void * jarg1, float jarg2, int jarg3) {
  int jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (int)(arg1)->stepSimulation(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_stepSimulation__SWIG_2___(void * jarg1, float jarg2) {
  int jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int result;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  {
    try {
      result = (int)(arg1)->stepSimulation(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_debugDrawWorld___(void * jarg1) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  {
    try {
      (arg1)->debugDrawWorld();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_addConstraint__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  bool arg3 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->addConstraint(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_addConstraint__SWIG_1___(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  {
    try {
      (arg1)->addConstraint(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_removeConstraint___(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  {
    try {
      (arg1)->removeConstraint(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_addAction___(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  {
    try {
      (arg1)->addAction(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_removeAction___(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  {
    try {
      (arg1)->removeAction(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_setGravity___(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setGravity((btVector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_getGravity___(void * jarg1) {
  void * jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btVector3 result;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  {
    try {
      result = ((btDynamicsWorld const *)arg1)->getGravity();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_synchronizeMotionStates___(void * jarg1) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  {
    try {
      (arg1)->synchronizeMotionStates();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_addRigidBody__SWIG_0___(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  {
    try {
      (arg1)->addRigidBody(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_addRigidBody__SWIG_1___(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      (arg1)->addRigidBody(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_removeRigidBody___(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  {
    try {
      (arg1)->removeRigidBody(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_setConstraintSolver___(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btConstraintSolver *arg2 = (btConstraintSolver *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btConstraintSolver *)jarg2; 
  {
    try {
      (arg1)->setConstraintSolver(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_getConstraintSolver___(void * jarg1) {
  void * jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btConstraintSolver *result = 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  {
    try {
      result = (btConstraintSolver *)(arg1)->getConstraintSolver();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_getNumConstraints___(void * jarg1) {
  int jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  int result;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  {
    try {
      result = (int)((btDynamicsWorld const *)arg1)->getNumConstraints();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_getConstraint__SWIG_0___(void * jarg1, int jarg2) {
  void * jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (btTypedConstraint *)(arg1)->getConstraint(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_getWorldType___(void * jarg1) {
  int jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btDynamicsWorldType result;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  {
    try {
      result = (btDynamicsWorldType)((btDynamicsWorld const *)arg1)->getWorldType();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_clearForces___(void * jarg1) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  {
    try {
      (arg1)->clearForces();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_setInternalTickCallback__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btInternalTickCallback arg2 = (btInternalTickCallback) 0 ;
  void *arg3 = (void *) 0 ;
  bool arg4 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btInternalTickCallback)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->setInternalTickCallback(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_setInternalTickCallback__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btInternalTickCallback arg2 = (btInternalTickCallback) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btInternalTickCallback)jarg2; 
  arg3 = (void *)jarg3; 
  {
    try {
      (arg1)->setInternalTickCallback(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_setInternalTickCallback__SWIG_2___(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btInternalTickCallback arg2 = (btInternalTickCallback) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btInternalTickCallback)jarg2; 
  {
    try {
      (arg1)->setInternalTickCallback(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_setWorldUserInfo___(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (void *)jarg2; 
  {
    try {
      (arg1)->setWorldUserInfo(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_getWorldUserInfo___(void * jarg1) {
  void * jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  void *result = 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  {
    try {
      result = (void *)((btDynamicsWorld const *)arg1)->getWorldUserInfo();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_getSolverInfo__SWIG_0___(void * jarg1) {
  void * jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btContactSolverInfo *result = 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  {
    try {
      result = (btContactSolverInfo *) &(arg1)->getSolverInfo();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_addVehicle___(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  {
    try {
      (arg1)->addVehicle(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_removeVehicle___(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  {
    try {
      (arg1)->removeVehicle(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_addCharacter___(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  {
    try {
      (arg1)->addCharacter(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_removeCharacter___(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  {
    try {
      (arg1)->removeCharacter(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorldDoubleData_m_solverInfo_set___(void * jarg1, void * jarg2) {
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  btContactSolverInfoDoubleData arg2 ;
  btContactSolverInfoDoubleData *argp2 ;
  
  arg1 = (btDynamicsWorldDoubleData *)jarg1; 
  argp2 = (btContactSolverInfoDoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btContactSolverInfoDoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_solverInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btDynamicsWorldDoubleData_m_solverInfo_get___(void * jarg1) {
  void * jresult ;
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  btContactSolverInfoDoubleData result;
  
  arg1 = (btDynamicsWorldDoubleData *)jarg1; 
  result =  ((arg1)->m_solverInfo);
  jresult = new btContactSolverInfoDoubleData((const btContactSolverInfoDoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorldDoubleData_m_gravity_set___(void * jarg1, void * jarg2) {
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btDynamicsWorldDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_gravity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btDynamicsWorldDoubleData_m_gravity_get___(void * jarg1) {
  void * jresult ;
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btDynamicsWorldDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_gravity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btDynamicsWorldDoubleData___() {
  void * jresult ;
  btDynamicsWorldDoubleData *result = 0 ;
  
  {
    try {
      result = (btDynamicsWorldDoubleData *)new btDynamicsWorldDoubleData();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btDynamicsWorldDoubleData___(void * jarg1) {
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  
  arg1 = (btDynamicsWorldDoubleData *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorldFloatData_m_solverInfo_set___(void * jarg1, void * jarg2) {
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  btContactSolverInfoFloatData arg2 ;
  btContactSolverInfoFloatData *argp2 ;
  
  arg1 = (btDynamicsWorldFloatData *)jarg1; 
  argp2 = (btContactSolverInfoFloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btContactSolverInfoFloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_solverInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btDynamicsWorldFloatData_m_solverInfo_get___(void * jarg1) {
  void * jresult ;
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  btContactSolverInfoFloatData result;
  
  arg1 = (btDynamicsWorldFloatData *)jarg1; 
  result =  ((arg1)->m_solverInfo);
  jresult = new btContactSolverInfoFloatData((const btContactSolverInfoFloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_btDynamicsWorldFloatData_m_gravity_set___(void * jarg1, void * jarg2) {
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btDynamicsWorldFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_gravity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_btDynamicsWorldFloatData_m_gravity_get___(void * jarg1) {
  void * jresult ;
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btDynamicsWorldFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_gravity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_btDynamicsWorldFloatData___() {
  void * jresult ;
  btDynamicsWorldFloatData *result = 0 ;
  
  {
    try {
      result = (btDynamicsWorldFloatData *)new btDynamicsWorldFloatData();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_btDynamicsWorldFloatData___(void * jarg1) {
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  
  arg1 = (btDynamicsWorldFloatData *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT Ogre::Bullet::CollisionWorld * SWIGSTDCALL CSharp_orgfogre_DynamicsWorld_SWIGUpcast___(Ogre::Bullet::DynamicsWorld *jarg1) {
    return (Ogre::Bullet::CollisionWorld *)jarg1;
}

SWIGEXPORT btVector3 * SWIGSTDCALL CSharp_orgfogre_btVector4_SWIGUpcast___(btVector4 *jarg1) {
    return (btVector3 *)jarg1;
}

SWIGEXPORT btCollisionObject * SWIGSTDCALL CSharp_orgfogre_btRigidBody_SWIGUpcast___(btRigidBody *jarg1) {
    return (btCollisionObject *)jarg1;
}

SWIGEXPORT btCollisionWorld::RayResultCallback * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestRayResultCallback_SWIGUpcast___(btCollisionWorld::ClosestRayResultCallback *jarg1) {
    return (btCollisionWorld::RayResultCallback *)jarg1;
}

SWIGEXPORT btCollisionWorld::RayResultCallback * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_AllHitsRayResultCallback_SWIGUpcast___(btCollisionWorld::AllHitsRayResultCallback *jarg1) {
    return (btCollisionWorld::RayResultCallback *)jarg1;
}

SWIGEXPORT btCollisionWorld::ConvexResultCallback * SWIGSTDCALL CSharp_orgfogre_btCollisionWorld_ClosestConvexResultCallback_SWIGUpcast___(btCollisionWorld::ClosestConvexResultCallback *jarg1) {
    return (btCollisionWorld::ConvexResultCallback *)jarg1;
}

SWIGEXPORT btCollisionWorld * SWIGSTDCALL CSharp_orgfogre_btDynamicsWorld_SWIGUpcast___(btDynamicsWorld *jarg1) {
    return (btCollisionWorld *)jarg1;
}

#ifdef __cplusplus
}
#endif

