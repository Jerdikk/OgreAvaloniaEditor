//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class Ogre {
  public static string MOT_ENTITY {
    get {
      string ret = OgrePINVOKE.MOT_ENTITY_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MOT_LIGHT {
    get {
      string ret = OgrePINVOKE.MOT_LIGHT_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MOT_MANUAL_OBJECT {
    get {
      string ret = OgrePINVOKE.MOT_MANUAL_OBJECT_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MOT_PARTICLE_SYSTEM {
    get {
      string ret = OgrePINVOKE.MOT_PARTICLE_SYSTEM_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MOT_BILLBOARD_SET {
    get {
      string ret = OgrePINVOKE.MOT_BILLBOARD_SET_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MOT_BILLBOARD_CHAIN {
    get {
      string ret = OgrePINVOKE.MOT_BILLBOARD_CHAIN_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MOT_RIBBON_TRAIL {
    get {
      string ret = OgrePINVOKE.MOT_RIBBON_TRAIL_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MOT_RECTANGLE2D {
    get {
      string ret = OgrePINVOKE.MOT_RECTANGLE2D_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MOT_STATIC_GEOMETRY {
    get {
      string ret = OgrePINVOKE.MOT_STATIC_GEOMETRY_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MOT_CAMERA {
    get {
      string ret = OgrePINVOKE.MOT_CAMERA_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MOT_FRUSTRUM {
    get {
      string ret = OgrePINVOKE.MOT_FRUSTRUM_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MOT_MOVABLE_PLANE {
    get {
      string ret = OgrePINVOKE.MOT_MOVABLE_PLANE_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MOT_INSTANCE_BATCH {
    get {
      string ret = OgrePINVOKE.MOT_INSTANCE_BATCH_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MOT_INSTANCED_ENTITY {
    get {
      string ret = OgrePINVOKE.MOT_INSTANCED_ENTITY_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MOT_SIMPLE_RENDERABLE {
    get {
      string ret = OgrePINVOKE.MOT_SIMPLE_RENDERABLE_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint FastHash(string data, uint len, uint hashSoFar) {
    uint ret = OgrePINVOKE.FastHash__SWIG_0(data, len, hashSoFar);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint FastHash(string data, uint len) {
    uint ret = OgrePINVOKE.FastHash__SWIG_1(data, len);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string BLANKSTRING {
    get {
      string ret = OgrePINVOKE.BLANKSTRING_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int findCommandLineOpts(int numargs, SWIGTYPE_p_p_char argv, SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_t unaryOptList, NameValueMap binOptList) {
    int ret = OgrePINVOKE.findCommandLineOpts(numargs, SWIGTYPE_p_p_char.getCPtr(argv), SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_t.getCPtr(unaryOptList), NameValueMap.getCPtr(binOptList));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Radian __mul__(float a, Radian b) {
    Radian ret = new Radian(OgrePINVOKE.__mul____SWIG_0(a, Radian.getCPtr(b)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Radian __div__(float a, Radian b) {
    Radian ret = new Radian(OgrePINVOKE.__div____SWIG_0(a, Radian.getCPtr(b)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Degree __mul__(float a, Degree b) {
    Degree ret = new Degree(OgrePINVOKE.__mul____SWIG_1(a, Degree.getCPtr(b)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Degree __div__(float a, Degree b) {
    Degree ret = new Degree(OgrePINVOKE.__div____SWIG_1(a, Degree.getCPtr(b)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector3 __mul__(Matrix3 m, Vector3 v) {
    Vector3 ret = new Vector3(OgrePINVOKE.__mul____SWIG_2(Matrix3.getCPtr(m), Vector3.getCPtr(v)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Matrix4 __mul__(Matrix4 m, Matrix4 m2) {
    Matrix4 ret = new Matrix4(OgrePINVOKE.__mul____SWIG_3(Matrix4.getCPtr(m), Matrix4.getCPtr(m2)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Matrix4 __add__(Matrix4 m, Matrix4 m2) {
    Matrix4 ret = new Matrix4(OgrePINVOKE.__add__(Matrix4.getCPtr(m), Matrix4.getCPtr(m2)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Matrix4 __sub__(Matrix4 m, Matrix4 m2) {
    Matrix4 ret = new Matrix4(OgrePINVOKE.__sub__(Matrix4.getCPtr(m), Matrix4.getCPtr(m2)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Affine3 __mul__(Affine3 m, Affine3 m2) {
    Affine3 ret = new Affine3(OgrePINVOKE.__mul____SWIG_4(Affine3.getCPtr(m), Affine3.getCPtr(m2)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector3 __mul__(Matrix4 m, Vector3 v) {
    Vector3 ret = new Vector3(OgrePINVOKE.__mul____SWIG_5(Matrix4.getCPtr(m), Vector3.getCPtr(v)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector3 __mul__(Affine3 m, Vector3 v) {
    Vector3 ret = new Vector3(OgrePINVOKE.__mul____SWIG_6(Affine3.getCPtr(m), Vector3.getCPtr(v)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector4 __mul__(Matrix4 m, Vector4 v) {
    Vector4 ret = new Vector4(OgrePINVOKE.__mul____SWIG_7(Matrix4.getCPtr(m), Vector4.getCPtr(v)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector4 __mul__(Affine3 m, Vector4 v) {
    Vector4 ret = new Vector4(OgrePINVOKE.__mul____SWIG_8(Affine3.getCPtr(m), Vector4.getCPtr(v)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector4 __mul__(Vector4 v, Matrix4 mat) {
    Vector4 ret = new Vector4(OgrePINVOKE.__mul____SWIG_9(Vector4.getCPtr(v), Matrix4.getCPtr(mat)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Plane __mul__(Matrix4 mat, Plane p) {
    Plane ret = new Plane(OgrePINVOKE.__mul____SWIG_10(Matrix4.getCPtr(mat), Plane.getCPtr(p)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(PixelFormat v) {
    string ret = OgrePINVOKE.to_string__SWIG_0((int)v);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(GpuProgramType v) {
    string ret = OgrePINVOKE.to_string__SWIG_1((int)v);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(GPUVendor v) {
    string ret = OgrePINVOKE.to_string__SWIG_2((int)v);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string to_string(DriverVersion v) {
    string ret = OgrePINVOKE.to_string__SWIG_3(DriverVersion.getCPtr(v));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string RGN_DEFAULT {
    get {
      string ret = OgrePINVOKE.RGN_DEFAULT_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string RGN_INTERNAL {
    get {
      string ret = OgrePINVOKE.RGN_INTERNAL_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string RGN_AUTODETECT {
    get {
      string ret = OgrePINVOKE.RGN_AUTODETECT_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MSN_DEFAULT {
    get {
      string ret = OgrePINVOKE.MSN_DEFAULT_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MSN_SHADERGEN {
    get {
      string ret = OgrePINVOKE.MSN_SHADERGEN_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string SMT_DEFAULT {
    get {
      string ret = OgrePINVOKE.SMT_DEFAULT_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static readonly int OGRE_VERSION_MAJOR = OgrePINVOKE.OGRE_VERSION_MAJOR_get();
  public static readonly int OGRE_VERSION_MINOR = OgrePINVOKE.OGRE_VERSION_MINOR_get();
  public static readonly int OGRE_VERSION_PATCH = OgrePINVOKE.OGRE_VERSION_PATCH_get();
  public static readonly string OGRE_VERSION_SUFFIX = OgrePINVOKE.OGRE_VERSION_SUFFIX_get();
  public static readonly string OGRE_VERSION_NAME = OgrePINVOKE.OGRE_VERSION_NAME_get();
  public static readonly int OGRE_DEBUG_MODE = OgrePINVOKE.OGRE_DEBUG_MODE_get();
  public static readonly int OGRE_RESOURCEMANAGER_STRICT = OgrePINVOKE.OGRE_RESOURCEMANAGER_STRICT_get();
  public static readonly int OGRE_DOUBLE_PRECISION = OgrePINVOKE.OGRE_DOUBLE_PRECISION_get();
  public static readonly int OGRE_NODE_INHERIT_TRANSFORM = OgrePINVOKE.OGRE_NODE_INHERIT_TRANSFORM_get();
  public static readonly int OGRE_ASSERT_MODE = OgrePINVOKE.OGRE_ASSERT_MODE_get();
  public static readonly int OGRE_THREAD_SUPPORT = OgrePINVOKE.OGRE_THREAD_SUPPORT_get();
  public static readonly int OGRE_THREAD_PROVIDER = OgrePINVOKE.OGRE_THREAD_PROVIDER_get();
  public static readonly int OGRE_NO_MESHLOD = OgrePINVOKE.OGRE_NO_MESHLOD_get();
  public static readonly int OGRE_NO_DDS_CODEC = OgrePINVOKE.OGRE_NO_DDS_CODEC_get();
  public static readonly int OGRE_NO_PVRTC_CODEC = OgrePINVOKE.OGRE_NO_PVRTC_CODEC_get();
  public static readonly int OGRE_NO_ETC_CODEC = OgrePINVOKE.OGRE_NO_ETC_CODEC_get();
  public static readonly int OGRE_NO_ASTC_CODEC = OgrePINVOKE.OGRE_NO_ASTC_CODEC_get();
  public static readonly int OGRE_NO_ZIP_ARCHIVE = OgrePINVOKE.OGRE_NO_ZIP_ARCHIVE_get();
  public static readonly int OGRE_NO_TBB_SCHEDULER = OgrePINVOKE.OGRE_NO_TBB_SCHEDULER_get();
  public static readonly int OGRE_PROFILING = OgrePINVOKE.OGRE_PROFILING_get();
  public static readonly int OGRE_NO_QUAD_BUFFER_STEREO = OgrePINVOKE.OGRE_NO_QUAD_BUFFER_STEREO_get();
  public static readonly int OGRE_NO_LOCALE_STRCONVERT = OgrePINVOKE.OGRE_NO_LOCALE_STRCONVERT_get();
  public static readonly int OGRE_VERSION = OgrePINVOKE.OGRE_VERSION_get();
  public static readonly int OGRE_PLATFORM_WIN32 = OgrePINVOKE.OGRE_PLATFORM_WIN32_get();
  public static readonly int OGRE_PLATFORM_LINUX = OgrePINVOKE.OGRE_PLATFORM_LINUX_get();
  public static readonly int OGRE_PLATFORM_APPLE = OgrePINVOKE.OGRE_PLATFORM_APPLE_get();
  public static readonly int OGRE_PLATFORM_APPLE_IOS = OgrePINVOKE.OGRE_PLATFORM_APPLE_IOS_get();
  public static readonly int OGRE_PLATFORM_ANDROID = OgrePINVOKE.OGRE_PLATFORM_ANDROID_get();
  public static readonly int OGRE_PLATFORM_WINRT = OgrePINVOKE.OGRE_PLATFORM_WINRT_get();
  public static readonly int OGRE_PLATFORM_EMSCRIPTEN = OgrePINVOKE.OGRE_PLATFORM_EMSCRIPTEN_get();
  public static readonly int OGRE_COMPILER_MSVC = OgrePINVOKE.OGRE_COMPILER_MSVC_get();
  public static readonly int OGRE_COMPILER_GNUC = OgrePINVOKE.OGRE_COMPILER_GNUC_get();
  public static readonly int OGRE_COMPILER_CLANG = OgrePINVOKE.OGRE_COMPILER_CLANG_get();
  public static readonly int OGRE_ENDIAN_LITTLE = OgrePINVOKE.OGRE_ENDIAN_LITTLE_get();
  public static readonly int OGRE_ENDIAN_BIG = OgrePINVOKE.OGRE_ENDIAN_BIG_get();
  public static readonly int OGRE_ARCHITECTURE_32 = OgrePINVOKE.OGRE_ARCHITECTURE_32_get();
  public static readonly int OGRE_ARCHITECTURE_64 = OgrePINVOKE.OGRE_ARCHITECTURE_64_get();
  public static readonly int OGRE_CPU_UNKNOWN = OgrePINVOKE.OGRE_CPU_UNKNOWN_get();
  public static readonly int OGRE_CPU_X86 = OgrePINVOKE.OGRE_CPU_X86_get();
  public static readonly int OGRE_CPU_PPC = OgrePINVOKE.OGRE_CPU_PPC_get();
  public static readonly int OGRE_CPU_ARM = OgrePINVOKE.OGRE_CPU_ARM_get();
  public static readonly int OGRE_CPU_MIPS = OgrePINVOKE.OGRE_CPU_MIPS_get();
  public static readonly int OGRE_CPU = OgrePINVOKE.OGRE_CPU_get();
  public static readonly int OGRE_ENDIAN = OgrePINVOKE.OGRE_ENDIAN_get();
  public static readonly int OGRE_PLATFORM = OgrePINVOKE.OGRE_PLATFORM_get();
  public static readonly int OGRE_ARCH_TYPE = OgrePINVOKE.OGRE_ARCH_TYPE_get();
  public static readonly int OGRE_SIMD_ALIGNMENT = OgrePINVOKE.OGRE_SIMD_ALIGNMENT_get();
  public static readonly string OGRE_DEFAULT_LOCALE = OgrePINVOKE.OGRE_DEFAULT_LOCALE_get();
  public static readonly string OGRE_BUILD_SUFFIX = OgrePINVOKE.OGRE_BUILD_SUFFIX_get();
  public static readonly int OGRE_PRETEND_TEXTURE_UNITS = OgrePINVOKE.OGRE_PRETEND_TEXTURE_UNITS_get();
  public static readonly int OGRE_MAX_TEXTURE_COORD_SETS = OgrePINVOKE.OGRE_MAX_TEXTURE_COORD_SETS_get();
  public static readonly int OGRE_MAX_TEXTURE_LAYERS = OgrePINVOKE.OGRE_MAX_TEXTURE_LAYERS_get();
  public static readonly int OGRE_MAX_SIMULTANEOUS_LIGHTS = OgrePINVOKE.OGRE_MAX_SIMULTANEOUS_LIGHTS_get();
  public static readonly int OGRE_MAX_BLEND_WEIGHTS = OgrePINVOKE.OGRE_MAX_BLEND_WEIGHTS_get();
  public static readonly int OGRE_MAX_NUM_BONES = OgrePINVOKE.OGRE_MAX_NUM_BONES_get();
  public static readonly int OGRE_MAX_MULTIPLE_RENDER_TARGETS = OgrePINVOKE.OGRE_MAX_MULTIPLE_RENDER_TARGETS_get();
  public static readonly int GPT_COUNT = OgrePINVOKE.GPT_COUNT_get();

  public static readonly int CAPS_CATEGORY_SIZE = OgrePINVOKE.CAPS_CATEGORY_SIZE_get();
  public static readonly int OGRE_CAPS_BITSHIFT = OgrePINVOKE.OGRE_CAPS_BITSHIFT_get();
  public static readonly int CAPS_CATEGORY_MASK = OgrePINVOKE.CAPS_CATEGORY_MASK_get();
  public static readonly int ID_MATERIAL = OgrePINVOKE.ID_MATERIAL_get();
  public static readonly int ID_VERTEX_PROGRAM = OgrePINVOKE.ID_VERTEX_PROGRAM_get();
  public static readonly int ID_GEOMETRY_PROGRAM = OgrePINVOKE.ID_GEOMETRY_PROGRAM_get();
  public static readonly int ID_FRAGMENT_PROGRAM = OgrePINVOKE.ID_FRAGMENT_PROGRAM_get();
  public static readonly int ID_TECHNIQUE = OgrePINVOKE.ID_TECHNIQUE_get();
  public static readonly int ID_PASS = OgrePINVOKE.ID_PASS_get();
  public static readonly int ID_TEXTURE_UNIT = OgrePINVOKE.ID_TEXTURE_UNIT_get();
  public static readonly int ID_VERTEX_PROGRAM_REF = OgrePINVOKE.ID_VERTEX_PROGRAM_REF_get();
  public static readonly int ID_GEOMETRY_PROGRAM_REF = OgrePINVOKE.ID_GEOMETRY_PROGRAM_REF_get();
  public static readonly int ID_FRAGMENT_PROGRAM_REF = OgrePINVOKE.ID_FRAGMENT_PROGRAM_REF_get();
  public static readonly int ID_SHADOW_CASTER_VERTEX_PROGRAM_REF = OgrePINVOKE.ID_SHADOW_CASTER_VERTEX_PROGRAM_REF_get();
  public static readonly int ID_SHADOW_CASTER_FRAGMENT_PROGRAM_REF = OgrePINVOKE.ID_SHADOW_CASTER_FRAGMENT_PROGRAM_REF_get();
  public static readonly int ID_SHADOW_RECEIVER_VERTEX_PROGRAM_REF = OgrePINVOKE.ID_SHADOW_RECEIVER_VERTEX_PROGRAM_REF_get();
  public static readonly int ID_SHADOW_RECEIVER_FRAGMENT_PROGRAM_REF = OgrePINVOKE.ID_SHADOW_RECEIVER_FRAGMENT_PROGRAM_REF_get();
  public static readonly int ID_SHADOW_CASTER_MATERIAL = OgrePINVOKE.ID_SHADOW_CASTER_MATERIAL_get();
  public static readonly int ID_SHADOW_RECEIVER_MATERIAL = OgrePINVOKE.ID_SHADOW_RECEIVER_MATERIAL_get();
  public static readonly int ID_LOD_VALUES = OgrePINVOKE.ID_LOD_VALUES_get();
  public static readonly int ID_LOD_STRATEGY = OgrePINVOKE.ID_LOD_STRATEGY_get();
  public static readonly int ID_LOD_DISTANCES = OgrePINVOKE.ID_LOD_DISTANCES_get();
  public static readonly int ID_RECEIVE_SHADOWS = OgrePINVOKE.ID_RECEIVE_SHADOWS_get();
  public static readonly int ID_TRANSPARENCY_CASTS_SHADOWS = OgrePINVOKE.ID_TRANSPARENCY_CASTS_SHADOWS_get();
  public static readonly int ID_SET_TEXTURE_ALIAS = OgrePINVOKE.ID_SET_TEXTURE_ALIAS_get();
  public static readonly int ID_SOURCE = OgrePINVOKE.ID_SOURCE_get();
  public static readonly int ID_SYNTAX = OgrePINVOKE.ID_SYNTAX_get();
  public static readonly int ID_DEFAULT_PARAMS = OgrePINVOKE.ID_DEFAULT_PARAMS_get();
  public static readonly int ID_PARAM_INDEXED = OgrePINVOKE.ID_PARAM_INDEXED_get();
  public static readonly int ID_PARAM_NAMED = OgrePINVOKE.ID_PARAM_NAMED_get();
  public static readonly int ID_PARAM_INDEXED_AUTO = OgrePINVOKE.ID_PARAM_INDEXED_AUTO_get();
  public static readonly int ID_PARAM_NAMED_AUTO = OgrePINVOKE.ID_PARAM_NAMED_AUTO_get();
  public static readonly int ID_SCHEME = OgrePINVOKE.ID_SCHEME_get();
  public static readonly int ID_LOD_INDEX = OgrePINVOKE.ID_LOD_INDEX_get();
  public static readonly int ID_GPU_VENDOR_RULE = OgrePINVOKE.ID_GPU_VENDOR_RULE_get();
  public static readonly int ID_GPU_DEVICE_RULE = OgrePINVOKE.ID_GPU_DEVICE_RULE_get();
  public static readonly int ID_INCLUDE = OgrePINVOKE.ID_INCLUDE_get();
  public static readonly int ID_EXCLUDE = OgrePINVOKE.ID_EXCLUDE_get();
  public static readonly int ID_AMBIENT = OgrePINVOKE.ID_AMBIENT_get();
  public static readonly int ID_DIFFUSE = OgrePINVOKE.ID_DIFFUSE_get();
  public static readonly int ID_SPECULAR = OgrePINVOKE.ID_SPECULAR_get();
  public static readonly int ID_EMISSIVE = OgrePINVOKE.ID_EMISSIVE_get();
  public static readonly int ID_VERTEXCOLOUR = OgrePINVOKE.ID_VERTEXCOLOUR_get();
  public static readonly int ID_SCENE_BLEND = OgrePINVOKE.ID_SCENE_BLEND_get();
  public static readonly int ID_COLOUR_BLEND = OgrePINVOKE.ID_COLOUR_BLEND_get();
  public static readonly int ID_ONE = OgrePINVOKE.ID_ONE_get();
  public static readonly int ID_ZERO = OgrePINVOKE.ID_ZERO_get();
  public static readonly int ID_DEST_COLOUR = OgrePINVOKE.ID_DEST_COLOUR_get();
  public static readonly int ID_SRC_COLOUR = OgrePINVOKE.ID_SRC_COLOUR_get();
  public static readonly int ID_ONE_MINUS_DEST_COLOUR = OgrePINVOKE.ID_ONE_MINUS_DEST_COLOUR_get();
  public static readonly int ID_ONE_MINUS_SRC_COLOUR = OgrePINVOKE.ID_ONE_MINUS_SRC_COLOUR_get();
  public static readonly int ID_DEST_ALPHA = OgrePINVOKE.ID_DEST_ALPHA_get();
  public static readonly int ID_SRC_ALPHA = OgrePINVOKE.ID_SRC_ALPHA_get();
  public static readonly int ID_ONE_MINUS_DEST_ALPHA = OgrePINVOKE.ID_ONE_MINUS_DEST_ALPHA_get();
  public static readonly int ID_ONE_MINUS_SRC_ALPHA = OgrePINVOKE.ID_ONE_MINUS_SRC_ALPHA_get();
  public static readonly int ID_SEPARATE_SCENE_BLEND = OgrePINVOKE.ID_SEPARATE_SCENE_BLEND_get();
  public static readonly int ID_SCENE_BLEND_OP = OgrePINVOKE.ID_SCENE_BLEND_OP_get();
  public static readonly int ID_REVERSE_SUBTRACT = OgrePINVOKE.ID_REVERSE_SUBTRACT_get();
  public static readonly int ID_MIN = OgrePINVOKE.ID_MIN_get();
  public static readonly int ID_MAX = OgrePINVOKE.ID_MAX_get();
  public static readonly int ID_SEPARATE_SCENE_BLEND_OP = OgrePINVOKE.ID_SEPARATE_SCENE_BLEND_OP_get();
  public static readonly int ID_DEPTH_CHECK = OgrePINVOKE.ID_DEPTH_CHECK_get();
  public static readonly int ID_DEPTH_WRITE = OgrePINVOKE.ID_DEPTH_WRITE_get();
  public static readonly int ID_DEPTH_FUNC = OgrePINVOKE.ID_DEPTH_FUNC_get();
  public static readonly int ID_DEPTH_BIAS = OgrePINVOKE.ID_DEPTH_BIAS_get();
  public static readonly int ID_ITERATION_DEPTH_BIAS = OgrePINVOKE.ID_ITERATION_DEPTH_BIAS_get();
  public static readonly int ID_ALWAYS_FAIL = OgrePINVOKE.ID_ALWAYS_FAIL_get();
  public static readonly int ID_ALWAYS_PASS = OgrePINVOKE.ID_ALWAYS_PASS_get();
  public static readonly int ID_LESS_EQUAL = OgrePINVOKE.ID_LESS_EQUAL_get();
  public static readonly int ID_LESS = OgrePINVOKE.ID_LESS_get();
  public static readonly int ID_EQUAL = OgrePINVOKE.ID_EQUAL_get();
  public static readonly int ID_NOT_EQUAL = OgrePINVOKE.ID_NOT_EQUAL_get();
  public static readonly int ID_GREATER_EQUAL = OgrePINVOKE.ID_GREATER_EQUAL_get();
  public static readonly int ID_GREATER = OgrePINVOKE.ID_GREATER_get();
  public static readonly int ID_ALPHA_REJECTION = OgrePINVOKE.ID_ALPHA_REJECTION_get();
  public static readonly int ID_ALPHA_TO_COVERAGE = OgrePINVOKE.ID_ALPHA_TO_COVERAGE_get();
  public static readonly int ID_LIGHT_SCISSOR = OgrePINVOKE.ID_LIGHT_SCISSOR_get();
  public static readonly int ID_LIGHT_CLIP_PLANES = OgrePINVOKE.ID_LIGHT_CLIP_PLANES_get();
  public static readonly int ID_TRANSPARENT_SORTING = OgrePINVOKE.ID_TRANSPARENT_SORTING_get();
  public static readonly int ID_ILLUMINATION_STAGE = OgrePINVOKE.ID_ILLUMINATION_STAGE_get();
  public static readonly int ID_DECAL = OgrePINVOKE.ID_DECAL_get();
  public static readonly int ID_CULL_HARDWARE = OgrePINVOKE.ID_CULL_HARDWARE_get();
  public static readonly int ID_CLOCKWISE = OgrePINVOKE.ID_CLOCKWISE_get();
  public static readonly int ID_ANTICLOCKWISE = OgrePINVOKE.ID_ANTICLOCKWISE_get();
  public static readonly int ID_CULL_SOFTWARE = OgrePINVOKE.ID_CULL_SOFTWARE_get();
  public static readonly int ID_BACK = OgrePINVOKE.ID_BACK_get();
  public static readonly int ID_FRONT = OgrePINVOKE.ID_FRONT_get();
  public static readonly int ID_LIGHTING = OgrePINVOKE.ID_LIGHTING_get();
  public static readonly int ID_SHADING = OgrePINVOKE.ID_SHADING_get();
  public static readonly int ID_FLAT = OgrePINVOKE.ID_FLAT_get();
  public static readonly int ID_GOURAUD = OgrePINVOKE.ID_GOURAUD_get();
  public static readonly int ID_PHONG = OgrePINVOKE.ID_PHONG_get();
  public static readonly int ID_POLYGON_MODE = OgrePINVOKE.ID_POLYGON_MODE_get();
  public static readonly int ID_SOLID = OgrePINVOKE.ID_SOLID_get();
  public static readonly int ID_WIREFRAME = OgrePINVOKE.ID_WIREFRAME_get();
  public static readonly int ID_POINTS = OgrePINVOKE.ID_POINTS_get();
  public static readonly int ID_POLYGON_MODE_OVERRIDEABLE = OgrePINVOKE.ID_POLYGON_MODE_OVERRIDEABLE_get();
  public static readonly int ID_FOG_OVERRIDE = OgrePINVOKE.ID_FOG_OVERRIDE_get();
  public static readonly int ID_NONE = OgrePINVOKE.ID_NONE_get();
  public static readonly int ID_LINEAR = OgrePINVOKE.ID_LINEAR_get();
  public static readonly int ID_EXP = OgrePINVOKE.ID_EXP_get();
  public static readonly int ID_EXP2 = OgrePINVOKE.ID_EXP2_get();
  public static readonly int ID_COLOUR_WRITE = OgrePINVOKE.ID_COLOUR_WRITE_get();
  public static readonly int ID_MAX_LIGHTS = OgrePINVOKE.ID_MAX_LIGHTS_get();
  public static readonly int ID_START_LIGHT = OgrePINVOKE.ID_START_LIGHT_get();
  public static readonly int ID_ITERATION = OgrePINVOKE.ID_ITERATION_get();
  public static readonly int ID_ONCE = OgrePINVOKE.ID_ONCE_get();
  public static readonly int ID_ONCE_PER_LIGHT = OgrePINVOKE.ID_ONCE_PER_LIGHT_get();
  public static readonly int ID_PER_LIGHT = OgrePINVOKE.ID_PER_LIGHT_get();
  public static readonly int ID_PER_N_LIGHTS = OgrePINVOKE.ID_PER_N_LIGHTS_get();
  public static readonly int ID_POINT = OgrePINVOKE.ID_POINT_get();
  public static readonly int ID_SPOT = OgrePINVOKE.ID_SPOT_get();
  public static readonly int ID_DIRECTIONAL = OgrePINVOKE.ID_DIRECTIONAL_get();
  public static readonly int ID_LIGHT_MASK = OgrePINVOKE.ID_LIGHT_MASK_get();
  public static readonly int ID_POINT_SIZE = OgrePINVOKE.ID_POINT_SIZE_get();
  public static readonly int ID_POINT_SPRITES = OgrePINVOKE.ID_POINT_SPRITES_get();
  public static readonly int ID_POINT_SIZE_ATTENUATION = OgrePINVOKE.ID_POINT_SIZE_ATTENUATION_get();
  public static readonly int ID_POINT_SIZE_MIN = OgrePINVOKE.ID_POINT_SIZE_MIN_get();
  public static readonly int ID_POINT_SIZE_MAX = OgrePINVOKE.ID_POINT_SIZE_MAX_get();
  public static readonly int ID_TEXTURE_ALIAS = OgrePINVOKE.ID_TEXTURE_ALIAS_get();
  public static readonly int ID_TEXTURE = OgrePINVOKE.ID_TEXTURE_get();
  public static readonly int ID_1D = OgrePINVOKE.ID_1D_get();
  public static readonly int ID_2D = OgrePINVOKE.ID_2D_get();
  public static readonly int ID_3D = OgrePINVOKE.ID_3D_get();
  public static readonly int ID_CUBIC = OgrePINVOKE.ID_CUBIC_get();
  public static readonly int ID_2DARRAY = OgrePINVOKE.ID_2DARRAY_get();
  public static readonly int ID_UNLIMITED = OgrePINVOKE.ID_UNLIMITED_get();
  public static readonly int ID_ALPHA = OgrePINVOKE.ID_ALPHA_get();
  public static readonly int ID_GAMMA = OgrePINVOKE.ID_GAMMA_get();
  public static readonly int ID_ANIM_TEXTURE = OgrePINVOKE.ID_ANIM_TEXTURE_get();
  public static readonly int ID_CUBIC_TEXTURE = OgrePINVOKE.ID_CUBIC_TEXTURE_get();
  public static readonly int ID_SEPARATE_UV = OgrePINVOKE.ID_SEPARATE_UV_get();
  public static readonly int ID_COMBINED_UVW = OgrePINVOKE.ID_COMBINED_UVW_get();
  public static readonly int ID_TEX_COORD_SET = OgrePINVOKE.ID_TEX_COORD_SET_get();
  public static readonly int ID_TEX_ADDRESS_MODE = OgrePINVOKE.ID_TEX_ADDRESS_MODE_get();
  public static readonly int ID_WRAP = OgrePINVOKE.ID_WRAP_get();
  public static readonly int ID_CLAMP = OgrePINVOKE.ID_CLAMP_get();
  public static readonly int ID_BORDER = OgrePINVOKE.ID_BORDER_get();
  public static readonly int ID_MIRROR = OgrePINVOKE.ID_MIRROR_get();
  public static readonly int ID_TEX_BORDER_COLOUR = OgrePINVOKE.ID_TEX_BORDER_COLOUR_get();
  public static readonly int ID_FILTERING = OgrePINVOKE.ID_FILTERING_get();
  public static readonly int ID_BILINEAR = OgrePINVOKE.ID_BILINEAR_get();
  public static readonly int ID_TRILINEAR = OgrePINVOKE.ID_TRILINEAR_get();
  public static readonly int ID_ANISOTROPIC = OgrePINVOKE.ID_ANISOTROPIC_get();
  public static readonly int ID_CMPTEST = OgrePINVOKE.ID_CMPTEST_get();
  public static readonly int ID_ON = OgrePINVOKE.ID_ON_get();
  public static readonly int ID_OFF = OgrePINVOKE.ID_OFF_get();
  public static readonly int ID_CMPFUNC = OgrePINVOKE.ID_CMPFUNC_get();
  public static readonly int ID_MAX_ANISOTROPY = OgrePINVOKE.ID_MAX_ANISOTROPY_get();
  public static readonly int ID_MIPMAP_BIAS = OgrePINVOKE.ID_MIPMAP_BIAS_get();
  public static readonly int ID_COLOUR_OP = OgrePINVOKE.ID_COLOUR_OP_get();
  public static readonly int ID_REPLACE = OgrePINVOKE.ID_REPLACE_get();
  public static readonly int ID_ADD = OgrePINVOKE.ID_ADD_get();
  public static readonly int ID_MODULATE = OgrePINVOKE.ID_MODULATE_get();
  public static readonly int ID_ALPHA_BLEND = OgrePINVOKE.ID_ALPHA_BLEND_get();
  public static readonly int ID_COLOUR_OP_EX = OgrePINVOKE.ID_COLOUR_OP_EX_get();
  public static readonly int ID_SOURCE1 = OgrePINVOKE.ID_SOURCE1_get();
  public static readonly int ID_SOURCE2 = OgrePINVOKE.ID_SOURCE2_get();
  public static readonly int ID_MODULATE_X2 = OgrePINVOKE.ID_MODULATE_X2_get();
  public static readonly int ID_MODULATE_X4 = OgrePINVOKE.ID_MODULATE_X4_get();
  public static readonly int ID_ADD_SIGNED = OgrePINVOKE.ID_ADD_SIGNED_get();
  public static readonly int ID_ADD_SMOOTH = OgrePINVOKE.ID_ADD_SMOOTH_get();
  public static readonly int ID_SUBTRACT = OgrePINVOKE.ID_SUBTRACT_get();
  public static readonly int ID_BLEND_DIFFUSE_COLOUR = OgrePINVOKE.ID_BLEND_DIFFUSE_COLOUR_get();
  public static readonly int ID_BLEND_DIFFUSE_ALPHA = OgrePINVOKE.ID_BLEND_DIFFUSE_ALPHA_get();
  public static readonly int ID_BLEND_TEXTURE_ALPHA = OgrePINVOKE.ID_BLEND_TEXTURE_ALPHA_get();
  public static readonly int ID_BLEND_CURRENT_ALPHA = OgrePINVOKE.ID_BLEND_CURRENT_ALPHA_get();
  public static readonly int ID_BLEND_MANUAL = OgrePINVOKE.ID_BLEND_MANUAL_get();
  public static readonly int ID_DOT_PRODUCT = OgrePINVOKE.ID_DOT_PRODUCT_get();
  public static readonly int ID_SRC_CURRENT = OgrePINVOKE.ID_SRC_CURRENT_get();
  public static readonly int ID_SRC_TEXTURE = OgrePINVOKE.ID_SRC_TEXTURE_get();
  public static readonly int ID_SRC_DIFFUSE = OgrePINVOKE.ID_SRC_DIFFUSE_get();
  public static readonly int ID_SRC_SPECULAR = OgrePINVOKE.ID_SRC_SPECULAR_get();
  public static readonly int ID_SRC_MANUAL = OgrePINVOKE.ID_SRC_MANUAL_get();
  public static readonly int ID_COLOUR_OP_MULTIPASS_FALLBACK = OgrePINVOKE.ID_COLOUR_OP_MULTIPASS_FALLBACK_get();
  public static readonly int ID_ALPHA_OP_EX = OgrePINVOKE.ID_ALPHA_OP_EX_get();
  public static readonly int ID_ENV_MAP = OgrePINVOKE.ID_ENV_MAP_get();
  public static readonly int ID_SPHERICAL = OgrePINVOKE.ID_SPHERICAL_get();
  public static readonly int ID_PLANAR = OgrePINVOKE.ID_PLANAR_get();
  public static readonly int ID_CUBIC_REFLECTION = OgrePINVOKE.ID_CUBIC_REFLECTION_get();
  public static readonly int ID_CUBIC_NORMAL = OgrePINVOKE.ID_CUBIC_NORMAL_get();
  public static readonly int ID_SCROLL = OgrePINVOKE.ID_SCROLL_get();
  public static readonly int ID_SCROLL_ANIM = OgrePINVOKE.ID_SCROLL_ANIM_get();
  public static readonly int ID_ROTATE = OgrePINVOKE.ID_ROTATE_get();
  public static readonly int ID_ROTATE_ANIM = OgrePINVOKE.ID_ROTATE_ANIM_get();
  public static readonly int ID_SCALE = OgrePINVOKE.ID_SCALE_get();
  public static readonly int ID_WAVE_XFORM = OgrePINVOKE.ID_WAVE_XFORM_get();
  public static readonly int ID_SCROLL_X = OgrePINVOKE.ID_SCROLL_X_get();
  public static readonly int ID_SCROLL_Y = OgrePINVOKE.ID_SCROLL_Y_get();
  public static readonly int ID_SCALE_X = OgrePINVOKE.ID_SCALE_X_get();
  public static readonly int ID_SCALE_Y = OgrePINVOKE.ID_SCALE_Y_get();
  public static readonly int ID_SINE = OgrePINVOKE.ID_SINE_get();
  public static readonly int ID_TRIANGLE = OgrePINVOKE.ID_TRIANGLE_get();
  public static readonly int ID_SQUARE = OgrePINVOKE.ID_SQUARE_get();
  public static readonly int ID_SAWTOOTH = OgrePINVOKE.ID_SAWTOOTH_get();
  public static readonly int ID_INVERSE_SAWTOOTH = OgrePINVOKE.ID_INVERSE_SAWTOOTH_get();
  public static readonly int ID_TRANSFORM = OgrePINVOKE.ID_TRANSFORM_get();
  public static readonly int ID_CONTENT_TYPE = OgrePINVOKE.ID_CONTENT_TYPE_get();
  public static readonly int ID_NAMED = OgrePINVOKE.ID_NAMED_get();
  public static readonly int ID_SHADOW = OgrePINVOKE.ID_SHADOW_get();
  public static readonly int ID_TEXTURE_SOURCE = OgrePINVOKE.ID_TEXTURE_SOURCE_get();
  public static readonly int ID_SHARED_PARAMS = OgrePINVOKE.ID_SHARED_PARAMS_get();
  public static readonly int ID_SHARED_PARAM_NAMED = OgrePINVOKE.ID_SHARED_PARAM_NAMED_get();
  public static readonly int ID_SHARED_PARAMS_REF = OgrePINVOKE.ID_SHARED_PARAMS_REF_get();
  public static readonly int ID_PARTICLE_SYSTEM = OgrePINVOKE.ID_PARTICLE_SYSTEM_get();
  public static readonly int ID_EMITTER = OgrePINVOKE.ID_EMITTER_get();
  public static readonly int ID_AFFECTOR = OgrePINVOKE.ID_AFFECTOR_get();
  public static readonly int ID_COMPOSITOR = OgrePINVOKE.ID_COMPOSITOR_get();
  public static readonly int ID_TARGET = OgrePINVOKE.ID_TARGET_get();
  public static readonly int ID_TARGET_OUTPUT = OgrePINVOKE.ID_TARGET_OUTPUT_get();
  public static readonly int ID_INPUT = OgrePINVOKE.ID_INPUT_get();
  public static readonly int ID_PREVIOUS = OgrePINVOKE.ID_PREVIOUS_get();
  public static readonly int ID_TARGET_WIDTH = OgrePINVOKE.ID_TARGET_WIDTH_get();
  public static readonly int ID_TARGET_HEIGHT = OgrePINVOKE.ID_TARGET_HEIGHT_get();
  public static readonly int ID_TARGET_WIDTH_SCALED = OgrePINVOKE.ID_TARGET_WIDTH_SCALED_get();
  public static readonly int ID_TARGET_HEIGHT_SCALED = OgrePINVOKE.ID_TARGET_HEIGHT_SCALED_get();
  public static readonly int ID_COMPOSITOR_LOGIC = OgrePINVOKE.ID_COMPOSITOR_LOGIC_get();
  public static readonly int ID_TEXTURE_REF = OgrePINVOKE.ID_TEXTURE_REF_get();
  public static readonly int ID_SCOPE_LOCAL = OgrePINVOKE.ID_SCOPE_LOCAL_get();
  public static readonly int ID_SCOPE_CHAIN = OgrePINVOKE.ID_SCOPE_CHAIN_get();
  public static readonly int ID_SCOPE_GLOBAL = OgrePINVOKE.ID_SCOPE_GLOBAL_get();
  public static readonly int ID_POOLED = OgrePINVOKE.ID_POOLED_get();
  public static readonly int ID_NO_FSAA = OgrePINVOKE.ID_NO_FSAA_get();
  public static readonly int ID_DEPTH_POOL = OgrePINVOKE.ID_DEPTH_POOL_get();
  public static readonly int ID_ONLY_INITIAL = OgrePINVOKE.ID_ONLY_INITIAL_get();
  public static readonly int ID_VISIBILITY_MASK = OgrePINVOKE.ID_VISIBILITY_MASK_get();
  public static readonly int ID_LOD_BIAS = OgrePINVOKE.ID_LOD_BIAS_get();
  public static readonly int ID_MATERIAL_SCHEME = OgrePINVOKE.ID_MATERIAL_SCHEME_get();
  public static readonly int ID_SHADOWS_ENABLED = OgrePINVOKE.ID_SHADOWS_ENABLED_get();
  public static readonly int ID_CLEAR = OgrePINVOKE.ID_CLEAR_get();
  public static readonly int ID_STENCIL = OgrePINVOKE.ID_STENCIL_get();
  public static readonly int ID_RENDER_SCENE = OgrePINVOKE.ID_RENDER_SCENE_get();
  public static readonly int ID_RENDER_QUAD = OgrePINVOKE.ID_RENDER_QUAD_get();
  public static readonly int ID_IDENTIFIER = OgrePINVOKE.ID_IDENTIFIER_get();
  public static readonly int ID_FIRST_RENDER_QUEUE = OgrePINVOKE.ID_FIRST_RENDER_QUEUE_get();
  public static readonly int ID_LAST_RENDER_QUEUE = OgrePINVOKE.ID_LAST_RENDER_QUEUE_get();
  public static readonly int ID_QUAD_NORMALS = OgrePINVOKE.ID_QUAD_NORMALS_get();
  public static readonly int ID_CAMERA_FAR_CORNERS_VIEW_SPACE = OgrePINVOKE.ID_CAMERA_FAR_CORNERS_VIEW_SPACE_get();
  public static readonly int ID_CAMERA_FAR_CORNERS_WORLD_SPACE = OgrePINVOKE.ID_CAMERA_FAR_CORNERS_WORLD_SPACE_get();
  public static readonly int ID_BUFFERS = OgrePINVOKE.ID_BUFFERS_get();
  public static readonly int ID_COLOUR = OgrePINVOKE.ID_COLOUR_get();
  public static readonly int ID_DEPTH = OgrePINVOKE.ID_DEPTH_get();
  public static readonly int ID_COLOUR_VALUE = OgrePINVOKE.ID_COLOUR_VALUE_get();
  public static readonly int ID_DEPTH_VALUE = OgrePINVOKE.ID_DEPTH_VALUE_get();
  public static readonly int ID_STENCIL_VALUE = OgrePINVOKE.ID_STENCIL_VALUE_get();
  public static readonly int ID_CHECK = OgrePINVOKE.ID_CHECK_get();
  public static readonly int ID_COMP_FUNC = OgrePINVOKE.ID_COMP_FUNC_get();
  public static readonly int ID_REF_VALUE = OgrePINVOKE.ID_REF_VALUE_get();
  public static readonly int ID_MASK = OgrePINVOKE.ID_MASK_get();
  public static readonly int ID_FAIL_OP = OgrePINVOKE.ID_FAIL_OP_get();
  public static readonly int ID_KEEP = OgrePINVOKE.ID_KEEP_get();
  public static readonly int ID_INCREMENT = OgrePINVOKE.ID_INCREMENT_get();
  public static readonly int ID_DECREMENT = OgrePINVOKE.ID_DECREMENT_get();
  public static readonly int ID_INCREMENT_WRAP = OgrePINVOKE.ID_INCREMENT_WRAP_get();
  public static readonly int ID_DECREMENT_WRAP = OgrePINVOKE.ID_DECREMENT_WRAP_get();
  public static readonly int ID_INVERT = OgrePINVOKE.ID_INVERT_get();
  public static readonly int ID_DEPTH_FAIL_OP = OgrePINVOKE.ID_DEPTH_FAIL_OP_get();
  public static readonly int ID_PASS_OP = OgrePINVOKE.ID_PASS_OP_get();
  public static readonly int ID_TWO_SIDED = OgrePINVOKE.ID_TWO_SIDED_get();
  public static readonly int ID_TESSELLATION_HULL_PROGRAM = OgrePINVOKE.ID_TESSELLATION_HULL_PROGRAM_get();
  public static readonly int ID_TESSELLATION_DOMAIN_PROGRAM = OgrePINVOKE.ID_TESSELLATION_DOMAIN_PROGRAM_get();
  public static readonly int ID_COMPUTE_PROGRAM = OgrePINVOKE.ID_COMPUTE_PROGRAM_get();
  public static readonly int ID_TESSELLATION_HULL_PROGRAM_REF = OgrePINVOKE.ID_TESSELLATION_HULL_PROGRAM_REF_get();
  public static readonly int ID_TESSELLATION_DOMAIN_PROGRAM_REF = OgrePINVOKE.ID_TESSELLATION_DOMAIN_PROGRAM_REF_get();
  public static readonly int ID_COMPUTE_PROGRAM_REF = OgrePINVOKE.ID_COMPUTE_PROGRAM_REF_get();
  public static readonly int ID_GEOMETRY = OgrePINVOKE.ID_GEOMETRY_get();
  public static readonly int ID_TESSELLATION_HULL = OgrePINVOKE.ID_TESSELLATION_HULL_get();
  public static readonly int ID_TESSELLATION_DOMAIN = OgrePINVOKE.ID_TESSELLATION_DOMAIN_get();
  public static readonly int ID_COMPUTE = OgrePINVOKE.ID_COMPUTE_get();
  public static readonly int ID_LINE_WIDTH = OgrePINVOKE.ID_LINE_WIDTH_get();
  public static readonly int ID_SAMPLER = OgrePINVOKE.ID_SAMPLER_get();
  public static readonly int ID_SAMPLER_REF = OgrePINVOKE.ID_SAMPLER_REF_get();
  public static readonly int ID_THREAD_GROUPS = OgrePINVOKE.ID_THREAD_GROUPS_get();
  public static readonly int ID_RENDER_CUSTOM = OgrePINVOKE.ID_RENDER_CUSTOM_get();
  public static readonly int ID_AUTO = OgrePINVOKE.ID_AUTO_get();
  public static readonly int ID_CAMERA = OgrePINVOKE.ID_CAMERA_get();
  public static readonly int ID_ALIGN_TO_FACE = OgrePINVOKE.ID_ALIGN_TO_FACE_get();
  public static readonly int ID_UNORDERED_ACCESS_MIP = OgrePINVOKE.ID_UNORDERED_ACCESS_MIP_get();
  public static readonly int ID_END_BUILTIN_IDS = OgrePINVOKE.ID_END_BUILTIN_IDS_get();

  public static readonly int OGRE_NUM_RENDERTARGET_GROUPS = OgrePINVOKE.OGRE_NUM_RENDERTARGET_GROUPS_get();
  public static readonly int OGRE_DEFAULT_RT_GROUP = OgrePINVOKE.OGRE_DEFAULT_RT_GROUP_get();
  public static readonly int OGRE_REND_TO_TEX_RT_GROUP = OgrePINVOKE.OGRE_REND_TO_TEX_RT_GROUP_get();
}

}
