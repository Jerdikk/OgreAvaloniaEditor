//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class MaterialManager : ResourceManager {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal MaterialManager(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.MaterialManager_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MaterialManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_MaterialManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public class MaterialManager_Listener : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal MaterialManager_Listener(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MaterialManager_Listener obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~MaterialManager_Listener() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_MaterialManager_MaterialManager_Listener(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public virtual Technique handleSchemeNotFound(ushort schemeIndex, string schemeName, Material originalMaterial, ushort lodIndex, Renderable rend) {
      global::System.IntPtr cPtr = OgrePINVOKE.MaterialManager_MaterialManager_Listener_handleSchemeNotFound(swigCPtr, schemeIndex, schemeName, Material.getCPtr(originalMaterial), lodIndex, Renderable.getCPtr(rend));
      Technique ret = (cPtr == global::System.IntPtr.Zero) ? null : new Technique(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public virtual bool afterIlluminationPassesCreated(Technique technique) {
      bool ret = (SwigDerivedClassHasMethod("afterIlluminationPassesCreated", swigMethodTypes1) ? OgrePINVOKE.MaterialManager_MaterialManager_Listener_afterIlluminationPassesCreatedSwigExplicitMaterialManager_Listener(swigCPtr, Technique.getCPtr(technique)) : OgrePINVOKE.MaterialManager_MaterialManager_Listener_afterIlluminationPassesCreated(swigCPtr, Technique.getCPtr(technique)));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public virtual bool beforeIlluminationPassesCleared(Technique technique) {
      bool ret = (SwigDerivedClassHasMethod("beforeIlluminationPassesCleared", swigMethodTypes2) ? OgrePINVOKE.MaterialManager_MaterialManager_Listener_beforeIlluminationPassesClearedSwigExplicitMaterialManager_Listener(swigCPtr, Technique.getCPtr(technique)) : OgrePINVOKE.MaterialManager_MaterialManager_Listener_beforeIlluminationPassesCleared(swigCPtr, Technique.getCPtr(technique)));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public MaterialManager_Listener() : this(OgrePINVOKE.new_MaterialManager_Listener(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      SwigDirectorConnect();
    }
  
    private void SwigDirectorConnect() {
      if (SwigDerivedClassHasMethod("handleSchemeNotFound", swigMethodTypes0))
        swigDelegate0 = new SwigDelegateMaterialManager_Listener_0(SwigDirectorMethodhandleSchemeNotFound);
      if (SwigDerivedClassHasMethod("afterIlluminationPassesCreated", swigMethodTypes1))
        swigDelegate1 = new SwigDelegateMaterialManager_Listener_1(SwigDirectorMethodafterIlluminationPassesCreated);
      if (SwigDerivedClassHasMethod("beforeIlluminationPassesCleared", swigMethodTypes2))
        swigDelegate2 = new SwigDelegateMaterialManager_Listener_2(SwigDirectorMethodbeforeIlluminationPassesCleared);
      OgrePINVOKE.MaterialManager_MaterialManager_Listener_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2);
    }
  
    private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
      global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
      bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(MaterialManager_Listener));
      return hasDerivedMethod;
    }
  
    private global::System.IntPtr SwigDirectorMethodhandleSchemeNotFound(ushort schemeIndex, string schemeName, global::System.IntPtr originalMaterial, ushort lodIndex, global::System.IntPtr rend) {
      return Technique.getCPtr(handleSchemeNotFound(schemeIndex, schemeName, (originalMaterial == global::System.IntPtr.Zero) ? null : new Material(originalMaterial, false), lodIndex, (rend == global::System.IntPtr.Zero) ? null : new Renderable(rend, false))).Handle;
    }
  
    private bool SwigDirectorMethodafterIlluminationPassesCreated(global::System.IntPtr technique) {
      return afterIlluminationPassesCreated((technique == global::System.IntPtr.Zero) ? null : new Technique(technique, false));
    }
  
    private bool SwigDirectorMethodbeforeIlluminationPassesCleared(global::System.IntPtr technique) {
      return beforeIlluminationPassesCleared((technique == global::System.IntPtr.Zero) ? null : new Technique(technique, false));
    }
  
    public delegate global::System.IntPtr SwigDelegateMaterialManager_Listener_0(ushort schemeIndex, string schemeName, global::System.IntPtr originalMaterial, ushort lodIndex, global::System.IntPtr rend);
    public delegate bool SwigDelegateMaterialManager_Listener_1(global::System.IntPtr technique);
    public delegate bool SwigDelegateMaterialManager_Listener_2(global::System.IntPtr technique);
  
    private SwigDelegateMaterialManager_Listener_0 swigDelegate0;
    private SwigDelegateMaterialManager_Listener_1 swigDelegate1;
    private SwigDelegateMaterialManager_Listener_2 swigDelegate2;
  
    private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(ushort), typeof(string), typeof(Material), typeof(ushort), typeof(Renderable) };
    private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(Technique) };
    private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(Technique) };
  }

  public static string DEFAULT_SCHEME_NAME {
    set {
      OgrePINVOKE.MaterialManager_DEFAULT_SCHEME_NAME_set(value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = OgrePINVOKE.MaterialManager_DEFAULT_SCHEME_NAME_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MaterialPtr create(string name, string group, bool isManual, ManualResourceLoader loader, NameValueMap createParams) {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.MaterialManager_create__SWIG_0(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader), NameValueMap.getCPtr(createParams)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr create(string name, string group, bool isManual, ManualResourceLoader loader) {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.MaterialManager_create__SWIG_1(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr create(string name, string group, bool isManual) {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.MaterialManager_create__SWIG_2(swigCPtr, name, group, isManual), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr create(string name, string group) {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.MaterialManager_create__SWIG_3(swigCPtr, name, group), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr getByName(string name, string groupName) {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.MaterialManager_getByName__SWIG_0(swigCPtr, name, groupName), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr getByName(string name) {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.MaterialManager_getByName__SWIG_1(swigCPtr, name), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr getDefaultMaterial(bool useLighting) {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.MaterialManager_getDefaultMaterial__SWIG_0(swigCPtr, useLighting), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr getDefaultMaterial() {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.MaterialManager_getDefaultMaterial__SWIG_1(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialManager() : this(OgrePINVOKE.new_MaterialManager(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void initialise() {
    OgrePINVOKE.MaterialManager_initialise(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setDefaultTextureFiltering(TextureFilterOptions fo) {
    OgrePINVOKE.MaterialManager_setDefaultTextureFiltering__SWIG_0(swigCPtr, (int)fo);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setDefaultTextureFiltering(FilterType ftype, FilterOptions opts) {
    OgrePINVOKE.MaterialManager_setDefaultTextureFiltering__SWIG_1(swigCPtr, (int)ftype, (int)opts);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setDefaultTextureFiltering(FilterOptions minFilter, FilterOptions magFilter, FilterOptions mipFilter) {
    OgrePINVOKE.MaterialManager_setDefaultTextureFiltering__SWIG_2(swigCPtr, (int)minFilter, (int)magFilter, (int)mipFilter);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual FilterOptions getDefaultTextureFiltering(FilterType ftype) {
    FilterOptions ret = (FilterOptions)OgrePINVOKE.MaterialManager_getDefaultTextureFiltering(swigCPtr, (int)ftype);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDefaultAnisotropy(uint maxAniso) {
    OgrePINVOKE.MaterialManager_setDefaultAnisotropy(swigCPtr, maxAniso);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getDefaultAnisotropy() {
    uint ret = OgrePINVOKE.MaterialManager_getDefaultAnisotropy(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual MaterialPtr getDefaultSettings() {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.MaterialManager_getDefaultSettings(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ushort _getSchemeIndex(string name) {
    ushort ret = OgrePINVOKE.MaterialManager__getSchemeIndex(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string _getSchemeName(ushort index) {
    string ret = OgrePINVOKE.MaterialManager__getSchemeName(swigCPtr, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort _getActiveSchemeIndex() {
    ushort ret = OgrePINVOKE.MaterialManager__getActiveSchemeIndex(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getActiveScheme() {
    string ret = OgrePINVOKE.MaterialManager_getActiveScheme(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setActiveScheme(string schemeName) {
    OgrePINVOKE.MaterialManager_setActiveScheme(swigCPtr, schemeName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addListener(MaterialManager.MaterialManager_Listener l, string schemeName) {
    OgrePINVOKE.MaterialManager_addListener__SWIG_0(swigCPtr, MaterialManager.MaterialManager_Listener.getCPtr(l), schemeName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addListener(MaterialManager.MaterialManager_Listener l) {
    OgrePINVOKE.MaterialManager_addListener__SWIG_1(swigCPtr, MaterialManager.MaterialManager_Listener.getCPtr(l));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeListener(MaterialManager.MaterialManager_Listener l, string schemeName) {
    OgrePINVOKE.MaterialManager_removeListener__SWIG_0(swigCPtr, MaterialManager.MaterialManager_Listener.getCPtr(l), schemeName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeListener(MaterialManager.MaterialManager_Listener l) {
    OgrePINVOKE.MaterialManager_removeListener__SWIG_1(swigCPtr, MaterialManager.MaterialManager_Listener.getCPtr(l));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Technique _arbitrateMissingTechniqueForActiveScheme(Material mat, ushort lodIndex, Renderable rend) {
    global::System.IntPtr cPtr = OgrePINVOKE.MaterialManager__arbitrateMissingTechniqueForActiveScheme(swigCPtr, Material.getCPtr(mat), lodIndex, Renderable.getCPtr(rend));
    Technique ret = (cPtr == global::System.IntPtr.Zero) ? null : new Technique(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void _notifyAfterIlluminationPassesCreated(Technique mat) {
    OgrePINVOKE.MaterialManager__notifyAfterIlluminationPassesCreated(swigCPtr, Technique.getCPtr(mat));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _notifyBeforeIlluminationPassesCleared(Technique mat) {
    OgrePINVOKE.MaterialManager__notifyBeforeIlluminationPassesCleared(swigCPtr, Technique.getCPtr(mat));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static MaterialManager getSingleton() {
    MaterialManager ret = new MaterialManager(OgrePINVOKE.MaterialManager_getSingleton(), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
