//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class RotationalSpline : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RotationalSpline(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RotationalSpline obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RotationalSpline() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_RotationalSpline(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public RotationalSpline() : this(OgrePINVOKE.new_RotationalSpline(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addPoint(Quaternion p) {
    OgrePINVOKE.RotationalSpline_addPoint(swigCPtr, Quaternion.getCPtr(p));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Quaternion getPoint(ushort index) {
    Quaternion ret = new Quaternion(OgrePINVOKE.RotationalSpline_getPoint(swigCPtr, index), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getNumPoints() {
    ushort ret = OgrePINVOKE.RotationalSpline_getNumPoints(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clear() {
    OgrePINVOKE.RotationalSpline_clear(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void updatePoint(ushort index, Quaternion value) {
    OgrePINVOKE.RotationalSpline_updatePoint(swigCPtr, index, Quaternion.getCPtr(value));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Quaternion interpolate(float t, bool useShortestPath) {
    Quaternion ret = new Quaternion(OgrePINVOKE.RotationalSpline_interpolate__SWIG_0(swigCPtr, t, useShortestPath), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Quaternion interpolate(float t) {
    Quaternion ret = new Quaternion(OgrePINVOKE.RotationalSpline_interpolate__SWIG_1(swigCPtr, t), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Quaternion interpolate(uint fromIndex, float t, bool useShortestPath) {
    Quaternion ret = new Quaternion(OgrePINVOKE.RotationalSpline_interpolate__SWIG_2(swigCPtr, fromIndex, t, useShortestPath), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Quaternion interpolate(uint fromIndex, float t) {
    Quaternion ret = new Quaternion(OgrePINVOKE.RotationalSpline_interpolate__SWIG_3(swigCPtr, fromIndex, t), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAutoCalculate(bool autoCalc) {
    OgrePINVOKE.RotationalSpline_setAutoCalculate(swigCPtr, autoCalc);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void recalcTangents() {
    OgrePINVOKE.RotationalSpline_recalcTangents(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
