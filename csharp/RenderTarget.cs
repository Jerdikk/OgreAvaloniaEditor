//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class RenderTarget : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RenderTarget(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RenderTarget obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RenderTarget() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_RenderTarget(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual string getName() {
    string ret = OgrePINVOKE.RenderTarget_getName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getMetrics(SWIGTYPE_p_unsigned_int width, SWIGTYPE_p_unsigned_int height) {
    OgrePINVOKE.RenderTarget_getMetrics(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(width), SWIGTYPE_p_unsigned_int.getCPtr(height));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual uint getWidth() {
    uint ret = OgrePINVOKE.RenderTarget_getWidth(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint getHeight() {
    uint ret = OgrePINVOKE.RenderTarget_getHeight(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDepthBufferPool(ushort poolId) {
    OgrePINVOKE.RenderTarget_setDepthBufferPool(swigCPtr, poolId);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getDepthBufferPool() {
    ushort ret = OgrePINVOKE.RenderTarget_getDepthBufferPool(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__DepthBuffer getDepthBuffer() {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderTarget_getDepthBuffer(swigCPtr);
    SWIGTYPE_p_Ogre__DepthBuffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Ogre__DepthBuffer(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool attachDepthBuffer(SWIGTYPE_p_Ogre__DepthBuffer depthBuffer) {
    bool ret = OgrePINVOKE.RenderTarget_attachDepthBuffer(swigCPtr, SWIGTYPE_p_Ogre__DepthBuffer.getCPtr(depthBuffer));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void detachDepthBuffer() {
    OgrePINVOKE.RenderTarget_detachDepthBuffer(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _detachDepthBuffer() {
    OgrePINVOKE.RenderTarget__detachDepthBuffer(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void update(bool swapBuffers) {
    OgrePINVOKE.RenderTarget_update__SWIG_0(swigCPtr, swapBuffers);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void update() {
    OgrePINVOKE.RenderTarget_update__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void swapBuffers() {
    OgrePINVOKE.RenderTarget_swapBuffers(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Viewport addViewport(Camera cam, int ZOrder, float left, float top, float width, float height) {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderTarget_addViewport__SWIG_0(swigCPtr, Camera.getCPtr(cam), ZOrder, left, top, width, height);
    Viewport ret = (cPtr == global::System.IntPtr.Zero) ? null : new Viewport(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Viewport addViewport(Camera cam, int ZOrder, float left, float top, float width) {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderTarget_addViewport__SWIG_1(swigCPtr, Camera.getCPtr(cam), ZOrder, left, top, width);
    Viewport ret = (cPtr == global::System.IntPtr.Zero) ? null : new Viewport(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Viewport addViewport(Camera cam, int ZOrder, float left, float top) {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderTarget_addViewport__SWIG_2(swigCPtr, Camera.getCPtr(cam), ZOrder, left, top);
    Viewport ret = (cPtr == global::System.IntPtr.Zero) ? null : new Viewport(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Viewport addViewport(Camera cam, int ZOrder, float left) {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderTarget_addViewport__SWIG_3(swigCPtr, Camera.getCPtr(cam), ZOrder, left);
    Viewport ret = (cPtr == global::System.IntPtr.Zero) ? null : new Viewport(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Viewport addViewport(Camera cam, int ZOrder) {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderTarget_addViewport__SWIG_4(swigCPtr, Camera.getCPtr(cam), ZOrder);
    Viewport ret = (cPtr == global::System.IntPtr.Zero) ? null : new Viewport(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Viewport addViewport(Camera cam) {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderTarget_addViewport__SWIG_5(swigCPtr, Camera.getCPtr(cam));
    Viewport ret = (cPtr == global::System.IntPtr.Zero) ? null : new Viewport(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ushort getNumViewports() {
    ushort ret = OgrePINVOKE.RenderTarget_getNumViewports(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Viewport getViewport(ushort index) {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderTarget_getViewport(swigCPtr, index);
    Viewport ret = (cPtr == global::System.IntPtr.Zero) ? null : new Viewport(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Viewport getViewportByZOrder(int ZOrder) {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderTarget_getViewportByZOrder(swigCPtr, ZOrder);
    Viewport ret = (cPtr == global::System.IntPtr.Zero) ? null : new Viewport(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool hasViewportWithZOrder(int ZOrder) {
    bool ret = OgrePINVOKE.RenderTarget_hasViewportWithZOrder(swigCPtr, ZOrder);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void removeViewport(int ZOrder) {
    OgrePINVOKE.RenderTarget_removeViewport(swigCPtr, ZOrder);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeAllViewports() {
    OgrePINVOKE.RenderTarget_removeAllViewports(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public FrameStats getStatistics() {
    FrameStats ret = new FrameStats(OgrePINVOKE.RenderTarget_getStatistics(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void resetStatistics() {
    OgrePINVOKE.RenderTarget_resetStatistics(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getCustomAttribute(string name, global::System.IntPtr pData) {
    OgrePINVOKE.RenderTarget_getCustomAttribute__SWIG_0(swigCPtr, name, pData);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getCustomAttribute(string name) {
    uint ret = OgrePINVOKE.RenderTarget_getCustomAttribute__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void addListener(RenderTargetListener listener) {
    OgrePINVOKE.RenderTarget_addListener(swigCPtr, RenderTargetListener.getCPtr(listener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void insertListener(RenderTargetListener listener, uint pos) {
    OgrePINVOKE.RenderTarget_insertListener__SWIG_0(swigCPtr, RenderTargetListener.getCPtr(listener), pos);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void insertListener(RenderTargetListener listener) {
    OgrePINVOKE.RenderTarget_insertListener__SWIG_1(swigCPtr, RenderTargetListener.getCPtr(listener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeListener(RenderTargetListener listener) {
    OgrePINVOKE.RenderTarget_removeListener(swigCPtr, RenderTargetListener.getCPtr(listener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeAllListeners() {
    OgrePINVOKE.RenderTarget_removeAllListeners(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setPriority(byte priority) {
    OgrePINVOKE.RenderTarget_setPriority(swigCPtr, priority);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual byte getPriority() {
    byte ret = OgrePINVOKE.RenderTarget_getPriority(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isActive() {
    bool ret = OgrePINVOKE.RenderTarget_isActive(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setActive(bool state) {
    OgrePINVOKE.RenderTarget_setActive(swigCPtr, state);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setAutoUpdated(bool autoupdate) {
    OgrePINVOKE.RenderTarget_setAutoUpdated(swigCPtr, autoupdate);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool isAutoUpdated() {
    bool ret = OgrePINVOKE.RenderTarget_isAutoUpdated(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void copyContentsToMemory(Box src, PixelBox dst, RenderTarget.FrameBuffer buffer) {
    OgrePINVOKE.RenderTarget_copyContentsToMemory__SWIG_0(swigCPtr, Box.getCPtr(src), PixelBox.getCPtr(dst), (int)buffer);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void copyContentsToMemory(Box src, PixelBox dst) {
    OgrePINVOKE.RenderTarget_copyContentsToMemory__SWIG_1(swigCPtr, Box.getCPtr(src), PixelBox.getCPtr(dst));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PixelFormat suggestPixelFormat() {
    PixelFormat ret = (PixelFormat)OgrePINVOKE.RenderTarget_suggestPixelFormat(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void writeContentsToFile(string filename) {
    OgrePINVOKE.RenderTarget_writeContentsToFile(swigCPtr, filename);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string writeContentsToTimestampedFile(string filenamePrefix, string filenameSuffix) {
    string ret = OgrePINVOKE.RenderTarget_writeContentsToTimestampedFile(swigCPtr, filenamePrefix, filenameSuffix);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool requiresTextureFlipping() {
    bool ret = OgrePINVOKE.RenderTarget_requiresTextureFlipping(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void _notifyCameraRemoved(Camera cam) {
    OgrePINVOKE.RenderTarget__notifyCameraRemoved(swigCPtr, Camera.getCPtr(cam));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool isPrimary() {
    bool ret = OgrePINVOKE.RenderTarget_isPrimary(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isStereoEnabled() {
    bool ret = OgrePINVOKE.RenderTarget_isStereoEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isHardwareGammaEnabled() {
    bool ret = OgrePINVOKE.RenderTarget_isHardwareGammaEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint getFSAA() {
    uint ret = OgrePINVOKE.RenderTarget_getFSAA(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getFSAAHint() {
    string ret = OgrePINVOKE.RenderTarget_getFSAAHint(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setFSAA(uint fsaa, string fsaaHint) {
    OgrePINVOKE.RenderTarget_setFSAA(swigCPtr, fsaa, fsaaHint);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _beginUpdate() {
    OgrePINVOKE.RenderTarget__beginUpdate(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _updateViewport(int zorder, bool updateStatistics) {
    OgrePINVOKE.RenderTarget__updateViewport__SWIG_0(swigCPtr, zorder, updateStatistics);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _updateViewport(int zorder) {
    OgrePINVOKE.RenderTarget__updateViewport__SWIG_1(swigCPtr, zorder);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _updateViewport(Viewport viewport, bool updateStatistics) {
    OgrePINVOKE.RenderTarget__updateViewport__SWIG_2(swigCPtr, Viewport.getCPtr(viewport), updateStatistics);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _updateViewport(Viewport viewport) {
    OgrePINVOKE.RenderTarget__updateViewport__SWIG_3(swigCPtr, Viewport.getCPtr(viewport));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _updateAutoUpdatedViewports(bool updateStatistics) {
    OgrePINVOKE.RenderTarget__updateAutoUpdatedViewports__SWIG_0(swigCPtr, updateStatistics);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _updateAutoUpdatedViewports() {
    OgrePINVOKE.RenderTarget__updateAutoUpdatedViewports__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _endUpdate() {
    OgrePINVOKE.RenderTarget__endUpdate(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum FrameBuffer {
    FB_FRONT,
    FB_BACK,
    FB_AUTO
  }

}

}
