//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class HardwareBufferLockGuard : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal HardwareBufferLockGuard(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(HardwareBufferLockGuard obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~HardwareBufferLockGuard() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_HardwareBufferLockGuard(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public HardwareBufferLockGuard() : this(OgrePINVOKE.new_HardwareBufferLockGuard__SWIG_0(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public HardwareBufferLockGuard(HardwareBuffer p, HardwareBuffer.LockOptions options) : this(OgrePINVOKE.new_HardwareBufferLockGuard__SWIG_1(HardwareBuffer.getCPtr(p), (int)options), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public HardwareBufferLockGuard(HardwareBuffer p, uint offset, uint length, HardwareBuffer.LockOptions options) : this(OgrePINVOKE.new_HardwareBufferLockGuard__SWIG_2(HardwareBuffer.getCPtr(p), offset, length, (int)options), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void unlock() {
    OgrePINVOKE.HardwareBufferLockGuard_unlock(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void lock_(HardwareBuffer p, HardwareBuffer.LockOptions options) {
    OgrePINVOKE.HardwareBufferLockGuard_lock___SWIG_0(swigCPtr, HardwareBuffer.getCPtr(p), (int)options);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void lock_(HardwareBuffer p, uint offset, uint length, HardwareBuffer.LockOptions options) {
    OgrePINVOKE.HardwareBufferLockGuard_lock___SWIG_1(swigCPtr, HardwareBuffer.getCPtr(p), offset, length, (int)options);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public HardwareBuffer pBuf {
    set {
      OgrePINVOKE.HardwareBufferLockGuard_pBuf_set(swigCPtr, HardwareBuffer.getCPtr(value));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.HardwareBufferLockGuard_pBuf_get(swigCPtr);
      HardwareBuffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new HardwareBuffer(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public global::System.IntPtr pData {
    set {
      OgrePINVOKE.HardwareBufferLockGuard_pData_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
	  global::System.IntPtr cPtr = OgrePINVOKE.HardwareBufferLockGuard_pData_get(swigCPtr);
	  if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
	  return cPtr;
	}
  
  }

}

}
