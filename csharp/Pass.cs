//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class Pass : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Pass(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Pass obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Pass() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_Pass(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public class HashFunc : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal HashFunc(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(HashFunc obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~HashFunc() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_Pass_HashFunc(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
  }

  public Pass(Technique parent, ushort index) : this(OgrePINVOKE.new_Pass__SWIG_0(Technique.getCPtr(parent), index), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Pass(Technique parent, ushort index, Pass oth) : this(OgrePINVOKE.new_Pass__SWIG_1(Technique.getCPtr(parent), index, Pass.getCPtr(oth)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint calculateSize() {
    uint ret = OgrePINVOKE.Pass_calculateSize(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getIndex() {
    ushort ret = OgrePINVOKE.Pass_getIndex(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setName(string name) {
    OgrePINVOKE.Pass_setName(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getName() {
    string ret = OgrePINVOKE.Pass_getName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAmbient(float red, float green, float blue) {
    OgrePINVOKE.Pass_setAmbient__SWIG_0(swigCPtr, red, green, blue);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAmbient(ColourValue ambient) {
    OgrePINVOKE.Pass_setAmbient__SWIG_1(swigCPtr, ColourValue.getCPtr(ambient));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDiffuse(float red, float green, float blue, float alpha) {
    OgrePINVOKE.Pass_setDiffuse__SWIG_0(swigCPtr, red, green, blue, alpha);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDiffuse(ColourValue diffuse) {
    OgrePINVOKE.Pass_setDiffuse__SWIG_1(swigCPtr, ColourValue.getCPtr(diffuse));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSpecular(float red, float green, float blue, float alpha) {
    OgrePINVOKE.Pass_setSpecular__SWIG_0(swigCPtr, red, green, blue, alpha);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSpecular(ColourValue specular) {
    OgrePINVOKE.Pass_setSpecular__SWIG_1(swigCPtr, ColourValue.getCPtr(specular));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShininess(float val) {
    OgrePINVOKE.Pass_setShininess(swigCPtr, val);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSelfIllumination(float red, float green, float blue) {
    OgrePINVOKE.Pass_setSelfIllumination__SWIG_0(swigCPtr, red, green, blue);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSelfIllumination(ColourValue selfIllum) {
    OgrePINVOKE.Pass_setSelfIllumination__SWIG_1(swigCPtr, ColourValue.getCPtr(selfIllum));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setEmissive(float red, float green, float blue) {
    OgrePINVOKE.Pass_setEmissive__SWIG_0(swigCPtr, red, green, blue);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setEmissive(ColourValue emissive) {
    OgrePINVOKE.Pass_setEmissive__SWIG_1(swigCPtr, ColourValue.getCPtr(emissive));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVertexColourTracking(int tracking) {
    OgrePINVOKE.Pass_setVertexColourTracking(swigCPtr, tracking);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ColourValue getAmbient() {
    ColourValue ret = new ColourValue(OgrePINVOKE.Pass_getAmbient(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ColourValue getDiffuse() {
    ColourValue ret = new ColourValue(OgrePINVOKE.Pass_getDiffuse(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ColourValue getSpecular() {
    ColourValue ret = new ColourValue(OgrePINVOKE.Pass_getSpecular(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ColourValue getSelfIllumination() {
    ColourValue ret = new ColourValue(OgrePINVOKE.Pass_getSelfIllumination(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ColourValue getEmissive() {
    ColourValue ret = new ColourValue(OgrePINVOKE.Pass_getEmissive(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getShininess() {
    float ret = OgrePINVOKE.Pass_getShininess(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getVertexColourTracking() {
    int ret = OgrePINVOKE.Pass_getVertexColourTracking(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLightingEnabled(bool enabled) {
    OgrePINVOKE.Pass_setLightingEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getLightingEnabled() {
    bool ret = OgrePINVOKE.Pass_getLightingEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLineWidth(float width) {
    OgrePINVOKE.Pass_setLineWidth(swigCPtr, width);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getLineWidth() {
    float ret = OgrePINVOKE.Pass_getLineWidth(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getPointSize() {
    float ret = OgrePINVOKE.Pass_getPointSize(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setPointSize(float ps) {
    OgrePINVOKE.Pass_setPointSize(swigCPtr, ps);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setPointSpritesEnabled(bool enabled) {
    OgrePINVOKE.Pass_setPointSpritesEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getPointSpritesEnabled() {
    bool ret = OgrePINVOKE.Pass_getPointSpritesEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setPointAttenuation(bool enabled, float constant, float linear, float quadratic) {
    OgrePINVOKE.Pass_setPointAttenuation__SWIG_0(swigCPtr, enabled, constant, linear, quadratic);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setPointAttenuation(bool enabled, float constant, float linear) {
    OgrePINVOKE.Pass_setPointAttenuation__SWIG_1(swigCPtr, enabled, constant, linear);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setPointAttenuation(bool enabled, float constant) {
    OgrePINVOKE.Pass_setPointAttenuation__SWIG_2(swigCPtr, enabled, constant);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setPointAttenuation(bool enabled) {
    OgrePINVOKE.Pass_setPointAttenuation__SWIG_3(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isPointAttenuationEnabled() {
    bool ret = OgrePINVOKE.Pass_isPointAttenuationEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getPointAttenuationConstant() {
    float ret = OgrePINVOKE.Pass_getPointAttenuationConstant(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getPointAttenuationLinear() {
    float ret = OgrePINVOKE.Pass_getPointAttenuationLinear(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getPointAttenuationQuadratic() {
    float ret = OgrePINVOKE.Pass_getPointAttenuationQuadratic(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector4 getPointAttenuation() {
    Vector4 ret = new Vector4(OgrePINVOKE.Pass_getPointAttenuation(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setPointMinSize(float min) {
    OgrePINVOKE.Pass_setPointMinSize(swigCPtr, min);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getPointMinSize() {
    float ret = OgrePINVOKE.Pass_getPointMinSize(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setPointMaxSize(float max) {
    OgrePINVOKE.Pass_setPointMaxSize(swigCPtr, max);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getPointMaxSize() {
    float ret = OgrePINVOKE.Pass_getPointMaxSize(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TextureUnitState createTextureUnitState(string textureName, ushort texCoordSet) {
    global::System.IntPtr cPtr = OgrePINVOKE.Pass_createTextureUnitState__SWIG_0(swigCPtr, textureName, texCoordSet);
    TextureUnitState ret = (cPtr == global::System.IntPtr.Zero) ? null : new TextureUnitState(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TextureUnitState createTextureUnitState(string textureName) {
    global::System.IntPtr cPtr = OgrePINVOKE.Pass_createTextureUnitState__SWIG_1(swigCPtr, textureName);
    TextureUnitState ret = (cPtr == global::System.IntPtr.Zero) ? null : new TextureUnitState(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TextureUnitState createTextureUnitState() {
    global::System.IntPtr cPtr = OgrePINVOKE.Pass_createTextureUnitState__SWIG_2(swigCPtr);
    TextureUnitState ret = (cPtr == global::System.IntPtr.Zero) ? null : new TextureUnitState(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addTextureUnitState(TextureUnitState state) {
    OgrePINVOKE.Pass_addTextureUnitState(swigCPtr, TextureUnitState.getCPtr(state));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public TextureUnitState getTextureUnitState(uint index) {
    global::System.IntPtr cPtr = OgrePINVOKE.Pass_getTextureUnitState__SWIG_0(swigCPtr, index);
    TextureUnitState ret = (cPtr == global::System.IntPtr.Zero) ? null : new TextureUnitState(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TextureUnitState getTextureUnitState(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.Pass_getTextureUnitState__SWIG_1(swigCPtr, name);
    TextureUnitState ret = (cPtr == global::System.IntPtr.Zero) ? null : new TextureUnitState(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getTextureUnitStateIndex(TextureUnitState state) {
    ushort ret = OgrePINVOKE.Pass_getTextureUnitStateIndex(swigCPtr, TextureUnitState.getCPtr(state));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TextureUnitStateList getTextureUnitStates() {
    TextureUnitStateList ret = new TextureUnitStateList(OgrePINVOKE.Pass_getTextureUnitStates(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeTextureUnitState(ushort index) {
    OgrePINVOKE.Pass_removeTextureUnitState(swigCPtr, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeAllTextureUnitStates() {
    OgrePINVOKE.Pass_removeAllTextureUnitStates(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNumTextureUnitStates() {
    uint ret = OgrePINVOKE.Pass_getNumTextureUnitStates(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort _getTextureUnitWithContentTypeIndex(TextureUnitState.ContentType contentType, ushort index) {
    ushort ret = OgrePINVOKE.Pass__getTextureUnitWithContentTypeIndex(swigCPtr, (int)contentType, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTextureFiltering(TextureFilterOptions filterType) {
    OgrePINVOKE.Pass_setTextureFiltering(swigCPtr, (int)filterType);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTextureAnisotropy(uint maxAniso) {
    OgrePINVOKE.Pass_setTextureAnisotropy(swigCPtr, maxAniso);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSceneBlending(SceneBlendType sbt) {
    OgrePINVOKE.Pass_setSceneBlending__SWIG_0(swigCPtr, (int)sbt);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSeparateSceneBlending(SceneBlendType sbt, SceneBlendType sbta) {
    OgrePINVOKE.Pass_setSeparateSceneBlending__SWIG_0(swigCPtr, (int)sbt, (int)sbta);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSceneBlending(SceneBlendFactor sourceFactor, SceneBlendFactor destFactor) {
    OgrePINVOKE.Pass_setSceneBlending__SWIG_1(swigCPtr, (int)sourceFactor, (int)destFactor);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSeparateSceneBlending(SceneBlendFactor sourceFactor, SceneBlendFactor destFactor, SceneBlendFactor sourceFactorAlpha, SceneBlendFactor destFactorAlpha) {
    OgrePINVOKE.Pass_setSeparateSceneBlending__SWIG_1(swigCPtr, (int)sourceFactor, (int)destFactor, (int)sourceFactorAlpha, (int)destFactorAlpha);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ColourBlendState getBlendState() {
    ColourBlendState ret = new ColourBlendState(OgrePINVOKE.Pass_getBlendState(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneBlendFactor getSourceBlendFactor() {
    SceneBlendFactor ret = (SceneBlendFactor)OgrePINVOKE.Pass_getSourceBlendFactor(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneBlendFactor getDestBlendFactor() {
    SceneBlendFactor ret = (SceneBlendFactor)OgrePINVOKE.Pass_getDestBlendFactor(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneBlendFactor getSourceBlendFactorAlpha() {
    SceneBlendFactor ret = (SceneBlendFactor)OgrePINVOKE.Pass_getSourceBlendFactorAlpha(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneBlendFactor getDestBlendFactorAlpha() {
    SceneBlendFactor ret = (SceneBlendFactor)OgrePINVOKE.Pass_getDestBlendFactorAlpha(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSceneBlendingOperation(SceneBlendOperation op) {
    OgrePINVOKE.Pass_setSceneBlendingOperation(swigCPtr, (int)op);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSeparateSceneBlendingOperation(SceneBlendOperation op, SceneBlendOperation alphaOp) {
    OgrePINVOKE.Pass_setSeparateSceneBlendingOperation(swigCPtr, (int)op, (int)alphaOp);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SceneBlendOperation getSceneBlendingOperation() {
    SceneBlendOperation ret = (SceneBlendOperation)OgrePINVOKE.Pass_getSceneBlendingOperation(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneBlendOperation getSceneBlendingOperationAlpha() {
    SceneBlendOperation ret = (SceneBlendOperation)OgrePINVOKE.Pass_getSceneBlendingOperationAlpha(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setColourWriteEnabled(bool enabled) {
    OgrePINVOKE.Pass_setColourWriteEnabled__SWIG_0(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getColourWriteEnabled() {
    bool ret = OgrePINVOKE.Pass_getColourWriteEnabled__SWIG_0(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setColourWriteEnabled(bool red, bool green, bool blue, bool alpha) {
    OgrePINVOKE.Pass_setColourWriteEnabled__SWIG_1(swigCPtr, red, green, blue, alpha);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void getColourWriteEnabled(SWIGTYPE_p_bool red, SWIGTYPE_p_bool green, SWIGTYPE_p_bool blue, SWIGTYPE_p_bool alpha) {
    OgrePINVOKE.Pass_getColourWriteEnabled__SWIG_1(swigCPtr, SWIGTYPE_p_bool.getCPtr(red), SWIGTYPE_p_bool.getCPtr(green), SWIGTYPE_p_bool.getCPtr(blue), SWIGTYPE_p_bool.getCPtr(alpha));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isTransparent() {
    bool ret = OgrePINVOKE.Pass_isTransparent(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDepthCheckEnabled(bool enabled) {
    OgrePINVOKE.Pass_setDepthCheckEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getDepthCheckEnabled() {
    bool ret = OgrePINVOKE.Pass_getDepthCheckEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDepthWriteEnabled(bool enabled) {
    OgrePINVOKE.Pass_setDepthWriteEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getDepthWriteEnabled() {
    bool ret = OgrePINVOKE.Pass_getDepthWriteEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDepthFunction(CompareFunction func) {
    OgrePINVOKE.Pass_setDepthFunction(swigCPtr, (int)func);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public CompareFunction getDepthFunction() {
    CompareFunction ret = (CompareFunction)OgrePINVOKE.Pass_getDepthFunction(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDepthBias(float constantBias, float slopeScaleBias) {
    OgrePINVOKE.Pass_setDepthBias__SWIG_0(swigCPtr, constantBias, slopeScaleBias);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDepthBias(float constantBias) {
    OgrePINVOKE.Pass_setDepthBias__SWIG_1(swigCPtr, constantBias);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getDepthBiasConstant() {
    float ret = OgrePINVOKE.Pass_getDepthBiasConstant(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getDepthBiasSlopeScale() {
    float ret = OgrePINVOKE.Pass_getDepthBiasSlopeScale(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setIterationDepthBias(float biasPerIteration) {
    OgrePINVOKE.Pass_setIterationDepthBias(swigCPtr, biasPerIteration);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getIterationDepthBias() {
    float ret = OgrePINVOKE.Pass_getIterationDepthBias(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCullingMode(CullingMode mode) {
    OgrePINVOKE.Pass_setCullingMode(swigCPtr, (int)mode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public CullingMode getCullingMode() {
    CullingMode ret = (CullingMode)OgrePINVOKE.Pass_getCullingMode(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setManualCullingMode(ManualCullingMode mode) {
    OgrePINVOKE.Pass_setManualCullingMode(swigCPtr, (int)mode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ManualCullingMode getManualCullingMode() {
    ManualCullingMode ret = (ManualCullingMode)OgrePINVOKE.Pass_getManualCullingMode(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShadingMode(ShadeOptions mode) {
    OgrePINVOKE.Pass_setShadingMode(swigCPtr, (int)mode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ShadeOptions getShadingMode() {
    ShadeOptions ret = (ShadeOptions)OgrePINVOKE.Pass_getShadingMode(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setPolygonMode(PolygonMode mode) {
    OgrePINVOKE.Pass_setPolygonMode(swigCPtr, (int)mode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public PolygonMode getPolygonMode() {
    PolygonMode ret = (PolygonMode)OgrePINVOKE.Pass_getPolygonMode(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setPolygonModeOverrideable(bool override_) {
    OgrePINVOKE.Pass_setPolygonModeOverrideable(swigCPtr, override_);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getPolygonModeOverrideable() {
    bool ret = OgrePINVOKE.Pass_getPolygonModeOverrideable(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setFog(bool overrideScene, FogMode mode, ColourValue colour, float expDensity, float linearStart, float linearEnd) {
    OgrePINVOKE.Pass_setFog__SWIG_0(swigCPtr, overrideScene, (int)mode, ColourValue.getCPtr(colour), expDensity, linearStart, linearEnd);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFog(bool overrideScene, FogMode mode, ColourValue colour, float expDensity, float linearStart) {
    OgrePINVOKE.Pass_setFog__SWIG_1(swigCPtr, overrideScene, (int)mode, ColourValue.getCPtr(colour), expDensity, linearStart);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFog(bool overrideScene, FogMode mode, ColourValue colour, float expDensity) {
    OgrePINVOKE.Pass_setFog__SWIG_2(swigCPtr, overrideScene, (int)mode, ColourValue.getCPtr(colour), expDensity);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFog(bool overrideScene, FogMode mode, ColourValue colour) {
    OgrePINVOKE.Pass_setFog__SWIG_3(swigCPtr, overrideScene, (int)mode, ColourValue.getCPtr(colour));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFog(bool overrideScene, FogMode mode) {
    OgrePINVOKE.Pass_setFog__SWIG_4(swigCPtr, overrideScene, (int)mode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFog(bool overrideScene) {
    OgrePINVOKE.Pass_setFog__SWIG_5(swigCPtr, overrideScene);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getFogOverride() {
    bool ret = OgrePINVOKE.Pass_getFogOverride(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FogMode getFogMode() {
    FogMode ret = (FogMode)OgrePINVOKE.Pass_getFogMode(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ColourValue getFogColour() {
    ColourValue ret = new ColourValue(OgrePINVOKE.Pass_getFogColour(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getFogStart() {
    float ret = OgrePINVOKE.Pass_getFogStart(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getFogEnd() {
    float ret = OgrePINVOKE.Pass_getFogEnd(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getFogDensity() {
    float ret = OgrePINVOKE.Pass_getFogDensity(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAlphaRejectSettings(CompareFunction func, byte value, bool alphaToCoverageEnabled) {
    OgrePINVOKE.Pass_setAlphaRejectSettings__SWIG_0(swigCPtr, (int)func, value, alphaToCoverageEnabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAlphaRejectSettings(CompareFunction func, byte value) {
    OgrePINVOKE.Pass_setAlphaRejectSettings__SWIG_1(swigCPtr, (int)func, value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAlphaRejectFunction(CompareFunction func) {
    OgrePINVOKE.Pass_setAlphaRejectFunction(swigCPtr, (int)func);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAlphaRejectValue(byte val) {
    OgrePINVOKE.Pass_setAlphaRejectValue(swigCPtr, val);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public CompareFunction getAlphaRejectFunction() {
    CompareFunction ret = (CompareFunction)OgrePINVOKE.Pass_getAlphaRejectFunction(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte getAlphaRejectValue() {
    byte ret = OgrePINVOKE.Pass_getAlphaRejectValue(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAlphaToCoverageEnabled(bool enabled) {
    OgrePINVOKE.Pass_setAlphaToCoverageEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isAlphaToCoverageEnabled() {
    bool ret = OgrePINVOKE.Pass_isAlphaToCoverageEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTransparentSortingEnabled(bool enabled) {
    OgrePINVOKE.Pass_setTransparentSortingEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getTransparentSortingEnabled() {
    bool ret = OgrePINVOKE.Pass_getTransparentSortingEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTransparentSortingForced(bool enabled) {
    OgrePINVOKE.Pass_setTransparentSortingForced(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getTransparentSortingForced() {
    bool ret = OgrePINVOKE.Pass_getTransparentSortingForced(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMaxSimultaneousLights(ushort maxLights) {
    OgrePINVOKE.Pass_setMaxSimultaneousLights(swigCPtr, maxLights);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getMaxSimultaneousLights() {
    ushort ret = OgrePINVOKE.Pass_getMaxSimultaneousLights(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setStartLight(ushort startLight) {
    OgrePINVOKE.Pass_setStartLight(swigCPtr, startLight);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getStartLight() {
    ushort ret = OgrePINVOKE.Pass_getStartLight(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLightMask(uint mask) {
    OgrePINVOKE.Pass_setLightMask(swigCPtr, mask);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getLightMask() {
    uint ret = OgrePINVOKE.Pass_getLightMask(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setIteratePerLight(bool enabled, bool onlyForOneLightType, Light.LightTypes lightType) {
    OgrePINVOKE.Pass_setIteratePerLight__SWIG_0(swigCPtr, enabled, onlyForOneLightType, (int)lightType);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setIteratePerLight(bool enabled, bool onlyForOneLightType) {
    OgrePINVOKE.Pass_setIteratePerLight__SWIG_1(swigCPtr, enabled, onlyForOneLightType);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setIteratePerLight(bool enabled) {
    OgrePINVOKE.Pass_setIteratePerLight__SWIG_2(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getIteratePerLight() {
    bool ret = OgrePINVOKE.Pass_getIteratePerLight(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getRunOnlyForOneLightType() {
    bool ret = OgrePINVOKE.Pass_getRunOnlyForOneLightType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Light.LightTypes getOnlyLightType() {
    Light.LightTypes ret = (Light.LightTypes)OgrePINVOKE.Pass_getOnlyLightType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLightCountPerIteration(ushort c) {
    OgrePINVOKE.Pass_setLightCountPerIteration(swigCPtr, c);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getLightCountPerIteration() {
    ushort ret = OgrePINVOKE.Pass_getLightCountPerIteration(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Technique getParent() {
    global::System.IntPtr cPtr = OgrePINVOKE.Pass_getParent(swigCPtr);
    Technique ret = (cPtr == global::System.IntPtr.Zero) ? null : new Technique(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getResourceGroup() {
    string ret = OgrePINVOKE.Pass_getResourceGroup(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isProgrammable() {
    bool ret = OgrePINVOKE.Pass_isProgrammable(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasVertexProgram() {
    bool ret = OgrePINVOKE.Pass_hasVertexProgram(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasFragmentProgram() {
    bool ret = OgrePINVOKE.Pass_hasFragmentProgram(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasGeometryProgram() {
    bool ret = OgrePINVOKE.Pass_hasGeometryProgram(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasTessellationHullProgram() {
    bool ret = OgrePINVOKE.Pass_hasTessellationHullProgram(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasTessellationDomainProgram() {
    bool ret = OgrePINVOKE.Pass_hasTessellationDomainProgram(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasComputeProgram() {
    bool ret = OgrePINVOKE.Pass_hasComputeProgram(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramPtr getGpuProgram(GpuProgramType programType) {
    GpuProgramPtr ret = new GpuProgramPtr(OgrePINVOKE.Pass_getGpuProgram(swigCPtr, (int)programType), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramPtr getVertexProgram() {
    GpuProgramPtr ret = new GpuProgramPtr(OgrePINVOKE.Pass_getVertexProgram(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramPtr getFragmentProgram() {
    GpuProgramPtr ret = new GpuProgramPtr(OgrePINVOKE.Pass_getFragmentProgram(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramPtr getGeometryProgram() {
    GpuProgramPtr ret = new GpuProgramPtr(OgrePINVOKE.Pass_getGeometryProgram(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramPtr getTessellationHullProgram() {
    GpuProgramPtr ret = new GpuProgramPtr(OgrePINVOKE.Pass_getTessellationHullProgram(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramPtr getTessellationDomainProgram() {
    GpuProgramPtr ret = new GpuProgramPtr(OgrePINVOKE.Pass_getTessellationDomainProgram(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramPtr getComputeProgram() {
    GpuProgramPtr ret = new GpuProgramPtr(OgrePINVOKE.Pass_getComputeProgram(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasGpuProgram(GpuProgramType programType) {
    bool ret = OgrePINVOKE.Pass_hasGpuProgram(swigCPtr, (int)programType);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGpuProgram(GpuProgramType type, GpuProgramPtr prog, bool resetParams) {
    OgrePINVOKE.Pass_setGpuProgram__SWIG_0(swigCPtr, (int)type, GpuProgramPtr.getCPtr(prog), resetParams);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGpuProgram(GpuProgramType type, GpuProgramPtr prog) {
    OgrePINVOKE.Pass_setGpuProgram__SWIG_1(swigCPtr, (int)type, GpuProgramPtr.getCPtr(prog));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGpuProgram(GpuProgramType type, string name, bool resetParams) {
    OgrePINVOKE.Pass_setGpuProgram__SWIG_2(swigCPtr, (int)type, name, resetParams);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGpuProgram(GpuProgramType type, string name) {
    OgrePINVOKE.Pass_setGpuProgram__SWIG_3(swigCPtr, (int)type, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFragmentProgram(string name, bool resetParams) {
    OgrePINVOKE.Pass_setFragmentProgram__SWIG_0(swigCPtr, name, resetParams);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFragmentProgram(string name) {
    OgrePINVOKE.Pass_setFragmentProgram__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGeometryProgram(string name, bool resetParams) {
    OgrePINVOKE.Pass_setGeometryProgram__SWIG_0(swigCPtr, name, resetParams);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGeometryProgram(string name) {
    OgrePINVOKE.Pass_setGeometryProgram__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTessellationDomainProgram(string name, bool resetParams) {
    OgrePINVOKE.Pass_setTessellationDomainProgram__SWIG_0(swigCPtr, name, resetParams);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTessellationDomainProgram(string name) {
    OgrePINVOKE.Pass_setTessellationDomainProgram__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTessellationHullProgram(string name, bool resetParams) {
    OgrePINVOKE.Pass_setTessellationHullProgram__SWIG_0(swigCPtr, name, resetParams);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTessellationHullProgram(string name) {
    OgrePINVOKE.Pass_setTessellationHullProgram__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVertexProgram(string name, bool resetParams) {
    OgrePINVOKE.Pass_setVertexProgram__SWIG_0(swigCPtr, name, resetParams);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVertexProgram(string name) {
    OgrePINVOKE.Pass_setVertexProgram__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setComputeProgram(string name, bool resetParams) {
    OgrePINVOKE.Pass_setComputeProgram__SWIG_0(swigCPtr, name, resetParams);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setComputeProgram(string name) {
    OgrePINVOKE.Pass_setComputeProgram__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getGpuProgramName(GpuProgramType type) {
    string ret = OgrePINVOKE.Pass_getGpuProgramName(swigCPtr, (int)type);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getFragmentProgramName() {
    string ret = OgrePINVOKE.Pass_getFragmentProgramName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getGeometryProgramName() {
    string ret = OgrePINVOKE.Pass_getGeometryProgramName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getTessellationDomainProgramName() {
    string ret = OgrePINVOKE.Pass_getTessellationDomainProgramName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getTessellationHullProgramName() {
    string ret = OgrePINVOKE.Pass_getTessellationHullProgramName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getVertexProgramName() {
    string ret = OgrePINVOKE.Pass_getVertexProgramName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getComputeProgramName() {
    string ret = OgrePINVOKE.Pass_getComputeProgramName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGpuProgramParameters(GpuProgramType type, GpuProgramParametersPtr params_) {
    OgrePINVOKE.Pass_setGpuProgramParameters(swigCPtr, (int)type, GpuProgramParametersPtr.getCPtr(params_));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVertexProgramParameters(GpuProgramParametersPtr params_) {
    OgrePINVOKE.Pass_setVertexProgramParameters(swigCPtr, GpuProgramParametersPtr.getCPtr(params_));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFragmentProgramParameters(GpuProgramParametersPtr params_) {
    OgrePINVOKE.Pass_setFragmentProgramParameters(swigCPtr, GpuProgramParametersPtr.getCPtr(params_));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGeometryProgramParameters(GpuProgramParametersPtr params_) {
    OgrePINVOKE.Pass_setGeometryProgramParameters(swigCPtr, GpuProgramParametersPtr.getCPtr(params_));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTessellationHullProgramParameters(GpuProgramParametersPtr params_) {
    OgrePINVOKE.Pass_setTessellationHullProgramParameters(swigCPtr, GpuProgramParametersPtr.getCPtr(params_));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTessellationDomainProgramParameters(GpuProgramParametersPtr params_) {
    OgrePINVOKE.Pass_setTessellationDomainProgramParameters(swigCPtr, GpuProgramParametersPtr.getCPtr(params_));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setComputeProgramParameters(GpuProgramParametersPtr params_) {
    OgrePINVOKE.Pass_setComputeProgramParameters(swigCPtr, GpuProgramParametersPtr.getCPtr(params_));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public GpuProgramParametersPtr getGpuProgramParameters(GpuProgramType type) {
    GpuProgramParametersPtr ret = new GpuProgramParametersPtr(OgrePINVOKE.Pass_getGpuProgramParameters(swigCPtr, (int)type), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramParametersPtr getVertexProgramParameters() {
    GpuProgramParametersPtr ret = new GpuProgramParametersPtr(OgrePINVOKE.Pass_getVertexProgramParameters(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramParametersPtr getFragmentProgramParameters() {
    GpuProgramParametersPtr ret = new GpuProgramParametersPtr(OgrePINVOKE.Pass_getFragmentProgramParameters(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramParametersPtr getGeometryProgramParameters() {
    GpuProgramParametersPtr ret = new GpuProgramParametersPtr(OgrePINVOKE.Pass_getGeometryProgramParameters(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramParametersPtr getTessellationHullProgramParameters() {
    GpuProgramParametersPtr ret = new GpuProgramParametersPtr(OgrePINVOKE.Pass_getTessellationHullProgramParameters(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramParametersPtr getTessellationDomainProgramParameters() {
    GpuProgramParametersPtr ret = new GpuProgramParametersPtr(OgrePINVOKE.Pass_getTessellationDomainProgramParameters(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramParametersPtr getComputeProgramParameters() {
    GpuProgramParametersPtr ret = new GpuProgramParametersPtr(OgrePINVOKE.Pass_getComputeProgramParameters(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Pass _split(ushort numUnits) {
    global::System.IntPtr cPtr = OgrePINVOKE.Pass__split(swigCPtr, numUnits);
    Pass ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pass(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _notifyIndex(ushort index) {
    OgrePINVOKE.Pass__notifyIndex(swigCPtr, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _prepare() {
    OgrePINVOKE.Pass__prepare(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _unprepare() {
    OgrePINVOKE.Pass__unprepare(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _load() {
    OgrePINVOKE.Pass__load(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _unload() {
    OgrePINVOKE.Pass__unload(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isLoaded() {
    bool ret = OgrePINVOKE.Pass_isLoaded(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getHash() {
    uint ret = OgrePINVOKE.Pass_getHash(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _dirtyHash() {
    OgrePINVOKE.Pass__dirtyHash(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _recalculateHash() {
    OgrePINVOKE.Pass__recalculateHash(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyNeedsRecompile() {
    OgrePINVOKE.Pass__notifyNeedsRecompile(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _updateAutoParams(SWIGTYPE_p_Ogre__AutoParamDataSource source, ushort variabilityMask) {
    OgrePINVOKE.Pass__updateAutoParams(swigCPtr, SWIGTYPE_p_Ogre__AutoParamDataSource.getCPtr(source), variabilityMask);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_std__setT_Ogre__Pass_p_t getDirtyHashList() {
    SWIGTYPE_p_std__setT_Ogre__Pass_p_t ret = new SWIGTYPE_p_std__setT_Ogre__Pass_p_t(OgrePINVOKE.Pass_getDirtyHashList(), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__setT_Ogre__Pass_p_t getPassGraveyard() {
    SWIGTYPE_p_std__setT_Ogre__Pass_p_t ret = new SWIGTYPE_p_std__setT_Ogre__Pass_p_t(OgrePINVOKE.Pass_getPassGraveyard(), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void clearDirtyHashList() {
    OgrePINVOKE.Pass_clearDirtyHashList();
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void processPendingPassUpdates() {
    OgrePINVOKE.Pass_processPendingPassUpdates();
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void queueForDeletion() {
    OgrePINVOKE.Pass_queueForDeletion(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isAmbientOnly() {
    bool ret = OgrePINVOKE.Pass_isAmbientOnly(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setPassIterationCount(uint count) {
    OgrePINVOKE.Pass_setPassIterationCount(swigCPtr, count);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getPassIterationCount() {
    uint ret = OgrePINVOKE.Pass_getPassIterationCount(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLightScissoringEnabled(bool enabled) {
    OgrePINVOKE.Pass_setLightScissoringEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getLightScissoringEnabled() {
    bool ret = OgrePINVOKE.Pass_getLightScissoringEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLightClipPlanesEnabled(bool enabled) {
    OgrePINVOKE.Pass_setLightClipPlanesEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getLightClipPlanesEnabled() {
    bool ret = OgrePINVOKE.Pass_getLightClipPlanesEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setIlluminationStage(IlluminationStage is_) {
    OgrePINVOKE.Pass_setIlluminationStage(swigCPtr, (int)is_);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public IlluminationStage getIlluminationStage() {
    IlluminationStage ret = (IlluminationStage)OgrePINVOKE.Pass_getIlluminationStage(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setHashFunction(Pass.BuiltinHashFunction builtin) {
    OgrePINVOKE.Pass_setHashFunction__SWIG_0((int)builtin);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setHashFunction(Pass.HashFunc hashFunc) {
    OgrePINVOKE.Pass_setHashFunction__SWIG_1(Pass.HashFunc.getCPtr(hashFunc));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Pass.HashFunc getHashFunction() {
    global::System.IntPtr cPtr = OgrePINVOKE.Pass_getHashFunction();
    Pass.HashFunc ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pass.HashFunc(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Pass.HashFunc getBuiltinHashFunction(Pass.BuiltinHashFunction builtin) {
    global::System.IntPtr cPtr = OgrePINVOKE.Pass_getBuiltinHashFunction((int)builtin);
    Pass.HashFunc ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pass.HashFunc(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UserObjectBindings getUserObjectBindings() {
    UserObjectBindings ret = new UserObjectBindings(OgrePINVOKE.Pass_getUserObjectBindings__SWIG_0(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum BuiltinHashFunction {
    MIN_TEXTURE_CHANGE,
    MIN_GPU_PROGRAM_CHANGE
  }

}

}
