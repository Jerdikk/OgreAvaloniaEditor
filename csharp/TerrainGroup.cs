//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class TerrainGroup : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TerrainGroup(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TerrainGroup obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TerrainGroup() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreTerrainPINVOKE.delete_TerrainGroup(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public TerrainGroup(SceneManager sm, Terrain.Alignment align, ushort terrainSize, float terrainWorldSize) : this(OgreTerrainPINVOKE.new_TerrainGroup__SWIG_0(SceneManager.getCPtr(sm), (int)align, terrainSize, terrainWorldSize), true) {
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public TerrainGroup(SceneManager sm) : this(OgreTerrainPINVOKE.new_TerrainGroup__SWIG_1(SceneManager.getCPtr(sm)), true) {
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Terrain.ImportData getDefaultImportSettings() {
    Terrain.ImportData ret = new Terrain.ImportData(OgreTerrainPINVOKE.TerrainGroup_getDefaultImportSettings(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setOrigin(Vector3 pos) {
    OgreTerrainPINVOKE.TerrainGroup_setOrigin(swigCPtr, Vector3.getCPtr(pos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Vector3 getOrigin() {
    Vector3 ret = new Vector3(OgreTerrainPINVOKE.TerrainGroup_getOrigin(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Terrain.Alignment getAlignment() {
    Terrain.Alignment ret = (Terrain.Alignment)OgreTerrainPINVOKE.TerrainGroup_getAlignment(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float getTerrainWorldSize() {
    float ret = OgreTerrainPINVOKE.TerrainGroup_getTerrainWorldSize(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setTerrainWorldSize(float newWorldSize) {
    OgreTerrainPINVOKE.TerrainGroup_setTerrainWorldSize(swigCPtr, newWorldSize);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ushort getTerrainSize() {
    ushort ret = OgreTerrainPINVOKE.TerrainGroup_getTerrainSize(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setTerrainSize(ushort newTerrainSize) {
    OgreTerrainPINVOKE.TerrainGroup_setTerrainSize(swigCPtr, newTerrainSize);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SceneManager getSceneManager() {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainGroup_getSceneManager(swigCPtr);
    SceneManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneManager(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setFilenameConvention(string prefix, string extension) {
    OgreTerrainPINVOKE.TerrainGroup_setFilenameConvention(swigCPtr, prefix, extension);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFilenamePrefix(string prefix) {
    OgreTerrainPINVOKE.TerrainGroup_setFilenamePrefix(swigCPtr, prefix);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFilenameExtension(string extension) {
    OgreTerrainPINVOKE.TerrainGroup_setFilenameExtension(swigCPtr, extension);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getFilenamePrefix() {
    string ret = OgreTerrainPINVOKE.TerrainGroup_getFilenamePrefix(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getFilenameExtension() {
    string ret = OgreTerrainPINVOKE.TerrainGroup_getFilenameExtension(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setResourceGroup(string grp) {
    OgreTerrainPINVOKE.TerrainGroup_setResourceGroup(swigCPtr, grp);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getResourceGroup() {
    string ret = OgreTerrainPINVOKE.TerrainGroup_getResourceGroup(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void defineTerrain(int x, int y) {
    OgreTerrainPINVOKE.TerrainGroup_defineTerrain__SWIG_0(swigCPtr, x, y);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void defineTerrain(int x, int y, float constantHeight) {
    OgreTerrainPINVOKE.TerrainGroup_defineTerrain__SWIG_1(swigCPtr, x, y, constantHeight);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void defineTerrain(int x, int y, Terrain.ImportData importData) {
    OgreTerrainPINVOKE.TerrainGroup_defineTerrain__SWIG_2(swigCPtr, x, y, Terrain.ImportData.getCPtr(importData));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void defineTerrain(int x, int y, Image img, LayerInstanceList layers) {
    OgreTerrainPINVOKE.TerrainGroup_defineTerrain__SWIG_3(swigCPtr, x, y, Image.getCPtr(img), LayerInstanceList.getCPtr(layers));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void defineTerrain(int x, int y, Image img) {
    OgreTerrainPINVOKE.TerrainGroup_defineTerrain__SWIG_4(swigCPtr, x, y, Image.getCPtr(img));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void defineTerrain(int x, int y, SWIGTYPE_p_float pFloat, LayerInstanceList layers) {
    OgreTerrainPINVOKE.TerrainGroup_defineTerrain__SWIG_5(swigCPtr, x, y, SWIGTYPE_p_float.getCPtr(pFloat), LayerInstanceList.getCPtr(layers));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void defineTerrain(int x, int y, SWIGTYPE_p_float pFloat) {
    OgreTerrainPINVOKE.TerrainGroup_defineTerrain__SWIG_6(swigCPtr, x, y, SWIGTYPE_p_float.getCPtr(pFloat));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void defineTerrain(int x, int y, string filename) {
    OgreTerrainPINVOKE.TerrainGroup_defineTerrain__SWIG_7(swigCPtr, x, y, filename);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void loadAllTerrains(bool synchronous) {
    OgreTerrainPINVOKE.TerrainGroup_loadAllTerrains__SWIG_0(swigCPtr, synchronous);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void loadAllTerrains() {
    OgreTerrainPINVOKE.TerrainGroup_loadAllTerrains__SWIG_1(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void loadTerrain(int x, int y, bool synchronous) {
    OgreTerrainPINVOKE.TerrainGroup_loadTerrain__SWIG_0(swigCPtr, x, y, synchronous);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void loadTerrain(int x, int y) {
    OgreTerrainPINVOKE.TerrainGroup_loadTerrain__SWIG_1(swigCPtr, x, y);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadLegacyTerrain(string cfgFilename, int x, int y, bool synchronous) {
    OgreTerrainPINVOKE.TerrainGroup_loadLegacyTerrain__SWIG_0(swigCPtr, cfgFilename, x, y, synchronous);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadLegacyTerrain(string cfgFilename, int x, int y) {
    OgreTerrainPINVOKE.TerrainGroup_loadLegacyTerrain__SWIG_1(swigCPtr, cfgFilename, x, y);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadLegacyTerrain(string cfgFilename, int x) {
    OgreTerrainPINVOKE.TerrainGroup_loadLegacyTerrain__SWIG_2(swigCPtr, cfgFilename, x);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadLegacyTerrain(string cfgFilename) {
    OgreTerrainPINVOKE.TerrainGroup_loadLegacyTerrain__SWIG_3(swigCPtr, cfgFilename);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadLegacyTerrain(ConfigFile cfg, int x, int y, bool synchronous) {
    OgreTerrainPINVOKE.TerrainGroup_loadLegacyTerrain__SWIG_4(swigCPtr, ConfigFile.getCPtr(cfg), x, y, synchronous);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadLegacyTerrain(ConfigFile cfg, int x, int y) {
    OgreTerrainPINVOKE.TerrainGroup_loadLegacyTerrain__SWIG_5(swigCPtr, ConfigFile.getCPtr(cfg), x, y);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadLegacyTerrain(ConfigFile cfg, int x) {
    OgreTerrainPINVOKE.TerrainGroup_loadLegacyTerrain__SWIG_6(swigCPtr, ConfigFile.getCPtr(cfg), x);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadLegacyTerrain(ConfigFile cfg) {
    OgreTerrainPINVOKE.TerrainGroup_loadLegacyTerrain__SWIG_7(swigCPtr, ConfigFile.getCPtr(cfg));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void unloadTerrain(int x, int y) {
    OgreTerrainPINVOKE.TerrainGroup_unloadTerrain(swigCPtr, x, y);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeTerrain(int x, int y) {
    OgreTerrainPINVOKE.TerrainGroup_removeTerrain(swigCPtr, x, y);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeAllTerrains() {
    OgreTerrainPINVOKE.TerrainGroup_removeAllTerrains(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void saveAllTerrains(bool onlyIfModified, bool replaceManualFilenames) {
    OgreTerrainPINVOKE.TerrainGroup_saveAllTerrains__SWIG_0(swigCPtr, onlyIfModified, replaceManualFilenames);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void saveAllTerrains(bool onlyIfModified) {
    OgreTerrainPINVOKE.TerrainGroup_saveAllTerrains__SWIG_1(swigCPtr, onlyIfModified);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public class TerrainSlotDefinition : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal TerrainSlotDefinition(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TerrainSlotDefinition obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~TerrainSlotDefinition() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreTerrainPINVOKE.delete_TerrainGroup_TerrainSlotDefinition(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public string filename {
      set {
        OgreTerrainPINVOKE.TerrainGroup_TerrainSlotDefinition_filename_set(swigCPtr, value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        string ret = OgreTerrainPINVOKE.TerrainGroup_TerrainSlotDefinition_filename_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Terrain.ImportData importData {
      set {
        OgreTerrainPINVOKE.TerrainGroup_TerrainSlotDefinition_importData_set(swigCPtr, Terrain.ImportData.getCPtr(value));
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainGroup_TerrainSlotDefinition_importData_get(swigCPtr);
        Terrain.ImportData ret = (cPtr == global::System.IntPtr.Zero) ? null : new Terrain.ImportData(cPtr, false);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public TerrainSlotDefinition() : this(OgreTerrainPINVOKE.new_TerrainGroup_TerrainSlotDefinition(), true) {
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void useImportData() {
      OgreTerrainPINVOKE.TerrainGroup_TerrainSlotDefinition_useImportData(swigCPtr);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void useFilename() {
      OgreTerrainPINVOKE.TerrainGroup_TerrainSlotDefinition_useFilename(swigCPtr);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void freeImportData() {
      OgreTerrainPINVOKE.TerrainGroup_TerrainSlotDefinition_freeImportData(swigCPtr);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public class TerrainSlot : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal TerrainSlot(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TerrainSlot obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~TerrainSlot() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreTerrainPINVOKE.delete_TerrainGroup_TerrainSlot(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public int x {
      set {
        OgreTerrainPINVOKE.TerrainGroup_TerrainSlot_x_set(swigCPtr, value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = OgreTerrainPINVOKE.TerrainGroup_TerrainSlot_x_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int y {
      set {
        OgreTerrainPINVOKE.TerrainGroup_TerrainSlot_y_set(swigCPtr, value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = OgreTerrainPINVOKE.TerrainGroup_TerrainSlot_y_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public TerrainGroup.TerrainSlotDefinition def {
      set {
        OgreTerrainPINVOKE.TerrainGroup_TerrainSlot_def_set(swigCPtr, TerrainGroup.TerrainSlotDefinition.getCPtr(value));
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainGroup_TerrainSlot_def_get(swigCPtr);
        TerrainGroup.TerrainSlotDefinition ret = (cPtr == global::System.IntPtr.Zero) ? null : new TerrainGroup.TerrainSlotDefinition(cPtr, false);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Terrain instance {
      set {
        OgreTerrainPINVOKE.TerrainGroup_TerrainSlot_instance_set(swigCPtr, Terrain.getCPtr(value));
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainGroup_TerrainSlot_instance_get(swigCPtr);
        Terrain ret = (cPtr == global::System.IntPtr.Zero) ? null : new Terrain(cPtr, false);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public TerrainSlot(int _x, int _y) : this(OgreTerrainPINVOKE.new_TerrainGroup_TerrainSlot(_x, _y), true) {
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void freeInstance() {
      OgreTerrainPINVOKE.TerrainGroup_TerrainSlot_freeInstance(swigCPtr);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public virtual TerrainGroup.TerrainSlotDefinition getTerrainDefinition(int x, int y) {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainGroup_getTerrainDefinition(swigCPtr, x, y);
    TerrainGroup.TerrainSlotDefinition ret = (cPtr == global::System.IntPtr.Zero) ? null : new TerrainGroup.TerrainSlotDefinition(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Terrain getTerrain(int x, int y) {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainGroup_getTerrain(swigCPtr, x, y);
    Terrain ret = (cPtr == global::System.IntPtr.Zero) ? null : new Terrain(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void freeTemporaryResources() {
    OgreTerrainPINVOKE.TerrainGroup_freeTemporaryResources(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void update(bool synchronous) {
    OgreTerrainPINVOKE.TerrainGroup_update__SWIG_0(swigCPtr, synchronous);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void update() {
    OgreTerrainPINVOKE.TerrainGroup_update__SWIG_1(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateGeometry() {
    OgreTerrainPINVOKE.TerrainGroup_updateGeometry(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateDerivedData(bool synchronous, byte typeMask) {
    OgreTerrainPINVOKE.TerrainGroup_updateDerivedData__SWIG_0(swigCPtr, synchronous, typeMask);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateDerivedData(bool synchronous) {
    OgreTerrainPINVOKE.TerrainGroup_updateDerivedData__SWIG_1(swigCPtr, synchronous);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateDerivedData() {
    OgreTerrainPINVOKE.TerrainGroup_updateDerivedData__SWIG_2(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public class RayResult : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal RayResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RayResult obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~RayResult() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreTerrainPINVOKE.delete_TerrainGroup_RayResult(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public bool hit {
      set {
        OgreTerrainPINVOKE.TerrainGroup_RayResult_hit_set(swigCPtr, value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        bool ret = OgreTerrainPINVOKE.TerrainGroup_RayResult_hit_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Terrain terrain {
      set {
        OgreTerrainPINVOKE.TerrainGroup_RayResult_terrain_set(swigCPtr, Terrain.getCPtr(value));
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainGroup_RayResult_terrain_get(swigCPtr);
        Terrain ret = (cPtr == global::System.IntPtr.Zero) ? null : new Terrain(cPtr, false);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Vector3 position {
      set {
        OgreTerrainPINVOKE.TerrainGroup_RayResult_position_set(swigCPtr, Vector3.getCPtr(value));
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainGroup_RayResult_position_get(swigCPtr);
        Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public RayResult(bool _hit, Terrain _terrain, Vector3 _pos) : this(OgreTerrainPINVOKE.new_TerrainGroup_RayResult(_hit, Terrain.getCPtr(_terrain), Vector3.getCPtr(_pos)), true) {
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public float getHeightAtWorldPosition(float x, float y, float z, SWIGTYPE_p_p_Ogre__Terrain ppTerrain) {
    float ret = OgreTerrainPINVOKE.TerrainGroup_getHeightAtWorldPosition__SWIG_0(swigCPtr, x, y, z, SWIGTYPE_p_p_Ogre__Terrain.getCPtr(ppTerrain));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getHeightAtWorldPosition(float x, float y, float z) {
    float ret = OgreTerrainPINVOKE.TerrainGroup_getHeightAtWorldPosition__SWIG_1(swigCPtr, x, y, z);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getHeightAtWorldPosition(Vector3 pos, SWIGTYPE_p_p_Ogre__Terrain ppTerrain) {
    float ret = OgreTerrainPINVOKE.TerrainGroup_getHeightAtWorldPosition__SWIG_2(swigCPtr, Vector3.getCPtr(pos), SWIGTYPE_p_p_Ogre__Terrain.getCPtr(ppTerrain));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getHeightAtWorldPosition(Vector3 pos) {
    float ret = OgreTerrainPINVOKE.TerrainGroup_getHeightAtWorldPosition__SWIG_3(swigCPtr, Vector3.getCPtr(pos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void boxIntersects(AxisAlignedBox box, SWIGTYPE_p_std__vectorT_Ogre__Terrain_p_t resultList) {
    OgreTerrainPINVOKE.TerrainGroup_boxIntersects(swigCPtr, AxisAlignedBox.getCPtr(box), SWIGTYPE_p_std__vectorT_Ogre__Terrain_p_t.getCPtr(resultList));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void sphereIntersects(Sphere sphere, SWIGTYPE_p_std__vectorT_Ogre__Terrain_p_t resultList) {
    OgreTerrainPINVOKE.TerrainGroup_sphereIntersects(swigCPtr, Sphere.getCPtr(sphere), SWIGTYPE_p_std__vectorT_Ogre__Terrain_p_t.getCPtr(resultList));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void convertWorldPositionToTerrainSlot(Vector3 pos, SWIGTYPE_p_long x, SWIGTYPE_p_long y) {
    OgreTerrainPINVOKE.TerrainGroup_convertWorldPositionToTerrainSlot(swigCPtr, Vector3.getCPtr(pos), SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(y));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void convertTerrainSlotToWorldPosition(int x, int y, Vector3 pos) {
    OgreTerrainPINVOKE.TerrainGroup_convertTerrainSlotToWorldPosition(swigCPtr, x, y, Vector3.getCPtr(pos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isDerivedDataUpdateInProgress() {
    bool ret = OgreTerrainPINVOKE.TerrainGroup_isDerivedDataUpdateInProgress(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__mapT_unsigned_int_Ogre__TerrainGroup__TerrainSlot_p_std__lessT_unsigned_int_t_t getTerrainSlots() {
    SWIGTYPE_p_std__mapT_unsigned_int_Ogre__TerrainGroup__TerrainSlot_p_std__lessT_unsigned_int_t_t ret = new SWIGTYPE_p_std__mapT_unsigned_int_Ogre__TerrainGroup__TerrainSlot_p_std__lessT_unsigned_int_t_t(OgreTerrainPINVOKE.TerrainGroup_getTerrainSlots(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint packIndex(int x, int y) {
    uint ret = OgreTerrainPINVOKE.TerrainGroup_packIndex(swigCPtr, x, y);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void unpackIndex(uint key, SWIGTYPE_p_long x, SWIGTYPE_p_long y) {
    OgreTerrainPINVOKE.TerrainGroup_unpackIndex(swigCPtr, key, SWIGTYPE_p_long.getCPtr(x), SWIGTYPE_p_long.getCPtr(y));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public string generateFilename(int x, int y) {
    string ret = OgreTerrainPINVOKE.TerrainGroup_generateFilename(swigCPtr, x, y);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void saveGroupDefinition(string filename) {
    OgreTerrainPINVOKE.TerrainGroup_saveGroupDefinition__SWIG_0(swigCPtr, filename);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void saveGroupDefinition(SWIGTYPE_p_Ogre__StreamSerialiser stream) {
    OgreTerrainPINVOKE.TerrainGroup_saveGroupDefinition__SWIG_1(swigCPtr, SWIGTYPE_p_Ogre__StreamSerialiser.getCPtr(stream));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadGroupDefinition(string filename) {
    OgreTerrainPINVOKE.TerrainGroup_loadGroupDefinition__SWIG_0(swigCPtr, filename);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadGroupDefinition(SWIGTYPE_p_Ogre__StreamSerialiser stream) {
    OgreTerrainPINVOKE.TerrainGroup_loadGroupDefinition__SWIG_1(swigCPtr, SWIGTYPE_p_Ogre__StreamSerialiser.getCPtr(stream));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint CHUNK_ID {
    get {
      uint ret = OgreTerrainPINVOKE.TerrainGroup_CHUNK_ID_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ushort CHUNK_VERSION {
    get {
      ushort ret = OgreTerrainPINVOKE.TerrainGroup_CHUNK_VERSION_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public void increaseLodLevel(int x, int y, bool synchronous) {
    OgreTerrainPINVOKE.TerrainGroup_increaseLodLevel__SWIG_0(swigCPtr, x, y, synchronous);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void increaseLodLevel(int x, int y) {
    OgreTerrainPINVOKE.TerrainGroup_increaseLodLevel__SWIG_1(swigCPtr, x, y);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void decreaseLodLevel(int x, int y) {
    OgreTerrainPINVOKE.TerrainGroup_decreaseLodLevel(swigCPtr, x, y);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAutoUpdateLod(SWIGTYPE_p_Ogre__TerrainAutoUpdateLod updater) {
    OgreTerrainPINVOKE.TerrainGroup_setAutoUpdateLod(swigCPtr, SWIGTYPE_p_Ogre__TerrainAutoUpdateLod.getCPtr(updater));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void autoUpdateLod(int x, int y, bool synchronous, Any data) {
    OgreTerrainPINVOKE.TerrainGroup_autoUpdateLod(swigCPtr, x, y, synchronous, Any.getCPtr(data));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void autoUpdateLodAll(bool synchronous, Any data) {
    OgreTerrainPINVOKE.TerrainGroup_autoUpdateLodAll(swigCPtr, synchronous, Any.getCPtr(data));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNumTerrainPrepareRequests() {
    uint ret = OgreTerrainPINVOKE.TerrainGroup_getNumTerrainPrepareRequests(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
