//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class BulletDebugDrawer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BulletDebugDrawer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BulletDebugDrawer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BulletDebugDrawer() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreBulletPINVOKE.delete_BulletDebugDrawer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public BulletDebugDrawer(SceneNode node, btCollisionWorld world) : this(OgreBulletPINVOKE.new_BulletDebugDrawer(SceneNode.getCPtr(node), btCollisionWorld.getCPtr(world)), true) {
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void update() {
    OgreBulletPINVOKE.BulletDebugDrawer_update(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void drawLine(btVector3 from, btVector3 to, btVector3 color) {
    OgreBulletPINVOKE.BulletDebugDrawer_drawLine(swigCPtr, btVector3.getCPtr(from), btVector3.getCPtr(to), btVector3.getCPtr(color));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void drawContactPoint(btVector3 PointOnB, btVector3 normalOnB, float distance, int lifeTime, btVector3 color) {
    OgreBulletPINVOKE.BulletDebugDrawer_drawContactPoint(swigCPtr, btVector3.getCPtr(PointOnB), btVector3.getCPtr(normalOnB), distance, lifeTime, btVector3.getCPtr(color));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reportErrorWarning(string warningString) {
    OgreBulletPINVOKE.BulletDebugDrawer_reportErrorWarning(swigCPtr, warningString);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void draw3dText(btVector3 location, string textString) {
    OgreBulletPINVOKE.BulletDebugDrawer_draw3dText(swigCPtr, btVector3.getCPtr(location), textString);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDebugMode(int mode) {
    OgreBulletPINVOKE.BulletDebugDrawer_setDebugMode(swigCPtr, mode);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    OgreBulletPINVOKE.BulletDebugDrawer_clear(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getDebugMode() {
    int ret = OgreBulletPINVOKE.BulletDebugDrawer_getDebugMode(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
