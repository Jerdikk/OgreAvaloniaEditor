//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class BillboardSet : MovableObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal BillboardSet(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.BillboardSet_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BillboardSet obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_BillboardSet(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public BillboardSet(string name, uint poolSize, bool externalDataSource) : this(OgrePINVOKE.new_BillboardSet__SWIG_1(name, poolSize, externalDataSource), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public BillboardSet(string name, uint poolSize) : this(OgrePINVOKE.new_BillboardSet__SWIG_2(name, poolSize), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public BillboardSet(string name) : this(OgrePINVOKE.new_BillboardSet__SWIG_3(name), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Billboard createBillboard(Vector3 position, ColourValue colour) {
    global::System.IntPtr cPtr = OgrePINVOKE.BillboardSet_createBillboard__SWIG_0(swigCPtr, Vector3.getCPtr(position), ColourValue.getCPtr(colour));
    Billboard ret = (cPtr == global::System.IntPtr.Zero) ? null : new Billboard(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Billboard createBillboard(Vector3 position) {
    global::System.IntPtr cPtr = OgrePINVOKE.BillboardSet_createBillboard__SWIG_1(swigCPtr, Vector3.getCPtr(position));
    Billboard ret = (cPtr == global::System.IntPtr.Zero) ? null : new Billboard(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Billboard createBillboard(float x, float y, float z, ColourValue colour) {
    global::System.IntPtr cPtr = OgrePINVOKE.BillboardSet_createBillboard__SWIG_2(swigCPtr, x, y, z, ColourValue.getCPtr(colour));
    Billboard ret = (cPtr == global::System.IntPtr.Zero) ? null : new Billboard(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Billboard createBillboard(float x, float y, float z) {
    global::System.IntPtr cPtr = OgrePINVOKE.BillboardSet_createBillboard__SWIG_3(swigCPtr, x, y, z);
    Billboard ret = (cPtr == global::System.IntPtr.Zero) ? null : new Billboard(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getNumBillboards() {
    int ret = OgrePINVOKE.BillboardSet_getNumBillboards(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAutoextend(bool autoextend) {
    OgrePINVOKE.BillboardSet_setAutoextend(swigCPtr, autoextend);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getAutoextend() {
    bool ret = OgrePINVOKE.BillboardSet_getAutoextend(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSortingEnabled(bool sortenable) {
    OgrePINVOKE.BillboardSet_setSortingEnabled(swigCPtr, sortenable);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getSortingEnabled() {
    bool ret = OgrePINVOKE.BillboardSet_getSortingEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setPoolSize(uint size) {
    OgrePINVOKE.BillboardSet_setPoolSize(swigCPtr, size);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getPoolSize() {
    uint ret = OgrePINVOKE.BillboardSet_getPoolSize(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void clear() {
    OgrePINVOKE.BillboardSet_clear(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Billboard getBillboard(uint index) {
    global::System.IntPtr cPtr = OgrePINVOKE.BillboardSet_getBillboard(swigCPtr, index);
    Billboard ret = (cPtr == global::System.IntPtr.Zero) ? null : new Billboard(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void removeBillboard(uint index) {
    OgrePINVOKE.BillboardSet_removeBillboard__SWIG_0(swigCPtr, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeBillboard(Billboard pBill) {
    OgrePINVOKE.BillboardSet_removeBillboard__SWIG_1(swigCPtr, Billboard.getCPtr(pBill));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBillboardOrigin(BillboardOrigin origin) {
    OgrePINVOKE.BillboardSet_setBillboardOrigin(swigCPtr, (int)origin);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public BillboardOrigin getBillboardOrigin() {
    BillboardOrigin ret = (BillboardOrigin)OgrePINVOKE.BillboardSet_getBillboardOrigin(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBillboardRotationType(BillboardRotationType rotationType) {
    OgrePINVOKE.BillboardSet_setBillboardRotationType(swigCPtr, (int)rotationType);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public BillboardRotationType getBillboardRotationType() {
    BillboardRotationType ret = (BillboardRotationType)OgrePINVOKE.BillboardSet_getBillboardRotationType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDefaultDimensions(float width, float height) {
    OgrePINVOKE.BillboardSet_setDefaultDimensions(swigCPtr, width, height);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDefaultWidth(float width) {
    OgrePINVOKE.BillboardSet_setDefaultWidth(swigCPtr, width);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getDefaultWidth() {
    float ret = OgrePINVOKE.BillboardSet_getDefaultWidth(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDefaultHeight(float height) {
    OgrePINVOKE.BillboardSet_setDefaultHeight(swigCPtr, height);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getDefaultHeight() {
    float ret = OgrePINVOKE.BillboardSet_getDefaultHeight(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setMaterialName(string name, string groupName) {
    OgrePINVOKE.BillboardSet_setMaterialName__SWIG_0(swigCPtr, name, groupName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setMaterialName(string name) {
    OgrePINVOKE.BillboardSet_setMaterialName__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getMaterialName() {
    string ret = OgrePINVOKE.BillboardSet_getMaterialName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _notifyCurrentCamera(Camera cam) {
    OgrePINVOKE.BillboardSet__notifyCurrentCamera(swigCPtr, Camera.getCPtr(cam));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void beginBillboards(uint numBillboards) {
    OgrePINVOKE.BillboardSet_beginBillboards__SWIG_0(swigCPtr, numBillboards);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void beginBillboards() {
    OgrePINVOKE.BillboardSet_beginBillboards__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void injectBillboard(Billboard bb) {
    OgrePINVOKE.BillboardSet_injectBillboard(swigCPtr, Billboard.getCPtr(bb));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void endBillboards() {
    OgrePINVOKE.BillboardSet_endBillboards(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBounds(AxisAlignedBox box, float radius) {
    OgrePINVOKE.BillboardSet_setBounds(swigCPtr, AxisAlignedBox.getCPtr(box), radius);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public AxisAlignedBox getBoundingBox() {
    AxisAlignedBox ret = new AxisAlignedBox(OgrePINVOKE.BillboardSet_getBoundingBox(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getBoundingRadius() {
    float ret = OgrePINVOKE.BillboardSet_getBoundingRadius(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _updateRenderQueue(RenderQueue queue) {
    OgrePINVOKE.BillboardSet__updateRenderQueue(swigCPtr, RenderQueue.getCPtr(queue));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public MaterialPtr getMaterial() {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.BillboardSet_getMaterial(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setMaterial(MaterialPtr material) {
    OgrePINVOKE.BillboardSet_setMaterial(swigCPtr, MaterialPtr.getCPtr(material));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void getRenderOperation(RenderOperation op) {
    OgrePINVOKE.BillboardSet_getRenderOperation(swigCPtr, RenderOperation.getCPtr(op));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void getWorldTransforms(Matrix4 xform) {
    OgrePINVOKE.BillboardSet_getWorldTransforms(swigCPtr, Matrix4.getCPtr(xform));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getCullIndividually() {
    bool ret = OgrePINVOKE.BillboardSet_getCullIndividually(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCullIndividually(bool cullIndividual) {
    OgrePINVOKE.BillboardSet_setCullIndividually(swigCPtr, cullIndividual);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBillboardType(BillboardType bbt) {
    OgrePINVOKE.BillboardSet_setBillboardType(swigCPtr, (int)bbt);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public BillboardType getBillboardType() {
    BillboardType ret = (BillboardType)OgrePINVOKE.BillboardSet_getBillboardType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCommonDirection(Vector3 vec) {
    OgrePINVOKE.BillboardSet_setCommonDirection(swigCPtr, Vector3.getCPtr(vec));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 getCommonDirection() {
    Vector3 ret = new Vector3(OgrePINVOKE.BillboardSet_getCommonDirection(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCommonUpVector(Vector3 vec) {
    OgrePINVOKE.BillboardSet_setCommonUpVector(swigCPtr, Vector3.getCPtr(vec));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 getCommonUpVector() {
    Vector3 ret = new Vector3(OgrePINVOKE.BillboardSet_getCommonUpVector(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setUseAccurateFacing(bool acc) {
    OgrePINVOKE.BillboardSet_setUseAccurateFacing(swigCPtr, acc);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getUseAccurateFacing() {
    bool ret = OgrePINVOKE.BillboardSet_getUseAccurateFacing(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getMovableType() {
    string ret = OgrePINVOKE.BillboardSet_getMovableType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getSquaredViewDepth(Camera cam) {
    float ret = OgrePINVOKE.BillboardSet_getSquaredViewDepth(swigCPtr, Camera.getCPtr(cam));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void _updateBounds() {
    OgrePINVOKE.BillboardSet__updateBounds(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_Ogre__Light_p_t getLights() {
    SWIGTYPE_p_std__vectorT_Ogre__Light_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__Light_p_t(OgrePINVOKE.BillboardSet_getLights(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void visitRenderables(Renderable.Visitor visitor, bool debugRenderables) {
    OgrePINVOKE.BillboardSet_visitRenderables__SWIG_0(swigCPtr, Renderable.Visitor.getCPtr(visitor), debugRenderables);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void visitRenderables(Renderable.Visitor visitor) {
    OgrePINVOKE.BillboardSet_visitRenderables__SWIG_1(swigCPtr, Renderable.Visitor.getCPtr(visitor));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _sortBillboards(Camera cam) {
    OgrePINVOKE.BillboardSet__sortBillboards(swigCPtr, Camera.getCPtr(cam));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SortMode _getSortMode() {
    SortMode ret = (SortMode)OgrePINVOKE.BillboardSet__getSortMode(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBillboardsInWorldSpace(bool ws) {
    OgrePINVOKE.BillboardSet_setBillboardsInWorldSpace(swigCPtr, ws);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getBillboardsInWorldSpace() {
    bool ret = OgrePINVOKE.BillboardSet_getBillboardsInWorldSpace(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTextureCoords(SWIGTYPE_p_std__vectorT_Ogre__TRectT_float_t_t coords) {
    OgrePINVOKE.BillboardSet_setTextureCoords(swigCPtr, SWIGTYPE_p_std__vectorT_Ogre__TRectT_float_t_t.getCPtr(coords));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTextureStacksAndSlices(byte stacks, byte slices) {
    OgrePINVOKE.BillboardSet_setTextureStacksAndSlices(swigCPtr, stacks, slices);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_Ogre__TRectT_float_t_t getTextureCoords() {
    SWIGTYPE_p_std__vectorT_Ogre__TRectT_float_t_t ret = new SWIGTYPE_p_std__vectorT_Ogre__TRectT_float_t_t(OgrePINVOKE.BillboardSet_getTextureCoords(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setPointRenderingEnabled(bool enabled) {
    OgrePINVOKE.BillboardSet_setPointRenderingEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isPointRenderingEnabled() {
    bool ret = OgrePINVOKE.BillboardSet_isPointRenderingEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getTypeFlags() {
    uint ret = OgrePINVOKE.BillboardSet_getTypeFlags(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAutoUpdate(bool autoUpdate) {
    OgrePINVOKE.BillboardSet_setAutoUpdate(swigCPtr, autoUpdate);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getAutoUpdate() {
    bool ret = OgrePINVOKE.BillboardSet_getAutoUpdate(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void notifyBillboardDataChanged() {
    OgrePINVOKE.BillboardSet_notifyBillboardDataChanged(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void _releaseManualHardwareResources() {
    OgrePINVOKE.BillboardSet__releaseManualHardwareResources(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
