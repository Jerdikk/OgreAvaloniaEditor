/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_RTShader(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_RTShader(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_RTShader(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


/* Includes the header in the wrapper code */
#include "Ogre.h"
#include "OgreRTShaderSystem.h"


#include <string>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "OgreRTShaderCSHARP_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_SGScriptTranslator___() {
  void * jresult ;
  Ogre::RTShader::SGScriptTranslator *result = 0 ;
  
  {
    try {
      result = (Ogre::RTShader::SGScriptTranslator *)new Ogre::RTShader::SGScriptTranslator();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_SGScriptTranslator_translate___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::RTShader::SGScriptTranslator *arg1 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::ScriptCompiler *arg2 = (Ogre::ScriptCompiler *) 0 ;
  Ogre::AbstractNodePtr *arg3 = 0 ;
  
  arg1 = (Ogre::RTShader::SGScriptTranslator *)jarg1; 
  arg2 = (Ogre::ScriptCompiler *)jarg2; 
  arg3 = (Ogre::AbstractNodePtr *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::AbstractNodePtr const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->translate(arg2,(Ogre::AbstractNodePtr const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_SGScriptTranslator_getGeneratedSubRenderState___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::RTShader::SGScriptTranslator *arg1 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  arg1 = (Ogre::RTShader::SGScriptTranslator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->getGeneratedSubRenderState((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_SGScriptTranslator___(void * jarg1) {
  Ogre::RTShader::SGScriptTranslator *arg1 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  
  arg1 = (Ogre::RTShader::SGScriptTranslator *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SRS_TRANSFORM_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::SRS_TRANSFORM;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SRS_VERTEX_COLOUR_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::SRS_VERTEX_COLOUR;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SRS_TEXTURING_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::SRS_TEXTURING;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SRS_PER_VERTEX_LIGHTING_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::SRS_PER_VERTEX_LIGHTING;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SRS_FOG_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::SRS_FOG;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SRS_ALPHA_TEST_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::SRS_ALPHA_TEST;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SRS_INTEGRATED_PSSM3_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::SRS_INTEGRATED_PSSM3;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SRS_SHADOW_MAPPING_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::SRS_SHADOW_MAPPING;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SRS_PER_PIXEL_LIGHTING_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::SRS_PER_PIXEL_LIGHTING;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SRS_COOK_TORRANCE_LIGHTING_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::SRS_COOK_TORRANCE_LIGHTING;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SRS_IMAGE_BASED_LIGHTING_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::SRS_IMAGE_BASED_LIGHTING;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SRS_NORMALMAP_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::SRS_NORMALMAP;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SRS_WBOIT_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::SRS_WBOIT;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SRS_GBUFFER_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::SRS_GBUFFER;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SRS_TRIPLANAR_TEXTURING_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::SRS_TRIPLANAR_TEXTURING;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SRS_LAYERED_BLENDING_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::SRS_LAYERED_BLENDING;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SRS_HARDWARE_SKINNING_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::SRS_HARDWARE_SKINNING;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_SubRenderState___(void * jarg1) {
  Ogre::RTShader::SubRenderState *arg1 = (Ogre::RTShader::SubRenderState *) 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderState *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SubRenderState_getType___(void * jarg1) {
  char * jresult ;
  Ogre::RTShader::SubRenderState *arg1 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderState *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::RTShader::SubRenderState const *)arg1)->getType();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_SubRenderState_getExecutionOrder___(void * jarg1) {
  int jresult ;
  Ogre::RTShader::SubRenderState *arg1 = (Ogre::RTShader::SubRenderState *) 0 ;
  int result;
  
  arg1 = (Ogre::RTShader::SubRenderState *)jarg1; 
  {
    try {
      result = (int)((Ogre::RTShader::SubRenderState const *)arg1)->getExecutionOrder();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_SubRenderState_copyFrom___(void * jarg1, void * jarg2) {
  Ogre::RTShader::SubRenderState *arg1 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderState *)jarg1; 
  arg2 = (Ogre::RTShader::SubRenderState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::RTShader::SubRenderState const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((Ogre::RTShader::SubRenderState const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_SubRenderState_createCpuSubPrograms___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Ogre::RTShader::SubRenderState *arg1 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::RTShader::ProgramSet *arg2 = (Ogre::RTShader::ProgramSet *) 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::SubRenderState *)jarg1; 
  arg2 = (Ogre::RTShader::ProgramSet *)jarg2; 
  {
    try {
      result = (bool)(arg1)->createCpuSubPrograms(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_SubRenderState_updateGpuProgramsParams___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Ogre::RTShader::SubRenderState *arg1 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::Renderable *arg2 = (Ogre::Renderable *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::AutoParamDataSource *arg4 = (Ogre::AutoParamDataSource *) 0 ;
  Ogre::LightList *arg5 = (Ogre::LightList *) 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderState *)jarg1; 
  arg2 = (Ogre::Renderable *)jarg2; 
  arg3 = (Ogre::Pass *)jarg3; 
  arg4 = (Ogre::AutoParamDataSource *)jarg4; 
  arg5 = (Ogre::LightList *)jarg5; 
  {
    try {
      (arg1)->updateGpuProgramsParams(arg2,(Ogre::Pass const *)arg3,(Ogre::AutoParamDataSource const *)arg4,(Ogre::LightList const *)arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_SubRenderState_preAddToRenderState___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Ogre::RTShader::SubRenderState *arg1 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::RTShader::RenderState *arg2 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::SubRenderState *)jarg1; 
  arg2 = (Ogre::RTShader::RenderState *)jarg2; 
  arg3 = (Ogre::Pass *)jarg3; 
  arg4 = (Ogre::Pass *)jarg4; 
  {
    try {
      result = (bool)(arg1)->preAddToRenderState((Ogre::RTShader::RenderState const *)arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_SubRenderState_getAccessor__SWIG_0___(void * jarg1) {
  void * jresult ;
  Ogre::RTShader::SubRenderState *arg1 = (Ogre::RTShader::SubRenderState *) 0 ;
  SwigValueWrapper< Ogre::SharedPtr< Ogre::RTShader::SubRenderStateAccessor > > result;
  
  arg1 = (Ogre::RTShader::SubRenderState *)jarg1; 
  {
    try {
      result = (arg1)->getAccessor();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::RTShader::SubRenderStateAccessorPtr((const Ogre::RTShader::SubRenderStateAccessorPtr &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_SubRenderState_setParameter__SWIG_0___(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Ogre::RTShader::SubRenderState *arg1 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::SubRenderState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (bool)(arg1)->setParameter((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_SubRenderState_setParameter__SWIG_2___(void * jarg1, char * jarg2, void * jarg3) {
  Ogre::RTShader::SubRenderState *arg1 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::Any *arg3 = 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Ogre::Any *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Any const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setParameter((Ogre::String const &)*arg2,(Ogre::Any const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_SubRenderStateAccessor_addSubRenderStateInstance___(void * jarg1, void * jarg2) {
  Ogre::RTShader::SubRenderStateAccessor *arg1 = (Ogre::RTShader::SubRenderStateAccessor *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = (Ogre::RTShader::SubRenderState *) 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderStateAccessor *)jarg1; 
  arg2 = (Ogre::RTShader::SubRenderState *)jarg2; 
  {
    try {
      ((Ogre::RTShader::SubRenderStateAccessor const *)arg1)->addSubRenderStateInstance(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_SubRenderStateAccessor_removeSubRenderStateInstance___(void * jarg1, void * jarg2) {
  Ogre::RTShader::SubRenderStateAccessor *arg1 = (Ogre::RTShader::SubRenderStateAccessor *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = (Ogre::RTShader::SubRenderState *) 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderStateAccessor *)jarg1; 
  arg2 = (Ogre::RTShader::SubRenderState *)jarg2; 
  {
    try {
      ((Ogre::RTShader::SubRenderStateAccessor const *)arg1)->removeSubRenderStateInstance(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_SubRenderStateAccessor_getSubRenderStateInstanceSet__SWIG_0___(void * jarg1) {
  void * jresult ;
  Ogre::RTShader::SubRenderStateAccessor *arg1 = (Ogre::RTShader::SubRenderStateAccessor *) 0 ;
  Ogre::RTShader::SubRenderStateSet *result = 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderStateAccessor *)jarg1; 
  {
    try {
      result = (Ogre::RTShader::SubRenderStateSet *) &(arg1)->getSubRenderStateInstanceSet();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_SubRenderStateAccessor___(void * jarg1) {
  Ogre::RTShader::SubRenderStateAccessor *arg1 = (Ogre::RTShader::SubRenderStateAccessor *) 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderStateAccessor *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_SubRenderStateFactory___(void * jarg1) {
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderStateFactory *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_SubRenderStateFactory_getType___(void * jarg1) {
  char * jresult ;
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderStateFactory *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::RTShader::SubRenderStateFactory const *)arg1)->getType();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_SubRenderStateFactory_createInstance__SWIG_0___(void * jarg1) {
  void * jresult ;
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderStateFactory *)jarg1; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createInstance();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_SubRenderStateFactory_createInstance__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  Ogre::ScriptCompiler *arg2 = (Ogre::ScriptCompiler *) 0 ;
  Ogre::PropertyAbstractNode *arg3 = (Ogre::PropertyAbstractNode *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::RTShader::SGScriptTranslator *arg5 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderStateFactory *)jarg1; 
  arg2 = (Ogre::ScriptCompiler *)jarg2; 
  arg3 = (Ogre::PropertyAbstractNode *)jarg3; 
  arg4 = (Ogre::Pass *)jarg4; 
  arg5 = (Ogre::RTShader::SGScriptTranslator *)jarg5; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_SubRenderStateFactory_createInstance__SWIG_2___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  Ogre::ScriptCompiler *arg2 = (Ogre::ScriptCompiler *) 0 ;
  Ogre::PropertyAbstractNode *arg3 = (Ogre::PropertyAbstractNode *) 0 ;
  Ogre::TextureUnitState *arg4 = (Ogre::TextureUnitState *) 0 ;
  Ogre::RTShader::SGScriptTranslator *arg5 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderStateFactory *)jarg1; 
  arg2 = (Ogre::ScriptCompiler *)jarg2; 
  arg3 = (Ogre::PropertyAbstractNode *)jarg3; 
  arg4 = (Ogre::TextureUnitState *)jarg4; 
  arg5 = (Ogre::RTShader::SGScriptTranslator *)jarg5; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_SubRenderStateFactory_createOrRetrieveInstance___(void * jarg1, void * jarg2) {
  void * jresult ;
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  Ogre::RTShader::SGScriptTranslator *arg2 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderStateFactory *)jarg1; 
  arg2 = (Ogre::RTShader::SGScriptTranslator *)jarg2; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createOrRetrieveInstance(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_SubRenderStateFactory_destroyInstance___(void * jarg1, void * jarg2) {
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = (Ogre::RTShader::SubRenderState *) 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderStateFactory *)jarg1; 
  arg2 = (Ogre::RTShader::SubRenderState *)jarg2; 
  {
    try {
      (arg1)->destroyInstance(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_SubRenderStateFactory_destroyAllInstances___(void * jarg1) {
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderStateFactory *)jarg1; 
  {
    try {
      (arg1)->destroyAllInstances();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_SubRenderStateFactory_writeInstance__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  Ogre::MaterialSerializer *arg2 = (Ogre::MaterialSerializer *) 0 ;
  Ogre::RTShader::SubRenderState *arg3 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg5 = (Ogre::Pass *) 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderStateFactory *)jarg1; 
  arg2 = (Ogre::MaterialSerializer *)jarg2; 
  arg3 = (Ogre::RTShader::SubRenderState *)jarg3; 
  arg4 = (Ogre::Pass *)jarg4; 
  arg5 = (Ogre::Pass *)jarg5; 
  {
    try {
      (arg1)->writeInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_SubRenderStateFactory_writeInstance__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  Ogre::MaterialSerializer *arg2 = (Ogre::MaterialSerializer *) 0 ;
  Ogre::RTShader::SubRenderState *arg3 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::TextureUnitState *arg4 = (Ogre::TextureUnitState *) 0 ;
  Ogre::TextureUnitState *arg5 = (Ogre::TextureUnitState *) 0 ;
  
  arg1 = (Ogre::RTShader::SubRenderStateFactory *)jarg1; 
  arg2 = (Ogre::MaterialSerializer *)jarg2; 
  arg3 = (Ogre::RTShader::SubRenderState *)jarg3; 
  arg4 = (Ogre::TextureUnitState *)jarg4; 
  arg5 = (Ogre::TextureUnitState *)jarg5; 
  {
    try {
      (arg1)->writeInstance(arg2,arg3,(Ogre::TextureUnitState const *)arg4,(Ogre::TextureUnitState const *)arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_ProgramWriter___(void * jarg1) {
  Ogre::RTShader::ProgramWriter *arg1 = (Ogre::RTShader::ProgramWriter *) 0 ;
  
  arg1 = (Ogre::RTShader::ProgramWriter *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ProgramWriter_writeSourceCode___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::RTShader::ProgramWriter *arg1 = (Ogre::RTShader::ProgramWriter *) 0 ;
  std::ostream *arg2 = 0 ;
  Ogre::RTShader::Program *arg3 = (Ogre::RTShader::Program *) 0 ;
  
  arg1 = (Ogre::RTShader::ProgramWriter *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::RTShader::Program *)jarg3; 
  {
    try {
      (arg1)->writeSourceCode(*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_ProgramWriter_getTargetLanguage___(void * jarg1) {
  char * jresult ;
  Ogre::RTShader::ProgramWriter *arg1 = (Ogre::RTShader::ProgramWriter *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::RTShader::ProgramWriter *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::RTShader::ProgramWriter const *)arg1)->getTargetLanguage();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_initialize___() {
  unsigned int jresult ;
  bool result;
  
  {
    try {
      result = (bool)Ogre::RTShader::ShaderGenerator::initialize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_destroy___() {
  {
    try {
      Ogre::RTShader::ShaderGenerator::destroy();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_getSingleton___() {
  void * jresult ;
  Ogre::RTShader::ShaderGenerator *result = 0 ;
  
  {
    try {
      result = (Ogre::RTShader::ShaderGenerator *) &Ogre::RTShader::ShaderGenerator::getSingleton();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_addSceneManager___(void * jarg1, void * jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (Ogre::SceneManager *)jarg2; 
  {
    try {
      (arg1)->addSceneManager(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_removeSceneManager___(void * jarg1, void * jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (Ogre::SceneManager *)jarg2; 
  {
    try {
      (arg1)->removeSceneManager(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_getActiveSceneManager___(void * jarg1) {
  void * jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::SceneManager *result = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  {
    try {
      result = (Ogre::SceneManager *)(arg1)->getActiveSceneManager();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator__setActiveSceneManager___(void * jarg1, void * jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (Ogre::SceneManager *)jarg2; 
  {
    try {
      (arg1)->_setActiveSceneManager(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_setTargetLanguage___(void * jarg1, char * jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setTargetLanguage((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_getTargetLanguage___(void * jarg1) {
  char * jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::RTShader::ShaderGenerator const *)arg1)->getTargetLanguage();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_setShaderProfiles___(void * jarg1, int jarg2, char * jarg3) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::GpuProgramType arg2 ;
  Ogre::String *arg3 = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (Ogre::GpuProgramType)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->setShaderProfiles(arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_getShaderProfiles___(void * jarg1, int jarg2) {
  char * jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::GpuProgramType arg2 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (Ogre::GpuProgramType)jarg2; 
  {
    try {
      result = (Ogre::String *) &((Ogre::RTShader::ShaderGenerator const *)arg1)->getShaderProfiles(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_setShaderCachePath___(void * jarg1, char * jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setShaderCachePath((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_getShaderCachePath___(void * jarg1) {
  char * jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::RTShader::ShaderGenerator const *)arg1)->getShaderCachePath();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_flushShaderCache___(void * jarg1) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  {
    try {
      (arg1)->flushShaderCache();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_getRenderState__SWIG_0___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::RTShader::RenderState *result = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::RTShader::RenderState *)(arg1)->getRenderState((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_createOrRetrieveRenderState___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  SwigValueWrapper< std::pair< Ogre::RTShader::RenderState *,bool > > result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (arg1)->createOrRetrieveRenderState((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::RTShader::ShaderGenerator::RenderStateCreateOrRetrieveResult((const Ogre::RTShader::ShaderGenerator::RenderStateCreateOrRetrieveResult &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_hasRenderState___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)((Ogre::RTShader::ShaderGenerator const *)arg1)->hasRenderState((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_getRenderState__SWIG_1___(void * jarg1, char * jarg2, char * jarg3, char * jarg4, unsigned short jarg5) {
  void * jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  unsigned short arg5 ;
  Ogre::RTShader::RenderState *result = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (unsigned short)jarg5; 
  {
    try {
      result = (Ogre::RTShader::RenderState *)(arg1)->getRenderState((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_getRenderState__SWIG_2___(void * jarg1, char * jarg2, void * jarg3, unsigned short jarg4) {
  void * jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::Material *arg3 = 0 ;
  Ogre::uint16 arg4 ;
  Ogre::RTShader::RenderState *result = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Ogre::Material *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Material const & type is null", 0);
    return 0;
  } 
  arg4 = (Ogre::uint16)jarg4; 
  {
    try {
      result = (Ogre::RTShader::RenderState *)(arg1)->getRenderState((Ogre::String const &)*arg2,(Ogre::Material const &)*arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_getRenderState__SWIG_3___(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::Material *arg3 = 0 ;
  Ogre::RTShader::RenderState *result = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Ogre::Material *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Material const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Ogre::RTShader::RenderState *)(arg1)->getRenderState((Ogre::String const &)*arg2,(Ogre::Material const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_addSubRenderStateFactory___(void * jarg1, void * jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::RTShader::SubRenderStateFactory *arg2 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (Ogre::RTShader::SubRenderStateFactory *)jarg2; 
  {
    try {
      (arg1)->addSubRenderStateFactory(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_getNumSubRenderStateFactories___(void * jarg1) {
  unsigned long jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  size_t result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  {
    try {
      result = ((Ogre::RTShader::ShaderGenerator const *)arg1)->getNumSubRenderStateFactories();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_getSubRenderStateFactory__SWIG_0___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  size_t arg2 ;
  Ogre::RTShader::SubRenderStateFactory *result = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (Ogre::RTShader::SubRenderStateFactory *)(arg1)->getSubRenderStateFactory(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_getSubRenderStateFactory__SWIG_1___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::RTShader::SubRenderStateFactory *result = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::RTShader::SubRenderStateFactory *)(arg1)->getSubRenderStateFactory((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_removeSubRenderStateFactory___(void * jarg1, void * jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::RTShader::SubRenderStateFactory *arg2 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (Ogre::RTShader::SubRenderStateFactory *)jarg2; 
  {
    try {
      (arg1)->removeSubRenderStateFactory(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_createSubRenderState___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createSubRenderState((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_destroySubRenderState___(void * jarg1, void * jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = (Ogre::RTShader::SubRenderState *) 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (Ogre::RTShader::SubRenderState *)jarg2; 
  {
    try {
      (arg1)->destroySubRenderState(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_hasShaderBasedTechnique__SWIG_0___(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  unsigned int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  Ogre::String *arg5 = 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg5_str(jarg5);
  arg5 = &arg5_str; 
  {
    try {
      result = (bool)((Ogre::RTShader::ShaderGenerator const *)arg1)->hasShaderBasedTechnique((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4,(Ogre::String const &)*arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_hasShaderBasedTechnique__SWIG_1___(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::Material *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (Ogre::Material *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Material const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (bool)((Ogre::RTShader::ShaderGenerator const *)arg1)->hasShaderBasedTechnique((Ogre::Material const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_createShaderBasedTechnique__SWIG_0___(void * jarg1, void * jarg2, char * jarg3, char * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::Material *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (Ogre::Material *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Material const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (bool)(arg1)->createShaderBasedTechnique((Ogre::Material const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_createShaderBasedTechnique__SWIG_1___(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::Material *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (Ogre::Material *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Material const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (bool)(arg1)->createShaderBasedTechnique((Ogre::Material const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_createShaderBasedTechnique__SWIG_2___(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::Technique *arg2 = (Ogre::Technique *) 0 ;
  Ogre::String *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (Ogre::Technique *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (bool)(arg1)->createShaderBasedTechnique((Ogre::Technique const *)arg2,(Ogre::String const &)*arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_createShaderBasedTechnique__SWIG_3___(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::Technique *arg2 = (Ogre::Technique *) 0 ;
  Ogre::String *arg3 = 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (Ogre::Technique *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (bool)(arg1)->createShaderBasedTechnique((Ogre::Technique const *)arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_removeShaderBasedTechnique___(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::Technique *arg2 = (Ogre::Technique *) 0 ;
  Ogre::String *arg3 = 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (Ogre::Technique *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (bool)(arg1)->removeShaderBasedTechnique((Ogre::Technique const *)arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_removeAllShaderBasedTechniques__SWIG_0___(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (bool)(arg1)->removeAllShaderBasedTechniques((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_removeAllShaderBasedTechniques__SWIG_1___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)(arg1)->removeAllShaderBasedTechniques((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_removeAllShaderBasedTechniques__SWIG_2___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::Material *arg2 = 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (Ogre::Material *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Material const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->removeAllShaderBasedTechniques((Ogre::Material const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_cloneShaderBasedTechniques___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::Material *arg2 = 0 ;
  Ogre::Material *arg3 = 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (Ogre::Material *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Material const & type is null", 0);
    return 0;
  } 
  arg3 = (Ogre::Material *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Material & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->cloneShaderBasedTechniques((Ogre::Material const &)*arg2,*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_removeAllShaderBasedTechniques__SWIG_3___(void * jarg1) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  {
    try {
      (arg1)->removeAllShaderBasedTechniques();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_createScheme___(void * jarg1, char * jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->createScheme((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_invalidateScheme___(void * jarg1, char * jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->invalidateScheme((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_validateScheme___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)(arg1)->validateScheme((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_invalidateMaterial__SWIG_0___(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      (arg1)->invalidateMaterial((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_invalidateMaterial__SWIG_1___(void * jarg1, char * jarg2, char * jarg3) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->invalidateMaterial((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_invalidateMaterial__SWIG_2___(void * jarg1, char * jarg2, void * jarg3) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::Material *arg3 = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Ogre::Material *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Material const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->invalidateMaterial((Ogre::String const &)*arg2,(Ogre::Material const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_validateMaterial__SWIG_0___(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (bool)(arg1)->validateMaterial((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_validateMaterial__SWIG_1___(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (bool)(arg1)->validateMaterial((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_validateMaterial__SWIG_2___(void * jarg1, char * jarg2, void * jarg3) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::Material *arg3 = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Ogre::Material *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Material const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->validateMaterial((Ogre::String const &)*arg2,(Ogre::Material const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_invalidateMaterialIlluminationPasses__SWIG_0___(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      (arg1)->invalidateMaterialIlluminationPasses((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_invalidateMaterialIlluminationPasses__SWIG_1___(void * jarg1, char * jarg2, char * jarg3) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->invalidateMaterialIlluminationPasses((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_validateMaterialIlluminationPasses__SWIG_0___(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (bool)(arg1)->validateMaterialIlluminationPasses((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_validateMaterialIlluminationPasses__SWIG_1___(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (bool)(arg1)->validateMaterialIlluminationPasses((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_getMaterialSerializerListener___(void * jarg1) {
  void * jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::MaterialSerializer::Listener *result = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  {
    try {
      result = (Ogre::MaterialSerializer::Listener *)(arg1)->getMaterialSerializerListener();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_getShaderCount___(void * jarg1, int jarg2) {
  unsigned long jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::GpuProgramType arg2 ;
  size_t result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (Ogre::GpuProgramType)jarg2; 
  {
    try {
      result = ((Ogre::RTShader::ShaderGenerator const *)arg1)->getShaderCount(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_setVertexShaderOutputsCompactPolicy___(void * jarg1, int jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::RTShader::VSOutputCompactPolicy arg2 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (Ogre::RTShader::VSOutputCompactPolicy)jarg2; 
  {
    try {
      (arg1)->setVertexShaderOutputsCompactPolicy(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_getVertexShaderOutputsCompactPolicy___(void * jarg1) {
  int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::RTShader::VSOutputCompactPolicy result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  {
    try {
      result = (Ogre::RTShader::VSOutputCompactPolicy)((Ogre::RTShader::ShaderGenerator const *)arg1)->getVertexShaderOutputsCompactPolicy();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_setCreateShaderOverProgrammablePass___(void * jarg1, unsigned int jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setCreateShaderOverProgrammablePass(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_getCreateShaderOverProgrammablePass___(void * jarg1) {
  unsigned int jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  {
    try {
      result = (bool)((Ogre::RTShader::ShaderGenerator const *)arg1)->getCreateShaderOverProgrammablePass();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_getRTShaderSchemeCount___(void * jarg1) {
  unsigned long jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  size_t result;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  {
    try {
      result = ((Ogre::RTShader::ShaderGenerator const *)arg1)->getRTShaderSchemeCount();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_getRTShaderScheme___(void * jarg1, unsigned long jarg2) {
  char * jresult ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  size_t arg2 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::RTShader::ShaderGenerator *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (Ogre::String *) &((Ogre::RTShader::ShaderGenerator const *)arg1)->getRTShaderScheme(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator__markNonFFP___(void * jarg1) {
  Ogre::TextureUnitState *arg1 = (Ogre::TextureUnitState *) 0 ;
  
  arg1 = (Ogre::TextureUnitState *)jarg1; 
  {
    try {
      Ogre::RTShader::ShaderGenerator::_markNonFFP((Ogre::TextureUnitState const *)arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_DEFAULT_SCHEME_NAME_set___(char * jarg1) {
  Ogre::String *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg1_str(jarg1);
  arg1 = &arg1_str; 
  Ogre::RTShader::ShaderGenerator::DEFAULT_SCHEME_NAME = *arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_ShaderGenerator_DEFAULT_SCHEME_NAME_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::ShaderGenerator::DEFAULT_SCHEME_NAME;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_RenderState___() {
  void * jresult ;
  Ogre::RTShader::RenderState *result = 0 ;
  
  {
    try {
      result = (Ogre::RTShader::RenderState *)new Ogre::RTShader::RenderState();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_RenderState___(void * jarg1) {
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  
  arg1 = (Ogre::RTShader::RenderState *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_RenderState_resetToBuiltinSubRenderStates___(void * jarg1) {
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  
  arg1 = (Ogre::RTShader::RenderState *)jarg1; 
  {
    try {
      (arg1)->resetToBuiltinSubRenderStates();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_RenderState_addTemplateSubRenderState___(void * jarg1, void * jarg2) {
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = (Ogre::RTShader::SubRenderState *) 0 ;
  
  arg1 = (Ogre::RTShader::RenderState *)jarg1; 
  arg2 = (Ogre::RTShader::SubRenderState *)jarg2; 
  {
    try {
      (arg1)->addTemplateSubRenderState(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_RenderState_addTemplateSubRenderStates___(void * jarg1, void * jarg2) {
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::StringVector *arg2 = 0 ;
  
  arg1 = (Ogre::RTShader::RenderState *)jarg1; 
  arg2 = (Ogre::StringVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::StringVector const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->addTemplateSubRenderStates((Ogre::StringVector const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_RenderState_removeSubRenderState___(void * jarg1, void * jarg2) {
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = (Ogre::RTShader::SubRenderState *) 0 ;
  
  arg1 = (Ogre::RTShader::RenderState *)jarg1; 
  arg2 = (Ogre::RTShader::SubRenderState *)jarg2; 
  {
    try {
      (arg1)->removeSubRenderState(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_RenderState_getSubRenderStates___(void * jarg1) {
  void * jresult ;
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::RTShader::SubRenderStateList *result = 0 ;
  
  arg1 = (Ogre::RTShader::RenderState *)jarg1; 
  {
    try {
      result = (Ogre::RTShader::SubRenderStateList *) &((Ogre::RTShader::RenderState const *)arg1)->getSubRenderStates();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_RenderState_getSubRenderState___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  arg1 = (Ogre::RTShader::RenderState *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)((Ogre::RTShader::RenderState const *)arg1)->getSubRenderState((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_RenderState_setLightCount___(void * jarg1, int jarg2) {
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::int32 arg2 ;
  
  arg1 = (Ogre::RTShader::RenderState *)jarg1; 
  arg2 = (Ogre::int32)jarg2; 
  {
    try {
      (arg1)->setLightCount(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_RenderState_getLightCount___(void * jarg1) {
  int jresult ;
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::int32 result;
  
  arg1 = (Ogre::RTShader::RenderState *)jarg1; 
  {
    try {
      result = (Ogre::int32)((Ogre::RTShader::RenderState const *)arg1)->getLightCount();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_RenderState_setLightCountAutoUpdate___(void * jarg1, unsigned int jarg2) {
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::RTShader::RenderState *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setLightCountAutoUpdate(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_RenderState_getLightCountAutoUpdate___(void * jarg1) {
  unsigned int jresult ;
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::RenderState *)jarg1; 
  {
    try {
      result = (bool)((Ogre::RTShader::RenderState const *)arg1)->getLightCountAutoUpdate();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_RenderState_haveAreaLights___(void * jarg1) {
  unsigned int jresult ;
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::RenderState *)jarg1; 
  {
    try {
      result = (bool)((Ogre::RTShader::RenderState const *)arg1)->haveAreaLights();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_RenderState_setHaveAreaLights___(void * jarg1, unsigned int jarg2) {
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::RTShader::RenderState *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setHaveAreaLights(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TargetRenderState___() {
  void * jresult ;
  Ogre::RTShader::TargetRenderState *result = 0 ;
  
  {
    try {
      result = (Ogre::RTShader::TargetRenderState *)new Ogre::RTShader::TargetRenderState();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TargetRenderState___(void * jarg1) {
  Ogre::RTShader::TargetRenderState *arg1 = (Ogre::RTShader::TargetRenderState *) 0 ;
  
  arg1 = (Ogre::RTShader::TargetRenderState *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TargetRenderState_link__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Ogre::RTShader::TargetRenderState *arg1 = (Ogre::RTShader::TargetRenderState *) 0 ;
  Ogre::RTShader::RenderState *arg2 = 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  
  arg1 = (Ogre::RTShader::TargetRenderState *)jarg1; 
  arg2 = (Ogre::RTShader::RenderState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::RTShader::RenderState const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Pass *)jarg3; 
  arg4 = (Ogre::Pass *)jarg4; 
  {
    try {
      (arg1)->link((Ogre::RTShader::RenderState const &)*arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TargetRenderState_link__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Ogre::RTShader::TargetRenderState *arg1 = (Ogre::RTShader::TargetRenderState *) 0 ;
  Ogre::StringVector *arg2 = 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  
  arg1 = (Ogre::RTShader::TargetRenderState *)jarg1; 
  arg2 = (Ogre::StringVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::StringVector const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Pass *)jarg3; 
  arg4 = (Ogre::Pass *)jarg4; 
  {
    try {
      (arg1)->link((Ogre::StringVector const &)*arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TargetRenderState_updateGpuProgramsParams___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Ogre::RTShader::TargetRenderState *arg1 = (Ogre::RTShader::TargetRenderState *) 0 ;
  Ogre::Renderable *arg2 = (Ogre::Renderable *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::AutoParamDataSource *arg4 = (Ogre::AutoParamDataSource *) 0 ;
  Ogre::LightList *arg5 = (Ogre::LightList *) 0 ;
  
  arg1 = (Ogre::RTShader::TargetRenderState *)jarg1; 
  arg2 = (Ogre::Renderable *)jarg2; 
  arg3 = (Ogre::Pass *)jarg3; 
  arg4 = (Ogre::AutoParamDataSource *)jarg4; 
  arg5 = (Ogre::LightList *)jarg5; 
  {
    try {
      (arg1)->updateGpuProgramsParams(arg2,(Ogre::Pass const *)arg3,(Ogre::AutoParamDataSource const *)arg4,(Ogre::LightList const *)arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TargetRenderState_addSubRenderStateInstance___(void * jarg1, void * jarg2) {
  Ogre::RTShader::TargetRenderState *arg1 = (Ogre::RTShader::TargetRenderState *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = (Ogre::RTShader::SubRenderState *) 0 ;
  
  arg1 = (Ogre::RTShader::TargetRenderState *)jarg1; 
  arg2 = (Ogre::RTShader::SubRenderState *)jarg2; 
  {
    try {
      (arg1)->addSubRenderStateInstance(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TargetRenderState_acquirePrograms___(void * jarg1, void * jarg2) {
  Ogre::RTShader::TargetRenderState *arg1 = (Ogre::RTShader::TargetRenderState *) 0 ;
  Ogre::Pass *arg2 = (Ogre::Pass *) 0 ;
  
  arg1 = (Ogre::RTShader::TargetRenderState *)jarg1; 
  arg2 = (Ogre::Pass *)jarg2; 
  {
    try {
      (arg1)->acquirePrograms(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TargetRenderState_releasePrograms___(void * jarg1, void * jarg2) {
  Ogre::RTShader::TargetRenderState *arg1 = (Ogre::RTShader::TargetRenderState *) 0 ;
  Ogre::Pass *arg2 = (Ogre::Pass *) 0 ;
  
  arg1 = (Ogre::RTShader::TargetRenderState *)jarg1; 
  arg2 = (Ogre::Pass *)jarg2; 
  {
    try {
      (arg1)->releasePrograms(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TargetRenderState_UserKey_set___(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      Ogre::RTShader::TargetRenderState::UserKey = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)Ogre::RTShader::TargetRenderState::UserKey, (const char *)arg1);
    } else {
      Ogre::RTShader::TargetRenderState::UserKey = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_TargetRenderState_UserKey_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Ogre::RTShader::TargetRenderState::UserKey;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_LayeredBlending___() {
  void * jresult ;
  Ogre::RTShader::LayeredBlending *result = 0 ;
  
  {
    try {
      result = (Ogre::RTShader::LayeredBlending *)new Ogre::RTShader::LayeredBlending();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_LayeredBlending_getType___(void * jarg1) {
  char * jresult ;
  Ogre::RTShader::LayeredBlending *arg1 = (Ogre::RTShader::LayeredBlending *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::RTShader::LayeredBlending *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::RTShader::LayeredBlending const *)arg1)->getType();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_LayeredBlending_setBlendMode___(void * jarg1, unsigned short jarg2, char * jarg3) {
  unsigned int jresult ;
  Ogre::RTShader::LayeredBlending *arg1 = (Ogre::RTShader::LayeredBlending *) 0 ;
  Ogre::uint16 arg2 ;
  Ogre::String *arg3 = 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::LayeredBlending *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (bool)(arg1)->setBlendMode(arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_LayeredBlending_getBlendMode___(void * jarg1, unsigned short jarg2) {
  int jresult ;
  Ogre::RTShader::LayeredBlending *arg1 = (Ogre::RTShader::LayeredBlending *) 0 ;
  unsigned short arg2 ;
  Ogre::RTShader::BlendMode result;
  
  arg1 = (Ogre::RTShader::LayeredBlending *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  {
    try {
      result = (Ogre::RTShader::BlendMode)((Ogre::RTShader::LayeredBlending const *)arg1)->getBlendMode(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_LayeredBlending_setSourceModifier___(void * jarg1, unsigned short jarg2, char * jarg3, int jarg4) {
  unsigned int jresult ;
  Ogre::RTShader::LayeredBlending *arg1 = (Ogre::RTShader::LayeredBlending *) 0 ;
  unsigned short arg2 ;
  Ogre::String *arg3 = 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (Ogre::RTShader::LayeredBlending *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (bool)(arg1)->setSourceModifier(arg2,(Ogre::String const &)*arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_LayeredBlending_getSourceModifier___(void * jarg1, unsigned short jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Ogre::RTShader::LayeredBlending *arg1 = (Ogre::RTShader::LayeredBlending *) 0 ;
  unsigned short arg2 ;
  Ogre::RTShader::SourceModifier *arg3 = 0 ;
  int *arg4 = 0 ;
  bool result;
  
  arg1 = (Ogre::RTShader::LayeredBlending *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  arg3 = (Ogre::RTShader::SourceModifier *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::RTShader::SourceModifier & type is null", 0);
    return 0;
  } 
  arg4 = (int *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((Ogre::RTShader::LayeredBlending const *)arg1)->getSourceModifier(arg2,*arg3,*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_LayeredBlending_copyFrom___(void * jarg1, void * jarg2) {
  Ogre::RTShader::LayeredBlending *arg1 = (Ogre::RTShader::LayeredBlending *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = 0 ;
  
  arg1 = (Ogre::RTShader::LayeredBlending *)jarg1; 
  arg2 = (Ogre::RTShader::SubRenderState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::RTShader::SubRenderState const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((Ogre::RTShader::SubRenderState const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_LayeredBlending_Type_set___(char * jarg1) {
  Ogre::String *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg1_str(jarg1);
  arg1 = &arg1_str; 
  Ogre::RTShader::LayeredBlending::Type = *arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_LayeredBlending_Type_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &Ogre::RTShader::LayeredBlending::Type;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_LayeredBlending___(void * jarg1) {
  Ogre::RTShader::LayeredBlending *arg1 = (Ogre::RTShader::LayeredBlending *) 0 ;
  
  arg1 = (Ogre::RTShader::LayeredBlending *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_HardwareSkinningFactory___() {
  void * jresult ;
  Ogre::RTShader::HardwareSkinningFactory *result = 0 ;
  
  {
    try {
      result = (Ogre::RTShader::HardwareSkinningFactory *)new Ogre::RTShader::HardwareSkinningFactory();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_HardwareSkinningFactory___(void * jarg1) {
  Ogre::RTShader::HardwareSkinningFactory *arg1 = (Ogre::RTShader::HardwareSkinningFactory *) 0 ;
  
  arg1 = (Ogre::RTShader::HardwareSkinningFactory *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_HardwareSkinningFactory_getType___(void * jarg1) {
  char * jresult ;
  Ogre::RTShader::HardwareSkinningFactory *arg1 = (Ogre::RTShader::HardwareSkinningFactory *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::RTShader::HardwareSkinningFactory *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::RTShader::HardwareSkinningFactory const *)arg1)->getType();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_HardwareSkinningFactory_createInstance___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Ogre::RTShader::HardwareSkinningFactory *arg1 = (Ogre::RTShader::HardwareSkinningFactory *) 0 ;
  Ogre::ScriptCompiler *arg2 = (Ogre::ScriptCompiler *) 0 ;
  Ogre::PropertyAbstractNode *arg3 = (Ogre::PropertyAbstractNode *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::RTShader::SGScriptTranslator *arg5 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  arg1 = (Ogre::RTShader::HardwareSkinningFactory *)jarg1; 
  arg2 = (Ogre::ScriptCompiler *)jarg2; 
  arg3 = (Ogre::PropertyAbstractNode *)jarg3; 
  arg4 = (Ogre::Pass *)jarg4; 
  arg5 = (Ogre::RTShader::SGScriptTranslator *)jarg5; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_HardwareSkinningFactory_writeInstance___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Ogre::RTShader::HardwareSkinningFactory *arg1 = (Ogre::RTShader::HardwareSkinningFactory *) 0 ;
  Ogre::MaterialSerializer *arg2 = (Ogre::MaterialSerializer *) 0 ;
  Ogre::RTShader::SubRenderState *arg3 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg5 = (Ogre::Pass *) 0 ;
  
  arg1 = (Ogre::RTShader::HardwareSkinningFactory *)jarg1; 
  arg2 = (Ogre::MaterialSerializer *)jarg2; 
  arg3 = (Ogre::RTShader::SubRenderState *)jarg3; 
  arg4 = (Ogre::Pass *)jarg4; 
  arg5 = (Ogre::Pass *)jarg5; 
  {
    try {
      (arg1)->writeInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_HardwareSkinningFactory_setCustomShadowCasterMaterials___(int jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Ogre::RTShader::SkinningType arg1 ;
  Ogre::MaterialPtr *arg2 = 0 ;
  Ogre::MaterialPtr *arg3 = 0 ;
  Ogre::MaterialPtr *arg4 = 0 ;
  Ogre::MaterialPtr *arg5 = 0 ;
  
  arg1 = (Ogre::RTShader::SkinningType)jarg1; 
  arg2 = (Ogre::MaterialPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::MaterialPtr *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  arg4 = (Ogre::MaterialPtr *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  arg5 = (Ogre::MaterialPtr *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  {
    try {
      Ogre::RTShader::HardwareSkinningFactory::setCustomShadowCasterMaterials(arg1,(Ogre::SharedPtr< Ogre::Material > const &)*arg2,(Ogre::SharedPtr< Ogre::Material > const &)*arg3,(Ogre::SharedPtr< Ogre::Material > const &)*arg4,(Ogre::SharedPtr< Ogre::Material > const &)*arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_HardwareSkinningFactory_setCustomShadowReceiverMaterials___(int jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Ogre::RTShader::SkinningType arg1 ;
  Ogre::MaterialPtr *arg2 = 0 ;
  Ogre::MaterialPtr *arg3 = 0 ;
  Ogre::MaterialPtr *arg4 = 0 ;
  Ogre::MaterialPtr *arg5 = 0 ;
  
  arg1 = (Ogre::RTShader::SkinningType)jarg1; 
  arg2 = (Ogre::MaterialPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::MaterialPtr *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  arg4 = (Ogre::MaterialPtr *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  arg5 = (Ogre::MaterialPtr *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  {
    try {
      Ogre::RTShader::HardwareSkinningFactory::setCustomShadowReceiverMaterials(arg1,(Ogre::SharedPtr< Ogre::Material > const &)*arg2,(Ogre::SharedPtr< Ogre::Material > const &)*arg3,(Ogre::SharedPtr< Ogre::Material > const &)*arg4,(Ogre::SharedPtr< Ogre::Material > const &)*arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_HardwareSkinningFactory_getCustomShadowCasterMaterial___(int jarg1, unsigned short jarg2) {
  void * jresult ;
  Ogre::RTShader::SkinningType arg1 ;
  Ogre::ushort arg2 ;
  Ogre::MaterialPtr *result = 0 ;
  
  arg1 = (Ogre::RTShader::SkinningType)jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      result = (Ogre::MaterialPtr *) &Ogre::RTShader::HardwareSkinningFactory::getCustomShadowCasterMaterial(arg1,arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_HardwareSkinningFactory_getCustomShadowReceiverMaterial___(int jarg1, unsigned short jarg2) {
  void * jresult ;
  Ogre::RTShader::SkinningType arg1 ;
  Ogre::ushort arg2 ;
  Ogre::MaterialPtr *result = 0 ;
  
  arg1 = (Ogre::RTShader::SkinningType)jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      result = (Ogre::MaterialPtr *) &Ogre::RTShader::HardwareSkinningFactory::getCustomShadowReceiverMaterial(arg1,arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_HardwareSkinningFactory_prepareEntityForSkinning__SWIG_0___(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  Ogre::Entity *arg1 = (Ogre::Entity *) 0 ;
  Ogre::RTShader::SkinningType arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (Ogre::Entity *)jarg1; 
  arg2 = (Ogre::RTShader::SkinningType)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      Ogre::RTShader::HardwareSkinningFactory::prepareEntityForSkinning((Ogre::Entity const *)arg1,arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_HardwareSkinningFactory_prepareEntityForSkinning__SWIG_1___(void * jarg1, int jarg2, unsigned int jarg3) {
  Ogre::Entity *arg1 = (Ogre::Entity *) 0 ;
  Ogre::RTShader::SkinningType arg2 ;
  bool arg3 ;
  
  arg1 = (Ogre::Entity *)jarg1; 
  arg2 = (Ogre::RTShader::SkinningType)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      Ogre::RTShader::HardwareSkinningFactory::prepareEntityForSkinning((Ogre::Entity const *)arg1,arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_HardwareSkinningFactory_prepareEntityForSkinning__SWIG_2___(void * jarg1, int jarg2) {
  Ogre::Entity *arg1 = (Ogre::Entity *) 0 ;
  Ogre::RTShader::SkinningType arg2 ;
  
  arg1 = (Ogre::Entity *)jarg1; 
  arg2 = (Ogre::RTShader::SkinningType)jarg2; 
  {
    try {
      Ogre::RTShader::HardwareSkinningFactory::prepareEntityForSkinning((Ogre::Entity const *)arg1,arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_HardwareSkinningFactory_prepareEntityForSkinning__SWIG_3___(void * jarg1) {
  Ogre::Entity *arg1 = (Ogre::Entity *) 0 ;
  
  arg1 = (Ogre::Entity *)jarg1; 
  {
    try {
      Ogre::RTShader::HardwareSkinningFactory::prepareEntityForSkinning((Ogre::Entity const *)arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_HardwareSkinningFactory_getMaxCalculableBoneCount___() {
  unsigned short jresult ;
  Ogre::ushort result;
  
  {
    try {
      result = (Ogre::ushort)Ogre::RTShader::HardwareSkinningFactory::getMaxCalculableBoneCount();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_HardwareSkinningFactory_setMaxCalculableBoneCount___(unsigned short jarg1) {
  Ogre::ushort arg1 ;
  
  arg1 = (Ogre::ushort)jarg1; 
  {
    try {
      Ogre::RTShader::HardwareSkinningFactory::setMaxCalculableBoneCount(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_HardwareSkinningFactory_getSingleton___() {
  void * jresult ;
  Ogre::RTShader::HardwareSkinningFactory *result = 0 ;
  
  {
    try {
      result = (Ogre::RTShader::HardwareSkinningFactory *) &Ogre::RTShader::HardwareSkinningFactory::getSingleton();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT Ogre::RTShader::RenderState * SWIGSTDCALL CSharp_orgfogre_TargetRenderState_SWIGUpcast___(Ogre::RTShader::TargetRenderState *jarg1) {
    return (Ogre::RTShader::RenderState *)jarg1;
}

SWIGEXPORT Ogre::RTShader::SubRenderStateFactory * SWIGSTDCALL CSharp_orgfogre_HardwareSkinningFactory_SWIGUpcast___(Ogre::RTShader::HardwareSkinningFactory *jarg1) {
    return (Ogre::RTShader::SubRenderStateFactory *)jarg1;
}

#ifdef __cplusplus
}
#endif

