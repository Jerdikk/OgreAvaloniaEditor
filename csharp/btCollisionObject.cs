//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class btCollisionObject : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btCollisionObject(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btCollisionObject obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btCollisionObject() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreBulletPINVOKE.delete_btCollisionObject(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public bool mergesSimulationIslands() {
    bool ret = OgreBulletPINVOKE.btCollisionObject_mergesSimulationIslands(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public btVector3 getAnisotropicFriction() {
    btVector3 ret = new btVector3(OgreBulletPINVOKE.btCollisionObject_getAnisotropicFriction(swigCPtr), false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAnisotropicFriction(btVector3 anisotropicFriction, int frictionMode) {
    OgreBulletPINVOKE.btCollisionObject_setAnisotropicFriction__SWIG_0(swigCPtr, btVector3.getCPtr(anisotropicFriction), frictionMode);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAnisotropicFriction(btVector3 anisotropicFriction) {
    OgreBulletPINVOKE.btCollisionObject_setAnisotropicFriction__SWIG_1(swigCPtr, btVector3.getCPtr(anisotropicFriction));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasAnisotropicFriction(int frictionMode) {
    bool ret = OgreBulletPINVOKE.btCollisionObject_hasAnisotropicFriction__SWIG_0(swigCPtr, frictionMode);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasAnisotropicFriction() {
    bool ret = OgreBulletPINVOKE.btCollisionObject_hasAnisotropicFriction__SWIG_1(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setContactProcessingThreshold(float contactProcessingThreshold) {
    OgreBulletPINVOKE.btCollisionObject_setContactProcessingThreshold(swigCPtr, contactProcessingThreshold);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getContactProcessingThreshold() {
    float ret = OgreBulletPINVOKE.btCollisionObject_getContactProcessingThreshold(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isStaticObject() {
    bool ret = OgreBulletPINVOKE.btCollisionObject_isStaticObject(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isKinematicObject() {
    bool ret = OgreBulletPINVOKE.btCollisionObject_isKinematicObject(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isStaticOrKinematicObject() {
    bool ret = OgreBulletPINVOKE.btCollisionObject_isStaticOrKinematicObject(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasContactResponse() {
    bool ret = OgreBulletPINVOKE.btCollisionObject_hasContactResponse(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public btCollisionObject() : this(OgreBulletPINVOKE.new_btCollisionObject(), true) {
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setCollisionShape(SWIGTYPE_p_btCollisionShape collisionShape) {
    OgreBulletPINVOKE.btCollisionObject_setCollisionShape(swigCPtr, SWIGTYPE_p_btCollisionShape.getCPtr(collisionShape));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_btCollisionShape getCollisionShape() {
    global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionObject_getCollisionShape__SWIG_0(swigCPtr);
    SWIGTYPE_p_btCollisionShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btCollisionShape(cPtr, false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setIgnoreCollisionCheck(btCollisionObject co, bool ignoreCollisionCheck) {
    OgreBulletPINVOKE.btCollisionObject_setIgnoreCollisionCheck(swigCPtr, btCollisionObject.getCPtr(co), ignoreCollisionCheck);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getNumObjectsWithoutCollision() {
    int ret = OgreBulletPINVOKE.btCollisionObject_getNumObjectsWithoutCollision(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public btCollisionObject getObjectWithoutCollision(int index) {
    global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionObject_getObjectWithoutCollision(swigCPtr, index);
    btCollisionObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new btCollisionObject(cPtr, false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool checkCollideWithOverride(btCollisionObject co) {
    bool ret = OgreBulletPINVOKE.btCollisionObject_checkCollideWithOverride(swigCPtr, btCollisionObject.getCPtr(co));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public global::System.IntPtr internalGetExtensionPointer() {
    global::System.IntPtr ret = OgreBulletPINVOKE.btCollisionObject_internalGetExtensionPointer(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void internalSetExtensionPointer(global::System.IntPtr pointer) {
    OgreBulletPINVOKE.btCollisionObject_internalSetExtensionPointer(swigCPtr, pointer);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getActivationState() {
    int ret = OgreBulletPINVOKE.btCollisionObject_getActivationState(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setActivationState(int newState) {
    OgreBulletPINVOKE.btCollisionObject_setActivationState(swigCPtr, newState);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDeactivationTime(float time) {
    OgreBulletPINVOKE.btCollisionObject_setDeactivationTime(swigCPtr, time);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getDeactivationTime() {
    float ret = OgreBulletPINVOKE.btCollisionObject_getDeactivationTime(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void forceActivationState(int newState) {
    OgreBulletPINVOKE.btCollisionObject_forceActivationState(swigCPtr, newState);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void activate(bool forceActivation) {
    OgreBulletPINVOKE.btCollisionObject_activate__SWIG_0(swigCPtr, forceActivation);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void activate() {
    OgreBulletPINVOKE.btCollisionObject_activate__SWIG_1(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isActive() {
    bool ret = OgreBulletPINVOKE.btCollisionObject_isActive(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setRestitution(float rest) {
    OgreBulletPINVOKE.btCollisionObject_setRestitution(swigCPtr, rest);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getRestitution() {
    float ret = OgreBulletPINVOKE.btCollisionObject_getRestitution(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setFriction(float frict) {
    OgreBulletPINVOKE.btCollisionObject_setFriction(swigCPtr, frict);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getFriction() {
    float ret = OgreBulletPINVOKE.btCollisionObject_getFriction(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setRollingFriction(float frict) {
    OgreBulletPINVOKE.btCollisionObject_setRollingFriction(swigCPtr, frict);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getRollingFriction() {
    float ret = OgreBulletPINVOKE.btCollisionObject_getRollingFriction(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSpinningFriction(float frict) {
    OgreBulletPINVOKE.btCollisionObject_setSpinningFriction(swigCPtr, frict);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getSpinningFriction() {
    float ret = OgreBulletPINVOKE.btCollisionObject_getSpinningFriction(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setContactStiffnessAndDamping(float stiffness, float damping) {
    OgreBulletPINVOKE.btCollisionObject_setContactStiffnessAndDamping(swigCPtr, stiffness, damping);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getContactStiffness() {
    float ret = OgreBulletPINVOKE.btCollisionObject_getContactStiffness(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getContactDamping() {
    float ret = OgreBulletPINVOKE.btCollisionObject_getContactDamping(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getInternalType() {
    int ret = OgreBulletPINVOKE.btCollisionObject_getInternalType(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_btTransform getWorldTransform() {
    SWIGTYPE_p_btTransform ret = new SWIGTYPE_p_btTransform(OgreBulletPINVOKE.btCollisionObject_getWorldTransform__SWIG_0(swigCPtr), false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setWorldTransform(SWIGTYPE_p_btTransform worldTrans) {
    OgreBulletPINVOKE.btCollisionObject_setWorldTransform(swigCPtr, SWIGTYPE_p_btTransform.getCPtr(worldTrans));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_btBroadphaseProxy getBroadphaseHandle() {
    global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionObject_getBroadphaseHandle__SWIG_0(swigCPtr);
    SWIGTYPE_p_btBroadphaseProxy ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btBroadphaseProxy(cPtr, false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBroadphaseHandle(SWIGTYPE_p_btBroadphaseProxy handle) {
    OgreBulletPINVOKE.btCollisionObject_setBroadphaseHandle(swigCPtr, SWIGTYPE_p_btBroadphaseProxy.getCPtr(handle));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_btTransform getInterpolationWorldTransform() {
    SWIGTYPE_p_btTransform ret = new SWIGTYPE_p_btTransform(OgreBulletPINVOKE.btCollisionObject_getInterpolationWorldTransform__SWIG_0(swigCPtr), false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setInterpolationWorldTransform(SWIGTYPE_p_btTransform trans) {
    OgreBulletPINVOKE.btCollisionObject_setInterpolationWorldTransform(swigCPtr, SWIGTYPE_p_btTransform.getCPtr(trans));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setInterpolationLinearVelocity(btVector3 linvel) {
    OgreBulletPINVOKE.btCollisionObject_setInterpolationLinearVelocity(swigCPtr, btVector3.getCPtr(linvel));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setInterpolationAngularVelocity(btVector3 angvel) {
    OgreBulletPINVOKE.btCollisionObject_setInterpolationAngularVelocity(swigCPtr, btVector3.getCPtr(angvel));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btVector3 getInterpolationLinearVelocity() {
    btVector3 ret = new btVector3(OgreBulletPINVOKE.btCollisionObject_getInterpolationLinearVelocity(swigCPtr), false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public btVector3 getInterpolationAngularVelocity() {
    btVector3 ret = new btVector3(OgreBulletPINVOKE.btCollisionObject_getInterpolationAngularVelocity(swigCPtr), false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getIslandTag() {
    int ret = OgreBulletPINVOKE.btCollisionObject_getIslandTag(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setIslandTag(int tag) {
    OgreBulletPINVOKE.btCollisionObject_setIslandTag(swigCPtr, tag);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getCompanionId() {
    int ret = OgreBulletPINVOKE.btCollisionObject_getCompanionId(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCompanionId(int id) {
    OgreBulletPINVOKE.btCollisionObject_setCompanionId(swigCPtr, id);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getWorldArrayIndex() {
    int ret = OgreBulletPINVOKE.btCollisionObject_getWorldArrayIndex(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setWorldArrayIndex(int ix) {
    OgreBulletPINVOKE.btCollisionObject_setWorldArrayIndex(swigCPtr, ix);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getHitFraction() {
    float ret = OgreBulletPINVOKE.btCollisionObject_getHitFraction(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setHitFraction(float hitFraction) {
    OgreBulletPINVOKE.btCollisionObject_setHitFraction(swigCPtr, hitFraction);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getCollisionFlags() {
    int ret = OgreBulletPINVOKE.btCollisionObject_getCollisionFlags(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCollisionFlags(int flags) {
    OgreBulletPINVOKE.btCollisionObject_setCollisionFlags(swigCPtr, flags);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getCcdSweptSphereRadius() {
    float ret = OgreBulletPINVOKE.btCollisionObject_getCcdSweptSphereRadius(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCcdSweptSphereRadius(float radius) {
    OgreBulletPINVOKE.btCollisionObject_setCcdSweptSphereRadius(swigCPtr, radius);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getCcdMotionThreshold() {
    float ret = OgreBulletPINVOKE.btCollisionObject_getCcdMotionThreshold(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getCcdSquareMotionThreshold() {
    float ret = OgreBulletPINVOKE.btCollisionObject_getCcdSquareMotionThreshold(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCcdMotionThreshold(float ccdMotionThreshold) {
    OgreBulletPINVOKE.btCollisionObject_setCcdMotionThreshold(swigCPtr, ccdMotionThreshold);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public global::System.IntPtr getUserPointer() {
    global::System.IntPtr ret = OgreBulletPINVOKE.btCollisionObject_getUserPointer(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getUserIndex() {
    int ret = OgreBulletPINVOKE.btCollisionObject_getUserIndex(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getUserIndex2() {
    int ret = OgreBulletPINVOKE.btCollisionObject_getUserIndex2(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getUserIndex3() {
    int ret = OgreBulletPINVOKE.btCollisionObject_getUserIndex3(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setUserPointer(global::System.IntPtr userPointer) {
    OgreBulletPINVOKE.btCollisionObject_setUserPointer(swigCPtr, userPointer);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setUserIndex(int index) {
    OgreBulletPINVOKE.btCollisionObject_setUserIndex(swigCPtr, index);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setUserIndex2(int index) {
    OgreBulletPINVOKE.btCollisionObject_setUserIndex2(swigCPtr, index);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setUserIndex3(int index) {
    OgreBulletPINVOKE.btCollisionObject_setUserIndex3(swigCPtr, index);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getUpdateRevisionInternal() {
    int ret = OgreBulletPINVOKE.btCollisionObject_getUpdateRevisionInternal(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCustomDebugColor(btVector3 colorRGB) {
    OgreBulletPINVOKE.btCollisionObject_setCustomDebugColor(swigCPtr, btVector3.getCPtr(colorRGB));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeCustomDebugColor() {
    OgreBulletPINVOKE.btCollisionObject_removeCustomDebugColor(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getCustomDebugColor(btVector3 colorRGB) {
    bool ret = OgreBulletPINVOKE.btCollisionObject_getCustomDebugColor(swigCPtr, btVector3.getCPtr(colorRGB));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool checkCollideWith(btCollisionObject co) {
    bool ret = OgreBulletPINVOKE.btCollisionObject_checkCollideWith(swigCPtr, btCollisionObject.getCPtr(co));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int calculateSerializeBufferSize() {
    int ret = OgreBulletPINVOKE.btCollisionObject_calculateSerializeBufferSize(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string serialize(global::System.IntPtr dataBuffer, SWIGTYPE_p_btSerializer serializer) {
    string ret = OgreBulletPINVOKE.btCollisionObject_serialize(swigCPtr, dataBuffer, SWIGTYPE_p_btSerializer.getCPtr(serializer));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void serializeSingleObject(SWIGTYPE_p_btSerializer serializer) {
    OgreBulletPINVOKE.btCollisionObject_serializeSingleObject(swigCPtr, SWIGTYPE_p_btSerializer.getCPtr(serializer));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum CollisionFlags {
    CF_DYNAMIC_OBJECT = 0,
    CF_STATIC_OBJECT = 1,
    CF_KINEMATIC_OBJECT = 2,
    CF_NO_CONTACT_RESPONSE = 4,
    CF_CUSTOM_MATERIAL_CALLBACK = 8,
    CF_CHARACTER_OBJECT = 16,
    CF_DISABLE_VISUALIZE_OBJECT = 32,
    CF_DISABLE_SPU_COLLISION_PROCESSING = 64,
    CF_HAS_CONTACT_STIFFNESS_DAMPING = 128,
    CF_HAS_CUSTOM_DEBUG_RENDERING_COLOR = 256,
    CF_HAS_FRICTION_ANCHOR = 512,
    CF_HAS_COLLISION_SOUND_TRIGGER = 1024
  }

  public enum CollisionObjectTypes {
    CO_COLLISION_OBJECT = 1,
    CO_RIGID_BODY = 2,
    CO_GHOST_OBJECT = 4,
    CO_SOFT_BODY = 8,
    CO_HF_FLUID = 16,
    CO_USER_TYPE = 32,
    CO_FEATHERSTONE_LINK = 64
  }

  public enum AnisotropicFrictionFlags {
    CF_ANISOTROPIC_FRICTION_DISABLED = 0,
    CF_ANISOTROPIC_FRICTION = 1,
    CF_ANISOTROPIC_ROLLING_FRICTION = 2
  }

}

}
