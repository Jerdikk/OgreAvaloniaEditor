//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class VertexPoseKeyFrame : KeyFrame {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal VertexPoseKeyFrame(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.VertexPoseKeyFrame_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VertexPoseKeyFrame obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_VertexPoseKeyFrame(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public VertexPoseKeyFrame(AnimationTrack parent, float time) : this(OgrePINVOKE.new_VertexPoseKeyFrame(AnimationTrack.getCPtr(parent), time), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public class PoseRef : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal PoseRef(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PoseRef obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~PoseRef() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_VertexPoseKeyFrame_PoseRef(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public ushort poseIndex {
      set {
        OgrePINVOKE.VertexPoseKeyFrame_PoseRef_poseIndex_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        ushort ret = OgrePINVOKE.VertexPoseKeyFrame_PoseRef_poseIndex_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float influence {
      set {
        OgrePINVOKE.VertexPoseKeyFrame_PoseRef_influence_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgrePINVOKE.VertexPoseKeyFrame_PoseRef_influence_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public PoseRef(ushort p, float i) : this(OgrePINVOKE.new_VertexPoseKeyFrame_PoseRef(p, i), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public void addPoseReference(ushort poseIndex, float influence) {
    OgrePINVOKE.VertexPoseKeyFrame_addPoseReference(swigCPtr, poseIndex, influence);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void updatePoseReference(ushort poseIndex, float influence) {
    OgrePINVOKE.VertexPoseKeyFrame_updatePoseReference(swigCPtr, poseIndex, influence);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removePoseReference(ushort poseIndex) {
    OgrePINVOKE.VertexPoseKeyFrame_removePoseReference(swigCPtr, poseIndex);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeAllPoseReferences() {
    OgrePINVOKE.VertexPoseKeyFrame_removeAllPoseReferences(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_Ogre__VertexPoseKeyFrame__PoseRef_t getPoseReferences() {
    SWIGTYPE_p_std__vectorT_Ogre__VertexPoseKeyFrame__PoseRef_t ret = new SWIGTYPE_p_std__vectorT_Ogre__VertexPoseKeyFrame__PoseRef_t(OgrePINVOKE.VertexPoseKeyFrame_getPoseReferences(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override KeyFrame _clone(AnimationTrack newParent) {
    global::System.IntPtr cPtr = OgrePINVOKE.VertexPoseKeyFrame__clone(swigCPtr, AnimationTrack.getCPtr(newParent));
    KeyFrame ret = (cPtr == global::System.IntPtr.Zero) ? null : new KeyFrame(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _applyBaseKeyFrame(VertexPoseKeyFrame base_) {
    OgrePINVOKE.VertexPoseKeyFrame__applyBaseKeyFrame(swigCPtr, VertexPoseKeyFrame.getCPtr(base_));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
