//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class NodeAnimationTrack : AnimationTrack {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal NodeAnimationTrack(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.NodeAnimationTrack_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NodeAnimationTrack obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_NodeAnimationTrack(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public NodeAnimationTrack(Animation parent, ushort handle) : this(OgrePINVOKE.new_NodeAnimationTrack__SWIG_0(Animation.getCPtr(parent), handle), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public NodeAnimationTrack(Animation parent, ushort handle, Node targetNode) : this(OgrePINVOKE.new_NodeAnimationTrack__SWIG_1(Animation.getCPtr(parent), handle, Node.getCPtr(targetNode)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual TransformKeyFrame createNodeKeyFrame(float timePos) {
    global::System.IntPtr cPtr = OgrePINVOKE.NodeAnimationTrack_createNodeKeyFrame(swigCPtr, timePos);
    TransformKeyFrame ret = (cPtr == global::System.IntPtr.Zero) ? null : new TransformKeyFrame(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Node getAssociatedNode() {
    global::System.IntPtr cPtr = OgrePINVOKE.NodeAnimationTrack_getAssociatedNode(swigCPtr);
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setAssociatedNode(Node node) {
    OgrePINVOKE.NodeAnimationTrack_setAssociatedNode(swigCPtr, Node.getCPtr(node));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void applyToNode(Node node, TimeIndex timeIndex, float weight, float scale) {
    OgrePINVOKE.NodeAnimationTrack_applyToNode__SWIG_0(swigCPtr, Node.getCPtr(node), TimeIndex.getCPtr(timeIndex), weight, scale);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void applyToNode(Node node, TimeIndex timeIndex, float weight) {
    OgrePINVOKE.NodeAnimationTrack_applyToNode__SWIG_1(swigCPtr, Node.getCPtr(node), TimeIndex.getCPtr(timeIndex), weight);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void applyToNode(Node node, TimeIndex timeIndex) {
    OgrePINVOKE.NodeAnimationTrack_applyToNode__SWIG_2(swigCPtr, Node.getCPtr(node), TimeIndex.getCPtr(timeIndex));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setUseShortestRotationPath(bool useShortestPath) {
    OgrePINVOKE.NodeAnimationTrack_setUseShortestRotationPath(swigCPtr, useShortestPath);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool getUseShortestRotationPath() {
    bool ret = OgrePINVOKE.NodeAnimationTrack_getUseShortestRotationPath(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void getInterpolatedKeyFrame(TimeIndex timeIndex, KeyFrame kf) {
    OgrePINVOKE.NodeAnimationTrack_getInterpolatedKeyFrame(swigCPtr, TimeIndex.getCPtr(timeIndex), KeyFrame.getCPtr(kf));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void apply(TimeIndex timeIndex, float weight, float scale) {
    OgrePINVOKE.NodeAnimationTrack_apply__SWIG_0(swigCPtr, TimeIndex.getCPtr(timeIndex), weight, scale);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void apply(TimeIndex timeIndex, float weight) {
    OgrePINVOKE.NodeAnimationTrack_apply__SWIG_1(swigCPtr, TimeIndex.getCPtr(timeIndex), weight);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void apply(TimeIndex timeIndex) {
    OgrePINVOKE.NodeAnimationTrack_apply__SWIG_2(swigCPtr, TimeIndex.getCPtr(timeIndex));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void _keyFrameDataChanged() {
    OgrePINVOKE.NodeAnimationTrack__keyFrameDataChanged(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual TransformKeyFrame getNodeKeyFrame(ushort index) {
    global::System.IntPtr cPtr = OgrePINVOKE.NodeAnimationTrack_getNodeKeyFrame(swigCPtr, index);
    TransformKeyFrame ret = (cPtr == global::System.IntPtr.Zero) ? null : new TransformKeyFrame(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool hasNonZeroKeyFrames() {
    bool ret = OgrePINVOKE.NodeAnimationTrack_hasNonZeroKeyFrames(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void optimise() {
    OgrePINVOKE.NodeAnimationTrack_optimise(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public NodeAnimationTrack _clone(Animation newParent) {
    global::System.IntPtr cPtr = OgrePINVOKE.NodeAnimationTrack__clone(swigCPtr, Animation.getCPtr(newParent));
    NodeAnimationTrack ret = (cPtr == global::System.IntPtr.Zero) ? null : new NodeAnimationTrack(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void _applyBaseKeyFrame(KeyFrame base_) {
    OgrePINVOKE.NodeAnimationTrack__applyBaseKeyFrame(swigCPtr, KeyFrame.getCPtr(base_));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
