//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class Quaternion : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Quaternion(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Quaternion obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Quaternion() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_Quaternion(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Quaternion() : this(OgrePINVOKE.new_Quaternion__SWIG_0(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Quaternion(Quaternion rhs) : this(OgrePINVOKE.new_Quaternion__SWIG_1(Quaternion.getCPtr(rhs)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Quaternion(float fW, float fX, float fY, float fZ) : this(OgrePINVOKE.new_Quaternion__SWIG_2(fW, fX, fY, fZ), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Quaternion(Matrix3 rot) : this(OgrePINVOKE.new_Quaternion__SWIG_3(Matrix3.getCPtr(rot)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Quaternion(Radian rfAngle, Vector3 rkAxis) : this(OgrePINVOKE.new_Quaternion__SWIG_4(Radian.getCPtr(rfAngle), Vector3.getCPtr(rkAxis)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Quaternion(Vector3 xaxis, Vector3 yaxis, Vector3 zaxis) : this(OgrePINVOKE.new_Quaternion__SWIG_5(Vector3.getCPtr(xaxis), Vector3.getCPtr(yaxis), Vector3.getCPtr(zaxis)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Quaternion(Vector3 akAxis) : this(OgrePINVOKE.new_Quaternion__SWIG_6(Vector3.getCPtr(akAxis)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Quaternion(SWIGTYPE_p_float valptr) : this(OgrePINVOKE.new_Quaternion__SWIG_7(SWIGTYPE_p_float.getCPtr(valptr)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void swap(Quaternion other) {
    OgrePINVOKE.Quaternion_swap(swigCPtr, Quaternion.getCPtr(other));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_float ptr() {
    global::System.IntPtr cPtr = OgrePINVOKE.Quaternion_ptr__SWIG_0(swigCPtr);
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void FromRotationMatrix(Matrix3 kRot) {
    OgrePINVOKE.Quaternion_FromRotationMatrix(swigCPtr, Matrix3.getCPtr(kRot));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ToRotationMatrix(Matrix3 kRot) {
    OgrePINVOKE.Quaternion_ToRotationMatrix(swigCPtr, Matrix3.getCPtr(kRot));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FromAngleAxis(Radian rfAngle, Vector3 rkAxis) {
    OgrePINVOKE.Quaternion_FromAngleAxis(swigCPtr, Radian.getCPtr(rfAngle), Vector3.getCPtr(rkAxis));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ToAngleAxis(Radian rfAngle, Vector3 rkAxis) {
    OgrePINVOKE.Quaternion_ToAngleAxis__SWIG_0(swigCPtr, Radian.getCPtr(rfAngle), Vector3.getCPtr(rkAxis));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ToAngleAxis(Degree dAngle, Vector3 rkAxis) {
    OgrePINVOKE.Quaternion_ToAngleAxis__SWIG_1(swigCPtr, Degree.getCPtr(dAngle), Vector3.getCPtr(rkAxis));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FromAxes(Vector3 akAxis) {
    OgrePINVOKE.Quaternion_FromAxes__SWIG_0(swigCPtr, Vector3.getCPtr(akAxis));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FromAxes(Vector3 xAxis, Vector3 yAxis, Vector3 zAxis) {
    OgrePINVOKE.Quaternion_FromAxes__SWIG_1(swigCPtr, Vector3.getCPtr(xAxis), Vector3.getCPtr(yAxis), Vector3.getCPtr(zAxis));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ToAxes(Vector3 akAxis) {
    OgrePINVOKE.Quaternion_ToAxes__SWIG_0(swigCPtr, Vector3.getCPtr(akAxis));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ToAxes(Vector3 xAxis, Vector3 yAxis, Vector3 zAxis) {
    OgrePINVOKE.Quaternion_ToAxes__SWIG_1(swigCPtr, Vector3.getCPtr(xAxis), Vector3.getCPtr(yAxis), Vector3.getCPtr(zAxis));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 xAxis() {
    Vector3 ret = new Vector3(OgrePINVOKE.Quaternion_xAxis(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 yAxis() {
    Vector3 ret = new Vector3(OgrePINVOKE.Quaternion_yAxis(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 zAxis() {
    Vector3 ret = new Vector3(OgrePINVOKE.Quaternion_zAxis(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Quaternion __add__(Quaternion rkQ) {
    Quaternion ret = new Quaternion(OgrePINVOKE.Quaternion___add__(swigCPtr, Quaternion.getCPtr(rkQ)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Quaternion __sub__(Quaternion rkQ) {
    Quaternion ret = new Quaternion(OgrePINVOKE.Quaternion___sub____SWIG_0(swigCPtr, Quaternion.getCPtr(rkQ)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Quaternion __mul__(Quaternion rkQ) {
    Quaternion ret = new Quaternion(OgrePINVOKE.Quaternion___mul____SWIG_0(swigCPtr, Quaternion.getCPtr(rkQ)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Quaternion __mul__(float s) {
    Quaternion ret = new Quaternion(OgrePINVOKE.Quaternion___mul____SWIG_1(swigCPtr, s), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Quaternion __sub__() {
    Quaternion ret = new Quaternion(OgrePINVOKE.Quaternion___sub____SWIG_1(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float Dot(Quaternion rkQ) {
    float ret = OgrePINVOKE.Quaternion_Dot(swigCPtr, Quaternion.getCPtr(rkQ));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float Norm() {
    float ret = OgrePINVOKE.Quaternion_Norm(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float normalise() {
    float ret = OgrePINVOKE.Quaternion_normalise(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Quaternion Inverse() {
    Quaternion ret = new Quaternion(OgrePINVOKE.Quaternion_Inverse(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Quaternion UnitInverse() {
    Quaternion ret = new Quaternion(OgrePINVOKE.Quaternion_UnitInverse(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Quaternion Exp() {
    Quaternion ret = new Quaternion(OgrePINVOKE.Quaternion_Exp(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Quaternion Log() {
    Quaternion ret = new Quaternion(OgrePINVOKE.Quaternion_Log(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 __mul__(Vector3 rkVector) {
    Vector3 ret = new Vector3(OgrePINVOKE.Quaternion___mul____SWIG_2(swigCPtr, Vector3.getCPtr(rkVector)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Radian getRoll(bool reprojectAxis) {
    Radian ret = new Radian(OgrePINVOKE.Quaternion_getRoll__SWIG_0(swigCPtr, reprojectAxis), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Radian getRoll() {
    Radian ret = new Radian(OgrePINVOKE.Quaternion_getRoll__SWIG_1(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Radian getPitch(bool reprojectAxis) {
    Radian ret = new Radian(OgrePINVOKE.Quaternion_getPitch__SWIG_0(swigCPtr, reprojectAxis), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Radian getPitch() {
    Radian ret = new Radian(OgrePINVOKE.Quaternion_getPitch__SWIG_1(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Radian getYaw(bool reprojectAxis) {
    Radian ret = new Radian(OgrePINVOKE.Quaternion_getYaw__SWIG_0(swigCPtr, reprojectAxis), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Radian getYaw() {
    Radian ret = new Radian(OgrePINVOKE.Quaternion_getYaw__SWIG_1(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool equals(Quaternion rhs, Radian tolerance) {
    bool ret = OgrePINVOKE.Quaternion_equals(swigCPtr, Quaternion.getCPtr(rhs), Radian.getCPtr(tolerance));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool orientationEquals(Quaternion other, float tolerance) {
    bool ret = OgrePINVOKE.Quaternion_orientationEquals__SWIG_0(swigCPtr, Quaternion.getCPtr(other), tolerance);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool orientationEquals(Quaternion other) {
    bool ret = OgrePINVOKE.Quaternion_orientationEquals__SWIG_1(swigCPtr, Quaternion.getCPtr(other));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Quaternion Slerp(float fT, Quaternion rkP, Quaternion rkQ, bool shortestPath) {
    Quaternion ret = new Quaternion(OgrePINVOKE.Quaternion_Slerp__SWIG_0(fT, Quaternion.getCPtr(rkP), Quaternion.getCPtr(rkQ), shortestPath), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Quaternion Slerp(float fT, Quaternion rkP, Quaternion rkQ) {
    Quaternion ret = new Quaternion(OgrePINVOKE.Quaternion_Slerp__SWIG_1(fT, Quaternion.getCPtr(rkP), Quaternion.getCPtr(rkQ)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Quaternion SlerpExtraSpins(float fT, Quaternion rkP, Quaternion rkQ, int iExtraSpins) {
    Quaternion ret = new Quaternion(OgrePINVOKE.Quaternion_SlerpExtraSpins(fT, Quaternion.getCPtr(rkP), Quaternion.getCPtr(rkQ), iExtraSpins), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Intermediate(Quaternion rkQ0, Quaternion rkQ1, Quaternion rkQ2, Quaternion rka, Quaternion rkB) {
    OgrePINVOKE.Quaternion_Intermediate(Quaternion.getCPtr(rkQ0), Quaternion.getCPtr(rkQ1), Quaternion.getCPtr(rkQ2), Quaternion.getCPtr(rka), Quaternion.getCPtr(rkB));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Quaternion Squad(float fT, Quaternion rkP, Quaternion rkA, Quaternion rkB, Quaternion rkQ, bool shortestPath) {
    Quaternion ret = new Quaternion(OgrePINVOKE.Quaternion_Squad__SWIG_0(fT, Quaternion.getCPtr(rkP), Quaternion.getCPtr(rkA), Quaternion.getCPtr(rkB), Quaternion.getCPtr(rkQ), shortestPath), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Quaternion Squad(float fT, Quaternion rkP, Quaternion rkA, Quaternion rkB, Quaternion rkQ) {
    Quaternion ret = new Quaternion(OgrePINVOKE.Quaternion_Squad__SWIG_1(fT, Quaternion.getCPtr(rkP), Quaternion.getCPtr(rkA), Quaternion.getCPtr(rkB), Quaternion.getCPtr(rkQ)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Quaternion nlerp(float fT, Quaternion rkP, Quaternion rkQ, bool shortestPath) {
    Quaternion ret = new Quaternion(OgrePINVOKE.Quaternion_nlerp__SWIG_0(fT, Quaternion.getCPtr(rkP), Quaternion.getCPtr(rkQ), shortestPath), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Quaternion nlerp(float fT, Quaternion rkP, Quaternion rkQ) {
    Quaternion ret = new Quaternion(OgrePINVOKE.Quaternion_nlerp__SWIG_1(fT, Quaternion.getCPtr(rkP), Quaternion.getCPtr(rkQ)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float msEpsilon {
    get {
      float ret = OgrePINVOKE.Quaternion_msEpsilon_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Quaternion ZERO {
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.Quaternion_ZERO_get();
      Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Quaternion IDENTITY {
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.Quaternion_IDENTITY_get();
      Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new Quaternion(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float w {
    set {
      OgrePINVOKE.Quaternion_w_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgrePINVOKE.Quaternion_w_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float x {
    set {
      OgrePINVOKE.Quaternion_x_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgrePINVOKE.Quaternion_x_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float y {
    set {
      OgrePINVOKE.Quaternion_y_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgrePINVOKE.Quaternion_y_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float z {
    set {
      OgrePINVOKE.Quaternion_z_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgrePINVOKE.Quaternion_z_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isNaN() {
    bool ret = OgrePINVOKE.Quaternion_isNaN(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void __setitem__(uint i, float v) {
    OgrePINVOKE.Quaternion___setitem__(swigCPtr, i, v);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint __len__() {
    uint ret = OgrePINVOKE.Quaternion___len__(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float __getitem__(uint i) {
    float ret = OgrePINVOKE.Quaternion___getitem__(swigCPtr, i);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string ToString() {
    string ret = OgrePINVOKE.Quaternion_ToString(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
