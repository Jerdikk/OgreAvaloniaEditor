//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class TerrainLayerBlendMap : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TerrainLayerBlendMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TerrainLayerBlendMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TerrainLayerBlendMap() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreTerrainPINVOKE.delete_TerrainLayerBlendMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public TerrainLayerBlendMap(Terrain parent, byte layerIndex, HardwarePixelBuffer buf) : this(OgreTerrainPINVOKE.new_TerrainLayerBlendMap(Terrain.getCPtr(parent), layerIndex, HardwarePixelBuffer.getCPtr(buf)), true) {
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public Terrain getParent() {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainLayerBlendMap_getParent(swigCPtr);
    Terrain ret = (cPtr == global::System.IntPtr.Zero) ? null : new Terrain(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte getLayerIndex() {
    byte ret = OgreTerrainPINVOKE.TerrainLayerBlendMap_getLayerIndex(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void convertWorldToUVSpace(Vector3 worldPos, SWIGTYPE_p_float outX, SWIGTYPE_p_float outY) {
    OgreTerrainPINVOKE.TerrainLayerBlendMap_convertWorldToUVSpace(swigCPtr, Vector3.getCPtr(worldPos), SWIGTYPE_p_float.getCPtr(outX), SWIGTYPE_p_float.getCPtr(outY));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void convertUVToWorldSpace(float x, float y, Vector3 outWorldPos) {
    OgreTerrainPINVOKE.TerrainLayerBlendMap_convertUVToWorldSpace(swigCPtr, x, y, Vector3.getCPtr(outWorldPos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void convertUVToImageSpace(float x, float y, SWIGTYPE_p_size_t outX, SWIGTYPE_p_size_t outY) {
    OgreTerrainPINVOKE.TerrainLayerBlendMap_convertUVToImageSpace(swigCPtr, x, y, SWIGTYPE_p_size_t.getCPtr(outX), SWIGTYPE_p_size_t.getCPtr(outY));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void convertImageToUVSpace(uint x, uint y, SWIGTYPE_p_float outX, SWIGTYPE_p_float outY) {
    OgreTerrainPINVOKE.TerrainLayerBlendMap_convertImageToUVSpace(swigCPtr, x, y, SWIGTYPE_p_float.getCPtr(outX), SWIGTYPE_p_float.getCPtr(outY));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void convertImageToTerrainSpace(uint x, uint y, SWIGTYPE_p_float outX, SWIGTYPE_p_float outY) {
    OgreTerrainPINVOKE.TerrainLayerBlendMap_convertImageToTerrainSpace(swigCPtr, x, y, SWIGTYPE_p_float.getCPtr(outX), SWIGTYPE_p_float.getCPtr(outY));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void convertTerrainToImageSpace(float x, float y, SWIGTYPE_p_size_t outX, SWIGTYPE_p_size_t outY) {
    OgreTerrainPINVOKE.TerrainLayerBlendMap_convertTerrainToImageSpace(swigCPtr, x, y, SWIGTYPE_p_size_t.getCPtr(outX), SWIGTYPE_p_size_t.getCPtr(outY));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getBlendValue(uint x, uint y) {
    float ret = OgreTerrainPINVOKE.TerrainLayerBlendMap_getBlendValue(swigCPtr, x, y);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBlendValue(uint x, uint y, float val) {
    OgreTerrainPINVOKE.TerrainLayerBlendMap_setBlendValue(swigCPtr, x, y, val);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_float getBlendPointer() {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainLayerBlendMap_getBlendPointer(swigCPtr);
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void dirty() {
    OgreTerrainPINVOKE.TerrainLayerBlendMap_dirty(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void dirtyRect(SWIGTYPE_p_Ogre__TRectT_int_t rect) {
    OgreTerrainPINVOKE.TerrainLayerBlendMap_dirtyRect(swigCPtr, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void blit(PixelBox src, Box dstBox) {
    OgreTerrainPINVOKE.TerrainLayerBlendMap_blit__SWIG_0(swigCPtr, PixelBox.getCPtr(src), Box.getCPtr(dstBox));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void blit(PixelBox src) {
    OgreTerrainPINVOKE.TerrainLayerBlendMap_blit__SWIG_1(swigCPtr, PixelBox.getCPtr(src));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadImage(Image img) {
    OgreTerrainPINVOKE.TerrainLayerBlendMap_loadImage__SWIG_0(swigCPtr, Image.getCPtr(img));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadImage(DataStreamPtr stream, string ext) {
    OgreTerrainPINVOKE.TerrainLayerBlendMap_loadImage__SWIG_1(swigCPtr, DataStreamPtr.getCPtr(stream), ext);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadImage(DataStreamPtr stream) {
    OgreTerrainPINVOKE.TerrainLayerBlendMap_loadImage__SWIG_2(swigCPtr, DataStreamPtr.getCPtr(stream));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadImage(string filename, string groupName) {
    OgreTerrainPINVOKE.TerrainLayerBlendMap_loadImage__SWIG_3(swigCPtr, filename, groupName);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void update() {
    OgreTerrainPINVOKE.TerrainLayerBlendMap_update(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
