//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class TerrainMaterialGenerator : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TerrainMaterialGenerator(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TerrainMaterialGenerator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TerrainMaterialGenerator() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreTerrainPINVOKE.delete_TerrainMaterialGenerator(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public class Profile : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Profile(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Profile obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Profile() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreTerrainPINVOKE.delete_TerrainMaterialGenerator_Profile(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public Profile() : this(OgreTerrainPINVOKE.new_TerrainMaterialGenerator_Profile(), true) {
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public virtual TerrainMaterialGenerator.Profile getActiveProfile() {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainMaterialGenerator_getActiveProfile(swigCPtr);
    TerrainMaterialGenerator.Profile ret = (cPtr == global::System.IntPtr.Zero) ? null : new TerrainMaterialGenerator.Profile(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _markChanged() {
    OgreTerrainPINVOKE.TerrainMaterialGenerator__markChanged(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong getChangeCount() {
    ulong ret = OgreTerrainPINVOKE.TerrainMaterialGenerator_getChangeCount(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Ogre__TerrainLayerSampler_t getLayerDeclaration() {
    SWIGTYPE_p_std__vectorT_Ogre__TerrainLayerSampler_t ret = new SWIGTYPE_p_std__vectorT_Ogre__TerrainLayerSampler_t(OgreTerrainPINVOKE.TerrainMaterialGenerator_getLayerDeclaration(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isVertexCompressionSupported() {
    bool ret = OgreTerrainPINVOKE.TerrainMaterialGenerator_isVertexCompressionSupported(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void requestOptions(Terrain terrain) {
    OgreTerrainPINVOKE.TerrainMaterialGenerator_requestOptions(swigCPtr, Terrain.getCPtr(terrain));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual MaterialPtr generate(Terrain terrain) {
    MaterialPtr ret = new MaterialPtr(OgreTerrainPINVOKE.TerrainMaterialGenerator_generate(swigCPtr, Terrain.getCPtr(terrain)), true);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual MaterialPtr generateForCompositeMap(Terrain terrain) {
    MaterialPtr ret = new MaterialPtr(OgreTerrainPINVOKE.TerrainMaterialGenerator_generateForCompositeMap(swigCPtr, Terrain.getCPtr(terrain)), true);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setLightmapEnabled(bool enabled) {
    OgreTerrainPINVOKE.TerrainMaterialGenerator_setLightmapEnabled(swigCPtr, enabled);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual byte getMaxLayers(Terrain terrain) {
    byte ret = OgreTerrainPINVOKE.TerrainMaterialGenerator_getMaxLayers(swigCPtr, Terrain.getCPtr(terrain));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void updateCompositeMap(Terrain terrain, SWIGTYPE_p_Ogre__TRectT_int_t rect) {
    OgreTerrainPINVOKE.TerrainMaterialGenerator_updateCompositeMap(swigCPtr, Terrain.getCPtr(terrain), SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void updateParams(MaterialPtr mat, Terrain terrain) {
    OgreTerrainPINVOKE.TerrainMaterialGenerator_updateParams(swigCPtr, MaterialPtr.getCPtr(mat), Terrain.getCPtr(terrain));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void updateParamsForCompositeMap(MaterialPtr mat, Terrain terrain) {
    OgreTerrainPINVOKE.TerrainMaterialGenerator_updateParamsForCompositeMap(swigCPtr, MaterialPtr.getCPtr(mat), Terrain.getCPtr(terrain));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDebugLevel(uint dbg) {
    OgreTerrainPINVOKE.TerrainMaterialGenerator_setDebugLevel(swigCPtr, dbg);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getDebugLevel() {
    uint ret = OgreTerrainPINVOKE.TerrainMaterialGenerator_getDebugLevel(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _renderCompositeMap(uint size, SWIGTYPE_p_Ogre__TRectT_int_t rect, MaterialPtr mat, TexturePtr destCompositeMap) {
    OgreTerrainPINVOKE.TerrainMaterialGenerator__renderCompositeMap(swigCPtr, size, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect), MaterialPtr.getCPtr(mat), TexturePtr.getCPtr(destCompositeMap));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public Texture _getCompositeMapRTT() {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainMaterialGenerator__getCompositeMapRTT(swigCPtr);
    Texture ret = (cPtr == global::System.IntPtr.Zero) ? null : new Texture(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
