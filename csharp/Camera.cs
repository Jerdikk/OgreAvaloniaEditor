//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class Camera : Frustum {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Camera(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.Camera_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Camera obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_Camera(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public class Listener : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Listener(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Listener obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Listener() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_Camera_Listener(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public Listener() : this(OgrePINVOKE.new_Camera_Listener(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      SwigDirectorConnect();
    }
  
    public virtual void cameraPreRenderScene(Camera cam) {
      if (SwigDerivedClassHasMethod("cameraPreRenderScene", swigMethodTypes0)) OgrePINVOKE.Camera_Listener_cameraPreRenderSceneSwigExplicitListener(swigCPtr, Camera.getCPtr(cam)); else OgrePINVOKE.Camera_Listener_cameraPreRenderScene(swigCPtr, Camera.getCPtr(cam));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public virtual void cameraPostRenderScene(Camera cam) {
      if (SwigDerivedClassHasMethod("cameraPostRenderScene", swigMethodTypes1)) OgrePINVOKE.Camera_Listener_cameraPostRenderSceneSwigExplicitListener(swigCPtr, Camera.getCPtr(cam)); else OgrePINVOKE.Camera_Listener_cameraPostRenderScene(swigCPtr, Camera.getCPtr(cam));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public virtual void cameraDestroyed(Camera cam) {
      if (SwigDerivedClassHasMethod("cameraDestroyed", swigMethodTypes2)) OgrePINVOKE.Camera_Listener_cameraDestroyedSwigExplicitListener(swigCPtr, Camera.getCPtr(cam)); else OgrePINVOKE.Camera_Listener_cameraDestroyed(swigCPtr, Camera.getCPtr(cam));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    private void SwigDirectorConnect() {
      if (SwigDerivedClassHasMethod("cameraPreRenderScene", swigMethodTypes0))
        swigDelegate0 = new SwigDelegateListener_0(SwigDirectorMethodcameraPreRenderScene);
      if (SwigDerivedClassHasMethod("cameraPostRenderScene", swigMethodTypes1))
        swigDelegate1 = new SwigDelegateListener_1(SwigDirectorMethodcameraPostRenderScene);
      if (SwigDerivedClassHasMethod("cameraDestroyed", swigMethodTypes2))
        swigDelegate2 = new SwigDelegateListener_2(SwigDirectorMethodcameraDestroyed);
      OgrePINVOKE.Camera_Listener_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2);
    }
  
    private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
      global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
      bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Listener));
      return hasDerivedMethod;
    }
  
    private void SwigDirectorMethodcameraPreRenderScene(global::System.IntPtr cam) {
      cameraPreRenderScene((cam == global::System.IntPtr.Zero) ? null : new Camera(cam, false));
    }
  
    private void SwigDirectorMethodcameraPostRenderScene(global::System.IntPtr cam) {
      cameraPostRenderScene((cam == global::System.IntPtr.Zero) ? null : new Camera(cam, false));
    }
  
    private void SwigDirectorMethodcameraDestroyed(global::System.IntPtr cam) {
      cameraDestroyed((cam == global::System.IntPtr.Zero) ? null : new Camera(cam, false));
    }
  
    public delegate void SwigDelegateListener_0(global::System.IntPtr cam);
    public delegate void SwigDelegateListener_1(global::System.IntPtr cam);
    public delegate void SwigDelegateListener_2(global::System.IntPtr cam);
  
    private SwigDelegateListener_0 swigDelegate0;
    private SwigDelegateListener_1 swigDelegate1;
    private SwigDelegateListener_2 swigDelegate2;
  
    private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(Camera) };
    private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(Camera) };
    private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(Camera) };
  }

  public Camera(string name, SceneManager sm) : this(OgrePINVOKE.new_Camera(name, SceneManager.getCPtr(sm)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addListener(Camera.Listener l) {
    OgrePINVOKE.Camera_addListener(swigCPtr, Camera.Listener.getCPtr(l));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeListener(Camera.Listener l) {
    OgrePINVOKE.Camera_removeListener(swigCPtr, Camera.Listener.getCPtr(l));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SceneManager getSceneManager() {
    global::System.IntPtr cPtr = OgrePINVOKE.Camera_getSceneManager(swigCPtr);
    SceneManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneManager(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setPolygonMode(PolygonMode sd) {
    OgrePINVOKE.Camera_setPolygonMode(swigCPtr, (int)sd);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public PolygonMode getPolygonMode() {
    PolygonMode ret = (PolygonMode)OgrePINVOKE.Camera_getPolygonMode(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _renderScene(Viewport vp) {
    OgrePINVOKE.Camera__renderScene(swigCPtr, Viewport.getCPtr(vp));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyRenderedFaces(uint numfaces) {
    OgrePINVOKE.Camera__notifyRenderedFaces(swigCPtr, numfaces);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyRenderedBatches(uint numbatches) {
    OgrePINVOKE.Camera__notifyRenderedBatches(swigCPtr, numbatches);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint _getNumRenderedFaces() {
    uint ret = OgrePINVOKE.Camera__getNumRenderedFaces(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint _getNumRenderedBatches() {
    uint ret = OgrePINVOKE.Camera__getNumRenderedBatches(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Quaternion getDerivedOrientation() {
    Quaternion ret = new Quaternion(OgrePINVOKE.Camera_getDerivedOrientation(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 getDerivedPosition() {
    Vector3 ret = new Vector3(OgrePINVOKE.Camera_getDerivedPosition(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 getDerivedDirection() {
    Vector3 ret = new Vector3(OgrePINVOKE.Camera_getDerivedDirection(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 getDerivedUp() {
    Vector3 ret = new Vector3(OgrePINVOKE.Camera_getDerivedUp(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 getDerivedRight() {
    Vector3 ret = new Vector3(OgrePINVOKE.Camera_getDerivedRight(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Quaternion getRealOrientation() {
    Quaternion ret = new Quaternion(OgrePINVOKE.Camera_getRealOrientation(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 getRealPosition() {
    Vector3 ret = new Vector3(OgrePINVOKE.Camera_getRealPosition(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 getRealDirection() {
    Vector3 ret = new Vector3(OgrePINVOKE.Camera_getRealDirection(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 getRealUp() {
    Vector3 ret = new Vector3(OgrePINVOKE.Camera_getRealUp(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 getRealRight() {
    Vector3 ret = new Vector3(OgrePINVOKE.Camera_getRealRight(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getMovableType() {
    string ret = OgrePINVOKE.Camera_getMovableType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLodBias(float factor) {
    OgrePINVOKE.Camera_setLodBias__SWIG_0(swigCPtr, factor);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setLodBias() {
    OgrePINVOKE.Camera_setLodBias__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getLodBias() {
    float ret = OgrePINVOKE.Camera_getLodBias(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setLodCamera(Camera lodCam) {
    OgrePINVOKE.Camera_setLodCamera(swigCPtr, Camera.getCPtr(lodCam));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Camera getLodCamera() {
    global::System.IntPtr cPtr = OgrePINVOKE.Camera_getLodCamera(swigCPtr);
    Camera ret = (cPtr == global::System.IntPtr.Zero) ? null : new Camera(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Ray getCameraToViewportRay(float screenx, float screeny) {
    Ray ret = new Ray(OgrePINVOKE.Camera_getCameraToViewportRay__SWIG_0(swigCPtr, screenx, screeny), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getCameraToViewportRay(float screenx, float screeny, Ray outRay) {
    OgrePINVOKE.Camera_getCameraToViewportRay__SWIG_1(swigCPtr, screenx, screeny, Ray.getCPtr(outRay));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public PlaneBoundedVolume getCameraToViewportBoxVolume(float screenLeft, float screenTop, float screenRight, float screenBottom, bool includeFarPlane) {
    PlaneBoundedVolume ret = new PlaneBoundedVolume(OgrePINVOKE.Camera_getCameraToViewportBoxVolume__SWIG_0(swigCPtr, screenLeft, screenTop, screenRight, screenBottom, includeFarPlane), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PlaneBoundedVolume getCameraToViewportBoxVolume(float screenLeft, float screenTop, float screenRight, float screenBottom) {
    PlaneBoundedVolume ret = new PlaneBoundedVolume(OgrePINVOKE.Camera_getCameraToViewportBoxVolume__SWIG_1(swigCPtr, screenLeft, screenTop, screenRight, screenBottom), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getCameraToViewportBoxVolume(float screenLeft, float screenTop, float screenRight, float screenBottom, PlaneBoundedVolume outVolume, bool includeFarPlane) {
    OgrePINVOKE.Camera_getCameraToViewportBoxVolume__SWIG_2(swigCPtr, screenLeft, screenTop, screenRight, screenBottom, PlaneBoundedVolume.getCPtr(outVolume), includeFarPlane);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void getCameraToViewportBoxVolume(float screenLeft, float screenTop, float screenRight, float screenBottom, PlaneBoundedVolume outVolume) {
    OgrePINVOKE.Camera_getCameraToViewportBoxVolume__SWIG_3(swigCPtr, screenLeft, screenTop, screenRight, screenBottom, PlaneBoundedVolume.getCPtr(outVolume));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float _getLodBiasInverse() {
    float ret = OgrePINVOKE.Camera__getLodBiasInverse(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setWindow(float left, float top, float right, float bottom) {
    OgrePINVOKE.Camera_setWindow(swigCPtr, left, top, right, bottom);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void resetWindow() {
    OgrePINVOKE.Camera_resetWindow(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool isWindowSet() {
    bool ret = OgrePINVOKE.Camera_isWindowSet(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Ogre__Plane_t getWindowPlanes() {
    SWIGTYPE_p_std__vectorT_Ogre__Plane_t ret = new SWIGTYPE_p_std__vectorT_Ogre__Plane_t(OgrePINVOKE.Camera_getWindowPlanes(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getBoundingRadius() {
    float ret = OgrePINVOKE.Camera_getBoundingRadius(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Viewport getViewport() {
    global::System.IntPtr cPtr = OgrePINVOKE.Camera_getViewport(swigCPtr);
    Viewport ret = (cPtr == global::System.IntPtr.Zero) ? null : new Viewport(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _notifyViewport(Viewport viewport) {
    OgrePINVOKE.Camera__notifyViewport(swigCPtr, Viewport.getCPtr(viewport));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAutoAspectRatio(bool autoratio) {
    OgrePINVOKE.Camera_setAutoAspectRatio(swigCPtr, autoratio);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getAutoAspectRatio() {
    bool ret = OgrePINVOKE.Camera_getAutoAspectRatio(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCullingFrustum(Frustum frustum) {
    OgrePINVOKE.Camera_setCullingFrustum(swigCPtr, Frustum.getCPtr(frustum));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Frustum getCullingFrustum() {
    global::System.IntPtr cPtr = OgrePINVOKE.Camera_getCullingFrustum(swigCPtr);
    Frustum ret = (cPtr == global::System.IntPtr.Zero) ? null : new Frustum(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void forwardIntersect(Plane worldPlane, SWIGTYPE_p_std__vectorT_Ogre__VectorT_4_Ogre__Real_t_t intersect3d) {
    OgrePINVOKE.Camera_forwardIntersect(swigCPtr, Plane.getCPtr(worldPlane), SWIGTYPE_p_std__vectorT_Ogre__VectorT_4_Ogre__Real_t_t.getCPtr(intersect3d));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool isVisible(AxisAlignedBox bound, SWIGTYPE_p_Ogre__FrustumPlane culledBy) {
    bool ret = OgrePINVOKE.Camera_isVisible__SWIG_0(swigCPtr, AxisAlignedBox.getCPtr(bound), SWIGTYPE_p_Ogre__FrustumPlane.getCPtr(culledBy));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isVisible(AxisAlignedBox bound) {
    bool ret = OgrePINVOKE.Camera_isVisible__SWIG_1(swigCPtr, AxisAlignedBox.getCPtr(bound));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isVisible(Sphere bound, SWIGTYPE_p_Ogre__FrustumPlane culledBy) {
    bool ret = OgrePINVOKE.Camera_isVisible__SWIG_2(swigCPtr, Sphere.getCPtr(bound), SWIGTYPE_p_Ogre__FrustumPlane.getCPtr(culledBy));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isVisible(Sphere bound) {
    bool ret = OgrePINVOKE.Camera_isVisible__SWIG_3(swigCPtr, Sphere.getCPtr(bound));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isVisible(Vector3 vert, SWIGTYPE_p_Ogre__FrustumPlane culledBy) {
    bool ret = OgrePINVOKE.Camera_isVisible__SWIG_4(swigCPtr, Vector3.getCPtr(vert), SWIGTYPE_p_Ogre__FrustumPlane.getCPtr(culledBy));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isVisible(Vector3 vert) {
    bool ret = OgrePINVOKE.Camera_isVisible__SWIG_5(swigCPtr, Vector3.getCPtr(vert));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override SWIGTYPE_p_a_8__Ogre__VectorT_3_float_t getWorldSpaceCorners() {
    SWIGTYPE_p_a_8__Ogre__VectorT_3_float_t ret = new SWIGTYPE_p_a_8__Ogre__VectorT_3_float_t(OgrePINVOKE.Camera_getWorldSpaceCorners(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override Plane getFrustumPlane(ushort plane) {
    Plane ret = new Plane(OgrePINVOKE.Camera_getFrustumPlane(swigCPtr, plane), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool projectSphere(Sphere sphere, SWIGTYPE_p_float left, SWIGTYPE_p_float top, SWIGTYPE_p_float right, SWIGTYPE_p_float bottom) {
    bool ret = OgrePINVOKE.Camera_projectSphere(swigCPtr, Sphere.getCPtr(sphere), SWIGTYPE_p_float.getCPtr(left), SWIGTYPE_p_float.getCPtr(top), SWIGTYPE_p_float.getCPtr(right), SWIGTYPE_p_float.getCPtr(bottom));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new float getNearClipDistance() {
    float ret = OgrePINVOKE.Camera_getNearClipDistance(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new float getFarClipDistance() {
    float ret = OgrePINVOKE.Camera_getFarClipDistance(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new Affine3 getViewMatrix() {
    Affine3 ret = new Affine3(OgrePINVOKE.Camera_getViewMatrix__SWIG_0(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Affine3 getViewMatrix(bool ownFrustumOnly) {
    Affine3 ret = new Affine3(OgrePINVOKE.Camera_getViewMatrix__SWIG_1(swigCPtr, ownFrustumOnly), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setUseRenderingDistance(bool use) {
    OgrePINVOKE.Camera_setUseRenderingDistance(swigCPtr, use);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool getUseRenderingDistance() {
    bool ret = OgrePINVOKE.Camera_getUseRenderingDistance(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void synchroniseBaseSettingsWith(Camera cam) {
    OgrePINVOKE.Camera_synchroniseBaseSettingsWith(swigCPtr, Camera.getCPtr(cam));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setUseMinPixelSize(bool enable) {
    OgrePINVOKE.Camera_setUseMinPixelSize(swigCPtr, enable);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getUseMinPixelSize() {
    bool ret = OgrePINVOKE.Camera_getUseMinPixelSize(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getPixelDisplayRatio() {
    float ret = OgrePINVOKE.Camera_getPixelDisplayRatio(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSortMode(SortMode sm) {
    OgrePINVOKE.Camera_setSortMode(swigCPtr, (int)sm);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SortMode getSortMode() {
    SortMode ret = (SortMode)OgrePINVOKE.Camera_getSortMode(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string ToString() {
    string ret = OgrePINVOKE.Camera_ToString(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
