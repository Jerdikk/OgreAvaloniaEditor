//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class MultiRenderTarget : RenderTarget {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal MultiRenderTarget(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.MultiRenderTarget_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MultiRenderTarget obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_MultiRenderTarget(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual void bindSurface(uint attachment, RenderTexture target) {
    OgrePINVOKE.MultiRenderTarget_bindSurface(swigCPtr, attachment, RenderTexture.getCPtr(target));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void unbindSurface(uint attachment) {
    OgrePINVOKE.MultiRenderTarget_unbindSurface(swigCPtr, attachment);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void copyContentsToMemory(Box src, PixelBox dst, RenderTarget.FrameBuffer buffer) {
    OgrePINVOKE.MultiRenderTarget_copyContentsToMemory__SWIG_0_0(swigCPtr, Box.getCPtr(src), PixelBox.getCPtr(dst), (int)buffer);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void copyContentsToMemory(Box src, PixelBox dst) {
    OgrePINVOKE.MultiRenderTarget_copyContentsToMemory__SWIG_0_1(swigCPtr, Box.getCPtr(src), PixelBox.getCPtr(dst));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override PixelFormat suggestPixelFormat() {
    PixelFormat ret = (PixelFormat)OgrePINVOKE.MultiRenderTarget_suggestPixelFormat(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Ogre__RenderTexture_p_t getBoundSurfaceList() {
    SWIGTYPE_p_std__vectorT_Ogre__RenderTexture_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__RenderTexture_p_t(OgrePINVOKE.MultiRenderTarget_getBoundSurfaceList(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RenderTexture getBoundSurface(uint index) {
    global::System.IntPtr cPtr = OgrePINVOKE.MultiRenderTarget_getBoundSurface(swigCPtr, index);
    RenderTexture ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderTexture(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
