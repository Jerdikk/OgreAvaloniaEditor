//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ShadowRenderable : Renderable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ShadowRenderable(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.ShadowRenderable_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ShadowRenderable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_ShadowRenderable(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ShadowRenderable() : this(OgrePINVOKE.new_ShadowRenderable__SWIG_0(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ShadowRenderable(MovableObject parent, HardwareIndexBufferPtr indexBuffer, VertexData vertexData, bool createSeparateLightCap, bool isLightCap) : this(OgrePINVOKE.new_ShadowRenderable__SWIG_1(MovableObject.getCPtr(parent), HardwareIndexBufferPtr.getCPtr(indexBuffer), VertexData.getCPtr(vertexData), createSeparateLightCap, isLightCap), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ShadowRenderable(MovableObject parent, HardwareIndexBufferPtr indexBuffer, VertexData vertexData, bool createSeparateLightCap) : this(OgrePINVOKE.new_ShadowRenderable__SWIG_2(MovableObject.getCPtr(parent), HardwareIndexBufferPtr.getCPtr(indexBuffer), VertexData.getCPtr(vertexData), createSeparateLightCap), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMaterial(MaterialPtr mat) {
    OgrePINVOKE.ShadowRenderable_setMaterial(swigCPtr, MaterialPtr.getCPtr(mat));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public MaterialPtr getMaterial() {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.ShadowRenderable_getMaterial(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getRenderOperation(RenderOperation op) {
    OgrePINVOKE.ShadowRenderable_getRenderOperation(swigCPtr, RenderOperation.getCPtr(op));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public RenderOperation getRenderOperationForUpdate() {
    global::System.IntPtr cPtr = OgrePINVOKE.ShadowRenderable_getRenderOperationForUpdate(swigCPtr);
    RenderOperation ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderOperation(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getWorldTransforms(Matrix4 xform) {
    OgrePINVOKE.ShadowRenderable_getWorldTransforms(swigCPtr, Matrix4.getCPtr(xform));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getSquaredViewDepth(Camera arg0) {
    float ret = OgrePINVOKE.ShadowRenderable_getSquaredViewDepth(swigCPtr, Camera.getCPtr(arg0));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Ogre__Light_p_t getLights() {
    SWIGTYPE_p_std__vectorT_Ogre__Light_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__Light_p_t(OgrePINVOKE.ShadowRenderable_getLights(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isLightCapSeparate() {
    bool ret = OgrePINVOKE.ShadowRenderable_isLightCapSeparate(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ShadowRenderable getLightCapRenderable() {
    global::System.IntPtr cPtr = OgrePINVOKE.ShadowRenderable_getLightCapRenderable(swigCPtr);
    ShadowRenderable ret = (cPtr == global::System.IntPtr.Zero) ? null : new ShadowRenderable(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isVisible() {
    bool ret = OgrePINVOKE.ShadowRenderable_isVisible(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void rebindIndexBuffer(HardwareIndexBufferPtr indexBuffer) {
    OgrePINVOKE.ShadowRenderable_rebindIndexBuffer(swigCPtr, HardwareIndexBufferPtr.getCPtr(indexBuffer));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public HardwareVertexBufferPtr getPositionBuffer() {
    HardwareVertexBufferPtr ret = new HardwareVertexBufferPtr(OgrePINVOKE.ShadowRenderable_getPositionBuffer(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
