//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class TerrainGlobalOptions : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TerrainGlobalOptions(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TerrainGlobalOptions obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TerrainGlobalOptions() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreTerrainPINVOKE.delete_TerrainGlobalOptions(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public TerrainGlobalOptions() : this(OgreTerrainPINVOKE.new_TerrainGlobalOptions(), true) {
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getSkirtSize() {
    float ret = OgreTerrainPINVOKE.TerrainGlobalOptions_getSkirtSize(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSkirtSize(float skirtSz) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setSkirtSize(swigCPtr, skirtSz);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 getLightMapDirection() {
    Vector3 ret = new Vector3(OgreTerrainPINVOKE.TerrainGlobalOptions_getLightMapDirection(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLightMapDirection(Vector3 v) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setLightMapDirection(swigCPtr, Vector3.getCPtr(v));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public ColourValue getCompositeMapAmbient() {
    ColourValue ret = new ColourValue(OgreTerrainPINVOKE.TerrainGlobalOptions_getCompositeMapAmbient(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCompositeMapAmbient(ColourValue c) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setCompositeMapAmbient(swigCPtr, ColourValue.getCPtr(c));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public ColourValue getCompositeMapDiffuse() {
    ColourValue ret = new ColourValue(OgreTerrainPINVOKE.TerrainGlobalOptions_getCompositeMapDiffuse(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCompositeMapDiffuse(ColourValue c) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setCompositeMapDiffuse(swigCPtr, ColourValue.getCPtr(c));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getCompositeMapDistance() {
    float ret = OgreTerrainPINVOKE.TerrainGlobalOptions_getCompositeMapDistance(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCompositeMapDistance(float c) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setCompositeMapDistance(swigCPtr, c);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getCastsDynamicShadows() {
    bool ret = OgreTerrainPINVOKE.TerrainGlobalOptions_getCastsDynamicShadows(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCastsDynamicShadows(bool s) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setCastsDynamicShadows(swigCPtr, s);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getMaxPixelError() {
    float ret = OgreTerrainPINVOKE.TerrainGlobalOptions_getMaxPixelError(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMaxPixelError(float pixerr) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setMaxPixelError(swigCPtr, pixerr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public byte getRenderQueueGroup() {
    byte ret = OgreTerrainPINVOKE.TerrainGlobalOptions_getRenderQueueGroup(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setRenderQueueGroup(byte grp) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setRenderQueueGroup(swigCPtr, grp);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getVisibilityFlags() {
    uint ret = OgreTerrainPINVOKE.TerrainGlobalOptions_getVisibilityFlags(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setVisibilityFlags(uint flags) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setVisibilityFlags(swigCPtr, flags);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setQueryFlags(uint flags) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setQueryFlags(swigCPtr, flags);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getQueryFlags() {
    uint ret = OgreTerrainPINVOKE.TerrainGlobalOptions_getQueryFlags(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addQueryFlags(uint flags) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_addQueryFlags(swigCPtr, flags);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeQueryFlags(uint flags) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_removeQueryFlags(swigCPtr, flags);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getUseRayBoxDistanceCalculation() {
    bool ret = OgreTerrainPINVOKE.TerrainGlobalOptions_getUseRayBoxDistanceCalculation(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setUseRayBoxDistanceCalculation(bool rb) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setUseRayBoxDistanceCalculation(swigCPtr, rb);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Ogre__SharedPtrT_Ogre__TerrainMaterialGenerator_t getDefaultMaterialGenerator() {
    SWIGTYPE_p_Ogre__SharedPtrT_Ogre__TerrainMaterialGenerator_t ret = new SWIGTYPE_p_Ogre__SharedPtrT_Ogre__TerrainMaterialGenerator_t(OgreTerrainPINVOKE.TerrainGlobalOptions_getDefaultMaterialGenerator(swigCPtr), true);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDefaultMaterialGenerator(SWIGTYPE_p_Ogre__SharedPtrT_Ogre__TerrainMaterialGenerator_t gen) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setDefaultMaterialGenerator(swigCPtr, SWIGTYPE_p_Ogre__SharedPtrT_Ogre__TerrainMaterialGenerator_t.getCPtr(gen));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getLayerBlendMapSize() {
    ushort ret = OgreTerrainPINVOKE.TerrainGlobalOptions_getLayerBlendMapSize(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLayerBlendMapSize(ushort sz) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setLayerBlendMapSize(swigCPtr, sz);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getDefaultLayerTextureWorldSize() {
    float ret = OgreTerrainPINVOKE.TerrainGlobalOptions_getDefaultLayerTextureWorldSize(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDefaultLayerTextureWorldSize(float sz) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setDefaultLayerTextureWorldSize(swigCPtr, sz);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getDefaultGlobalColourMapSize() {
    ushort ret = OgreTerrainPINVOKE.TerrainGlobalOptions_getDefaultGlobalColourMapSize(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDefaultGlobalColourMapSize(ushort sz) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setDefaultGlobalColourMapSize(swigCPtr, sz);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getLightMapSize() {
    ushort ret = OgreTerrainPINVOKE.TerrainGlobalOptions_getLightMapSize(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLightMapSize(ushort sz) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setLightMapSize(swigCPtr, sz);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getCompositeMapSize() {
    ushort ret = OgreTerrainPINVOKE.TerrainGlobalOptions_getCompositeMapSize(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCompositeMapSize(ushort sz) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setCompositeMapSize(swigCPtr, sz);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDefaultResourceGroup(string grp) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setDefaultResourceGroup(swigCPtr, grp);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getDefaultResourceGroup() {
    string ret = OgreTerrainPINVOKE.TerrainGlobalOptions_getDefaultResourceGroup(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getUseVertexCompressionWhenAvailable() {
    bool ret = OgreTerrainPINVOKE.TerrainGlobalOptions_getUseVertexCompressionWhenAvailable(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setUseVertexCompressionWhenAvailable(bool enable) {
    OgreTerrainPINVOKE.TerrainGlobalOptions_setUseVertexCompressionWhenAvailable(swigCPtr, enable);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public static TerrainGlobalOptions getSingleton() {
    TerrainGlobalOptions ret = new TerrainGlobalOptions(OgreTerrainPINVOKE.TerrainGlobalOptions_getSingleton(), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
