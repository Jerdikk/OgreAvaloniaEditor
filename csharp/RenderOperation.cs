//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class RenderOperation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RenderOperation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RenderOperation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RenderOperation() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_RenderOperation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public VertexData vertexData {
    set {
      OgrePINVOKE.RenderOperation_vertexData_set(swigCPtr, VertexData.getCPtr(value));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.RenderOperation_vertexData_get(swigCPtr);
      VertexData ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexData(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public IndexData indexData {
    set {
      OgrePINVOKE.RenderOperation_indexData_set(swigCPtr, IndexData.getCPtr(value));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.RenderOperation_indexData_get(swigCPtr);
      IndexData ret = (cPtr == global::System.IntPtr.Zero) ? null : new IndexData(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Renderable srcRenderable {
    set {
      OgrePINVOKE.RenderOperation_srcRenderable_set(swigCPtr, Renderable.getCPtr(value));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.RenderOperation_srcRenderable_get(swigCPtr);
      Renderable ret = (cPtr == global::System.IntPtr.Zero) ? null : new Renderable(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint numberOfInstances {
    set {
      OgrePINVOKE.RenderOperation_numberOfInstances_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = OgrePINVOKE.RenderOperation_numberOfInstances_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public RenderOperation.OperationType operationType {
    set {
      OgrePINVOKE.RenderOperation_operationType_set(swigCPtr, (int)value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      RenderOperation.OperationType ret = (RenderOperation.OperationType)OgrePINVOKE.RenderOperation_operationType_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool useIndexes {
    set {
      OgrePINVOKE.RenderOperation_useIndexes_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = OgrePINVOKE.RenderOperation_useIndexes_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool useGlobalInstancing {
    set {
      OgrePINVOKE.RenderOperation_useGlobalInstancing_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = OgrePINVOKE.RenderOperation_useGlobalInstancing_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public RenderOperation() : this(OgrePINVOKE.new_RenderOperation(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum OperationType {
    OT_POINT_LIST = 1,
    OT_LINE_LIST = 2,
    OT_LINE_STRIP = 3,
    OT_TRIANGLE_LIST = 4,
    OT_TRIANGLE_STRIP = 5,
    OT_TRIANGLE_FAN = 6,
    OT_PATCH_1_CONTROL_POINT = 7,
    OT_PATCH_2_CONTROL_POINT = 8,
    OT_PATCH_3_CONTROL_POINT = 9,
    OT_PATCH_4_CONTROL_POINT = 10,
    OT_PATCH_5_CONTROL_POINT = 11,
    OT_PATCH_6_CONTROL_POINT = 12,
    OT_PATCH_7_CONTROL_POINT = 13,
    OT_PATCH_8_CONTROL_POINT = 14,
    OT_PATCH_9_CONTROL_POINT = 15,
    OT_PATCH_10_CONTROL_POINT = 16,
    OT_PATCH_11_CONTROL_POINT = 17,
    OT_PATCH_12_CONTROL_POINT = 18,
    OT_PATCH_13_CONTROL_POINT = 19,
    OT_PATCH_14_CONTROL_POINT = 20,
    OT_PATCH_15_CONTROL_POINT = 21,
    OT_PATCH_16_CONTROL_POINT = 22,
    OT_PATCH_17_CONTROL_POINT = 23,
    OT_PATCH_18_CONTROL_POINT = 24,
    OT_PATCH_19_CONTROL_POINT = 25,
    OT_PATCH_20_CONTROL_POINT = 26,
    OT_PATCH_21_CONTROL_POINT = 27,
    OT_PATCH_22_CONTROL_POINT = 28,
    OT_PATCH_23_CONTROL_POINT = 29,
    OT_PATCH_24_CONTROL_POINT = 30,
    OT_PATCH_25_CONTROL_POINT = 31,
    OT_PATCH_26_CONTROL_POINT = 32,
    OT_PATCH_27_CONTROL_POINT = 33,
    OT_PATCH_28_CONTROL_POINT = 34,
    OT_PATCH_29_CONTROL_POINT = 35,
    OT_PATCH_30_CONTROL_POINT = 36,
    OT_PATCH_31_CONTROL_POINT = 37,
    OT_PATCH_32_CONTROL_POINT = 38,
    OT_DETAIL_ADJACENCY_BIT = 1 << 6,
    OT_LINE_LIST_ADJ = OT_LINE_LIST|OT_DETAIL_ADJACENCY_BIT,
    OT_LINE_STRIP_ADJ = OT_LINE_STRIP|OT_DETAIL_ADJACENCY_BIT,
    OT_TRIANGLE_LIST_ADJ = OT_TRIANGLE_LIST|OT_DETAIL_ADJACENCY_BIT,
    OT_TRIANGLE_STRIP_ADJ = OT_TRIANGLE_STRIP|OT_DETAIL_ADJACENCY_BIT
  }

}

}
