//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class OverlayElement : StringInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal OverlayElement(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgreOverlayPINVOKE.OverlayElement_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OverlayElement obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreOverlayPINVOKE.delete_OverlayElement(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public static string DEFAULT_RESOURCE_GROUP {
    get {
      string ret = OgreOverlayPINVOKE.OverlayElement_DEFAULT_RESOURCE_GROUP_get();
      if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public virtual void initialise() {
    OgreOverlayPINVOKE.OverlayElement_initialise(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _releaseManualHardwareResources() {
    OgreOverlayPINVOKE.OverlayElement__releaseManualHardwareResources(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _restoreManualHardwareResources() {
    OgreOverlayPINVOKE.OverlayElement__restoreManualHardwareResources(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getName() {
    string ret = OgreOverlayPINVOKE.OverlayElement_getName(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void show() {
    OgreOverlayPINVOKE.OverlayElement_show(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void hide() {
    OgreOverlayPINVOKE.OverlayElement_hide(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVisible(bool visible) {
    OgreOverlayPINVOKE.OverlayElement_setVisible(swigCPtr, visible);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isVisible() {
    bool ret = OgreOverlayPINVOKE.OverlayElement_isVisible(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isEnabled() {
    bool ret = OgreOverlayPINVOKE.OverlayElement_isEnabled(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setEnabled(bool b) {
    OgreOverlayPINVOKE.OverlayElement_setEnabled(swigCPtr, b);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDimensions(float width, float height) {
    OgreOverlayPINVOKE.OverlayElement_setDimensions(swigCPtr, width, height);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setPosition(float left, float top) {
    OgreOverlayPINVOKE.OverlayElement_setPosition(swigCPtr, left, top);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setWidth(float width) {
    OgreOverlayPINVOKE.OverlayElement_setWidth(swigCPtr, width);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getWidth() {
    float ret = OgreOverlayPINVOKE.OverlayElement_getWidth(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setHeight(float height) {
    OgreOverlayPINVOKE.OverlayElement_setHeight(swigCPtr, height);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getHeight() {
    float ret = OgreOverlayPINVOKE.OverlayElement_getHeight(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLeft(float left) {
    OgreOverlayPINVOKE.OverlayElement_setLeft(swigCPtr, left);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getLeft() {
    float ret = OgreOverlayPINVOKE.OverlayElement_getLeft(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTop(float Top) {
    OgreOverlayPINVOKE.OverlayElement_setTop(swigCPtr, Top);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getTop() {
    float ret = OgreOverlayPINVOKE.OverlayElement_getTop(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float _getLeft() {
    float ret = OgreOverlayPINVOKE.OverlayElement__getLeft(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float _getTop() {
    float ret = OgreOverlayPINVOKE.OverlayElement__getTop(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float _getWidth() {
    float ret = OgreOverlayPINVOKE.OverlayElement__getWidth(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float _getHeight() {
    float ret = OgreOverlayPINVOKE.OverlayElement__getHeight(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _setLeft(float left) {
    OgreOverlayPINVOKE.OverlayElement__setLeft(swigCPtr, left);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setTop(float top) {
    OgreOverlayPINVOKE.OverlayElement__setTop(swigCPtr, top);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setWidth(float width) {
    OgreOverlayPINVOKE.OverlayElement__setWidth(swigCPtr, width);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setHeight(float height) {
    OgreOverlayPINVOKE.OverlayElement__setHeight(swigCPtr, height);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setPosition(float left, float top) {
    OgreOverlayPINVOKE.OverlayElement__setPosition(swigCPtr, left, top);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setDimensions(float width, float height) {
    OgreOverlayPINVOKE.OverlayElement__setDimensions(swigCPtr, width, height);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string getMaterialName() {
    string ret = OgreOverlayPINVOKE.OverlayElement_getMaterialName(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMaterial(MaterialPtr mat) {
    OgreOverlayPINVOKE.OverlayElement_setMaterial(swigCPtr, MaterialPtr.getCPtr(mat));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMaterialName(string matName, string group) {
    OgreOverlayPINVOKE.OverlayElement_setMaterialName__SWIG_0(swigCPtr, matName, group);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMaterialName(string matName) {
    OgreOverlayPINVOKE.OverlayElement_setMaterialName__SWIG_1(swigCPtr, matName);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public MaterialPtr getMaterial() {
    MaterialPtr ret = new MaterialPtr(OgreOverlayPINVOKE.OverlayElement_getMaterial(swigCPtr), false);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getWorldTransforms(Matrix4 xform) {
    OgreOverlayPINVOKE.OverlayElement_getWorldTransforms(swigCPtr, Matrix4.getCPtr(xform));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _positionsOutOfDate() {
    OgreOverlayPINVOKE.OverlayElement__positionsOutOfDate(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _update() {
    OgreOverlayPINVOKE.OverlayElement__update(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _updateFromParent() {
    OgreOverlayPINVOKE.OverlayElement__updateFromParent(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _notifyParent(OverlayContainer parent, Overlay overlay) {
    OgreOverlayPINVOKE.OverlayElement__notifyParent(swigCPtr, OverlayContainer.getCPtr(parent), Overlay.getCPtr(overlay));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float _getDerivedLeft() {
    float ret = OgreOverlayPINVOKE.OverlayElement__getDerivedLeft(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float _getDerivedTop() {
    float ret = OgreOverlayPINVOKE.OverlayElement__getDerivedTop(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float _getRelativeWidth() {
    float ret = OgreOverlayPINVOKE.OverlayElement__getRelativeWidth(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float _getRelativeHeight() {
    float ret = OgreOverlayPINVOKE.OverlayElement__getRelativeHeight(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void _getClippingRegion(FloatRect clippingRegion) {
    OgreOverlayPINVOKE.OverlayElement__getClippingRegion(swigCPtr, FloatRect.getCPtr(clippingRegion));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ushort _notifyZOrder(ushort newZOrder) {
    ushort ret = OgreOverlayPINVOKE.OverlayElement__notifyZOrder(swigCPtr, newZOrder);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void _notifyWorldTransforms(Matrix4 xform) {
    OgreOverlayPINVOKE.OverlayElement__notifyWorldTransforms(swigCPtr, Matrix4.getCPtr(xform));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _notifyViewport() {
    OgreOverlayPINVOKE.OverlayElement__notifyViewport(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void _updateRenderQueue(RenderQueue queue) {
    OgreOverlayPINVOKE.OverlayElement__updateRenderQueue(swigCPtr, RenderQueue.getCPtr(queue));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void visitRenderables(Renderable.Visitor visitor, bool debugRenderables) {
    OgreOverlayPINVOKE.OverlayElement_visitRenderables__SWIG_0(swigCPtr, Renderable.Visitor.getCPtr(visitor), debugRenderables);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void visitRenderables(Renderable.Visitor visitor) {
    OgreOverlayPINVOKE.OverlayElement_visitRenderables__SWIG_1(swigCPtr, Renderable.Visitor.getCPtr(visitor));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string getTypeName() {
    string ret = OgreOverlayPINVOKE.OverlayElement_getTypeName(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setCaption(string text) {
    OgreOverlayPINVOKE.OverlayElement_setCaption(swigCPtr, text);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getCaption() {
    string ret = OgreOverlayPINVOKE.OverlayElement_getCaption(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setColour(ColourValue col) {
    OgreOverlayPINVOKE.OverlayElement_setColour(swigCPtr, ColourValue.getCPtr(col));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ColourValue getColour() {
    ColourValue ret = new ColourValue(OgreOverlayPINVOKE.OverlayElement_getColour(swigCPtr), false);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setMetricsMode(GuiMetricsMode gmm) {
    OgreOverlayPINVOKE.OverlayElement_setMetricsMode(swigCPtr, (int)gmm);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public GuiMetricsMode getMetricsMode() {
    GuiMetricsMode ret = (GuiMetricsMode)OgreOverlayPINVOKE.OverlayElement_getMetricsMode(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setHorizontalAlignment(GuiHorizontalAlignment gha) {
    OgreOverlayPINVOKE.OverlayElement_setHorizontalAlignment(swigCPtr, (int)gha);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public GuiHorizontalAlignment getHorizontalAlignment() {
    GuiHorizontalAlignment ret = (GuiHorizontalAlignment)OgreOverlayPINVOKE.OverlayElement_getHorizontalAlignment(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setVerticalAlignment(GuiVerticalAlignment gva) {
    OgreOverlayPINVOKE.OverlayElement_setVerticalAlignment(swigCPtr, (int)gva);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public GuiVerticalAlignment getVerticalAlignment() {
    GuiVerticalAlignment ret = (GuiVerticalAlignment)OgreOverlayPINVOKE.OverlayElement_getVerticalAlignment(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool contains(float x, float y) {
    bool ret = OgreOverlayPINVOKE.OverlayElement_contains(swigCPtr, x, y);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual OverlayElement findElementAt(float x, float y) {
    global::System.IntPtr cPtr = OgreOverlayPINVOKE.OverlayElement_findElementAt(swigCPtr, x, y);
    OverlayElement ret = (cPtr == global::System.IntPtr.Zero) ? null : new OverlayElement(cPtr, false);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isContainer() {
    bool ret = OgreOverlayPINVOKE.OverlayElement_isContainer(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isKeyEnabled() {
    bool ret = OgreOverlayPINVOKE.OverlayElement_isKeyEnabled(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isCloneable() {
    bool ret = OgreOverlayPINVOKE.OverlayElement_isCloneable(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCloneable(bool c) {
    OgreOverlayPINVOKE.OverlayElement_setCloneable(swigCPtr, c);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public OverlayContainer getParent() {
    global::System.IntPtr cPtr = OgreOverlayPINVOKE.OverlayElement_getParent(swigCPtr);
    OverlayContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new OverlayContainer(cPtr, false);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _setParent(OverlayContainer parent) {
    OgreOverlayPINVOKE.OverlayElement__setParent(swigCPtr, OverlayContainer.getCPtr(parent));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getZOrder() {
    ushort ret = OgreOverlayPINVOKE.OverlayElement_getZOrder(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getSquaredViewDepth(Camera cam) {
    float ret = OgreOverlayPINVOKE.OverlayElement_getSquaredViewDepth(swigCPtr, Camera.getCPtr(cam));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Ogre__Light_p_t getLights() {
    SWIGTYPE_p_std__vectorT_Ogre__Light_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__Light_p_t(OgreOverlayPINVOKE.OverlayElement_getLights(swigCPtr), false);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void copyFromTemplate(OverlayElement templateOverlay) {
    OgreOverlayPINVOKE.OverlayElement_copyFromTemplate(swigCPtr, OverlayElement.getCPtr(templateOverlay));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual OverlayElement clone(string instanceName) {
    global::System.IntPtr cPtr = OgreOverlayPINVOKE.OverlayElement_clone(swigCPtr, instanceName);
    OverlayElement ret = (cPtr == global::System.IntPtr.Zero) ? null : new OverlayElement(cPtr, false);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public OverlayContainer castOverlayContainer() {
    global::System.IntPtr cPtr = OgreOverlayPINVOKE.OverlayElement_castOverlayContainer(swigCPtr);
    OverlayContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new OverlayContainer(cPtr, false);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PanelOverlayElement castPanelOverlayElement() {
    global::System.IntPtr cPtr = OgreOverlayPINVOKE.OverlayElement_castPanelOverlayElement(swigCPtr);
    PanelOverlayElement ret = (cPtr == global::System.IntPtr.Zero) ? null : new PanelOverlayElement(cPtr, false);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TextAreaOverlayElement castTextAreaOverlayElement() {
    global::System.IntPtr cPtr = OgreOverlayPINVOKE.OverlayElement_castTextAreaOverlayElement(swigCPtr);
    TextAreaOverlayElement ret = (cPtr == global::System.IntPtr.Zero) ? null : new TextAreaOverlayElement(cPtr, false);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
