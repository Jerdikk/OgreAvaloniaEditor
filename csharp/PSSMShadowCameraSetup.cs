//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class PSSMShadowCameraSetup : LiSPSMShadowCameraSetup {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PSSMShadowCameraSetup(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.PSSMShadowCameraSetup_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PSSMShadowCameraSetup obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_PSSMShadowCameraSetup(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public PSSMShadowCameraSetup() : this(OgrePINVOKE.new_PSSMShadowCameraSetup(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public new static ShadowCameraSetupPtr create() {
    ShadowCameraSetupPtr ret = new ShadowCameraSetupPtr(OgrePINVOKE.PSSMShadowCameraSetup_create(), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void calculateSplitPoints(uint splitCount, float nearDist, float farDist, float lambda) {
    OgrePINVOKE.PSSMShadowCameraSetup_calculateSplitPoints__SWIG_0(swigCPtr, splitCount, nearDist, farDist, lambda);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void calculateSplitPoints(uint splitCount, float nearDist, float farDist) {
    OgrePINVOKE.PSSMShadowCameraSetup_calculateSplitPoints__SWIG_1(swigCPtr, splitCount, nearDist, farDist);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSplitPoints(SplitPointList newSplitPoints) {
    OgrePINVOKE.PSSMShadowCameraSetup_setSplitPoints(swigCPtr, SplitPointList.getCPtr(newSplitPoints));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setOptimalAdjustFactor(uint splitIndex, float factor) {
    OgrePINVOKE.PSSMShadowCameraSetup_setOptimalAdjustFactor(swigCPtr, splitIndex, factor);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSplitPadding(float pad) {
    OgrePINVOKE.PSSMShadowCameraSetup_setSplitPadding(swigCPtr, pad);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getSplitPadding() {
    float ret = OgrePINVOKE.PSSMShadowCameraSetup_getSplitPadding(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getSplitCount() {
    uint ret = OgrePINVOKE.PSSMShadowCameraSetup_getSplitCount(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void getShadowCamera(SceneManager sm, Camera cam, Viewport vp, Light light, Camera texCam, uint iteration) {
    OgrePINVOKE.PSSMShadowCameraSetup_getShadowCamera(swigCPtr, SceneManager.getCPtr(sm), Camera.getCPtr(cam), Viewport.getCPtr(vp), Light.getCPtr(light), Camera.getCPtr(texCam), iteration);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SplitPointList getSplitPoints() {
    SplitPointList ret = new SplitPointList(OgrePINVOKE.PSSMShadowCameraSetup_getSplitPoints(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getOptimalAdjustFactor(uint splitIndex) {
    float ret = OgrePINVOKE.PSSMShadowCameraSetup_getOptimalAdjustFactor__SWIG_0(swigCPtr, splitIndex);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override float getOptimalAdjustFactor() {
    float ret = OgrePINVOKE.PSSMShadowCameraSetup_getOptimalAdjustFactor__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
