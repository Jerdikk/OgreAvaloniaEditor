//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class PatchMeshPtr : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PatchMeshPtr(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PatchMeshPtr obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PatchMeshPtr() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_PatchMeshPtr(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public PatchMeshPtr(SWIGTYPE_p_std__nullptr_t arg0) : this(OgrePINVOKE.new_PatchMeshPtr__SWIG_0(SWIGTYPE_p_std__nullptr_t.getCPtr(arg0)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public PatchMeshPtr() : this(OgrePINVOKE.new_PatchMeshPtr__SWIG_1(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public PatchMeshPtr(PatchMeshPtr r) : this(OgrePINVOKE.new_PatchMeshPtr__SWIG_2(PatchMeshPtr.getCPtr(r)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public PatchMesh __deref__() {
    global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr___deref__(swigCPtr);
    PatchMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new PatchMesh(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void update(global::System.IntPtr controlPointBuffer, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide) {
    OgrePINVOKE.PatchMeshPtr_update(swigCPtr, controlPointBuffer, width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, (int)visibleSide);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void define(global::System.IntPtr controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide, byte vbUsage, byte ibUsage, bool vbUseShadow, bool ibUseShadow) {
    OgrePINVOKE.PatchMeshPtr_define__SWIG_0(swigCPtr, controlPointBuffer, VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, (int)visibleSide, vbUsage, ibUsage, vbUseShadow, ibUseShadow);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void define(global::System.IntPtr controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide, byte vbUsage, byte ibUsage, bool vbUseShadow) {
    OgrePINVOKE.PatchMeshPtr_define__SWIG_1(swigCPtr, controlPointBuffer, VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, (int)visibleSide, vbUsage, ibUsage, vbUseShadow);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void define(global::System.IntPtr controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide, byte vbUsage, byte ibUsage) {
    OgrePINVOKE.PatchMeshPtr_define__SWIG_2(swigCPtr, controlPointBuffer, VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, (int)visibleSide, vbUsage, ibUsage);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void define(global::System.IntPtr controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide, byte vbUsage) {
    OgrePINVOKE.PatchMeshPtr_define__SWIG_3(swigCPtr, controlPointBuffer, VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, (int)visibleSide, vbUsage);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void define(global::System.IntPtr controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide) {
    OgrePINVOKE.PatchMeshPtr_define__SWIG_4(swigCPtr, controlPointBuffer, VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, (int)visibleSide);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void define(global::System.IntPtr controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel) {
    OgrePINVOKE.PatchMeshPtr_define__SWIG_5(swigCPtr, controlPointBuffer, VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void define(global::System.IntPtr controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel) {
    OgrePINVOKE.PatchMeshPtr_define__SWIG_6(swigCPtr, controlPointBuffer, VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void define(global::System.IntPtr controlPointBuffer, VertexDeclaration declaration, uint width, uint height) {
    OgrePINVOKE.PatchMeshPtr_define__SWIG_7(swigCPtr, controlPointBuffer, VertexDeclaration.getCPtr(declaration), width, height);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSubdivision(float factor) {
    OgrePINVOKE.PatchMeshPtr_setSubdivision(swigCPtr, factor);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SubMesh createSubMesh() {
    global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr_createSubMesh__SWIG_0(swigCPtr);
    SubMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new SubMesh(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SubMesh createSubMesh(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr_createSubMesh__SWIG_1(swigCPtr, name);
    SubMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new SubMesh(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void nameSubMesh(string name, ushort index) {
    OgrePINVOKE.PatchMeshPtr_nameSubMesh(swigCPtr, name, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void unnameSubMesh(string name) {
    OgrePINVOKE.PatchMeshPtr_unnameSubMesh(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort _getSubMeshIndex(string name) {
    ushort ret = OgrePINVOKE.PatchMeshPtr__getSubMeshIndex(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumSubMeshes() {
    uint ret = OgrePINVOKE.PatchMeshPtr_getNumSubMeshes(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SubMesh getSubMesh(uint index) {
    global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr_getSubMesh__SWIG_0(swigCPtr, index);
    SubMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new SubMesh(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SubMesh getSubMesh(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr_getSubMesh__SWIG_1(swigCPtr, name);
    SubMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new SubMesh(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroySubMesh(ushort index) {
    OgrePINVOKE.PatchMeshPtr_destroySubMesh__SWIG_0(swigCPtr, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroySubMesh(string name) {
    OgrePINVOKE.PatchMeshPtr_destroySubMesh__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SubMeshList getSubMeshes() {
    SubMeshList ret = new SubMeshList(OgrePINVOKE.PatchMeshPtr_getSubMeshes(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VertexData sharedVertexData {
    set {
      OgrePINVOKE.PatchMeshPtr_sharedVertexData_set(swigCPtr, VertexData.getCPtr(value));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr_sharedVertexData_get(swigCPtr);
      VertexData ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexData(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public void resetVertexData(VertexData data) {
    OgrePINVOKE.PatchMeshPtr_resetVertexData__SWIG_0(swigCPtr, VertexData.getCPtr(data));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void resetVertexData() {
    OgrePINVOKE.PatchMeshPtr_resetVertexData__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void createVertexData(HardwareBufferManagerBase mgr) {
    OgrePINVOKE.PatchMeshPtr_createVertexData__SWIG_0(swigCPtr, HardwareBufferManagerBase.getCPtr(mgr));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void createVertexData() {
    OgrePINVOKE.PatchMeshPtr_createVertexData__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_unsigned_short_t sharedBlendIndexToBoneIndexMap {
    set {
      OgrePINVOKE.PatchMeshPtr_sharedBlendIndexToBoneIndexMap_set(swigCPtr, SWIGTYPE_p_std__vectorT_unsigned_short_t.getCPtr(value));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr_sharedBlendIndexToBoneIndexMap_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_unsigned_short_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_unsigned_short_t(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MeshPtr clone(string newName, string newGroup) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.PatchMeshPtr_clone__SWIG_0(swigCPtr, newName, newGroup), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr clone(string newName) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.PatchMeshPtr_clone__SWIG_1(swigCPtr, newName), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void reload(Resource.LoadingFlags flags) {
    OgrePINVOKE.PatchMeshPtr_reload__SWIG_0(swigCPtr, (int)flags);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void reload() {
    OgrePINVOKE.PatchMeshPtr_reload__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public AxisAlignedBox getBounds() {
    AxisAlignedBox ret = new AxisAlignedBox(OgrePINVOKE.PatchMeshPtr_getBounds(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getBoundingSphereRadius() {
    float ret = OgrePINVOKE.PatchMeshPtr_getBoundingSphereRadius(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getBoneBoundingRadius() {
    float ret = OgrePINVOKE.PatchMeshPtr_getBoneBoundingRadius(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _setBounds(AxisAlignedBox bounds, bool pad) {
    OgrePINVOKE.PatchMeshPtr__setBounds__SWIG_0(swigCPtr, AxisAlignedBox.getCPtr(bounds), pad);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setBounds(AxisAlignedBox bounds) {
    OgrePINVOKE.PatchMeshPtr__setBounds__SWIG_1(swigCPtr, AxisAlignedBox.getCPtr(bounds));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setBoundingSphereRadius(float radius) {
    OgrePINVOKE.PatchMeshPtr__setBoundingSphereRadius(swigCPtr, radius);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setBoneBoundingRadius(float radius) {
    OgrePINVOKE.PatchMeshPtr__setBoneBoundingRadius(swigCPtr, radius);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _computeBoneBoundingRadius() {
    OgrePINVOKE.PatchMeshPtr__computeBoneBoundingRadius(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _updateBoundsFromVertexBuffers(bool pad) {
    OgrePINVOKE.PatchMeshPtr__updateBoundsFromVertexBuffers__SWIG_0(swigCPtr, pad);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _updateBoundsFromVertexBuffers() {
    OgrePINVOKE.PatchMeshPtr__updateBoundsFromVertexBuffers__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _calcBoundsFromVertexBuffer(VertexData vertexData, AxisAlignedBox outAABB, SWIGTYPE_p_float outRadius, bool updateOnly) {
    OgrePINVOKE.PatchMeshPtr__calcBoundsFromVertexBuffer__SWIG_0(swigCPtr, VertexData.getCPtr(vertexData), AxisAlignedBox.getCPtr(outAABB), SWIGTYPE_p_float.getCPtr(outRadius), updateOnly);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _calcBoundsFromVertexBuffer(VertexData vertexData, AxisAlignedBox outAABB, SWIGTYPE_p_float outRadius) {
    OgrePINVOKE.PatchMeshPtr__calcBoundsFromVertexBuffer__SWIG_1(swigCPtr, VertexData.getCPtr(vertexData), AxisAlignedBox.getCPtr(outAABB), SWIGTYPE_p_float.getCPtr(outRadius));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkeletonName(string skelName) {
    OgrePINVOKE.PatchMeshPtr_setSkeletonName(swigCPtr, skelName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasSkeleton() {
    bool ret = OgrePINVOKE.PatchMeshPtr_hasSkeleton(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasVertexAnimation() {
    bool ret = OgrePINVOKE.PatchMeshPtr_hasVertexAnimation(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SkeletonPtr getSkeleton() {
    SkeletonPtr ret = new SkeletonPtr(OgrePINVOKE.PatchMeshPtr_getSkeleton(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getSkeletonName() {
    string ret = OgrePINVOKE.PatchMeshPtr_getSkeletonName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _initAnimationState(AnimationStateSet animSet) {
    OgrePINVOKE.PatchMeshPtr__initAnimationState(swigCPtr, AnimationStateSet.getCPtr(animSet));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _refreshAnimationState(AnimationStateSet animSet) {
    OgrePINVOKE.PatchMeshPtr__refreshAnimationState(swigCPtr, AnimationStateSet.getCPtr(animSet));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addBoneAssignment(VertexBoneAssignment vertBoneAssign) {
    OgrePINVOKE.PatchMeshPtr_addBoneAssignment(swigCPtr, VertexBoneAssignment.getCPtr(vertBoneAssign));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearBoneAssignments() {
    OgrePINVOKE.PatchMeshPtr_clearBoneAssignments(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifySkeleton(SkeletonPtr pSkel) {
    OgrePINVOKE.PatchMeshPtr__notifySkeleton(swigCPtr, SkeletonPtr.getCPtr(pSkel));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__multimapT_size_t_Ogre__VertexBoneAssignment_t getBoneAssignments() {
    SWIGTYPE_p_std__multimapT_size_t_Ogre__VertexBoneAssignment_t ret = new SWIGTYPE_p_std__multimapT_size_t_Ogre__VertexBoneAssignment_t(OgrePINVOKE.PatchMeshPtr_getBoneAssignments(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getNumLodLevels() {
    ushort ret = OgrePINVOKE.PatchMeshPtr_getNumLodLevels(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshLodUsage getLodLevel(ushort index) {
    MeshLodUsage ret = new MeshLodUsage(OgrePINVOKE.PatchMeshPtr_getLodLevel(swigCPtr, index), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getLodIndex(float value) {
    ushort ret = OgrePINVOKE.PatchMeshPtr_getLodIndex(swigCPtr, value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasManualLodLevel() {
    bool ret = OgrePINVOKE.PatchMeshPtr_hasManualLodLevel(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void updateManualLodLevel(ushort index, string meshName) {
    OgrePINVOKE.PatchMeshPtr_updateManualLodLevel(swigCPtr, index, meshName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setLodInfo(ushort numLevels) {
    OgrePINVOKE.PatchMeshPtr__setLodInfo(swigCPtr, numLevels);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setLodUsage(ushort level, MeshLodUsage usage) {
    OgrePINVOKE.PatchMeshPtr__setLodUsage(swigCPtr, level, MeshLodUsage.getCPtr(usage));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSubMeshLodFaceList(ushort subIdx, ushort level, IndexData facedata) {
    OgrePINVOKE.PatchMeshPtr__setSubMeshLodFaceList(swigCPtr, subIdx, level, IndexData.getCPtr(facedata));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool _isManualLodLevel(ushort level) {
    bool ret = OgrePINVOKE.PatchMeshPtr__isManualLodLevel(swigCPtr, level);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeLodLevels() {
    OgrePINVOKE.PatchMeshPtr_removeLodLevels(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setHardwareBufferManager(HardwareBufferManagerBase bufferManager) {
    OgrePINVOKE.PatchMeshPtr_setHardwareBufferManager(swigCPtr, HardwareBufferManagerBase.getCPtr(bufferManager));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public HardwareBufferManagerBase getHardwareBufferManager() {
    global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr_getHardwareBufferManager(swigCPtr);
    HardwareBufferManagerBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new HardwareBufferManagerBase(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setVertexBufferPolicy(byte usage, bool shadowBuffer) {
    OgrePINVOKE.PatchMeshPtr_setVertexBufferPolicy__SWIG_0(swigCPtr, usage, shadowBuffer);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVertexBufferPolicy(byte usage) {
    OgrePINVOKE.PatchMeshPtr_setVertexBufferPolicy__SWIG_1(swigCPtr, usage);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setIndexBufferPolicy(byte usage, bool shadowBuffer) {
    OgrePINVOKE.PatchMeshPtr_setIndexBufferPolicy__SWIG_0(swigCPtr, usage, shadowBuffer);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setIndexBufferPolicy(byte usage) {
    OgrePINVOKE.PatchMeshPtr_setIndexBufferPolicy__SWIG_1(swigCPtr, usage);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public HardwareBufferUsage getVertexBufferUsage() {
    HardwareBufferUsage ret = (HardwareBufferUsage)OgrePINVOKE.PatchMeshPtr_getVertexBufferUsage(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public HardwareBufferUsage getIndexBufferUsage() {
    HardwareBufferUsage ret = (HardwareBufferUsage)OgrePINVOKE.PatchMeshPtr_getIndexBufferUsage(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isVertexBufferShadowed() {
    bool ret = OgrePINVOKE.PatchMeshPtr_isVertexBufferShadowed(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isIndexBufferShadowed() {
    bool ret = OgrePINVOKE.PatchMeshPtr_isIndexBufferShadowed(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort _rationaliseBoneAssignments(uint vertexCount, SWIGTYPE_p_std__multimapT_size_t_Ogre__VertexBoneAssignment_t assignments) {
    ushort ret = OgrePINVOKE.PatchMeshPtr__rationaliseBoneAssignments(swigCPtr, vertexCount, SWIGTYPE_p_std__multimapT_size_t_Ogre__VertexBoneAssignment_t.getCPtr(assignments));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _compileBoneAssignments() {
    OgrePINVOKE.PatchMeshPtr__compileBoneAssignments(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _updateCompiledBoneAssignments() {
    OgrePINVOKE.PatchMeshPtr__updateCompiledBoneAssignments(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void mergeAdjacentTexcoords(ushort finalTexCoordSet, ushort texCoordSetToDestroy) {
    OgrePINVOKE.PatchMeshPtr_mergeAdjacentTexcoords(swigCPtr, finalTexCoordSet, texCoordSetToDestroy);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void buildTangentVectors(ushort sourceTexCoordSet, bool splitMirrored, bool splitRotated, bool storeParityInW) {
    OgrePINVOKE.PatchMeshPtr_buildTangentVectors__SWIG_0(swigCPtr, sourceTexCoordSet, splitMirrored, splitRotated, storeParityInW);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void buildTangentVectors(ushort sourceTexCoordSet, bool splitMirrored, bool splitRotated) {
    OgrePINVOKE.PatchMeshPtr_buildTangentVectors__SWIG_1(swigCPtr, sourceTexCoordSet, splitMirrored, splitRotated);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void buildTangentVectors(ushort sourceTexCoordSet, bool splitMirrored) {
    OgrePINVOKE.PatchMeshPtr_buildTangentVectors__SWIG_2(swigCPtr, sourceTexCoordSet, splitMirrored);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void buildTangentVectors(ushort sourceTexCoordSet) {
    OgrePINVOKE.PatchMeshPtr_buildTangentVectors__SWIG_3(swigCPtr, sourceTexCoordSet);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void buildTangentVectors() {
    OgrePINVOKE.PatchMeshPtr_buildTangentVectors__SWIG_4(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void buildTangentVectors(VertexElementSemantic targetSemantic, ushort sourceTexCoordSet, ushort index, bool splitMirrored, bool splitRotated, bool storeParityInW) {
    OgrePINVOKE.PatchMeshPtr_buildTangentVectors__SWIG_5(swigCPtr, (int)targetSemantic, sourceTexCoordSet, index, splitMirrored, splitRotated, storeParityInW);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void buildTangentVectors(VertexElementSemantic targetSemantic, ushort sourceTexCoordSet, ushort index, bool splitMirrored, bool splitRotated) {
    OgrePINVOKE.PatchMeshPtr_buildTangentVectors__SWIG_6(swigCPtr, (int)targetSemantic, sourceTexCoordSet, index, splitMirrored, splitRotated);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void buildTangentVectors(VertexElementSemantic targetSemantic, ushort sourceTexCoordSet, ushort index, bool splitMirrored) {
    OgrePINVOKE.PatchMeshPtr_buildTangentVectors__SWIG_7(swigCPtr, (int)targetSemantic, sourceTexCoordSet, index, splitMirrored);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void buildTangentVectors(VertexElementSemantic targetSemantic, ushort sourceTexCoordSet, ushort index) {
    OgrePINVOKE.PatchMeshPtr_buildTangentVectors__SWIG_8(swigCPtr, (int)targetSemantic, sourceTexCoordSet, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void buildTangentVectors(VertexElementSemantic targetSemantic, ushort sourceTexCoordSet) {
    OgrePINVOKE.PatchMeshPtr_buildTangentVectors__SWIG_9(swigCPtr, (int)targetSemantic, sourceTexCoordSet);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void buildTangentVectors(VertexElementSemantic targetSemantic) {
    OgrePINVOKE.PatchMeshPtr_buildTangentVectors__SWIG_10(swigCPtr, (int)targetSemantic);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool suggestTangentVectorBuildParams(out ushort outSourceCoordSet) {
    bool ret = OgrePINVOKE.PatchMeshPtr_suggestTangentVectorBuildParams__SWIG_0(swigCPtr, out outSourceCoordSet);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool suggestTangentVectorBuildParams(VertexElementSemantic targetSemantic, out ushort outSourceCoordSet, out ushort outIndex) {
    bool ret = OgrePINVOKE.PatchMeshPtr_suggestTangentVectorBuildParams__SWIG_1(swigCPtr, (int)targetSemantic, out outSourceCoordSet, out outIndex);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void buildEdgeList() {
    OgrePINVOKE.PatchMeshPtr_buildEdgeList(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void freeEdgeList() {
    OgrePINVOKE.PatchMeshPtr_freeEdgeList(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void prepareForShadowVolume() {
    OgrePINVOKE.PatchMeshPtr_prepareForShadowVolume(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Ogre__EdgeData getEdgeList() {
    global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr_getEdgeList__SWIG_1(swigCPtr);
    SWIGTYPE_p_Ogre__EdgeData ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Ogre__EdgeData(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isPreparedForShadowVolumes() {
    bool ret = OgrePINVOKE.PatchMeshPtr_isPreparedForShadowVolumes(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isEdgeListBuilt() {
    bool ret = OgrePINVOKE.PatchMeshPtr_isEdgeListBuilt(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void prepareMatricesForVertexBlend(SWIGTYPE_p_p_Ogre__Affine3 blendMatrices, Affine3 boneMatrices, SWIGTYPE_p_std__vectorT_unsigned_short_t indexMap) {
    OgrePINVOKE.PatchMeshPtr_prepareMatricesForVertexBlend(swigCPtr, SWIGTYPE_p_p_Ogre__Affine3.getCPtr(blendMatrices), Affine3.getCPtr(boneMatrices), SWIGTYPE_p_std__vectorT_unsigned_short_t.getCPtr(indexMap));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void softwareVertexBlend(VertexData sourceVertexData, VertexData targetVertexData, SWIGTYPE_p_p_Ogre__Affine3 blendMatrices, uint numMatrices, bool blendNormals) {
    OgrePINVOKE.PatchMeshPtr_softwareVertexBlend(swigCPtr, VertexData.getCPtr(sourceVertexData), VertexData.getCPtr(targetVertexData), SWIGTYPE_p_p_Ogre__Affine3.getCPtr(blendMatrices), numMatrices, blendNormals);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void softwareVertexMorph(float t, HardwareVertexBufferPtr b1, HardwareVertexBufferPtr b2, VertexData targetVertexData) {
    OgrePINVOKE.PatchMeshPtr_softwareVertexMorph(swigCPtr, t, HardwareVertexBufferPtr.getCPtr(b1), HardwareVertexBufferPtr.getCPtr(b2), VertexData.getCPtr(targetVertexData));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void softwareVertexPoseBlend(float weight, SWIGTYPE_p_std__mapT_unsigned_int_Ogre__VectorT_3_Ogre__Real_t_std__lessT_unsigned_int_t_t vertexOffsetMap, SWIGTYPE_p_std__mapT_unsigned_int_Ogre__VectorT_3_Ogre__Real_t_std__lessT_unsigned_int_t_t normalsMap, VertexData targetVertexData) {
    OgrePINVOKE.PatchMeshPtr_softwareVertexPoseBlend(swigCPtr, weight, SWIGTYPE_p_std__mapT_unsigned_int_Ogre__VectorT_3_Ogre__Real_t_std__lessT_unsigned_int_t_t.getCPtr(vertexOffsetMap), SWIGTYPE_p_std__mapT_unsigned_int_Ogre__VectorT_3_Ogre__Real_t_std__lessT_unsigned_int_t_t.getCPtr(normalsMap), VertexData.getCPtr(targetVertexData));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__unordered_mapT_std__string_unsigned_short_t getSubMeshNameMap() {
    SWIGTYPE_p_std__unordered_mapT_std__string_unsigned_short_t ret = new SWIGTYPE_p_std__unordered_mapT_std__string_unsigned_short_t(OgrePINVOKE.PatchMeshPtr_getSubMeshNameMap(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAutoBuildEdgeLists(bool autobuild) {
    OgrePINVOKE.PatchMeshPtr_setAutoBuildEdgeLists(swigCPtr, autobuild);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getAutoBuildEdgeLists() {
    bool ret = OgrePINVOKE.PatchMeshPtr_getAutoBuildEdgeLists(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VertexAnimationType getSharedVertexDataAnimationType() {
    VertexAnimationType ret = (VertexAnimationType)OgrePINVOKE.PatchMeshPtr_getSharedVertexDataAnimationType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getSharedVertexDataAnimationIncludesNormals() {
    bool ret = OgrePINVOKE.PatchMeshPtr_getSharedVertexDataAnimationIncludesNormals(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Animation createAnimation(string name, float length) {
    global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr_createAnimation(swigCPtr, name, length);
    Animation ret = (cPtr == global::System.IntPtr.Zero) ? null : new Animation(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Animation getAnimation(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr_getAnimation__SWIG_0(swigCPtr, name);
    Animation ret = (cPtr == global::System.IntPtr.Zero) ? null : new Animation(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Animation getAnimation(ushort index) {
    global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr_getAnimation__SWIG_1(swigCPtr, index);
    Animation ret = (cPtr == global::System.IntPtr.Zero) ? null : new Animation(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Animation _getAnimationImpl(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr__getAnimationImpl(swigCPtr, name);
    Animation ret = (cPtr == global::System.IntPtr.Zero) ? null : new Animation(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasAnimation(string name) {
    bool ret = OgrePINVOKE.PatchMeshPtr_hasAnimation(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeAnimation(string name) {
    OgrePINVOKE.PatchMeshPtr_removeAnimation(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getNumAnimations() {
    ushort ret = OgrePINVOKE.PatchMeshPtr_getNumAnimations(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeAllAnimations() {
    OgrePINVOKE.PatchMeshPtr_removeAllAnimations(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public VertexData getVertexDataByTrackHandle(ushort handle) {
    global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr_getVertexDataByTrackHandle(swigCPtr, handle);
    VertexData ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexData(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _determineAnimationTypes() {
    OgrePINVOKE.PatchMeshPtr__determineAnimationTypes(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool _getAnimationTypesDirty() {
    bool ret = OgrePINVOKE.PatchMeshPtr__getAnimationTypesDirty(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Pose createPose(ushort target, string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr_createPose__SWIG_0(swigCPtr, target, name);
    Pose ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pose(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Pose createPose(ushort target) {
    global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr_createPose__SWIG_1(swigCPtr, target);
    Pose ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pose(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removePose(ushort index) {
    OgrePINVOKE.PatchMeshPtr_removePose__SWIG_0(swigCPtr, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removePose(string name) {
    OgrePINVOKE.PatchMeshPtr_removePose__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeAllPoses() {
    OgrePINVOKE.PatchMeshPtr_removeAllPoses(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public PoseList getPoseList() {
    PoseList ret = new PoseList(OgrePINVOKE.PatchMeshPtr_getPoseList(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LodStrategy getLodStrategy() {
    global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr_getLodStrategy(swigCPtr);
    LodStrategy ret = (cPtr == global::System.IntPtr.Zero) ? null : new LodStrategy(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLodStrategy(LodStrategy lodStrategy) {
    OgrePINVOKE.PatchMeshPtr_setLodStrategy(swigCPtr, LodStrategy.getCPtr(lodStrategy));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _convertVertexElement(VertexElementSemantic semantic, VertexElementType dstType) {
    OgrePINVOKE.PatchMeshPtr__convertVertexElement(swigCPtr, (int)semantic, (int)dstType);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public UserObjectBindings getUserObjectBindings() {
    UserObjectBindings ret = new UserObjectBindings(OgrePINVOKE.PatchMeshPtr_getUserObjectBindings__SWIG_0(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void prepare(bool backgroundThread) {
    OgrePINVOKE.PatchMeshPtr_prepare__SWIG_0(swigCPtr, backgroundThread);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void prepare() {
    OgrePINVOKE.PatchMeshPtr_prepare__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void load(bool backgroundThread) {
    OgrePINVOKE.PatchMeshPtr_load__SWIG_0(swigCPtr, backgroundThread);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void load() {
    OgrePINVOKE.PatchMeshPtr_load__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isReloadable() {
    bool ret = OgrePINVOKE.PatchMeshPtr_isReloadable(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isManuallyLoaded() {
    bool ret = OgrePINVOKE.PatchMeshPtr_isManuallyLoaded(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void unload() {
    OgrePINVOKE.PatchMeshPtr_unload(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getSize() {
    uint ret = OgrePINVOKE.PatchMeshPtr_getSize(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void touch() {
    OgrePINVOKE.PatchMeshPtr_touch(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getName() {
    string ret = OgrePINVOKE.PatchMeshPtr_getName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getHandle() {
    uint ret = OgrePINVOKE.PatchMeshPtr_getHandle(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isPrepared() {
    bool ret = OgrePINVOKE.PatchMeshPtr_isPrepared(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isLoaded() {
    bool ret = OgrePINVOKE.PatchMeshPtr_isLoaded(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isLoading() {
    bool ret = OgrePINVOKE.PatchMeshPtr_isLoading(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Resource.LoadingState getLoadingState() {
    Resource.LoadingState ret = (Resource.LoadingState)OgrePINVOKE.PatchMeshPtr_getLoadingState(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isBackgroundLoaded() {
    bool ret = OgrePINVOKE.PatchMeshPtr_isBackgroundLoaded(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBackgroundLoaded(bool bl) {
    OgrePINVOKE.PatchMeshPtr_setBackgroundLoaded(swigCPtr, bl);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void escalateLoading() {
    OgrePINVOKE.PatchMeshPtr_escalateLoading(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addListener(Resource.Listener lis) {
    OgrePINVOKE.PatchMeshPtr_addListener(swigCPtr, Resource.Listener.getCPtr(lis));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeListener(Resource.Listener lis) {
    OgrePINVOKE.PatchMeshPtr_removeListener(swigCPtr, Resource.Listener.getCPtr(lis));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getGroup() {
    string ret = OgrePINVOKE.PatchMeshPtr_getGroup(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void changeGroupOwnership(string newGroup) {
    OgrePINVOKE.PatchMeshPtr_changeGroupOwnership(swigCPtr, newGroup);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ResourceManager getCreator() {
    global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr_getCreator(swigCPtr);
    ResourceManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new ResourceManager(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getOrigin() {
    string ret = OgrePINVOKE.PatchMeshPtr_getOrigin(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _notifyOrigin(string origin) {
    OgrePINVOKE.PatchMeshPtr__notifyOrigin(swigCPtr, origin);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getStateCount() {
    uint ret = OgrePINVOKE.PatchMeshPtr_getStateCount(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _dirtyState() {
    OgrePINVOKE.PatchMeshPtr__dirtyState(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _fireLoadingComplete(bool unused) {
    OgrePINVOKE.PatchMeshPtr__fireLoadingComplete__SWIG_0(swigCPtr, unused);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _fireLoadingComplete() {
    OgrePINVOKE.PatchMeshPtr__fireLoadingComplete__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _firePreparingComplete(bool unused) {
    OgrePINVOKE.PatchMeshPtr__firePreparingComplete__SWIG_0(swigCPtr, unused);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _firePreparingComplete() {
    OgrePINVOKE.PatchMeshPtr__firePreparingComplete__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _fireUnloadingComplete() {
    OgrePINVOKE.PatchMeshPtr__fireUnloadingComplete(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ParamDictionary getParamDictionary() {
    global::System.IntPtr cPtr = OgrePINVOKE.PatchMeshPtr_getParamDictionary__SWIG_0(swigCPtr);
    ParamDictionary ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParamDictionary(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringList getParameters() {
    StringList ret = new StringList(OgrePINVOKE.PatchMeshPtr_getParameters(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool setParameter(string name, string value) {
    bool ret = OgrePINVOKE.PatchMeshPtr_setParameter(swigCPtr, name, value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setParameterList(NameValueMap paramList) {
    OgrePINVOKE.PatchMeshPtr_setParameterList(swigCPtr, NameValueMap.getCPtr(paramList));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getParameter(string name) {
    string ret = OgrePINVOKE.PatchMeshPtr_getParameter(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void copyParametersTo(StringInterface dest) {
    OgrePINVOKE.PatchMeshPtr_copyParametersTo(swigCPtr, StringInterface.getCPtr(dest));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void cleanupDictionary() {
    OgrePINVOKE.PatchMeshPtr_cleanupDictionary(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
