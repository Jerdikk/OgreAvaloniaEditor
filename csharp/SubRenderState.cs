//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class SubRenderState : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SubRenderState(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SubRenderState obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SubRenderState() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RTShaderPINVOKE.delete_SubRenderState(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual string getType() {
    string ret = RTShaderPINVOKE.SubRenderState_getType(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int getExecutionOrder() {
    int ret = RTShaderPINVOKE.SubRenderState_getExecutionOrder(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void copyFrom(SubRenderState rhs) {
    RTShaderPINVOKE.SubRenderState_copyFrom(swigCPtr, SubRenderState.getCPtr(rhs));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool createCpuSubPrograms(SWIGTYPE_p_Ogre__RTShader__ProgramSet programSet) {
    bool ret = RTShaderPINVOKE.SubRenderState_createCpuSubPrograms(swigCPtr, SWIGTYPE_p_Ogre__RTShader__ProgramSet.getCPtr(programSet));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void updateGpuProgramsParams(Renderable rend, Pass pass, SWIGTYPE_p_Ogre__AutoParamDataSource source, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t pLightList) {
    RTShaderPINVOKE.SubRenderState_updateGpuProgramsParams(swigCPtr, Renderable.getCPtr(rend), Pass.getCPtr(pass), SWIGTYPE_p_Ogre__AutoParamDataSource.getCPtr(source), SWIGTYPE_p_std__vectorT_Ogre__Light_p_t.getCPtr(pLightList));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool preAddToRenderState(RenderState renderState, Pass srcPass, Pass dstPass) {
    bool ret = RTShaderPINVOKE.SubRenderState_preAddToRenderState(swigCPtr, RenderState.getCPtr(renderState), Pass.getCPtr(srcPass), Pass.getCPtr(dstPass));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__SharedPtrT_Ogre__RTShader__SubRenderStateAccessor_t getAccessor() {
    SWIGTYPE_p_Ogre__SharedPtrT_Ogre__RTShader__SubRenderStateAccessor_t ret = new SWIGTYPE_p_Ogre__SharedPtrT_Ogre__RTShader__SubRenderStateAccessor_t(RTShaderPINVOKE.SubRenderState_getAccessor__SWIG_0(swigCPtr), true);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setParameter(string name, string value) {
    bool ret = RTShaderPINVOKE.SubRenderState_setParameter__SWIG_0(swigCPtr, name, value);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setParameter(string name, Any value) {
    RTShaderPINVOKE.SubRenderState_setParameter__SWIG_2(swigCPtr, name, Any.getCPtr(value));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
