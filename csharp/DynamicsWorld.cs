//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class DynamicsWorld : CollisionWorld {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal DynamicsWorld(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgreBulletPINVOKE.DynamicsWorld_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DynamicsWorld obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreBulletPINVOKE.delete_DynamicsWorld(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public DynamicsWorld(Vector3 gravity) : this(OgreBulletPINVOKE.new_DynamicsWorld__SWIG_0(Vector3.getCPtr(gravity)), true) {
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public DynamicsWorld(btDynamicsWorld btWorld) : this(OgreBulletPINVOKE.new_DynamicsWorld__SWIG_1(btDynamicsWorld.getCPtr(btWorld)), true) {
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btRigidBody addRigidBody(float mass, Entity ent, ColliderType ct, CollisionListener listener, int group, int mask) {
    global::System.IntPtr cPtr = OgreBulletPINVOKE.DynamicsWorld_addRigidBody__SWIG_0(swigCPtr, mass, Entity.getCPtr(ent), (int)ct, CollisionListener.getCPtr(listener), group, mask);
    btRigidBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new btRigidBody(cPtr, false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public btRigidBody addRigidBody(float mass, Entity ent, ColliderType ct, CollisionListener listener, int group) {
    global::System.IntPtr cPtr = OgreBulletPINVOKE.DynamicsWorld_addRigidBody__SWIG_1(swigCPtr, mass, Entity.getCPtr(ent), (int)ct, CollisionListener.getCPtr(listener), group);
    btRigidBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new btRigidBody(cPtr, false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public btRigidBody addRigidBody(float mass, Entity ent, ColliderType ct, CollisionListener listener) {
    global::System.IntPtr cPtr = OgreBulletPINVOKE.DynamicsWorld_addRigidBody__SWIG_2(swigCPtr, mass, Entity.getCPtr(ent), (int)ct, CollisionListener.getCPtr(listener));
    btRigidBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new btRigidBody(cPtr, false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public btRigidBody addRigidBody(float mass, Entity ent, ColliderType ct) {
    global::System.IntPtr cPtr = OgreBulletPINVOKE.DynamicsWorld_addRigidBody__SWIG_3(swigCPtr, mass, Entity.getCPtr(ent), (int)ct);
    btRigidBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new btRigidBody(cPtr, false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public btDynamicsWorld getBtWorld() {
    global::System.IntPtr cPtr = OgreBulletPINVOKE.DynamicsWorld_getBtWorld(swigCPtr);
    btDynamicsWorld ret = (cPtr == global::System.IntPtr.Zero) ? null : new btDynamicsWorld(cPtr, false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int stepSimulation(float timeStep) {
    int ret = OgreBulletPINVOKE.DynamicsWorld_stepSimulation(swigCPtr, timeStep);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
