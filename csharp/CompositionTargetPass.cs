//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class CompositionTargetPass : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CompositionTargetPass(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CompositionTargetPass obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CompositionTargetPass() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_CompositionTargetPass(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public CompositionTargetPass(CompositionTechnique parent) : this(OgrePINVOKE.new_CompositionTargetPass(CompositionTechnique.getCPtr(parent)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setInputMode(CompositionTargetPass.InputMode mode) {
    OgrePINVOKE.CompositionTargetPass_setInputMode(swigCPtr, (int)mode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public CompositionTargetPass.InputMode getInputMode() {
    CompositionTargetPass.InputMode ret = (CompositionTargetPass.InputMode)OgrePINVOKE.CompositionTargetPass_getInputMode(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setOutputName(string out_) {
    OgrePINVOKE.CompositionTargetPass_setOutputName(swigCPtr, out_);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getOutputName() {
    string ret = OgrePINVOKE.CompositionTargetPass_getOutputName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setOutputSlice(int slice) {
    OgrePINVOKE.CompositionTargetPass_setOutputSlice(swigCPtr, slice);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public int getOutputSlice() {
    int ret = OgrePINVOKE.CompositionTargetPass_getOutputSlice(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setOnlyInitial(bool value) {
    OgrePINVOKE.CompositionTargetPass_setOnlyInitial(swigCPtr, value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getOnlyInitial() {
    bool ret = OgrePINVOKE.CompositionTargetPass_getOnlyInitial(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setVisibilityMask(uint mask) {
    OgrePINVOKE.CompositionTargetPass_setVisibilityMask(swigCPtr, mask);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getVisibilityMask() {
    uint ret = OgrePINVOKE.CompositionTargetPass_getVisibilityMask(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMaterialScheme(string schemeName) {
    OgrePINVOKE.CompositionTargetPass_setMaterialScheme(swigCPtr, schemeName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getMaterialScheme() {
    string ret = OgrePINVOKE.CompositionTargetPass_getMaterialScheme(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShadowsEnabled(bool enabled) {
    OgrePINVOKE.CompositionTargetPass_setShadowsEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getShadowsEnabled() {
    bool ret = OgrePINVOKE.CompositionTargetPass_getShadowsEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLodBias(float bias) {
    OgrePINVOKE.CompositionTargetPass_setLodBias(swigCPtr, bias);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getLodBias() {
    float ret = OgrePINVOKE.CompositionTargetPass_getLodBias(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CompositionPass createPass(CompositionPass.PassType type) {
    global::System.IntPtr cPtr = OgrePINVOKE.CompositionTargetPass_createPass__SWIG_0(swigCPtr, (int)type);
    CompositionPass ret = (cPtr == global::System.IntPtr.Zero) ? null : new CompositionPass(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CompositionPass createPass() {
    global::System.IntPtr cPtr = OgrePINVOKE.CompositionTargetPass_createPass__SWIG_1(swigCPtr);
    CompositionPass ret = (cPtr == global::System.IntPtr.Zero) ? null : new CompositionPass(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removePass(uint idx) {
    OgrePINVOKE.CompositionTargetPass_removePass(swigCPtr, idx);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_Ogre__CompositionPass_p_t getPasses() {
    SWIGTYPE_p_std__vectorT_Ogre__CompositionPass_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__CompositionPass_p_t(OgrePINVOKE.CompositionTargetPass_getPasses(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeAllPasses() {
    OgrePINVOKE.CompositionTargetPass_removeAllPasses(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public CompositionTechnique getParent() {
    global::System.IntPtr cPtr = OgrePINVOKE.CompositionTargetPass_getParent(swigCPtr);
    CompositionTechnique ret = (cPtr == global::System.IntPtr.Zero) ? null : new CompositionTechnique(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool _isSupported() {
    bool ret = OgrePINVOKE.CompositionTargetPass__isSupported(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum InputMode {
    IM_NONE,
    IM_PREVIOUS
  }

}

}
