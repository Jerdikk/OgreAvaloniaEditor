//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class InstancedEntity : MovableObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal InstancedEntity(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.InstancedEntity_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(InstancedEntity obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_InstancedEntity(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public InstancedEntity(InstanceBatch batchOwner, uint instanceID, InstancedEntity sharedTransformEntity) : this(OgrePINVOKE.new_InstancedEntity__SWIG_0(InstanceBatch.getCPtr(batchOwner), instanceID, InstancedEntity.getCPtr(sharedTransformEntity)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public InstancedEntity(InstanceBatch batchOwner, uint instanceID) : this(OgrePINVOKE.new_InstancedEntity__SWIG_1(InstanceBatch.getCPtr(batchOwner), instanceID), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool shareTransformWith(InstancedEntity slave) {
    bool ret = OgrePINVOKE.InstancedEntity_shareTransformWith(swigCPtr, InstancedEntity.getCPtr(slave));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void stopSharingTransform() {
    OgrePINVOKE.InstancedEntity_stopSharingTransform(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public InstanceBatch _getOwner() {
    global::System.IntPtr cPtr = OgrePINVOKE.InstancedEntity__getOwner(swigCPtr);
    InstanceBatch ret = (cPtr == global::System.IntPtr.Zero) ? null : new InstanceBatch(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getMovableType() {
    string ret = OgrePINVOKE.InstancedEntity_getMovableType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AxisAlignedBox getBoundingBox() {
    AxisAlignedBox ret = new AxisAlignedBox(OgrePINVOKE.InstancedEntity_getBoundingBox(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getBoundingRadius() {
    float ret = OgrePINVOKE.InstancedEntity_getBoundingRadius(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getSquaredViewDepth(Camera cam) {
    float ret = OgrePINVOKE.InstancedEntity_getSquaredViewDepth(swigCPtr, Camera.getCPtr(cam));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void _notifyMoved() {
    OgrePINVOKE.InstancedEntity__notifyMoved(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyAttached(Node parent, bool isTagPoint) {
    OgrePINVOKE.InstancedEntity__notifyAttached__SWIG_0(swigCPtr, Node.getCPtr(parent), isTagPoint);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyAttached(Node parent) {
    OgrePINVOKE.InstancedEntity__notifyAttached__SWIG_1(swigCPtr, Node.getCPtr(parent));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _updateRenderQueue(RenderQueue queue) {
    OgrePINVOKE.InstancedEntity__updateRenderQueue(swigCPtr, RenderQueue.getCPtr(queue));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void visitRenderables(Renderable.Visitor visitor, bool debugRenderables) {
    OgrePINVOKE.InstancedEntity_visitRenderables__SWIG_0(swigCPtr, Renderable.Visitor.getCPtr(visitor), debugRenderables);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void visitRenderables(Renderable.Visitor visitor) {
    OgrePINVOKE.InstancedEntity_visitRenderables__SWIG_1(swigCPtr, Renderable.Visitor.getCPtr(visitor));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasSkeleton() {
    bool ret = OgrePINVOKE.InstancedEntity_hasSkeleton(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SkeletonInstance getSkeleton() {
    global::System.IntPtr cPtr = OgrePINVOKE.InstancedEntity_getSkeleton(swigCPtr);
    SkeletonInstance ret = (cPtr == global::System.IntPtr.Zero) ? null : new SkeletonInstance(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AnimationState getAnimationState(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.InstancedEntity_getAnimationState(swigCPtr, name);
    AnimationState ret = (cPtr == global::System.IntPtr.Zero) ? null : new AnimationState(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AnimationStateSet getAllAnimationStates() {
    global::System.IntPtr cPtr = OgrePINVOKE.InstancedEntity_getAllAnimationStates(swigCPtr);
    AnimationStateSet ret = (cPtr == global::System.IntPtr.Zero) ? null : new AnimationStateSet(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool _updateAnimation() {
    bool ret = OgrePINVOKE.InstancedEntity__updateAnimation(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTransformLookupNumber(ushort num) {
    OgrePINVOKE.InstancedEntity_setTransformLookupNumber(swigCPtr, num);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 getPosition() {
    Vector3 ret = new Vector3(OgrePINVOKE.InstancedEntity_getPosition(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setPosition(Vector3 position, bool doUpdate) {
    OgrePINVOKE.InstancedEntity_setPosition__SWIG_0(swigCPtr, Vector3.getCPtr(position), doUpdate);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setPosition(Vector3 position) {
    OgrePINVOKE.InstancedEntity_setPosition__SWIG_1(swigCPtr, Vector3.getCPtr(position));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Quaternion getOrientation() {
    Quaternion ret = new Quaternion(OgrePINVOKE.InstancedEntity_getOrientation(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setOrientation(Quaternion orientation, bool doUpdate) {
    OgrePINVOKE.InstancedEntity_setOrientation__SWIG_0(swigCPtr, Quaternion.getCPtr(orientation), doUpdate);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setOrientation(Quaternion orientation) {
    OgrePINVOKE.InstancedEntity_setOrientation__SWIG_1(swigCPtr, Quaternion.getCPtr(orientation));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 getScale() {
    Vector3 ret = new Vector3(OgrePINVOKE.InstancedEntity_getScale(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setScale(Vector3 scale, bool doUpdate) {
    OgrePINVOKE.InstancedEntity_setScale__SWIG_0(swigCPtr, Vector3.getCPtr(scale), doUpdate);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setScale(Vector3 scale) {
    OgrePINVOKE.InstancedEntity_setScale__SWIG_1(swigCPtr, Vector3.getCPtr(scale));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getMaxScaleCoef() {
    float ret = OgrePINVOKE.InstancedEntity_getMaxScaleCoef(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void updateTransforms() {
    OgrePINVOKE.InstancedEntity_updateTransforms(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isInUse() {
    bool ret = OgrePINVOKE.InstancedEntity_isInUse(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setInUse(bool used) {
    OgrePINVOKE.InstancedEntity_setInUse(swigCPtr, used);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override Affine3 _getParentNodeFullTransform() {
    Affine3 ret = new Affine3(OgrePINVOKE.InstancedEntity__getParentNodeFullTransform(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 _getDerivedPosition() {
    Vector3 ret = new Vector3(OgrePINVOKE.InstancedEntity__getDerivedPosition(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isInScene() {
    bool ret = OgrePINVOKE.InstancedEntity_isInScene(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCustomParam(byte idx, Vector4 newParam) {
    OgrePINVOKE.InstancedEntity_setCustomParam(swigCPtr, idx, Vector4.getCPtr(newParam));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector4 getCustomParam(byte idx) {
    Vector4 ret = new Vector4(OgrePINVOKE.InstancedEntity_getCustomParam(swigCPtr, idx), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
