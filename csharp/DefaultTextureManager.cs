//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class DefaultTextureManager : TextureManager {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal DefaultTextureManager(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.DefaultTextureManager_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DefaultTextureManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_DefaultTextureManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override bool isHardwareFilteringSupported(TextureType arg0, PixelFormat arg1, int arg2, bool arg3) {
    bool ret = OgrePINVOKE.DefaultTextureManager_isHardwareFilteringSupported(swigCPtr, (int)arg0, (int)arg1, arg2, arg3);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override PixelFormat getNativeFormat(TextureType arg0, PixelFormat arg1, int arg2) {
    PixelFormat ret = (PixelFormat)OgrePINVOKE.DefaultTextureManager_getNativeFormat(swigCPtr, (int)arg0, (int)arg1, arg2);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DefaultTextureManager() : this(OgrePINVOKE.new_DefaultTextureManager(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
