//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class BillboardChain : MovableObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal BillboardChain(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.BillboardChain_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BillboardChain obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_BillboardChain(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public BillboardChain(string name, uint maxElements, uint numberOfChains, bool useTextureCoords, bool useColours, bool dynamic) : this(OgrePINVOKE.new_BillboardChain__SWIG_0(name, maxElements, numberOfChains, useTextureCoords, useColours, dynamic), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public BillboardChain(string name, uint maxElements, uint numberOfChains, bool useTextureCoords, bool useColours) : this(OgrePINVOKE.new_BillboardChain__SWIG_1(name, maxElements, numberOfChains, useTextureCoords, useColours), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public BillboardChain(string name, uint maxElements, uint numberOfChains, bool useTextureCoords) : this(OgrePINVOKE.new_BillboardChain__SWIG_2(name, maxElements, numberOfChains, useTextureCoords), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public BillboardChain(string name, uint maxElements, uint numberOfChains) : this(OgrePINVOKE.new_BillboardChain__SWIG_3(name, maxElements, numberOfChains), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public BillboardChain(string name, uint maxElements) : this(OgrePINVOKE.new_BillboardChain__SWIG_4(name, maxElements), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public BillboardChain(string name) : this(OgrePINVOKE.new_BillboardChain__SWIG_5(name), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setMaxChainElements(uint maxElements) {
    OgrePINVOKE.BillboardChain_setMaxChainElements(swigCPtr, maxElements);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual uint getMaxChainElements() {
    uint ret = OgrePINVOKE.BillboardChain_getMaxChainElements(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setNumberOfChains(uint numChains) {
    OgrePINVOKE.BillboardChain_setNumberOfChains(swigCPtr, numChains);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual uint getNumberOfChains() {
    uint ret = OgrePINVOKE.BillboardChain_getNumberOfChains(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setUseTextureCoords(bool use) {
    OgrePINVOKE.BillboardChain_setUseTextureCoords(swigCPtr, use);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool getUseTextureCoords() {
    bool ret = OgrePINVOKE.BillboardChain_getUseTextureCoords(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setTextureCoordDirection(BillboardChain.TexCoordDirection dir) {
    OgrePINVOKE.BillboardChain_setTextureCoordDirection(swigCPtr, (int)dir);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual BillboardChain.TexCoordDirection getTextureCoordDirection() {
    BillboardChain.TexCoordDirection ret = (BillboardChain.TexCoordDirection)OgrePINVOKE.BillboardChain_getTextureCoordDirection(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setOtherTextureCoordRange(float start, float end) {
    OgrePINVOKE.BillboardChain_setOtherTextureCoordRange(swigCPtr, start, end);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_float getOtherTextureCoordRange() {
    global::System.IntPtr cPtr = OgrePINVOKE.BillboardChain_getOtherTextureCoordRange(swigCPtr);
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setUseVertexColours(bool use) {
    OgrePINVOKE.BillboardChain_setUseVertexColours(swigCPtr, use);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool getUseVertexColours() {
    bool ret = OgrePINVOKE.BillboardChain_getUseVertexColours(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAutoUpdate(bool autoUpdate) {
    OgrePINVOKE.BillboardChain_setAutoUpdate(swigCPtr, autoUpdate);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getAutoUpdate() {
    bool ret = OgrePINVOKE.BillboardChain_getAutoUpdate(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void addChainElement(uint chainIndex, BillboardChain_Element billboardChainElement) {
    OgrePINVOKE.BillboardChain_addChainElement(swigCPtr, chainIndex, BillboardChain_Element.getCPtr(billboardChainElement));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeChainElement(uint chainIndex) {
    OgrePINVOKE.BillboardChain_removeChainElement(swigCPtr, chainIndex);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void updateChainElement(uint chainIndex, uint elementIndex, BillboardChain_Element billboardChainElement) {
    OgrePINVOKE.BillboardChain_updateChainElement(swigCPtr, chainIndex, elementIndex, BillboardChain_Element.getCPtr(billboardChainElement));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual BillboardChain_Element getChainElement(uint chainIndex, uint elementIndex) {
    BillboardChain_Element ret = new BillboardChain_Element(OgrePINVOKE.BillboardChain_getChainElement(swigCPtr, chainIndex, elementIndex), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint getNumChainElements(uint chainIndex) {
    uint ret = OgrePINVOKE.BillboardChain_getNumChainElements(swigCPtr, chainIndex);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void clearChain(uint chainIndex) {
    OgrePINVOKE.BillboardChain_clearChain(swigCPtr, chainIndex);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void clearAllChains() {
    OgrePINVOKE.BillboardChain_clearAllChains(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFaceCamera(bool faceCamera, Vector3 normalVector) {
    OgrePINVOKE.BillboardChain_setFaceCamera__SWIG_0(swigCPtr, faceCamera, Vector3.getCPtr(normalVector));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFaceCamera(bool faceCamera) {
    OgrePINVOKE.BillboardChain_setFaceCamera__SWIG_1(swigCPtr, faceCamera);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string getMaterialName() {
    string ret = OgrePINVOKE.BillboardChain_getMaterialName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setMaterialName(string name, string groupName) {
    OgrePINVOKE.BillboardChain_setMaterialName__SWIG_0(swigCPtr, name, groupName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setMaterialName(string name) {
    OgrePINVOKE.BillboardChain_setMaterialName__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getSquaredViewDepth(Camera cam) {
    float ret = OgrePINVOKE.BillboardChain_getSquaredViewDepth(swigCPtr, Camera.getCPtr(cam));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getBoundingRadius() {
    float ret = OgrePINVOKE.BillboardChain_getBoundingRadius(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AxisAlignedBox getBoundingBox() {
    AxisAlignedBox ret = new AxisAlignedBox(OgrePINVOKE.BillboardChain_getBoundingBox(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr getMaterial() {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.BillboardChain_getMaterial(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getMovableType() {
    string ret = OgrePINVOKE.BillboardChain_getMovableType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _updateRenderQueue(RenderQueue arg0) {
    OgrePINVOKE.BillboardChain__updateRenderQueue(swigCPtr, RenderQueue.getCPtr(arg0));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void getRenderOperation(RenderOperation arg0) {
    OgrePINVOKE.BillboardChain_getRenderOperation(swigCPtr, RenderOperation.getCPtr(arg0));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool preRender(SceneManager sm, RenderSystem rsys) {
    bool ret = OgrePINVOKE.BillboardChain_preRender(swigCPtr, SceneManager.getCPtr(sm), RenderSystem.getCPtr(rsys));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getWorldTransforms(Matrix4 arg0) {
    OgrePINVOKE.BillboardChain_getWorldTransforms(swigCPtr, Matrix4.getCPtr(arg0));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_Ogre__Light_p_t getLights() {
    SWIGTYPE_p_std__vectorT_Ogre__Light_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__Light_p_t(OgrePINVOKE.BillboardChain_getLights(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void visitRenderables(Renderable.Visitor visitor, bool debugRenderables) {
    OgrePINVOKE.BillboardChain_visitRenderables__SWIG_0(swigCPtr, Renderable.Visitor.getCPtr(visitor), debugRenderables);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void visitRenderables(Renderable.Visitor visitor) {
    OgrePINVOKE.BillboardChain_visitRenderables__SWIG_1(swigCPtr, Renderable.Visitor.getCPtr(visitor));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum TexCoordDirection {
    TCD_U,
    TCD_V
  }

}

}
