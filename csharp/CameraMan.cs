//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class CameraMan : InputListener {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CameraMan(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BitesPINVOKE.CameraMan_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CameraMan obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BitesPINVOKE.delete_CameraMan(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public CameraMan(SceneNode cam) : this(BitesPINVOKE.new_CameraMan(SceneNode.getCPtr(cam)), true) {
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setCamera(SceneNode cam) {
    BitesPINVOKE.CameraMan_setCamera(swigCPtr, SceneNode.getCPtr(cam));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
  }

  public SceneNode getCamera() {
    global::System.IntPtr cPtr = BitesPINVOKE.CameraMan_getCamera(swigCPtr);
    SceneNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneNode(cPtr, false);
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setTarget(SceneNode target) {
    BitesPINVOKE.CameraMan_setTarget(swigCPtr, SceneNode.getCPtr(target));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
  }

  public SceneNode getTarget() {
    global::System.IntPtr cPtr = BitesPINVOKE.CameraMan_getTarget(swigCPtr);
    SceneNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneNode(cPtr, false);
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setYawPitchDist(Radian yaw, Radian pitch, float dist) {
    BitesPINVOKE.CameraMan_setYawPitchDist(swigCPtr, Radian.getCPtr(yaw), Radian.getCPtr(pitch), dist);
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTopSpeed(float topSpeed) {
    BitesPINVOKE.CameraMan_setTopSpeed(swigCPtr, topSpeed);
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getTopSpeed() {
    float ret = BitesPINVOKE.CameraMan_getTopSpeed(swigCPtr);
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setStyle(CameraStyle style) {
    BitesPINVOKE.CameraMan_setStyle(swigCPtr, (int)style);
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
  }

  public CameraStyle getStyle() {
    CameraStyle ret = (CameraStyle)BitesPINVOKE.CameraMan_getStyle(swigCPtr);
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void manualStop() {
    BitesPINVOKE.CameraMan_manualStop(swigCPtr);
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void frameRendered(FrameEvent evt) {
    BitesPINVOKE.CameraMan_frameRendered(swigCPtr, FrameEvent.getCPtr(evt));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool keyPressed(KeyboardEvent evt) {
    bool ret = BitesPINVOKE.CameraMan_keyPressed(swigCPtr, KeyboardEvent.getCPtr(evt));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool keyReleased(KeyboardEvent evt) {
    bool ret = BitesPINVOKE.CameraMan_keyReleased(swigCPtr, KeyboardEvent.getCPtr(evt));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool mouseMoved(MouseMotionEvent evt) {
    bool ret = BitesPINVOKE.CameraMan_mouseMoved(swigCPtr, MouseMotionEvent.getCPtr(evt));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool mouseWheelRolled(MouseWheelEvent evt) {
    bool ret = BitesPINVOKE.CameraMan_mouseWheelRolled(swigCPtr, MouseWheelEvent.getCPtr(evt));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool mousePressed(MouseButtonEvent evt) {
    bool ret = BitesPINVOKE.CameraMan_mousePressed(swigCPtr, MouseButtonEvent.getCPtr(evt));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool mouseReleased(MouseButtonEvent evt) {
    bool ret = BitesPINVOKE.CameraMan_mouseReleased(swigCPtr, MouseButtonEvent.getCPtr(evt));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setFixedYaw(bool fixed_) {
    BitesPINVOKE.CameraMan_setFixedYaw(swigCPtr, fixed_);
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setPivotOffset(Vector3 offset) {
    BitesPINVOKE.CameraMan_setPivotOffset(swigCPtr, Vector3.getCPtr(offset));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
