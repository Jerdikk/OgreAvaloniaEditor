//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class btCollisionWorld : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btCollisionWorld(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btCollisionWorld obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btCollisionWorld() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreBulletPINVOKE.delete_btCollisionWorld(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public btCollisionWorld(SWIGTYPE_p_btDispatcher dispatcher, SWIGTYPE_p_btBroadphaseInterface broadphasePairCache, SWIGTYPE_p_btCollisionConfiguration collisionConfiguration) : this(OgreBulletPINVOKE.new_btCollisionWorld(SWIGTYPE_p_btDispatcher.getCPtr(dispatcher), SWIGTYPE_p_btBroadphaseInterface.getCPtr(broadphasePairCache), SWIGTYPE_p_btCollisionConfiguration.getCPtr(collisionConfiguration)), true) {
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBroadphase(SWIGTYPE_p_btBroadphaseInterface pairCache) {
    OgreBulletPINVOKE.btCollisionWorld_setBroadphase(swigCPtr, SWIGTYPE_p_btBroadphaseInterface.getCPtr(pairCache));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_btBroadphaseInterface getBroadphase() {
    global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_getBroadphase__SWIG_0(swigCPtr);
    SWIGTYPE_p_btBroadphaseInterface ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btBroadphaseInterface(cPtr, false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_btOverlappingPairCache getPairCache() {
    global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_getPairCache(swigCPtr);
    SWIGTYPE_p_btOverlappingPairCache ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btOverlappingPairCache(cPtr, false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_btDispatcher getDispatcher() {
    global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_getDispatcher__SWIG_0(swigCPtr);
    SWIGTYPE_p_btDispatcher ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btDispatcher(cPtr, false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void updateSingleAabb(btCollisionObject colObj) {
    OgreBulletPINVOKE.btCollisionWorld_updateSingleAabb(swigCPtr, btCollisionObject.getCPtr(colObj));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void updateAabbs() {
    OgreBulletPINVOKE.btCollisionWorld_updateAabbs(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void computeOverlappingPairs() {
    OgreBulletPINVOKE.btCollisionWorld_computeOverlappingPairs(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setDebugDrawer(SWIGTYPE_p_btIDebugDraw debugDrawer) {
    OgreBulletPINVOKE.btCollisionWorld_setDebugDrawer(swigCPtr, SWIGTYPE_p_btIDebugDraw.getCPtr(debugDrawer));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_btIDebugDraw getDebugDrawer() {
    global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_getDebugDrawer(swigCPtr);
    SWIGTYPE_p_btIDebugDraw ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btIDebugDraw(cPtr, false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void debugDrawWorld() {
    OgreBulletPINVOKE.btCollisionWorld_debugDrawWorld(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void debugDrawObject(SWIGTYPE_p_btTransform worldTransform, SWIGTYPE_p_btCollisionShape shape, btVector3 color) {
    OgreBulletPINVOKE.btCollisionWorld_debugDrawObject(swigCPtr, SWIGTYPE_p_btTransform.getCPtr(worldTransform), SWIGTYPE_p_btCollisionShape.getCPtr(shape), btVector3.getCPtr(color));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public class LocalShapeInfo : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal LocalShapeInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LocalShapeInfo obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~LocalShapeInfo() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreBulletPINVOKE.delete_btCollisionWorld_LocalShapeInfo(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public int m_shapePart {
      set {
        OgreBulletPINVOKE.btCollisionWorld_LocalShapeInfo_m_shapePart_set(swigCPtr, value);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = OgreBulletPINVOKE.btCollisionWorld_LocalShapeInfo_m_shapePart_get(swigCPtr);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int m_triangleIndex {
      set {
        OgreBulletPINVOKE.btCollisionWorld_LocalShapeInfo_m_triangleIndex_set(swigCPtr, value);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = OgreBulletPINVOKE.btCollisionWorld_LocalShapeInfo_m_triangleIndex_get(swigCPtr);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public LocalShapeInfo() : this(OgreBulletPINVOKE.new_btCollisionWorld_LocalShapeInfo(), true) {
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public class LocalRayResult : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal LocalRayResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LocalRayResult obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~LocalRayResult() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreBulletPINVOKE.delete_btCollisionWorld_LocalRayResult(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public LocalRayResult(btCollisionObject collisionObject, btCollisionWorld.LocalShapeInfo localShapeInfo, btVector3 hitNormalLocal, float hitFraction) : this(OgreBulletPINVOKE.new_btCollisionWorld_LocalRayResult(btCollisionObject.getCPtr(collisionObject), btCollisionWorld.LocalShapeInfo.getCPtr(localShapeInfo), btVector3.getCPtr(hitNormalLocal), hitFraction), true) {
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public btCollisionObject m_collisionObject {
      set {
        OgreBulletPINVOKE.btCollisionWorld_LocalRayResult_m_collisionObject_set(swigCPtr, btCollisionObject.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_LocalRayResult_m_collisionObject_get(swigCPtr);
        btCollisionObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new btCollisionObject(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public btCollisionWorld.LocalShapeInfo m_localShapeInfo {
      set {
        OgreBulletPINVOKE.btCollisionWorld_LocalRayResult_m_localShapeInfo_set(swigCPtr, btCollisionWorld.LocalShapeInfo.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_LocalRayResult_m_localShapeInfo_get(swigCPtr);
        btCollisionWorld.LocalShapeInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new btCollisionWorld.LocalShapeInfo(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public btVector3 m_hitNormalLocal {
      set {
        OgreBulletPINVOKE.btCollisionWorld_LocalRayResult_m_hitNormalLocal_set(swigCPtr, btVector3.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_LocalRayResult_m_hitNormalLocal_get(swigCPtr);
        btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float m_hitFraction {
      set {
        OgreBulletPINVOKE.btCollisionWorld_LocalRayResult_m_hitFraction_set(swigCPtr, value);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgreBulletPINVOKE.btCollisionWorld_LocalRayResult_m_hitFraction_get(swigCPtr);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
  }

  public class RayResultCallback : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal RayResultCallback(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RayResultCallback obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~RayResultCallback() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreBulletPINVOKE.delete_btCollisionWorld_RayResultCallback(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public float m_closestHitFraction {
      set {
        OgreBulletPINVOKE.btCollisionWorld_RayResultCallback_m_closestHitFraction_set(swigCPtr, value);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgreBulletPINVOKE.btCollisionWorld_RayResultCallback_m_closestHitFraction_get(swigCPtr);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public btCollisionObject m_collisionObject {
      set {
        OgreBulletPINVOKE.btCollisionWorld_RayResultCallback_m_collisionObject_set(swigCPtr, btCollisionObject.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_RayResultCallback_m_collisionObject_get(swigCPtr);
        btCollisionObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new btCollisionObject(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int m_collisionFilterGroup {
      set {
        OgreBulletPINVOKE.btCollisionWorld_RayResultCallback_m_collisionFilterGroup_set(swigCPtr, value);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = OgreBulletPINVOKE.btCollisionWorld_RayResultCallback_m_collisionFilterGroup_get(swigCPtr);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int m_collisionFilterMask {
      set {
        OgreBulletPINVOKE.btCollisionWorld_RayResultCallback_m_collisionFilterMask_set(swigCPtr, value);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = OgreBulletPINVOKE.btCollisionWorld_RayResultCallback_m_collisionFilterMask_get(swigCPtr);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public uint m_flags {
      set {
        OgreBulletPINVOKE.btCollisionWorld_RayResultCallback_m_flags_set(swigCPtr, value);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        uint ret = OgreBulletPINVOKE.btCollisionWorld_RayResultCallback_m_flags_get(swigCPtr);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public bool hasHit() {
      bool ret = OgreBulletPINVOKE.btCollisionWorld_RayResultCallback_hasHit(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public virtual bool needsCollision(SWIGTYPE_p_btBroadphaseProxy proxy0) {
      bool ret = OgreBulletPINVOKE.btCollisionWorld_RayResultCallback_needsCollision(swigCPtr, SWIGTYPE_p_btBroadphaseProxy.getCPtr(proxy0));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public virtual float addSingleResult(btCollisionWorld.LocalRayResult rayResult, bool normalInWorldSpace) {
      float ret = OgreBulletPINVOKE.btCollisionWorld_RayResultCallback_addSingleResult(swigCPtr, btCollisionWorld.LocalRayResult.getCPtr(rayResult), normalInWorldSpace);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
  }

  public class ClosestRayResultCallback : btCollisionWorld.RayResultCallback {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
    internal ClosestRayResultCallback(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgreBulletPINVOKE.btCollisionWorld_ClosestRayResultCallback_SWIGUpcast(cPtr), cMemoryOwn) {
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ClosestRayResultCallback obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    protected override void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreBulletPINVOKE.delete_btCollisionWorld_ClosestRayResultCallback(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        base.Dispose(disposing);
      }
    }
  
    public ClosestRayResultCallback(btVector3 rayFromWorld, btVector3 rayToWorld) : this(OgreBulletPINVOKE.new_btCollisionWorld_ClosestRayResultCallback(btVector3.getCPtr(rayFromWorld), btVector3.getCPtr(rayToWorld)), true) {
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public btVector3 m_rayFromWorld {
      set {
        OgreBulletPINVOKE.btCollisionWorld_ClosestRayResultCallback_m_rayFromWorld_set(swigCPtr, btVector3.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_ClosestRayResultCallback_m_rayFromWorld_get(swigCPtr);
        btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public btVector3 m_rayToWorld {
      set {
        OgreBulletPINVOKE.btCollisionWorld_ClosestRayResultCallback_m_rayToWorld_set(swigCPtr, btVector3.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_ClosestRayResultCallback_m_rayToWorld_get(swigCPtr);
        btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public btVector3 m_hitNormalWorld {
      set {
        OgreBulletPINVOKE.btCollisionWorld_ClosestRayResultCallback_m_hitNormalWorld_set(swigCPtr, btVector3.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_ClosestRayResultCallback_m_hitNormalWorld_get(swigCPtr);
        btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public btVector3 m_hitPointWorld {
      set {
        OgreBulletPINVOKE.btCollisionWorld_ClosestRayResultCallback_m_hitPointWorld_set(swigCPtr, btVector3.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_ClosestRayResultCallback_m_hitPointWorld_get(swigCPtr);
        btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public override float addSingleResult(btCollisionWorld.LocalRayResult rayResult, bool normalInWorldSpace) {
      float ret = OgreBulletPINVOKE.btCollisionWorld_ClosestRayResultCallback_addSingleResult(swigCPtr, btCollisionWorld.LocalRayResult.getCPtr(rayResult), normalInWorldSpace);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
  }

  public class AllHitsRayResultCallback : btCollisionWorld.RayResultCallback {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
    internal AllHitsRayResultCallback(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgreBulletPINVOKE.btCollisionWorld_AllHitsRayResultCallback_SWIGUpcast(cPtr), cMemoryOwn) {
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AllHitsRayResultCallback obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    protected override void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreBulletPINVOKE.delete_btCollisionWorld_AllHitsRayResultCallback(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        base.Dispose(disposing);
      }
    }
  
    public AllHitsRayResultCallback(btVector3 rayFromWorld, btVector3 rayToWorld) : this(OgreBulletPINVOKE.new_btCollisionWorld_AllHitsRayResultCallback(btVector3.getCPtr(rayFromWorld), btVector3.getCPtr(rayToWorld)), true) {
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_const_p_t m_collisionObjects {
      set {
        OgreBulletPINVOKE.btCollisionWorld_AllHitsRayResultCallback_m_collisionObjects_set(swigCPtr, SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_const_p_t.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_AllHitsRayResultCallback_m_collisionObjects_get(swigCPtr);
        SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_const_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_const_p_t(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public btVector3 m_rayFromWorld {
      set {
        OgreBulletPINVOKE.btCollisionWorld_AllHitsRayResultCallback_m_rayFromWorld_set(swigCPtr, btVector3.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_AllHitsRayResultCallback_m_rayFromWorld_get(swigCPtr);
        btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public btVector3 m_rayToWorld {
      set {
        OgreBulletPINVOKE.btCollisionWorld_AllHitsRayResultCallback_m_rayToWorld_set(swigCPtr, btVector3.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_AllHitsRayResultCallback_m_rayToWorld_get(swigCPtr);
        btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t m_hitNormalWorld {
      set {
        OgreBulletPINVOKE.btCollisionWorld_AllHitsRayResultCallback_m_hitNormalWorld_set(swigCPtr, SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_AllHitsRayResultCallback_m_hitNormalWorld_get(swigCPtr);
        SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t m_hitPointWorld {
      set {
        OgreBulletPINVOKE.btCollisionWorld_AllHitsRayResultCallback_m_hitPointWorld_set(swigCPtr, SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_AllHitsRayResultCallback_m_hitPointWorld_get(swigCPtr);
        SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public SWIGTYPE_p_btAlignedObjectArrayT_float_t m_hitFractions {
      set {
        OgreBulletPINVOKE.btCollisionWorld_AllHitsRayResultCallback_m_hitFractions_set(swigCPtr, SWIGTYPE_p_btAlignedObjectArrayT_float_t.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        SWIGTYPE_p_btAlignedObjectArrayT_float_t ret = new SWIGTYPE_p_btAlignedObjectArrayT_float_t(OgreBulletPINVOKE.btCollisionWorld_AllHitsRayResultCallback_m_hitFractions_get(swigCPtr), true);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public override float addSingleResult(btCollisionWorld.LocalRayResult rayResult, bool normalInWorldSpace) {
      float ret = OgreBulletPINVOKE.btCollisionWorld_AllHitsRayResultCallback_addSingleResult(swigCPtr, btCollisionWorld.LocalRayResult.getCPtr(rayResult), normalInWorldSpace);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
  }

  public class LocalConvexResult : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal LocalConvexResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LocalConvexResult obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~LocalConvexResult() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreBulletPINVOKE.delete_btCollisionWorld_LocalConvexResult(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public LocalConvexResult(btCollisionObject hitCollisionObject, btCollisionWorld.LocalShapeInfo localShapeInfo, btVector3 hitNormalLocal, btVector3 hitPointLocal, float hitFraction) : this(OgreBulletPINVOKE.new_btCollisionWorld_LocalConvexResult(btCollisionObject.getCPtr(hitCollisionObject), btCollisionWorld.LocalShapeInfo.getCPtr(localShapeInfo), btVector3.getCPtr(hitNormalLocal), btVector3.getCPtr(hitPointLocal), hitFraction), true) {
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public btCollisionObject m_hitCollisionObject {
      set {
        OgreBulletPINVOKE.btCollisionWorld_LocalConvexResult_m_hitCollisionObject_set(swigCPtr, btCollisionObject.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_LocalConvexResult_m_hitCollisionObject_get(swigCPtr);
        btCollisionObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new btCollisionObject(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public btCollisionWorld.LocalShapeInfo m_localShapeInfo {
      set {
        OgreBulletPINVOKE.btCollisionWorld_LocalConvexResult_m_localShapeInfo_set(swigCPtr, btCollisionWorld.LocalShapeInfo.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_LocalConvexResult_m_localShapeInfo_get(swigCPtr);
        btCollisionWorld.LocalShapeInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new btCollisionWorld.LocalShapeInfo(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public btVector3 m_hitNormalLocal {
      set {
        OgreBulletPINVOKE.btCollisionWorld_LocalConvexResult_m_hitNormalLocal_set(swigCPtr, btVector3.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_LocalConvexResult_m_hitNormalLocal_get(swigCPtr);
        btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public btVector3 m_hitPointLocal {
      set {
        OgreBulletPINVOKE.btCollisionWorld_LocalConvexResult_m_hitPointLocal_set(swigCPtr, btVector3.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_LocalConvexResult_m_hitPointLocal_get(swigCPtr);
        btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float m_hitFraction {
      set {
        OgreBulletPINVOKE.btCollisionWorld_LocalConvexResult_m_hitFraction_set(swigCPtr, value);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgreBulletPINVOKE.btCollisionWorld_LocalConvexResult_m_hitFraction_get(swigCPtr);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
  }

  public class ConvexResultCallback : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ConvexResultCallback(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ConvexResultCallback obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ConvexResultCallback() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreBulletPINVOKE.delete_btCollisionWorld_ConvexResultCallback(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public float m_closestHitFraction {
      set {
        OgreBulletPINVOKE.btCollisionWorld_ConvexResultCallback_m_closestHitFraction_set(swigCPtr, value);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgreBulletPINVOKE.btCollisionWorld_ConvexResultCallback_m_closestHitFraction_get(swigCPtr);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int m_collisionFilterGroup {
      set {
        OgreBulletPINVOKE.btCollisionWorld_ConvexResultCallback_m_collisionFilterGroup_set(swigCPtr, value);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = OgreBulletPINVOKE.btCollisionWorld_ConvexResultCallback_m_collisionFilterGroup_get(swigCPtr);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int m_collisionFilterMask {
      set {
        OgreBulletPINVOKE.btCollisionWorld_ConvexResultCallback_m_collisionFilterMask_set(swigCPtr, value);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = OgreBulletPINVOKE.btCollisionWorld_ConvexResultCallback_m_collisionFilterMask_get(swigCPtr);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public bool hasHit() {
      bool ret = OgreBulletPINVOKE.btCollisionWorld_ConvexResultCallback_hasHit(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public virtual bool needsCollision(SWIGTYPE_p_btBroadphaseProxy proxy0) {
      bool ret = OgreBulletPINVOKE.btCollisionWorld_ConvexResultCallback_needsCollision(swigCPtr, SWIGTYPE_p_btBroadphaseProxy.getCPtr(proxy0));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public virtual float addSingleResult(btCollisionWorld.LocalConvexResult convexResult, bool normalInWorldSpace) {
      float ret = OgreBulletPINVOKE.btCollisionWorld_ConvexResultCallback_addSingleResult(swigCPtr, btCollisionWorld.LocalConvexResult.getCPtr(convexResult), normalInWorldSpace);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
  }

  public class ClosestConvexResultCallback : btCollisionWorld.ConvexResultCallback {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
    internal ClosestConvexResultCallback(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgreBulletPINVOKE.btCollisionWorld_ClosestConvexResultCallback_SWIGUpcast(cPtr), cMemoryOwn) {
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ClosestConvexResultCallback obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    protected override void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreBulletPINVOKE.delete_btCollisionWorld_ClosestConvexResultCallback(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        base.Dispose(disposing);
      }
    }
  
    public ClosestConvexResultCallback(btVector3 convexFromWorld, btVector3 convexToWorld) : this(OgreBulletPINVOKE.new_btCollisionWorld_ClosestConvexResultCallback(btVector3.getCPtr(convexFromWorld), btVector3.getCPtr(convexToWorld)), true) {
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public btVector3 m_convexFromWorld {
      set {
        OgreBulletPINVOKE.btCollisionWorld_ClosestConvexResultCallback_m_convexFromWorld_set(swigCPtr, btVector3.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_ClosestConvexResultCallback_m_convexFromWorld_get(swigCPtr);
        btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public btVector3 m_convexToWorld {
      set {
        OgreBulletPINVOKE.btCollisionWorld_ClosestConvexResultCallback_m_convexToWorld_set(swigCPtr, btVector3.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_ClosestConvexResultCallback_m_convexToWorld_get(swigCPtr);
        btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public btVector3 m_hitNormalWorld {
      set {
        OgreBulletPINVOKE.btCollisionWorld_ClosestConvexResultCallback_m_hitNormalWorld_set(swigCPtr, btVector3.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_ClosestConvexResultCallback_m_hitNormalWorld_get(swigCPtr);
        btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public btVector3 m_hitPointWorld {
      set {
        OgreBulletPINVOKE.btCollisionWorld_ClosestConvexResultCallback_m_hitPointWorld_set(swigCPtr, btVector3.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_ClosestConvexResultCallback_m_hitPointWorld_get(swigCPtr);
        btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public btCollisionObject m_hitCollisionObject {
      set {
        OgreBulletPINVOKE.btCollisionWorld_ClosestConvexResultCallback_m_hitCollisionObject_set(swigCPtr, btCollisionObject.getCPtr(value));
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionWorld_ClosestConvexResultCallback_m_hitCollisionObject_get(swigCPtr);
        btCollisionObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new btCollisionObject(cPtr, false);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public override float addSingleResult(btCollisionWorld.LocalConvexResult convexResult, bool normalInWorldSpace) {
      float ret = OgreBulletPINVOKE.btCollisionWorld_ClosestConvexResultCallback_addSingleResult(swigCPtr, btCollisionWorld.LocalConvexResult.getCPtr(convexResult), normalInWorldSpace);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
  }

  public class ContactResultCallback : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ContactResultCallback(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ContactResultCallback obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ContactResultCallback() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreBulletPINVOKE.delete_btCollisionWorld_ContactResultCallback(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public int m_collisionFilterGroup {
      set {
        OgreBulletPINVOKE.btCollisionWorld_ContactResultCallback_m_collisionFilterGroup_set(swigCPtr, value);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = OgreBulletPINVOKE.btCollisionWorld_ContactResultCallback_m_collisionFilterGroup_get(swigCPtr);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int m_collisionFilterMask {
      set {
        OgreBulletPINVOKE.btCollisionWorld_ContactResultCallback_m_collisionFilterMask_set(swigCPtr, value);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = OgreBulletPINVOKE.btCollisionWorld_ContactResultCallback_m_collisionFilterMask_get(swigCPtr);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float m_closestDistanceThreshold {
      set {
        OgreBulletPINVOKE.btCollisionWorld_ContactResultCallback_m_closestDistanceThreshold_set(swigCPtr, value);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgreBulletPINVOKE.btCollisionWorld_ContactResultCallback_m_closestDistanceThreshold_get(swigCPtr);
        if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public virtual bool needsCollision(SWIGTYPE_p_btBroadphaseProxy proxy0) {
      bool ret = OgreBulletPINVOKE.btCollisionWorld_ContactResultCallback_needsCollision(swigCPtr, SWIGTYPE_p_btBroadphaseProxy.getCPtr(proxy0));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public virtual float addSingleResult(btManifoldPoint cp, SWIGTYPE_p_btCollisionObjectWrapper colObj0Wrap, int partId0, int index0, SWIGTYPE_p_btCollisionObjectWrapper colObj1Wrap, int partId1, int index1) {
      float ret = OgreBulletPINVOKE.btCollisionWorld_ContactResultCallback_addSingleResult(swigCPtr, btManifoldPoint.getCPtr(cp), SWIGTYPE_p_btCollisionObjectWrapper.getCPtr(colObj0Wrap), partId0, index0, SWIGTYPE_p_btCollisionObjectWrapper.getCPtr(colObj1Wrap), partId1, index1);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
  }

  public int getNumCollisionObjects() {
    int ret = OgreBulletPINVOKE.btCollisionWorld_getNumCollisionObjects(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void rayTest(btVector3 rayFromWorld, btVector3 rayToWorld, btCollisionWorld.RayResultCallback resultCallback) {
    OgreBulletPINVOKE.btCollisionWorld_rayTest(swigCPtr, btVector3.getCPtr(rayFromWorld), btVector3.getCPtr(rayToWorld), btCollisionWorld.RayResultCallback.getCPtr(resultCallback));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void convexSweepTest(SWIGTYPE_p_btConvexShape castShape, SWIGTYPE_p_btTransform from, SWIGTYPE_p_btTransform to, btCollisionWorld.ConvexResultCallback resultCallback, float allowedCcdPenetration) {
    OgreBulletPINVOKE.btCollisionWorld_convexSweepTest__SWIG_0(swigCPtr, SWIGTYPE_p_btConvexShape.getCPtr(castShape), SWIGTYPE_p_btTransform.getCPtr(from), SWIGTYPE_p_btTransform.getCPtr(to), btCollisionWorld.ConvexResultCallback.getCPtr(resultCallback), allowedCcdPenetration);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void convexSweepTest(SWIGTYPE_p_btConvexShape castShape, SWIGTYPE_p_btTransform from, SWIGTYPE_p_btTransform to, btCollisionWorld.ConvexResultCallback resultCallback) {
    OgreBulletPINVOKE.btCollisionWorld_convexSweepTest__SWIG_1(swigCPtr, SWIGTYPE_p_btConvexShape.getCPtr(castShape), SWIGTYPE_p_btTransform.getCPtr(from), SWIGTYPE_p_btTransform.getCPtr(to), btCollisionWorld.ConvexResultCallback.getCPtr(resultCallback));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void contactTest(btCollisionObject colObj, btCollisionWorld.ContactResultCallback resultCallback) {
    OgreBulletPINVOKE.btCollisionWorld_contactTest(swigCPtr, btCollisionObject.getCPtr(colObj), btCollisionWorld.ContactResultCallback.getCPtr(resultCallback));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void contactPairTest(btCollisionObject colObjA, btCollisionObject colObjB, btCollisionWorld.ContactResultCallback resultCallback) {
    OgreBulletPINVOKE.btCollisionWorld_contactPairTest(swigCPtr, btCollisionObject.getCPtr(colObjA), btCollisionObject.getCPtr(colObjB), btCollisionWorld.ContactResultCallback.getCPtr(resultCallback));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void rayTestSingle(SWIGTYPE_p_btTransform rayFromTrans, SWIGTYPE_p_btTransform rayToTrans, btCollisionObject collisionObject, SWIGTYPE_p_btCollisionShape collisionShape, SWIGTYPE_p_btTransform colObjWorldTransform, btCollisionWorld.RayResultCallback resultCallback) {
    OgreBulletPINVOKE.btCollisionWorld_rayTestSingle(SWIGTYPE_p_btTransform.getCPtr(rayFromTrans), SWIGTYPE_p_btTransform.getCPtr(rayToTrans), btCollisionObject.getCPtr(collisionObject), SWIGTYPE_p_btCollisionShape.getCPtr(collisionShape), SWIGTYPE_p_btTransform.getCPtr(colObjWorldTransform), btCollisionWorld.RayResultCallback.getCPtr(resultCallback));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void rayTestSingleInternal(SWIGTYPE_p_btTransform rayFromTrans, SWIGTYPE_p_btTransform rayToTrans, SWIGTYPE_p_btCollisionObjectWrapper collisionObjectWrap, btCollisionWorld.RayResultCallback resultCallback) {
    OgreBulletPINVOKE.btCollisionWorld_rayTestSingleInternal(SWIGTYPE_p_btTransform.getCPtr(rayFromTrans), SWIGTYPE_p_btTransform.getCPtr(rayToTrans), SWIGTYPE_p_btCollisionObjectWrapper.getCPtr(collisionObjectWrap), btCollisionWorld.RayResultCallback.getCPtr(resultCallback));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void objectQuerySingle(SWIGTYPE_p_btConvexShape castShape, SWIGTYPE_p_btTransform rayFromTrans, SWIGTYPE_p_btTransform rayToTrans, btCollisionObject collisionObject, SWIGTYPE_p_btCollisionShape collisionShape, SWIGTYPE_p_btTransform colObjWorldTransform, btCollisionWorld.ConvexResultCallback resultCallback, float allowedPenetration) {
    OgreBulletPINVOKE.btCollisionWorld_objectQuerySingle(SWIGTYPE_p_btConvexShape.getCPtr(castShape), SWIGTYPE_p_btTransform.getCPtr(rayFromTrans), SWIGTYPE_p_btTransform.getCPtr(rayToTrans), btCollisionObject.getCPtr(collisionObject), SWIGTYPE_p_btCollisionShape.getCPtr(collisionShape), SWIGTYPE_p_btTransform.getCPtr(colObjWorldTransform), btCollisionWorld.ConvexResultCallback.getCPtr(resultCallback), allowedPenetration);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void objectQuerySingleInternal(SWIGTYPE_p_btConvexShape castShape, SWIGTYPE_p_btTransform convexFromTrans, SWIGTYPE_p_btTransform convexToTrans, SWIGTYPE_p_btCollisionObjectWrapper colObjWrap, btCollisionWorld.ConvexResultCallback resultCallback, float allowedPenetration) {
    OgreBulletPINVOKE.btCollisionWorld_objectQuerySingleInternal(SWIGTYPE_p_btConvexShape.getCPtr(castShape), SWIGTYPE_p_btTransform.getCPtr(convexFromTrans), SWIGTYPE_p_btTransform.getCPtr(convexToTrans), SWIGTYPE_p_btCollisionObjectWrapper.getCPtr(colObjWrap), btCollisionWorld.ConvexResultCallback.getCPtr(resultCallback), allowedPenetration);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addCollisionObject(btCollisionObject collisionObject, int collisionFilterGroup, int collisionFilterMask) {
    OgreBulletPINVOKE.btCollisionWorld_addCollisionObject__SWIG_0(swigCPtr, btCollisionObject.getCPtr(collisionObject), collisionFilterGroup, collisionFilterMask);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addCollisionObject(btCollisionObject collisionObject, int collisionFilterGroup) {
    OgreBulletPINVOKE.btCollisionWorld_addCollisionObject__SWIG_1(swigCPtr, btCollisionObject.getCPtr(collisionObject), collisionFilterGroup);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addCollisionObject(btCollisionObject collisionObject) {
    OgreBulletPINVOKE.btCollisionWorld_addCollisionObject__SWIG_2(swigCPtr, btCollisionObject.getCPtr(collisionObject));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void refreshBroadphaseProxy(btCollisionObject collisionObject) {
    OgreBulletPINVOKE.btCollisionWorld_refreshBroadphaseProxy(swigCPtr, btCollisionObject.getCPtr(collisionObject));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_p_t getCollisionObjectArray() {
    SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_p_t ret = new SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_p_t(OgreBulletPINVOKE.btCollisionWorld_getCollisionObjectArray__SWIG_0(swigCPtr), false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void removeCollisionObject(btCollisionObject collisionObject) {
    OgreBulletPINVOKE.btCollisionWorld_removeCollisionObject(swigCPtr, btCollisionObject.getCPtr(collisionObject));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void performDiscreteCollisionDetection() {
    OgreBulletPINVOKE.btCollisionWorld_performDiscreteCollisionDetection(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_btDispatcherInfo getDispatchInfo() {
    SWIGTYPE_p_btDispatcherInfo ret = new SWIGTYPE_p_btDispatcherInfo(OgreBulletPINVOKE.btCollisionWorld_getDispatchInfo__SWIG_0(swigCPtr), false);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getForceUpdateAllAabbs() {
    bool ret = OgreBulletPINVOKE.btCollisionWorld_getForceUpdateAllAabbs(swigCPtr);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setForceUpdateAllAabbs(bool forceUpdateAllAabbs) {
    OgreBulletPINVOKE.btCollisionWorld_setForceUpdateAllAabbs(swigCPtr, forceUpdateAllAabbs);
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void serialize(SWIGTYPE_p_btSerializer serializer) {
    OgreBulletPINVOKE.btCollisionWorld_serialize(swigCPtr, SWIGTYPE_p_btSerializer.getCPtr(serializer));
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
