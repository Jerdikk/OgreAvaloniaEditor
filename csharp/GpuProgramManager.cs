//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class GpuProgramManager : ResourceManager {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal GpuProgramManager(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.GpuProgramManager_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GpuProgramManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_GpuProgramManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public GpuProgramManager() : this(OgrePINVOKE.new_GpuProgramManager(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public GpuProgramPtr getByName(string name, string group) {
    GpuProgramPtr ret = new GpuProgramPtr(OgrePINVOKE.GpuProgramManager_getByName__SWIG_0(swigCPtr, name, group), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramPtr getByName(string name) {
    GpuProgramPtr ret = new GpuProgramPtr(OgrePINVOKE.GpuProgramManager_getByName__SWIG_1(swigCPtr, name), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramPtr getByName(string name, string group, bool preferHighLevelPrograms) {
    GpuProgramPtr ret = new GpuProgramPtr(OgrePINVOKE.GpuProgramManager_getByName__SWIG_2(swigCPtr, name, group, preferHighLevelPrograms), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual GpuProgramPtr load(string name, string groupName, string filename, GpuProgramType gptype, string syntaxCode) {
    GpuProgramPtr ret = new GpuProgramPtr(OgrePINVOKE.GpuProgramManager_load(swigCPtr, name, groupName, filename, (int)gptype, syntaxCode), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual GpuProgramPtr loadFromString(string name, string groupName, string code, GpuProgramType gptype, string syntaxCode) {
    GpuProgramPtr ret = new GpuProgramPtr(OgrePINVOKE.GpuProgramManager_loadFromString(swigCPtr, name, groupName, code, (int)gptype, syntaxCode), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__setT_std__string_t getSupportedSyntax() {
    SWIGTYPE_p_std__setT_std__string_t ret = new SWIGTYPE_p_std__setT_std__string_t(OgrePINVOKE.GpuProgramManager_getSupportedSyntax(), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isSyntaxSupported(string syntaxCode) {
    bool ret = OgrePINVOKE.GpuProgramManager_isSyntaxSupported(syntaxCode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isLanguageSupported(string lang) {
    bool ret = OgrePINVOKE.GpuProgramManager_isLanguageSupported(swigCPtr, lang);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GpuProgramParametersPtr createParameters() {
    GpuProgramParametersPtr ret = new GpuProgramParametersPtr(OgrePINVOKE.GpuProgramManager_createParameters(), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual GpuProgramPtr createProgram(string name, string groupName, string filename, GpuProgramType gptype, string syntaxCode) {
    GpuProgramPtr ret = new GpuProgramPtr(OgrePINVOKE.GpuProgramManager_createProgram__SWIG_0(swigCPtr, name, groupName, filename, (int)gptype, syntaxCode), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual GpuProgramPtr createProgramFromString(string name, string groupName, string code, GpuProgramType gptype, string syntaxCode) {
    GpuProgramPtr ret = new GpuProgramPtr(OgrePINVOKE.GpuProgramManager_createProgramFromString(swigCPtr, name, groupName, code, (int)gptype, syntaxCode), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramPtr create(string name, string group, GpuProgramType gptype, string language, bool isManual, ManualResourceLoader loader) {
    GpuProgramPtr ret = new GpuProgramPtr(OgrePINVOKE.GpuProgramManager_create__SWIG_0(swigCPtr, name, group, (int)gptype, language, isManual, ManualResourceLoader.getCPtr(loader)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramPtr create(string name, string group, GpuProgramType gptype, string language, bool isManual) {
    GpuProgramPtr ret = new GpuProgramPtr(OgrePINVOKE.GpuProgramManager_create__SWIG_1(swigCPtr, name, group, (int)gptype, language, isManual), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramPtr create(string name, string group, GpuProgramType gptype, string language) {
    GpuProgramPtr ret = new GpuProgramPtr(OgrePINVOKE.GpuProgramManager_create__SWIG_2(swigCPtr, name, group, (int)gptype, language), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GpuProgramPtr createProgram(string name, string groupName, string language, GpuProgramType gptype) {
    GpuProgramPtr ret = new GpuProgramPtr(OgrePINVOKE.GpuProgramManager_createProgram__SWIG_1(swigCPtr, name, groupName, language, (int)gptype), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuSharedParameters_t createSharedParameters(string name) {
    SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuSharedParameters_t ret = new SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuSharedParameters_t(OgrePINVOKE.GpuProgramManager_createSharedParameters(swigCPtr, name), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuSharedParameters_t getSharedParameters(string name) {
    SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuSharedParameters_t ret = new SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuSharedParameters_t(OgrePINVOKE.GpuProgramManager_getSharedParameters(swigCPtr, name), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_std__mapT_std__string_Ogre__SharedPtrT_Ogre__GpuSharedParameters_t_std__lessT_std__string_t_t getAvailableSharedParameters() {
    SWIGTYPE_p_std__mapT_std__string_Ogre__SharedPtrT_Ogre__GpuSharedParameters_t_std__lessT_std__string_t_t ret = new SWIGTYPE_p_std__mapT_std__string_Ogre__SharedPtrT_Ogre__GpuSharedParameters_t_std__lessT_std__string_t_t(OgrePINVOKE.GpuProgramManager_getAvailableSharedParameters(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getSaveMicrocodesToCache() {
    bool ret = OgrePINVOKE.GpuProgramManager_getSaveMicrocodesToCache(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSaveMicrocodesToCache(bool val) {
    OgrePINVOKE.GpuProgramManager_setSaveMicrocodesToCache(swigCPtr, val);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isCacheDirty() {
    bool ret = OgrePINVOKE.GpuProgramManager_isCacheDirty(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool canGetCompiledShaderBuffer() {
    bool ret = OgrePINVOKE.GpuProgramManager_canGetCompiledShaderBuffer();
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isMicrocodeAvailableInCache(uint id) {
    bool ret = OgrePINVOKE.GpuProgramManager_isMicrocodeAvailableInCache(swigCPtr, id);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MemoryDataStreamPtr getMicrocodeFromCache(uint id) {
    MemoryDataStreamPtr ret = new MemoryDataStreamPtr(OgrePINVOKE.GpuProgramManager_getMicrocodeFromCache(swigCPtr, id), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MemoryDataStreamPtr createMicrocode(uint size) {
    MemoryDataStreamPtr ret = new MemoryDataStreamPtr(OgrePINVOKE.GpuProgramManager_createMicrocode(size), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addMicrocodeToCache(uint id, MemoryDataStreamPtr microcode) {
    OgrePINVOKE.GpuProgramManager_addMicrocodeToCache(swigCPtr, id, MemoryDataStreamPtr.getCPtr(microcode));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeMicrocodeFromCache(uint id) {
    OgrePINVOKE.GpuProgramManager_removeMicrocodeFromCache(swigCPtr, id);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void saveMicrocodeCache(DataStreamPtr stream) {
    OgrePINVOKE.GpuProgramManager_saveMicrocodeCache(swigCPtr, DataStreamPtr.getCPtr(stream));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadMicrocodeCache(DataStreamPtr stream) {
    OgrePINVOKE.GpuProgramManager_loadMicrocodeCache(swigCPtr, DataStreamPtr.getCPtr(stream));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addFactory(GpuProgramFactory factory) {
    OgrePINVOKE.GpuProgramManager_addFactory(swigCPtr, GpuProgramFactory.getCPtr(factory));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeFactory(GpuProgramFactory factory) {
    OgrePINVOKE.GpuProgramManager_removeFactory(swigCPtr, GpuProgramFactory.getCPtr(factory));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static GpuProgramManager getSingleton() {
    GpuProgramManager ret = new GpuProgramManager(OgrePINVOKE.GpuProgramManager_getSingleton(), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
