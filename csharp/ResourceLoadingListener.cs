//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ResourceLoadingListener : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ResourceLoadingListener(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ResourceLoadingListener obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ResourceLoadingListener() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_ResourceLoadingListener(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual DataStreamPtr resourceLoading(string name, string group, Resource resource) {
    DataStreamPtr ret = new DataStreamPtr((SwigDerivedClassHasMethod("resourceLoading", swigMethodTypes0) ? OgrePINVOKE.ResourceLoadingListener_resourceLoadingSwigExplicitResourceLoadingListener(swigCPtr, name, group, Resource.getCPtr(resource)) : OgrePINVOKE.ResourceLoadingListener_resourceLoading(swigCPtr, name, group, Resource.getCPtr(resource))), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void resourceStreamOpened(string name, string group, Resource resource, DataStreamPtr dataStream) {
    if (SwigDerivedClassHasMethod("resourceStreamOpened", swigMethodTypes1)) OgrePINVOKE.ResourceLoadingListener_resourceStreamOpenedSwigExplicitResourceLoadingListener(swigCPtr, name, group, Resource.getCPtr(resource), DataStreamPtr.getCPtr(dataStream)); else OgrePINVOKE.ResourceLoadingListener_resourceStreamOpened(swigCPtr, name, group, Resource.getCPtr(resource), DataStreamPtr.getCPtr(dataStream));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool resourceCollision(Resource resource, ResourceManager resourceManager) {
    bool ret = (SwigDerivedClassHasMethod("resourceCollision", swigMethodTypes2) ? OgrePINVOKE.ResourceLoadingListener_resourceCollisionSwigExplicitResourceLoadingListener(swigCPtr, Resource.getCPtr(resource), ResourceManager.getCPtr(resourceManager)) : OgrePINVOKE.ResourceLoadingListener_resourceCollision(swigCPtr, Resource.getCPtr(resource), ResourceManager.getCPtr(resourceManager)));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ResourceLoadingListener() : this(OgrePINVOKE.new_ResourceLoadingListener(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("resourceLoading", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateResourceLoadingListener_0(SwigDirectorMethodresourceLoading);
    if (SwigDerivedClassHasMethod("resourceStreamOpened", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateResourceLoadingListener_1(SwigDirectorMethodresourceStreamOpened);
    if (SwigDerivedClassHasMethod("resourceCollision", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateResourceLoadingListener_2(SwigDirectorMethodresourceCollision);
    OgrePINVOKE.ResourceLoadingListener_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ResourceLoadingListener));
    return hasDerivedMethod;
  }

  private global::System.IntPtr SwigDirectorMethodresourceLoading(string name, string group, global::System.IntPtr resource) {
    return DataStreamPtr.getCPtr(resourceLoading(name, group, (resource == global::System.IntPtr.Zero) ? null : new Resource(resource, false))).Handle;
  }

  private void SwigDirectorMethodresourceStreamOpened(string name, string group, global::System.IntPtr resource, global::System.IntPtr dataStream) {
    resourceStreamOpened(name, group, (resource == global::System.IntPtr.Zero) ? null : new Resource(resource, false), new DataStreamPtr(dataStream, false));
  }

  private bool SwigDirectorMethodresourceCollision(global::System.IntPtr resource, global::System.IntPtr resourceManager) {
    return resourceCollision((resource == global::System.IntPtr.Zero) ? null : new Resource(resource, false), (resourceManager == global::System.IntPtr.Zero) ? null : new ResourceManager(resourceManager, false));
  }

  public delegate global::System.IntPtr SwigDelegateResourceLoadingListener_0(string name, string group, global::System.IntPtr resource);
  public delegate void SwigDelegateResourceLoadingListener_1(string name, string group, global::System.IntPtr resource, global::System.IntPtr dataStream);
  public delegate bool SwigDelegateResourceLoadingListener_2(global::System.IntPtr resource, global::System.IntPtr resourceManager);

  private SwigDelegateResourceLoadingListener_0 swigDelegate0;
  private SwigDelegateResourceLoadingListener_1 swigDelegate1;
  private SwigDelegateResourceLoadingListener_2 swigDelegate2;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(string), typeof(string), typeof(Resource) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(string), typeof(string), typeof(Resource), typeof(DataStreamPtr) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(Resource), typeof(ResourceManager) };
}

}
