//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class TextureUnitState : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TextureUnitState(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TextureUnitState obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TextureUnitState() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_TextureUnitState(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public class TextureEffect : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal TextureEffect(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TextureEffect obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~TextureEffect() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_TextureUnitState_TextureEffect(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public TextureUnitState.TextureEffectType type {
      set {
        OgrePINVOKE.TextureUnitState_TextureEffect_type_set(swigCPtr, (int)value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        TextureUnitState.TextureEffectType ret = (TextureUnitState.TextureEffectType)OgrePINVOKE.TextureUnitState_TextureEffect_type_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int subtype {
      set {
        OgrePINVOKE.TextureUnitState_TextureEffect_subtype_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = OgrePINVOKE.TextureUnitState_TextureEffect_subtype_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float arg1 {
      set {
        OgrePINVOKE.TextureUnitState_TextureEffect_arg1_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgrePINVOKE.TextureUnitState_TextureEffect_arg1_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float arg2 {
      set {
        OgrePINVOKE.TextureUnitState_TextureEffect_arg2_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgrePINVOKE.TextureUnitState_TextureEffect_arg2_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public WaveformType waveType {
      set {
        OgrePINVOKE.TextureUnitState_TextureEffect_waveType_set(swigCPtr, (int)value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        WaveformType ret = (WaveformType)OgrePINVOKE.TextureUnitState_TextureEffect_waveType_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float base_ {
      set {
        OgrePINVOKE.TextureUnitState_TextureEffect_base__set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgrePINVOKE.TextureUnitState_TextureEffect_base__get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float frequency {
      set {
        OgrePINVOKE.TextureUnitState_TextureEffect_frequency_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgrePINVOKE.TextureUnitState_TextureEffect_frequency_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float phase {
      set {
        OgrePINVOKE.TextureUnitState_TextureEffect_phase_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgrePINVOKE.TextureUnitState_TextureEffect_phase_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float amplitude {
      set {
        OgrePINVOKE.TextureUnitState_TextureEffect_amplitude_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgrePINVOKE.TextureUnitState_TextureEffect_amplitude_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public ControllerFloat controller {
      set {
        OgrePINVOKE.TextureUnitState_TextureEffect_controller_set(swigCPtr, ControllerFloat.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.TextureUnitState_TextureEffect_controller_get(swigCPtr);
        ControllerFloat ret = (cPtr == global::System.IntPtr.Zero) ? null : new ControllerFloat(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Frustum frustum {
      set {
        OgrePINVOKE.TextureUnitState_TextureEffect_frustum_set(swigCPtr, Frustum.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.TextureUnitState_TextureEffect_frustum_get(swigCPtr);
        Frustum ret = (cPtr == global::System.IntPtr.Zero) ? null : new Frustum(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public TextureEffect() : this(OgrePINVOKE.new_TextureUnitState_TextureEffect(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public TextureUnitState(Pass parent) : this(OgrePINVOKE.new_TextureUnitState__SWIG_0(Pass.getCPtr(parent)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public TextureUnitState(Pass parent, TextureUnitState oth) : this(OgrePINVOKE.new_TextureUnitState__SWIG_1(Pass.getCPtr(parent), TextureUnitState.getCPtr(oth)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public TextureUnitState(Pass parent, string texName, byte texCoordSet) : this(OgrePINVOKE.new_TextureUnitState__SWIG_2(Pass.getCPtr(parent), texName, texCoordSet), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public TextureUnitState(Pass parent, string texName) : this(OgrePINVOKE.new_TextureUnitState__SWIG_3(Pass.getCPtr(parent), texName), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getTextureName() {
    string ret = OgrePINVOKE.TextureUnitState_getTextureName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTextureName(string name) {
    OgrePINVOKE.TextureUnitState_setTextureName__SWIG_0(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTextureName(string name, TextureType ttype) {
    OgrePINVOKE.TextureUnitState_setTextureName__SWIG_1(swigCPtr, name, (int)ttype);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTexture(TexturePtr texPtr) {
    OgrePINVOKE.TextureUnitState_setTexture(swigCPtr, TexturePtr.getCPtr(texPtr));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAnimatedTextureName(string name, uint numFrames, float duration) {
    OgrePINVOKE.TextureUnitState_setAnimatedTextureName__SWIG_0(swigCPtr, name, numFrames, duration);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAnimatedTextureName(string name, uint numFrames) {
    OgrePINVOKE.TextureUnitState_setAnimatedTextureName__SWIG_1(swigCPtr, name, numFrames);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAnimatedTextureName(SWIGTYPE_p_std__string names, uint numFrames, float duration) {
    OgrePINVOKE.TextureUnitState_setAnimatedTextureName__SWIG_2(swigCPtr, SWIGTYPE_p_std__string.getCPtr(names), numFrames, duration);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAnimatedTextureName(SWIGTYPE_p_std__string names, uint numFrames) {
    OgrePINVOKE.TextureUnitState_setAnimatedTextureName__SWIG_3(swigCPtr, SWIGTYPE_p_std__string.getCPtr(names), numFrames);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAnimatedTextureName(StringList names, float duration) {
    OgrePINVOKE.TextureUnitState_setAnimatedTextureName__SWIG_4(swigCPtr, StringList.getCPtr(names), duration);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAnimatedTextureName(StringList names) {
    OgrePINVOKE.TextureUnitState_setAnimatedTextureName__SWIG_5(swigCPtr, StringList.getCPtr(names));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setLayerArrayNames(TextureType type, StringList names) {
    OgrePINVOKE.TextureUnitState_setLayerArrayNames(swigCPtr, (int)type, StringList.getCPtr(names));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t getTextureDimensions(uint frame) {
    SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t ret = new SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t(OgrePINVOKE.TextureUnitState_getTextureDimensions__SWIG_0(swigCPtr, frame), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t getTextureDimensions() {
    SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t ret = new SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t(OgrePINVOKE.TextureUnitState_getTextureDimensions__SWIG_1(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCurrentFrame(uint frameNumber) {
    OgrePINVOKE.TextureUnitState_setCurrentFrame(swigCPtr, frameNumber);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getCurrentFrame() {
    uint ret = OgrePINVOKE.TextureUnitState_getCurrentFrame(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getFrameTextureName(uint frameNumber) {
    string ret = OgrePINVOKE.TextureUnitState_getFrameTextureName(swigCPtr, frameNumber);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setFrameTextureName(string name, uint frameNumber) {
    OgrePINVOKE.TextureUnitState_setFrameTextureName(swigCPtr, name, frameNumber);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addFrameTextureName(string name) {
    OgrePINVOKE.TextureUnitState_addFrameTextureName(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void deleteFrameTextureName(uint frameNumber) {
    OgrePINVOKE.TextureUnitState_deleteFrameTextureName(swigCPtr, frameNumber);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNumFrames() {
    uint ret = OgrePINVOKE.TextureUnitState_getNumFrames(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setContentType(TextureUnitState.ContentType ct) {
    OgrePINVOKE.TextureUnitState_setContentType(swigCPtr, (int)ct);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public TextureUnitState.ContentType getContentType() {
    TextureUnitState.ContentType ret = (TextureUnitState.ContentType)OgrePINVOKE.TextureUnitState_getContentType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TextureType getTextureType() {
    TextureType ret = (TextureType)OgrePINVOKE.TextureUnitState_getTextureType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDesiredFormat(PixelFormat desiredFormat) {
    OgrePINVOKE.TextureUnitState_setDesiredFormat(swigCPtr, (int)desiredFormat);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public PixelFormat getDesiredFormat() {
    PixelFormat ret = (PixelFormat)OgrePINVOKE.TextureUnitState_getDesiredFormat(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setNumMipmaps(int numMipmaps) {
    OgrePINVOKE.TextureUnitState_setNumMipmaps(swigCPtr, numMipmaps);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public int getNumMipmaps() {
    int ret = OgrePINVOKE.TextureUnitState_getNumMipmaps(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getGamma() {
    float ret = OgrePINVOKE.TextureUnitState_getGamma(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGamma(float gamma) {
    OgrePINVOKE.TextureUnitState_setGamma(swigCPtr, gamma);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setHardwareGammaEnabled(bool enabled) {
    OgrePINVOKE.TextureUnitState_setHardwareGammaEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isHardwareGammaEnabled() {
    bool ret = OgrePINVOKE.TextureUnitState_isHardwareGammaEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte getTextureCoordSet() {
    byte ret = OgrePINVOKE.TextureUnitState_getTextureCoordSet(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTextureCoordSet(byte set) {
    OgrePINVOKE.TextureUnitState_setTextureCoordSet(swigCPtr, set);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setUnorderedAccessMipLevel(int mipLevel) {
    OgrePINVOKE.TextureUnitState_setUnorderedAccessMipLevel(swigCPtr, mipLevel);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public int getUnorderedAccessMipLevel() {
    int ret = OgrePINVOKE.TextureUnitState_getUnorderedAccessMipLevel(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTextureTransform(Matrix4 xform) {
    OgrePINVOKE.TextureUnitState_setTextureTransform(swigCPtr, Matrix4.getCPtr(xform));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Matrix4 getTextureTransform() {
    Matrix4 ret = new Matrix4(OgrePINVOKE.TextureUnitState_getTextureTransform(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTextureScroll(float u, float v) {
    OgrePINVOKE.TextureUnitState_setTextureScroll(swigCPtr, u, v);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTextureUScroll(float value) {
    OgrePINVOKE.TextureUnitState_setTextureUScroll(swigCPtr, value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getTextureUScroll() {
    float ret = OgrePINVOKE.TextureUnitState_getTextureUScroll(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTextureVScroll(float value) {
    OgrePINVOKE.TextureUnitState_setTextureVScroll(swigCPtr, value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getTextureVScroll() {
    float ret = OgrePINVOKE.TextureUnitState_getTextureVScroll(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTextureUScale(float value) {
    OgrePINVOKE.TextureUnitState_setTextureUScale(swigCPtr, value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getTextureUScale() {
    float ret = OgrePINVOKE.TextureUnitState_getTextureUScale(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTextureVScale(float value) {
    OgrePINVOKE.TextureUnitState_setTextureVScale(swigCPtr, value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getTextureVScale() {
    float ret = OgrePINVOKE.TextureUnitState_getTextureVScale(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTextureScale(float uScale, float vScale) {
    OgrePINVOKE.TextureUnitState_setTextureScale(swigCPtr, uScale, vScale);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTextureRotate(Radian angle) {
    OgrePINVOKE.TextureUnitState_setTextureRotate(swigCPtr, Radian.getCPtr(angle));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Radian getTextureRotate() {
    Radian ret = new Radian(OgrePINVOKE.TextureUnitState_getTextureRotate(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t getSampler() {
    SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t ret = new SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t(OgrePINVOKE.TextureUnitState_getSampler(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSampler(SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t sampler) {
    OgrePINVOKE.TextureUnitState_setSampler(swigCPtr, SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t.getCPtr(sampler));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Sampler.UVWAddressingMode getTextureAddressingMode() {
    Sampler.UVWAddressingMode ret = new Sampler.UVWAddressingMode(OgrePINVOKE.TextureUnitState_getTextureAddressingMode(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTextureAddressingMode(TextureAddressingMode tam) {
    OgrePINVOKE.TextureUnitState_setTextureAddressingMode__SWIG_0(swigCPtr, (int)tam);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTextureAddressingMode(TextureAddressingMode u, TextureAddressingMode v, TextureAddressingMode w) {
    OgrePINVOKE.TextureUnitState_setTextureAddressingMode__SWIG_1(swigCPtr, (int)u, (int)v, (int)w);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTextureAddressingMode(Sampler.UVWAddressingMode uvw) {
    OgrePINVOKE.TextureUnitState_setTextureAddressingMode__SWIG_2(swigCPtr, Sampler.UVWAddressingMode.getCPtr(uvw));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTextureBorderColour(ColourValue colour) {
    OgrePINVOKE.TextureUnitState_setTextureBorderColour(swigCPtr, ColourValue.getCPtr(colour));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ColourValue getTextureBorderColour() {
    ColourValue ret = new ColourValue(OgrePINVOKE.TextureUnitState_getTextureBorderColour(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTextureFiltering(TextureFilterOptions filterType) {
    OgrePINVOKE.TextureUnitState_setTextureFiltering__SWIG_0(swigCPtr, (int)filterType);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTextureFiltering(FilterType ftype, FilterOptions opts) {
    OgrePINVOKE.TextureUnitState_setTextureFiltering__SWIG_1(swigCPtr, (int)ftype, (int)opts);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTextureFiltering(FilterOptions minFilter, FilterOptions magFilter, FilterOptions mipFilter) {
    OgrePINVOKE.TextureUnitState_setTextureFiltering__SWIG_2(swigCPtr, (int)minFilter, (int)magFilter, (int)mipFilter);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public FilterOptions getTextureFiltering(FilterType ftype) {
    FilterOptions ret = (FilterOptions)OgrePINVOKE.TextureUnitState_getTextureFiltering(swigCPtr, (int)ftype);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTextureCompareEnabled(bool enabled) {
    OgrePINVOKE.TextureUnitState_setTextureCompareEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getTextureCompareEnabled() {
    bool ret = OgrePINVOKE.TextureUnitState_getTextureCompareEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTextureCompareFunction(CompareFunction function) {
    OgrePINVOKE.TextureUnitState_setTextureCompareFunction(swigCPtr, (int)function);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public CompareFunction getTextureCompareFunction() {
    CompareFunction ret = (CompareFunction)OgrePINVOKE.TextureUnitState_getTextureCompareFunction(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTextureAnisotropy(uint maxAniso) {
    OgrePINVOKE.TextureUnitState_setTextureAnisotropy(swigCPtr, maxAniso);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getTextureAnisotropy() {
    uint ret = OgrePINVOKE.TextureUnitState_getTextureAnisotropy(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTextureMipmapBias(float bias) {
    OgrePINVOKE.TextureUnitState_setTextureMipmapBias(swigCPtr, bias);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getTextureMipmapBias() {
    float ret = OgrePINVOKE.TextureUnitState_getTextureMipmapBias(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setColourOperationEx(LayerBlendOperationEx op, LayerBlendSource source1, LayerBlendSource source2, ColourValue arg1, ColourValue arg2, float manualBlend) {
    OgrePINVOKE.TextureUnitState_setColourOperationEx__SWIG_0(swigCPtr, (int)op, (int)source1, (int)source2, ColourValue.getCPtr(arg1), ColourValue.getCPtr(arg2), manualBlend);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setColourOperationEx(LayerBlendOperationEx op, LayerBlendSource source1, LayerBlendSource source2, ColourValue arg1, ColourValue arg2) {
    OgrePINVOKE.TextureUnitState_setColourOperationEx__SWIG_1(swigCPtr, (int)op, (int)source1, (int)source2, ColourValue.getCPtr(arg1), ColourValue.getCPtr(arg2));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setColourOperationEx(LayerBlendOperationEx op, LayerBlendSource source1, LayerBlendSource source2, ColourValue arg1) {
    OgrePINVOKE.TextureUnitState_setColourOperationEx__SWIG_2(swigCPtr, (int)op, (int)source1, (int)source2, ColourValue.getCPtr(arg1));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setColourOperationEx(LayerBlendOperationEx op, LayerBlendSource source1, LayerBlendSource source2) {
    OgrePINVOKE.TextureUnitState_setColourOperationEx__SWIG_3(swigCPtr, (int)op, (int)source1, (int)source2);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setColourOperationEx(LayerBlendOperationEx op, LayerBlendSource source1) {
    OgrePINVOKE.TextureUnitState_setColourOperationEx__SWIG_4(swigCPtr, (int)op, (int)source1);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setColourOperationEx(LayerBlendOperationEx op) {
    OgrePINVOKE.TextureUnitState_setColourOperationEx__SWIG_5(swigCPtr, (int)op);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setColourOperation(LayerBlendOperation op) {
    OgrePINVOKE.TextureUnitState_setColourOperation(swigCPtr, (int)op);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setColourOpMultipassFallback(SceneBlendFactor sourceFactor, SceneBlendFactor destFactor) {
    OgrePINVOKE.TextureUnitState_setColourOpMultipassFallback(swigCPtr, (int)sourceFactor, (int)destFactor);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public LayerBlendModeEx getColourBlendMode() {
    LayerBlendModeEx ret = new LayerBlendModeEx(OgrePINVOKE.TextureUnitState_getColourBlendMode(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LayerBlendModeEx getAlphaBlendMode() {
    LayerBlendModeEx ret = new LayerBlendModeEx(OgrePINVOKE.TextureUnitState_getAlphaBlendMode(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneBlendFactor getColourBlendFallbackSrc() {
    SceneBlendFactor ret = (SceneBlendFactor)OgrePINVOKE.TextureUnitState_getColourBlendFallbackSrc(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneBlendFactor getColourBlendFallbackDest() {
    SceneBlendFactor ret = (SceneBlendFactor)OgrePINVOKE.TextureUnitState_getColourBlendFallbackDest(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAlphaOperation(LayerBlendOperationEx op, LayerBlendSource source1, LayerBlendSource source2, float arg1, float arg2, float manualBlend) {
    OgrePINVOKE.TextureUnitState_setAlphaOperation__SWIG_0(swigCPtr, (int)op, (int)source1, (int)source2, arg1, arg2, manualBlend);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAlphaOperation(LayerBlendOperationEx op, LayerBlendSource source1, LayerBlendSource source2, float arg1, float arg2) {
    OgrePINVOKE.TextureUnitState_setAlphaOperation__SWIG_1(swigCPtr, (int)op, (int)source1, (int)source2, arg1, arg2);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAlphaOperation(LayerBlendOperationEx op, LayerBlendSource source1, LayerBlendSource source2, float arg1) {
    OgrePINVOKE.TextureUnitState_setAlphaOperation__SWIG_2(swigCPtr, (int)op, (int)source1, (int)source2, arg1);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAlphaOperation(LayerBlendOperationEx op, LayerBlendSource source1, LayerBlendSource source2) {
    OgrePINVOKE.TextureUnitState_setAlphaOperation__SWIG_3(swigCPtr, (int)op, (int)source1, (int)source2);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAlphaOperation(LayerBlendOperationEx op, LayerBlendSource source1) {
    OgrePINVOKE.TextureUnitState_setAlphaOperation__SWIG_4(swigCPtr, (int)op, (int)source1);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAlphaOperation(LayerBlendOperationEx op) {
    OgrePINVOKE.TextureUnitState_setAlphaOperation__SWIG_5(swigCPtr, (int)op);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addEffect(TextureUnitState.TextureEffect effect) {
    OgrePINVOKE.TextureUnitState_addEffect(swigCPtr, TextureUnitState.TextureEffect.getCPtr(effect));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setEnvironmentMap(bool enable, TextureUnitState.EnvMapType texGenType) {
    OgrePINVOKE.TextureUnitState_setEnvironmentMap__SWIG_0(swigCPtr, enable, (int)texGenType);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setEnvironmentMap(bool enable) {
    OgrePINVOKE.TextureUnitState_setEnvironmentMap__SWIG_1(swigCPtr, enable);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setScrollAnimation(float uSpeed, float vSpeed) {
    OgrePINVOKE.TextureUnitState_setScrollAnimation(swigCPtr, uSpeed, vSpeed);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setRotateAnimation(float speed) {
    OgrePINVOKE.TextureUnitState_setRotateAnimation(swigCPtr, speed);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTransformAnimation(TextureUnitState.TextureTransformType ttype, WaveformType waveType, float base_, float frequency, float phase, float amplitude) {
    OgrePINVOKE.TextureUnitState_setTransformAnimation__SWIG_0(swigCPtr, (int)ttype, (int)waveType, base_, frequency, phase, amplitude);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTransformAnimation(TextureUnitState.TextureTransformType ttype, WaveformType waveType, float base_, float frequency, float phase) {
    OgrePINVOKE.TextureUnitState_setTransformAnimation__SWIG_1(swigCPtr, (int)ttype, (int)waveType, base_, frequency, phase);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTransformAnimation(TextureUnitState.TextureTransformType ttype, WaveformType waveType, float base_, float frequency) {
    OgrePINVOKE.TextureUnitState_setTransformAnimation__SWIG_2(swigCPtr, (int)ttype, (int)waveType, base_, frequency);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTransformAnimation(TextureUnitState.TextureTransformType ttype, WaveformType waveType, float base_) {
    OgrePINVOKE.TextureUnitState_setTransformAnimation__SWIG_3(swigCPtr, (int)ttype, (int)waveType, base_);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTransformAnimation(TextureUnitState.TextureTransformType ttype, WaveformType waveType) {
    OgrePINVOKE.TextureUnitState_setTransformAnimation__SWIG_4(swigCPtr, (int)ttype, (int)waveType);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setProjectiveTexturing(bool enabled, Frustum projectionSettings) {
    OgrePINVOKE.TextureUnitState_setProjectiveTexturing__SWIG_0(swigCPtr, enabled, Frustum.getCPtr(projectionSettings));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setProjectiveTexturing(bool enabled) {
    OgrePINVOKE.TextureUnitState_setProjectiveTexturing__SWIG_1(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeAllEffects() {
    OgrePINVOKE.TextureUnitState_removeAllEffects(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeEffect(TextureUnitState.TextureEffectType type) {
    OgrePINVOKE.TextureUnitState_removeEffect(swigCPtr, (int)type);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isBlank() {
    bool ret = OgrePINVOKE.TextureUnitState_isBlank(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBlank() {
    OgrePINVOKE.TextureUnitState_setBlank(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isTextureLoadFailing() {
    bool ret = OgrePINVOKE.TextureUnitState_isTextureLoadFailing(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void retryTextureLoad() {
    OgrePINVOKE.TextureUnitState_retryTextureLoad(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__multimapT_Ogre__TextureUnitState__TextureEffectType_Ogre__TextureUnitState__TextureEffect_t getEffects() {
    SWIGTYPE_p_std__multimapT_Ogre__TextureUnitState__TextureEffectType_Ogre__TextureUnitState__TextureEffect_t ret = new SWIGTYPE_p_std__multimapT_Ogre__TextureUnitState__TextureEffectType_Ogre__TextureUnitState__TextureEffect_t(OgrePINVOKE.TextureUnitState_getEffects(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getAnimationDuration() {
    float ret = OgrePINVOKE.TextureUnitState_getAnimationDuration(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isDefaultFiltering() {
    bool ret = OgrePINVOKE.TextureUnitState_isDefaultFiltering(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCompositorReference(string compositorName, string textureName, uint mrtIndex) {
    OgrePINVOKE.TextureUnitState_setCompositorReference__SWIG_0(swigCPtr, compositorName, textureName, mrtIndex);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setCompositorReference(string compositorName, string textureName) {
    OgrePINVOKE.TextureUnitState_setCompositorReference__SWIG_1(swigCPtr, compositorName, textureName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getReferencedCompositorName() {
    string ret = OgrePINVOKE.TextureUnitState_getReferencedCompositorName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getReferencedTextureName() {
    string ret = OgrePINVOKE.TextureUnitState_getReferencedTextureName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getReferencedMRTIndex() {
    uint ret = OgrePINVOKE.TextureUnitState_getReferencedMRTIndex(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Pass getParent() {
    global::System.IntPtr cPtr = OgrePINVOKE.TextureUnitState_getParent(swigCPtr);
    Pass ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pass(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _prepare() {
    OgrePINVOKE.TextureUnitState__prepare(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _unprepare() {
    OgrePINVOKE.TextureUnitState__unprepare(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _load() {
    OgrePINVOKE.TextureUnitState__load(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _unload() {
    OgrePINVOKE.TextureUnitState__unload(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isLoaded() {
    bool ret = OgrePINVOKE.TextureUnitState_isLoaded(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _notifyNeedsRecompile() {
    OgrePINVOKE.TextureUnitState__notifyNeedsRecompile(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setName(string name) {
    OgrePINVOKE.TextureUnitState_setName(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getName() {
    string ret = OgrePINVOKE.TextureUnitState_getName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _notifyParent(Pass parent) {
    OgrePINVOKE.TextureUnitState__notifyParent(swigCPtr, Pass.getCPtr(parent));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public TexturePtr _getTexturePtr() {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureUnitState__getTexturePtr__SWIG_0(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr _getTexturePtr(uint frame) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureUnitState__getTexturePtr__SWIG_1(swigCPtr, frame), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _setTexturePtr(TexturePtr texptr) {
    OgrePINVOKE.TextureUnitState__setTexturePtr__SWIG_0(swigCPtr, TexturePtr.getCPtr(texptr));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setTexturePtr(TexturePtr texptr, uint frame) {
    OgrePINVOKE.TextureUnitState__setTexturePtr__SWIG_1(swigCPtr, TexturePtr.getCPtr(texptr), frame);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint calculateSize() {
    uint ret = OgrePINVOKE.TextureUnitState_calculateSize(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ControllerFloat _getAnimController() {
    global::System.IntPtr cPtr = OgrePINVOKE.TextureUnitState__getAnimController(swigCPtr);
    ControllerFloat ret = (cPtr == global::System.IntPtr.Zero) ? null : new ControllerFloat(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t _getLocalSampler() {
    SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t ret = new SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t(OgrePINVOKE.TextureUnitState__getLocalSampler(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexCoordCalcMethod _deriveTexCoordCalcMethod() {
    TexCoordCalcMethod ret = (TexCoordCalcMethod)OgrePINVOKE.TextureUnitState__deriveTexCoordCalcMethod(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum TextureEffectType {
    ET_ENVIRONMENT_MAP,
    ET_PROJECTIVE_TEXTURE,
    ET_UVSCROLL,
    ET_USCROLL,
    ET_VSCROLL,
    ET_ROTATE,
    ET_TRANSFORM
  }

  public enum EnvMapType {
    ENV_PLANAR,
    ENV_CURVED,
    ENV_REFLECTION,
    ENV_NORMAL
  }

  public enum TextureTransformType {
    TT_TRANSLATE_U,
    TT_TRANSLATE_V,
    TT_SCALE_U,
    TT_SCALE_V,
    TT_ROTATE
  }

  public static readonly TextureAddressingMode TAM_WRAP = (TextureAddressingMode)OgrePINVOKE.TextureUnitState_TAM_WRAP_get();
  public static readonly TextureAddressingMode TAM_MIRROR = (TextureAddressingMode)OgrePINVOKE.TextureUnitState_TAM_MIRROR_get();
  public static readonly TextureAddressingMode TAM_CLAMP = (TextureAddressingMode)OgrePINVOKE.TextureUnitState_TAM_CLAMP_get();
  public static readonly TextureAddressingMode TAM_BORDER = (TextureAddressingMode)OgrePINVOKE.TextureUnitState_TAM_BORDER_get();
  public enum TextureCubeFace {
    CUBE_FRONT = 0,
    CUBE_BACK = 1,
    CUBE_LEFT = 2,
    CUBE_RIGHT = 3,
    CUBE_UP = 4,
    CUBE_DOWN = 5
  }

  public enum ContentType {
    CONTENT_NAMED = 0,
    CONTENT_SHADOW = 1,
    CONTENT_COMPOSITOR = 2
  }

}

}
