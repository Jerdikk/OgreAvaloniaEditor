//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ColourValue : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ColourValue(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ColourValue obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ColourValue() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_ColourValue(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static ColourValue ZERO {
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.ColourValue_ZERO_get();
      ColourValue ret = (cPtr == global::System.IntPtr.Zero) ? null : new ColourValue(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ColourValue Black {
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.ColourValue_Black_get();
      ColourValue ret = (cPtr == global::System.IntPtr.Zero) ? null : new ColourValue(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ColourValue White {
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.ColourValue_White_get();
      ColourValue ret = (cPtr == global::System.IntPtr.Zero) ? null : new ColourValue(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ColourValue Red {
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.ColourValue_Red_get();
      ColourValue ret = (cPtr == global::System.IntPtr.Zero) ? null : new ColourValue(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ColourValue Green {
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.ColourValue_Green_get();
      ColourValue ret = (cPtr == global::System.IntPtr.Zero) ? null : new ColourValue(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ColourValue Blue {
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.ColourValue_Blue_get();
      ColourValue ret = (cPtr == global::System.IntPtr.Zero) ? null : new ColourValue(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ColourValue(float red, float green, float blue, float alpha) : this(OgrePINVOKE.new_ColourValue__SWIG_0(red, green, blue, alpha), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ColourValue(float red, float green, float blue) : this(OgrePINVOKE.new_ColourValue__SWIG_1(red, green, blue), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ColourValue(float red, float green) : this(OgrePINVOKE.new_ColourValue__SWIG_2(red, green), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ColourValue(float red) : this(OgrePINVOKE.new_ColourValue__SWIG_3(red), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ColourValue() : this(OgrePINVOKE.new_ColourValue__SWIG_4(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ColourValue(SWIGTYPE_p_unsigned_char byte_) : this(OgrePINVOKE.new_ColourValue__SWIG_5(SWIGTYPE_p_unsigned_char.getCPtr(byte_)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float r {
    set {
      OgrePINVOKE.ColourValue_r_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgrePINVOKE.ColourValue_r_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float g {
    set {
      OgrePINVOKE.ColourValue_g_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgrePINVOKE.ColourValue_g_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float b {
    set {
      OgrePINVOKE.ColourValue_b_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgrePINVOKE.ColourValue_b_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float a {
    set {
      OgrePINVOKE.ColourValue_a_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgrePINVOKE.ColourValue_a_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint getAsRGBA() {
    uint ret = OgrePINVOKE.ColourValue_getAsRGBA(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getAsARGB() {
    uint ret = OgrePINVOKE.ColourValue_getAsARGB(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getAsBGRA() {
    uint ret = OgrePINVOKE.ColourValue_getAsBGRA(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getAsABGR() {
    uint ret = OgrePINVOKE.ColourValue_getAsABGR(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getAsBYTE() {
    uint ret = OgrePINVOKE.ColourValue_getAsBYTE(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAsRGBA(uint val) {
    OgrePINVOKE.ColourValue_setAsRGBA(swigCPtr, val);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAsARGB(uint val) {
    OgrePINVOKE.ColourValue_setAsARGB(swigCPtr, val);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAsBGRA(uint val) {
    OgrePINVOKE.ColourValue_setAsBGRA(swigCPtr, val);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAsABGR(uint val) {
    OgrePINVOKE.ColourValue_setAsABGR(swigCPtr, val);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void saturate() {
    OgrePINVOKE.ColourValue_saturate(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ColourValue saturateCopy() {
    ColourValue ret = new ColourValue(OgrePINVOKE.ColourValue_saturateCopy(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_float ptr() {
    global::System.IntPtr cPtr = OgrePINVOKE.ColourValue_ptr__SWIG_0(swigCPtr);
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ColourValue __add__(ColourValue rkVector) {
    ColourValue ret = new ColourValue(OgrePINVOKE.ColourValue___add__(swigCPtr, ColourValue.getCPtr(rkVector)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ColourValue __sub__(ColourValue rkVector) {
    ColourValue ret = new ColourValue(OgrePINVOKE.ColourValue___sub__(swigCPtr, ColourValue.getCPtr(rkVector)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ColourValue __mul__(float fScalar) {
    ColourValue ret = new ColourValue(OgrePINVOKE.ColourValue___mul____SWIG_0(swigCPtr, fScalar), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ColourValue __mul__(ColourValue rhs) {
    ColourValue ret = new ColourValue(OgrePINVOKE.ColourValue___mul____SWIG_1(swigCPtr, ColourValue.getCPtr(rhs)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ColourValue __div__(ColourValue rhs) {
    ColourValue ret = new ColourValue(OgrePINVOKE.ColourValue___div____SWIG_0(swigCPtr, ColourValue.getCPtr(rhs)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ColourValue __div__(float fScalar) {
    ColourValue ret = new ColourValue(OgrePINVOKE.ColourValue___div____SWIG_1(swigCPtr, fScalar), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setHSB(float hue, float saturation, float brightness) {
    OgrePINVOKE.ColourValue_setHSB(swigCPtr, hue, saturation, brightness);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void getHSB(SWIGTYPE_p_float hue, SWIGTYPE_p_float saturation, SWIGTYPE_p_float brightness) {
    OgrePINVOKE.ColourValue_getHSB__SWIG_0(swigCPtr, SWIGTYPE_p_float.getCPtr(hue), SWIGTYPE_p_float.getCPtr(saturation), SWIGTYPE_p_float.getCPtr(brightness));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void __setitem__(uint i, float v) {
    OgrePINVOKE.ColourValue___setitem__(swigCPtr, i, v);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint __len__() {
    uint ret = OgrePINVOKE.ColourValue___len__(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float __getitem__(uint i) {
    float ret = OgrePINVOKE.ColourValue___getitem__(swigCPtr, i);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string ToString() {
    string ret = OgrePINVOKE.ColourValue_ToString(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
