//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class Codec : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Codec(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Codec obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Codec() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_Codec(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static void registerCodec(Codec pCodec) {
    OgrePINVOKE.Codec_registerCodec(Codec.getCPtr(pCodec));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool isCodecRegistered(string codecType) {
    bool ret = OgrePINVOKE.Codec_isCodecRegistered(codecType);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void unregisterCodec(Codec pCodec) {
    OgrePINVOKE.Codec_unregisterCodec(Codec.getCPtr(pCodec));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static StringList getExtensions() {
    StringList ret = new StringList(OgrePINVOKE.Codec_getExtensions(), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Codec getCodec(string extension) {
    global::System.IntPtr cPtr = OgrePINVOKE.Codec_getCodec__SWIG_0(extension);
    Codec ret = (cPtr == global::System.IntPtr.Zero) ? null : new Codec(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Codec getCodec(string magicNumberPtr, uint maxbytes) {
    global::System.IntPtr cPtr = OgrePINVOKE.Codec_getCodec__SWIG_1(magicNumberPtr, maxbytes);
    Codec ret = (cPtr == global::System.IntPtr.Zero) ? null : new Codec(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DataStreamPtr encode(Any input) {
    DataStreamPtr ret = new DataStreamPtr(OgrePINVOKE.Codec_encode(swigCPtr, Any.getCPtr(input)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void encodeToFile(Any input, string outFileName) {
    OgrePINVOKE.Codec_encodeToFile(swigCPtr, Any.getCPtr(input), outFileName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void decode(DataStreamPtr input, Any output) {
    OgrePINVOKE.Codec_decode(swigCPtr, DataStreamPtr.getCPtr(input), Any.getCPtr(output));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string getType() {
    string ret = OgrePINVOKE.Codec_getType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool magicNumberMatch(string magicNumberPtr, uint maxbytes) {
    bool ret = OgrePINVOKE.Codec_magicNumberMatch(swigCPtr, magicNumberPtr, maxbytes);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string magicNumberToFileExt(string magicNumberPtr, uint maxbytes) {
    string ret = OgrePINVOKE.Codec_magicNumberToFileExt(swigCPtr, magicNumberPtr, maxbytes);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
