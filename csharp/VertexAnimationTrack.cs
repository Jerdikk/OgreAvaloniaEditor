//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class VertexAnimationTrack : AnimationTrack {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal VertexAnimationTrack(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.VertexAnimationTrack_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VertexAnimationTrack obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_VertexAnimationTrack(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public VertexAnimationTrack(Animation parent, ushort handle, VertexAnimationType animType) : this(OgrePINVOKE.new_VertexAnimationTrack__SWIG_0(Animation.getCPtr(parent), handle, (int)animType), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public VertexAnimationTrack(Animation parent, ushort handle, VertexAnimationType animType, VertexData targetData, VertexAnimationTrack.TargetMode target) : this(OgrePINVOKE.new_VertexAnimationTrack__SWIG_1(Animation.getCPtr(parent), handle, (int)animType, VertexData.getCPtr(targetData), (int)target), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public VertexAnimationTrack(Animation parent, ushort handle, VertexAnimationType animType, VertexData targetData) : this(OgrePINVOKE.new_VertexAnimationTrack__SWIG_2(Animation.getCPtr(parent), handle, (int)animType, VertexData.getCPtr(targetData)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public VertexAnimationType getAnimationType() {
    VertexAnimationType ret = (VertexAnimationType)OgrePINVOKE.VertexAnimationTrack_getAnimationType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getVertexAnimationIncludesNormals() {
    bool ret = OgrePINVOKE.VertexAnimationTrack_getVertexAnimationIncludesNormals(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual VertexMorphKeyFrame createVertexMorphKeyFrame(float timePos) {
    global::System.IntPtr cPtr = OgrePINVOKE.VertexAnimationTrack_createVertexMorphKeyFrame(swigCPtr, timePos);
    VertexMorphKeyFrame ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexMorphKeyFrame(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual VertexPoseKeyFrame createVertexPoseKeyFrame(float timePos) {
    global::System.IntPtr cPtr = OgrePINVOKE.VertexAnimationTrack_createVertexPoseKeyFrame(swigCPtr, timePos);
    VertexPoseKeyFrame ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexPoseKeyFrame(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void getInterpolatedKeyFrame(TimeIndex timeIndex, KeyFrame kf) {
    OgrePINVOKE.VertexAnimationTrack_getInterpolatedKeyFrame(swigCPtr, TimeIndex.getCPtr(timeIndex), KeyFrame.getCPtr(kf));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void apply(TimeIndex timeIndex, float weight, float scale) {
    OgrePINVOKE.VertexAnimationTrack_apply__SWIG_0(swigCPtr, TimeIndex.getCPtr(timeIndex), weight, scale);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void apply(TimeIndex timeIndex, float weight) {
    OgrePINVOKE.VertexAnimationTrack_apply__SWIG_1(swigCPtr, TimeIndex.getCPtr(timeIndex), weight);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void apply(TimeIndex timeIndex) {
    OgrePINVOKE.VertexAnimationTrack_apply__SWIG_2(swigCPtr, TimeIndex.getCPtr(timeIndex));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void applyToVertexData(VertexData data, TimeIndex timeIndex, float weight, PoseList poseList) {
    OgrePINVOKE.VertexAnimationTrack_applyToVertexData__SWIG_0(swigCPtr, VertexData.getCPtr(data), TimeIndex.getCPtr(timeIndex), weight, PoseList.getCPtr(poseList));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void applyToVertexData(VertexData data, TimeIndex timeIndex, float weight) {
    OgrePINVOKE.VertexAnimationTrack_applyToVertexData__SWIG_1(swigCPtr, VertexData.getCPtr(data), TimeIndex.getCPtr(timeIndex), weight);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void applyToVertexData(VertexData data, TimeIndex timeIndex) {
    OgrePINVOKE.VertexAnimationTrack_applyToVertexData__SWIG_2(swigCPtr, VertexData.getCPtr(data), TimeIndex.getCPtr(timeIndex));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public VertexMorphKeyFrame getVertexMorphKeyFrame(ushort index) {
    global::System.IntPtr cPtr = OgrePINVOKE.VertexAnimationTrack_getVertexMorphKeyFrame(swigCPtr, index);
    VertexMorphKeyFrame ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexMorphKeyFrame(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VertexPoseKeyFrame getVertexPoseKeyFrame(ushort index) {
    global::System.IntPtr cPtr = OgrePINVOKE.VertexAnimationTrack_getVertexPoseKeyFrame(swigCPtr, index);
    VertexPoseKeyFrame ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexPoseKeyFrame(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAssociatedVertexData(VertexData data) {
    OgrePINVOKE.VertexAnimationTrack_setAssociatedVertexData(swigCPtr, VertexData.getCPtr(data));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public VertexData getAssociatedVertexData() {
    global::System.IntPtr cPtr = OgrePINVOKE.VertexAnimationTrack_getAssociatedVertexData(swigCPtr);
    VertexData ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexData(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTargetMode(VertexAnimationTrack.TargetMode m) {
    OgrePINVOKE.VertexAnimationTrack_setTargetMode(swigCPtr, (int)m);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public VertexAnimationTrack.TargetMode getTargetMode() {
    VertexAnimationTrack.TargetMode ret = (VertexAnimationTrack.TargetMode)OgrePINVOKE.VertexAnimationTrack_getTargetMode(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool hasNonZeroKeyFrames() {
    bool ret = OgrePINVOKE.VertexAnimationTrack_hasNonZeroKeyFrames(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void optimise() {
    OgrePINVOKE.VertexAnimationTrack_optimise(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public VertexAnimationTrack _clone(Animation newParent) {
    global::System.IntPtr cPtr = OgrePINVOKE.VertexAnimationTrack__clone(swigCPtr, Animation.getCPtr(newParent));
    VertexAnimationTrack ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexAnimationTrack(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void _applyBaseKeyFrame(KeyFrame base_) {
    OgrePINVOKE.VertexAnimationTrack__applyBaseKeyFrame(swigCPtr, KeyFrame.getCPtr(base_));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum TargetMode {
    TM_SOFTWARE,
    TM_HARDWARE
  }

}

}
