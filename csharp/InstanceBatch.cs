//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class InstanceBatch : Renderable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal InstanceBatch(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.InstanceBatch_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(InstanceBatch obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_InstanceBatch(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public MeshPtr _getMeshRef() {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.InstanceBatch__getMeshRef(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _setInstancesPerBatch(uint instancesPerBatch) {
    OgrePINVOKE.InstanceBatch__setInstancesPerBatch(swigCPtr, instancesPerBatch);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_unsigned_short_t _getIndexToBoneMap() {
    global::System.IntPtr cPtr = OgrePINVOKE.InstanceBatch__getIndexToBoneMap(swigCPtr);
    SWIGTYPE_p_std__vectorT_unsigned_short_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_unsigned_short_t(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool _supportsSkeletalAnimation() {
    bool ret = OgrePINVOKE.InstanceBatch__supportsSkeletalAnimation(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _updateBounds() {
    OgrePINVOKE.InstanceBatch__updateBounds(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual uint calculateMaxNumInstances(SubMesh baseSubMesh, ushort flags) {
    uint ret = OgrePINVOKE.InstanceBatch_calculateMaxNumInstances(swigCPtr, SubMesh.getCPtr(baseSubMesh), flags);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual RenderOperation build(SubMesh baseSubMesh) {
    RenderOperation ret = new RenderOperation(OgrePINVOKE.InstanceBatch_build(swigCPtr, SubMesh.getCPtr(baseSubMesh)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void buildFrom(SubMesh baseSubMesh, RenderOperation renderOperation) {
    OgrePINVOKE.InstanceBatch_buildFrom(swigCPtr, SubMesh.getCPtr(baseSubMesh), RenderOperation.getCPtr(renderOperation));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public MeshPtr _getMeshReference() {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.InstanceBatch__getMeshReference(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isBatchFull() {
    bool ret = OgrePINVOKE.InstanceBatch_isBatchFull(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isBatchUnused() {
    bool ret = OgrePINVOKE.InstanceBatch_isBatchUnused(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getInstancedEntitiesInUse(SWIGTYPE_p_std__vectorT_Ogre__InstancedEntity_p_t outEntities, SWIGTYPE_p_std__vectorT_Ogre__VectorT_4_Ogre__Real_t_t outParams) {
    OgrePINVOKE.InstanceBatch_getInstancedEntitiesInUse(swigCPtr, SWIGTYPE_p_std__vectorT_Ogre__InstancedEntity_p_t.getCPtr(outEntities), SWIGTYPE_p_std__vectorT_Ogre__VectorT_4_Ogre__Real_t_t.getCPtr(outParams));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _defragmentBatch(bool optimizeCulling, SWIGTYPE_p_std__vectorT_Ogre__InstancedEntity_p_t usedEntities, SWIGTYPE_p_std__vectorT_Ogre__VectorT_4_Ogre__Real_t_t usedParams) {
    OgrePINVOKE.InstanceBatch__defragmentBatch(swigCPtr, optimizeCulling, SWIGTYPE_p_std__vectorT_Ogre__InstancedEntity_p_t.getCPtr(usedEntities), SWIGTYPE_p_std__vectorT_Ogre__VectorT_4_Ogre__Real_t_t.getCPtr(usedParams));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _defragmentBatchDiscard() {
    OgrePINVOKE.InstanceBatch__defragmentBatchDiscard(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _boundsDirty() {
    OgrePINVOKE.InstanceBatch__boundsDirty(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setStaticAndUpdate(bool bStatic) {
    OgrePINVOKE.InstanceBatch_setStaticAndUpdate(swigCPtr, bStatic);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool isStatic() {
    bool ret = OgrePINVOKE.InstanceBatch_isStatic(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public InstancedEntity createInstancedEntity() {
    global::System.IntPtr cPtr = OgrePINVOKE.InstanceBatch_createInstancedEntity(swigCPtr);
    InstancedEntity ret = (cPtr == global::System.IntPtr.Zero) ? null : new InstancedEntity(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeInstancedEntity(InstancedEntity instancedEntity) {
    OgrePINVOKE.InstanceBatch_removeInstancedEntity(swigCPtr, InstancedEntity.getCPtr(instancedEntity));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool useBoneWorldMatrices() {
    bool ret = OgrePINVOKE.InstanceBatch_useBoneWorldMatrices(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _markTransformSharingDirty() {
    OgrePINVOKE.InstanceBatch__markTransformSharingDirty(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setCustomParam(InstancedEntity instancedEntity, byte idx, Vector4 newParam) {
    OgrePINVOKE.InstanceBatch__setCustomParam(swigCPtr, InstancedEntity.getCPtr(instancedEntity), idx, Vector4.getCPtr(newParam));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector4 _getCustomParam(InstancedEntity instancedEntity, byte idx) {
    Vector4 ret = new Vector4(OgrePINVOKE.InstanceBatch__getCustomParam(swigCPtr, InstancedEntity.getCPtr(instancedEntity), idx), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr getMaterial() {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.InstanceBatch_getMaterial(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getRenderOperation(RenderOperation op) {
    OgrePINVOKE.InstanceBatch_getRenderOperation(swigCPtr, RenderOperation.getCPtr(op));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getSquaredViewDepth(Camera cam) {
    float ret = OgrePINVOKE.InstanceBatch_getSquaredViewDepth(swigCPtr, Camera.getCPtr(cam));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Ogre__Light_p_t getLights() {
    SWIGTYPE_p_std__vectorT_Ogre__Light_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__Light_p_t(OgrePINVOKE.InstanceBatch_getLights(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getMovableType() {
    string ret = OgrePINVOKE.InstanceBatch_getMovableType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _notifyCurrentCamera(Camera cam) {
    OgrePINVOKE.InstanceBatch__notifyCurrentCamera(swigCPtr, Camera.getCPtr(cam));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public AxisAlignedBox getBoundingBox() {
    AxisAlignedBox ret = new AxisAlignedBox(OgrePINVOKE.InstanceBatch_getBoundingBox(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getBoundingRadius() {
    float ret = OgrePINVOKE.InstanceBatch_getBoundingRadius(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _updateRenderQueue(RenderQueue queue) {
    OgrePINVOKE.InstanceBatch__updateRenderQueue(swigCPtr, RenderQueue.getCPtr(queue));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void visitRenderables(Renderable.Visitor visitor, bool debugRenderables) {
    OgrePINVOKE.InstanceBatch_visitRenderables__SWIG_0(swigCPtr, Renderable.Visitor.getCPtr(visitor), debugRenderables);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void visitRenderables(Renderable.Visitor visitor) {
    OgrePINVOKE.InstanceBatch_visitRenderables__SWIG_1(swigCPtr, Renderable.Visitor.getCPtr(visitor));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
