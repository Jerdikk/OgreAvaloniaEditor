//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class HardwarePixelBuffer : HardwareBuffer {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal HardwarePixelBuffer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.HardwarePixelBuffer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(HardwarePixelBuffer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_HardwarePixelBuffer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public PixelBox lock_(Box lockBox, HardwareBuffer.LockOptions options) {
    PixelBox ret = new PixelBox(OgrePINVOKE.HardwarePixelBuffer_lock___SWIG_0(swigCPtr, Box.getCPtr(lockBox), (int)options), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override global::System.IntPtr lock_(uint offset, uint length, HardwareBuffer.LockOptions options) {
    global::System.IntPtr ret = OgrePINVOKE.HardwarePixelBuffer_lock___SWIG_1(swigCPtr, offset, length, (int)options);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PixelBox getCurrentLock() {
    PixelBox ret = new PixelBox(OgrePINVOKE.HardwarePixelBuffer_getCurrentLock(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void readData(uint offset, uint length, global::System.IntPtr pDest) {
    OgrePINVOKE.HardwarePixelBuffer_readData(swigCPtr, offset, length, pDest);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void writeData(uint offset, uint length, global::System.IntPtr pSource, bool discardWholeBuffer) {
    OgrePINVOKE.HardwarePixelBuffer_writeData__SWIG_0(swigCPtr, offset, length, pSource, discardWholeBuffer);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void writeData(uint offset, uint length, global::System.IntPtr pSource) {
    OgrePINVOKE.HardwarePixelBuffer_writeData__SWIG_1(swigCPtr, offset, length, pSource);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void blit(HardwarePixelBufferPtr src, Box srcBox, Box dstBox) {
    OgrePINVOKE.HardwarePixelBuffer_blit__SWIG_0(swigCPtr, HardwarePixelBufferPtr.getCPtr(src), Box.getCPtr(srcBox), Box.getCPtr(dstBox));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void blit(HardwarePixelBufferPtr src) {
    OgrePINVOKE.HardwarePixelBuffer_blit__SWIG_1(swigCPtr, HardwarePixelBufferPtr.getCPtr(src));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void blitFromMemory(PixelBox src, Box dstBox) {
    OgrePINVOKE.HardwarePixelBuffer_blitFromMemory__SWIG_0(swigCPtr, PixelBox.getCPtr(src), Box.getCPtr(dstBox));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void blitFromMemory(PixelBox src) {
    OgrePINVOKE.HardwarePixelBuffer_blitFromMemory__SWIG_1(swigCPtr, PixelBox.getCPtr(src));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void blitToMemory(Box srcBox, PixelBox dst) {
    OgrePINVOKE.HardwarePixelBuffer_blitToMemory__SWIG_0(swigCPtr, Box.getCPtr(srcBox), PixelBox.getCPtr(dst));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void blitToMemory(PixelBox dst) {
    OgrePINVOKE.HardwarePixelBuffer_blitToMemory__SWIG_1(swigCPtr, PixelBox.getCPtr(dst));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public RenderTexture getRenderTarget(uint slice) {
    global::System.IntPtr cPtr = OgrePINVOKE.HardwarePixelBuffer_getRenderTarget__SWIG_0(swigCPtr, slice);
    RenderTexture ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderTexture(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RenderTexture getRenderTarget() {
    global::System.IntPtr cPtr = OgrePINVOKE.HardwarePixelBuffer_getRenderTarget__SWIG_1(swigCPtr);
    RenderTexture ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderTexture(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getWidth() {
    uint ret = OgrePINVOKE.HardwarePixelBuffer_getWidth(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getHeight() {
    uint ret = OgrePINVOKE.HardwarePixelBuffer_getHeight(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getDepth() {
    uint ret = OgrePINVOKE.HardwarePixelBuffer_getDepth(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3i getSize() {
    Vector3i ret = new Vector3i(OgrePINVOKE.HardwarePixelBuffer_getSize(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PixelFormat getFormat() {
    PixelFormat ret = (PixelFormat)OgrePINVOKE.HardwarePixelBuffer_getFormat(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
