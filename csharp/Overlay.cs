//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class Overlay : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Overlay(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Overlay obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Overlay() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreOverlayPINVOKE.delete_Overlay(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Overlay(string name) : this(OgreOverlayPINVOKE.new_Overlay(name), true) {
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public OverlayContainer getChild(string name) {
    global::System.IntPtr cPtr = OgreOverlayPINVOKE.Overlay_getChild(swigCPtr, name);
    OverlayContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new OverlayContainer(cPtr, false);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getName() {
    string ret = OgreOverlayPINVOKE.Overlay_getName(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setZOrder(ushort zorder) {
    OgreOverlayPINVOKE.Overlay_setZOrder(swigCPtr, zorder);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getZOrder() {
    ushort ret = OgreOverlayPINVOKE.Overlay_getZOrder(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isVisible() {
    bool ret = OgreOverlayPINVOKE.Overlay_isVisible(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isInitialised() {
    bool ret = OgreOverlayPINVOKE.Overlay_isInitialised(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void show() {
    OgreOverlayPINVOKE.Overlay_show(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void hide() {
    OgreOverlayPINVOKE.Overlay_hide(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVisible(bool visible) {
    OgreOverlayPINVOKE.Overlay_setVisible(swigCPtr, visible);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void add2D(OverlayContainer cont) {
    OgreOverlayPINVOKE.Overlay_add2D(swigCPtr, OverlayContainer.getCPtr(cont));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void remove2D(OverlayContainer cont) {
    OgreOverlayPINVOKE.Overlay_remove2D(swigCPtr, OverlayContainer.getCPtr(cont));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void add3D(SceneNode node) {
    OgreOverlayPINVOKE.Overlay_add3D(swigCPtr, SceneNode.getCPtr(node));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void remove3D(SceneNode node) {
    OgreOverlayPINVOKE.Overlay_remove3D(swigCPtr, SceneNode.getCPtr(node));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    OgreOverlayPINVOKE.Overlay_clear(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setScroll(float x, float y) {
    OgreOverlayPINVOKE.Overlay_setScroll(swigCPtr, x, y);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getScrollX() {
    float ret = OgreOverlayPINVOKE.Overlay_getScrollX(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getScrollY() {
    float ret = OgreOverlayPINVOKE.Overlay_getScrollY(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void scroll(float xoff, float yoff) {
    OgreOverlayPINVOKE.Overlay_scroll(swigCPtr, xoff, yoff);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setRotate(Radian angle) {
    OgreOverlayPINVOKE.Overlay_setRotate(swigCPtr, Radian.getCPtr(angle));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public Radian getRotate() {
    Radian ret = new Radian(OgreOverlayPINVOKE.Overlay_getRotate(swigCPtr), false);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void rotate(Radian angle) {
    OgreOverlayPINVOKE.Overlay_rotate(swigCPtr, Radian.getCPtr(angle));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setScale(float x, float y) {
    OgreOverlayPINVOKE.Overlay_setScale(swigCPtr, x, y);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getScaleX() {
    float ret = OgreOverlayPINVOKE.Overlay_getScaleX(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getScaleY() {
    float ret = OgreOverlayPINVOKE.Overlay_getScaleY(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _getWorldTransforms(Matrix4 xform) {
    OgreOverlayPINVOKE.Overlay__getWorldTransforms(swigCPtr, Matrix4.getCPtr(xform));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _findVisibleObjects(Camera cam, RenderQueue queue, Viewport vp) {
    OgreOverlayPINVOKE.Overlay__findVisibleObjects(swigCPtr, Camera.getCPtr(cam), RenderQueue.getCPtr(queue), Viewport.getCPtr(vp));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual OverlayElement findElementAt(float x, float y) {
    global::System.IntPtr cPtr = OgreOverlayPINVOKE.Overlay_findElementAt(swigCPtr, x, y);
    OverlayElement ret = (cPtr == global::System.IntPtr.Zero) ? null : new OverlayElement(cPtr, false);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__listT_Ogre__OverlayContainer_p_t get2DElements() {
    SWIGTYPE_p_std__listT_Ogre__OverlayContainer_p_t ret = new SWIGTYPE_p_std__listT_Ogre__OverlayContainer_p_t(OgreOverlayPINVOKE.Overlay_get2DElements(swigCPtr), false);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getOrigin() {
    string ret = OgreOverlayPINVOKE.Overlay_getOrigin(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _notifyOrigin(string origin) {
    OgreOverlayPINVOKE.Overlay__notifyOrigin(swigCPtr, origin);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
