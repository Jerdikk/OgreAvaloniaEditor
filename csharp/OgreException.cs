//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class OgreException : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal OgreException(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OgreException obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~OgreException() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_OgreException(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public OgreException(int number, string description, string source) : this(OgrePINVOKE.new_OgreException__SWIG_0(number, description, source), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public OgreException(int number, string description, string source, string type, string file, int line) : this(OgrePINVOKE.new_OgreException__SWIG_1(number, description, source, type, file, line), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public OgreException(OgreException rhs) : this(OgrePINVOKE.new_OgreException__SWIG_2(OgreException.getCPtr(rhs)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getFullDescription() {
    string ret = OgrePINVOKE.OgreException_getFullDescription(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getSource() {
    string ret = OgrePINVOKE.OgreException_getSource(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getFile() {
    string ret = OgrePINVOKE.OgreException_getFile(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getLine() {
    int ret = OgrePINVOKE.OgreException_getLine(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getDescription() {
    string ret = OgrePINVOKE.OgreException_getDescription(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string what() {
    string ret = OgrePINVOKE.OgreException_what(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum ExceptionCodes {
    ERR_CANNOT_WRITE_TO_FILE,
    ERR_INVALID_STATE,
    ERR_INVALIDPARAMS,
    ERR_RENDERINGAPI_ERROR,
    ERR_DUPLICATE_ITEM,
    ERR_ITEM_NOT_FOUND = ERR_DUPLICATE_ITEM,
    ERR_FILE_NOT_FOUND,
    ERR_INTERNAL_ERROR,
    ERR_RT_ASSERTION_FAILED,
    ERR_NOT_IMPLEMENTED,
    ERR_INVALID_CALL
  }

}

}
