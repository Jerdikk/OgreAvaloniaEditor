//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class LiSPSMShadowCameraSetupPtr : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LiSPSMShadowCameraSetupPtr(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LiSPSMShadowCameraSetupPtr obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~LiSPSMShadowCameraSetupPtr() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_LiSPSMShadowCameraSetupPtr(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public LiSPSMShadowCameraSetupPtr(SWIGTYPE_p_std__nullptr_t arg0) : this(OgrePINVOKE.new_LiSPSMShadowCameraSetupPtr__SWIG_0(SWIGTYPE_p_std__nullptr_t.getCPtr(arg0)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public LiSPSMShadowCameraSetupPtr() : this(OgrePINVOKE.new_LiSPSMShadowCameraSetupPtr__SWIG_1(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public LiSPSMShadowCameraSetupPtr(LiSPSMShadowCameraSetupPtr r) : this(OgrePINVOKE.new_LiSPSMShadowCameraSetupPtr__SWIG_2(LiSPSMShadowCameraSetupPtr.getCPtr(r)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public LiSPSMShadowCameraSetup __deref__() {
    global::System.IntPtr cPtr = OgrePINVOKE.LiSPSMShadowCameraSetupPtr___deref__(swigCPtr);
    LiSPSMShadowCameraSetup ret = (cPtr == global::System.IntPtr.Zero) ? null : new LiSPSMShadowCameraSetup(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ShadowCameraSetupPtr create(float n, bool useSimpleNOpt, Degree angle) {
    ShadowCameraSetupPtr ret = new ShadowCameraSetupPtr(OgrePINVOKE.LiSPSMShadowCameraSetupPtr_create__SWIG_0(swigCPtr, n, useSimpleNOpt, Degree.getCPtr(angle)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ShadowCameraSetupPtr create(float n, bool useSimpleNOpt) {
    ShadowCameraSetupPtr ret = new ShadowCameraSetupPtr(OgrePINVOKE.LiSPSMShadowCameraSetupPtr_create__SWIG_1(swigCPtr, n, useSimpleNOpt), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ShadowCameraSetupPtr create(float n) {
    ShadowCameraSetupPtr ret = new ShadowCameraSetupPtr(OgrePINVOKE.LiSPSMShadowCameraSetupPtr_create__SWIG_2(swigCPtr, n), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ShadowCameraSetupPtr create() {
    ShadowCameraSetupPtr ret = new ShadowCameraSetupPtr(OgrePINVOKE.LiSPSMShadowCameraSetupPtr_create__SWIG_3(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getShadowCamera(SceneManager sm, Camera cam, Viewport vp, Light light, Camera texCam, uint iteration) {
    OgrePINVOKE.LiSPSMShadowCameraSetupPtr_getShadowCamera(swigCPtr, SceneManager.getCPtr(sm), Camera.getCPtr(cam), Viewport.getCPtr(vp), Light.getCPtr(light), Camera.getCPtr(texCam), iteration);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setOptimalAdjustFactor(float n) {
    OgrePINVOKE.LiSPSMShadowCameraSetupPtr_setOptimalAdjustFactor(swigCPtr, n);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getOptimalAdjustFactor() {
    float ret = OgrePINVOKE.LiSPSMShadowCameraSetupPtr_getOptimalAdjustFactor(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setUseSimpleOptimalAdjust(bool s) {
    OgrePINVOKE.LiSPSMShadowCameraSetupPtr_setUseSimpleOptimalAdjust(swigCPtr, s);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getUseSimpleOptimalAdjust() {
    bool ret = OgrePINVOKE.LiSPSMShadowCameraSetupPtr_getUseSimpleOptimalAdjust(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCameraLightDirectionThreshold(Degree angle) {
    OgrePINVOKE.LiSPSMShadowCameraSetupPtr_setCameraLightDirectionThreshold(swigCPtr, Degree.getCPtr(angle));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Degree getCameraLightDirectionThreshold() {
    Degree ret = new Degree(OgrePINVOKE.LiSPSMShadowCameraSetupPtr_getCameraLightDirectionThreshold(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setUseAggressiveFocusRegion(bool aggressive) {
    OgrePINVOKE.LiSPSMShadowCameraSetupPtr_setUseAggressiveFocusRegion(swigCPtr, aggressive);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getUseAggressiveFocusRegion() {
    bool ret = OgrePINVOKE.LiSPSMShadowCameraSetupPtr_getUseAggressiveFocusRegion(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
