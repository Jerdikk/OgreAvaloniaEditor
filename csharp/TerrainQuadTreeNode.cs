//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class TerrainQuadTreeNode : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TerrainQuadTreeNode(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TerrainQuadTreeNode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TerrainQuadTreeNode() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreTerrainPINVOKE.delete_TerrainQuadTreeNode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public TerrainQuadTreeNode(Terrain terrain, TerrainQuadTreeNode parent, ushort xoff, ushort yoff, ushort size, ushort lod, ushort depth) : this(OgreTerrainPINVOKE.new_TerrainQuadTreeNode(Terrain.getCPtr(terrain), TerrainQuadTreeNode.getCPtr(parent), xoff, yoff, size, lod, depth), true) {
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getXOffset() {
    ushort ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_getXOffset(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getYOffset() {
    ushort ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_getYOffset(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isLeaf() {
    bool ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_isLeaf(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getBaseLod() {
    ushort ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_getBaseLod(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getLodCount() {
    ushort ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_getLodCount(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TerrainQuadTreeNode getChild(ushort child) {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainQuadTreeNode_getChild(swigCPtr, child);
    TerrainQuadTreeNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new TerrainQuadTreeNode(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TerrainQuadTreeNode getParent() {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainQuadTreeNode_getParent(swigCPtr);
    TerrainQuadTreeNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new TerrainQuadTreeNode(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Terrain getTerrain() {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainQuadTreeNode_getTerrain(swigCPtr);
    Terrain ret = (cPtr == global::System.IntPtr.Zero) ? null : new Terrain(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void prepare() {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_prepare__SWIG_0(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void prepare(SWIGTYPE_p_Ogre__StreamSerialiser stream) {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_prepare__SWIG_1(swigCPtr, SWIGTYPE_p_Ogre__StreamSerialiser.getCPtr(stream));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void load() {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_load__SWIG_0(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void load(ushort depthStart, ushort depthEnd) {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_load__SWIG_1(swigCPtr, depthStart, depthEnd);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadSelf() {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_loadSelf(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void unload() {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_unload__SWIG_0(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void unload(ushort depthStart, ushort depthEnd) {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_unload__SWIG_1(swigCPtr, depthStart, depthEnd);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void unprepare() {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_unprepare(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void save(SWIGTYPE_p_Ogre__StreamSerialiser stream) {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_save(swigCPtr, SWIGTYPE_p_Ogre__StreamSerialiser.getCPtr(stream));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public class LodLevel : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal LodLevel(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LodLevel obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~LodLevel() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreTerrainPINVOKE.delete_TerrainQuadTreeNode_LodLevel(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public ushort batchSize {
      set {
        OgreTerrainPINVOKE.TerrainQuadTreeNode_LodLevel_batchSize_set(swigCPtr, value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        ushort ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_LodLevel_batchSize_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public IndexData gpuIndexData {
      set {
        OgreTerrainPINVOKE.TerrainQuadTreeNode_LodLevel_gpuIndexData_set(swigCPtr, IndexData.getCPtr(value));
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainQuadTreeNode_LodLevel_gpuIndexData_get(swigCPtr);
        IndexData ret = (cPtr == global::System.IntPtr.Zero) ? null : new IndexData(cPtr, false);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float maxHeightDelta {
      set {
        OgreTerrainPINVOKE.TerrainQuadTreeNode_LodLevel_maxHeightDelta_set(swigCPtr, value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_LodLevel_maxHeightDelta_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float calcMaxHeightDelta {
      set {
        OgreTerrainPINVOKE.TerrainQuadTreeNode_LodLevel_calcMaxHeightDelta_set(swigCPtr, value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_LodLevel_calcMaxHeightDelta_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float lastTransitionDist {
      set {
        OgreTerrainPINVOKE.TerrainQuadTreeNode_LodLevel_lastTransitionDist_set(swigCPtr, value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_LodLevel_lastTransitionDist_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float lastCFactor {
      set {
        OgreTerrainPINVOKE.TerrainQuadTreeNode_LodLevel_lastCFactor_set(swigCPtr, value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_LodLevel_lastCFactor_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public LodLevel() : this(OgreTerrainPINVOKE.new_TerrainQuadTreeNode_LodLevel(), true) {
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public TerrainQuadTreeNode.LodLevel getLodLevel(ushort lod) {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainQuadTreeNode_getLodLevel(swigCPtr, lod);
    TerrainQuadTreeNode.LodLevel ret = (cPtr == global::System.IntPtr.Zero) ? null : new TerrainQuadTreeNode.LodLevel(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void preDeltaCalculation(SWIGTYPE_p_Ogre__TRectT_int_t rect) {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_preDeltaCalculation(swigCPtr, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void notifyDelta(ushort x, ushort y, ushort lod, float delta) {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_notifyDelta(swigCPtr, x, y, lod, delta);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void postDeltaCalculation(SWIGTYPE_p_Ogre__TRectT_int_t rect) {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_postDeltaCalculation(swigCPtr, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void finaliseDeltaValues(SWIGTYPE_p_Ogre__TRectT_int_t rect) {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_finaliseDeltaValues(swigCPtr, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void assignVertexData(ushort treeDepthStart, ushort treeDepthEnd, ushort resolution, uint sz) {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_assignVertexData(swigCPtr, treeDepthStart, treeDepthEnd, resolution, sz);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void useAncestorVertexData(TerrainQuadTreeNode owner, ushort treeDepthEnd, ushort resolution) {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_useAncestorVertexData(swigCPtr, TerrainQuadTreeNode.getCPtr(owner), treeDepthEnd, resolution);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateVertexData(bool positions, bool deltas, SWIGTYPE_p_Ogre__TRectT_int_t rect, bool cpuData) {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_updateVertexData(swigCPtr, positions, deltas, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect), cpuData);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void mergeIntoBounds(int x, int y, Vector3 pos) {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_mergeIntoBounds(swigCPtr, x, y, Vector3.getCPtr(pos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void resetBounds(SWIGTYPE_p_Ogre__TRectT_int_t rect) {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_resetBounds(swigCPtr, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool rectIntersectsNode(SWIGTYPE_p_Ogre__TRectT_int_t rect) {
    bool ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_rectIntersectsNode(swigCPtr, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool rectContainsNode(SWIGTYPE_p_Ogre__TRectT_int_t rect) {
    bool ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_rectContainsNode(swigCPtr, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool pointIntersectsNode(int x, int y) {
    bool ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_pointIntersectsNode(swigCPtr, x, y);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AxisAlignedBox getBoundingBox() {
    AxisAlignedBox ret = new AxisAlignedBox(OgreTerrainPINVOKE.TerrainQuadTreeNode_getBoundingBox(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getBoundingRadius() {
    float ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_getBoundingRadius(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 getLocalCentre() {
    Vector3 ret = new Vector3(OgreTerrainPINVOKE.TerrainQuadTreeNode_getLocalCentre(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getMinHeight() {
    float ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_getMinHeight(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getMaxHeight() {
    float ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_getMaxHeight(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool calculateCurrentLod(Camera cam, float cFactor) {
    bool ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_calculateCurrentLod(swigCPtr, Camera.getCPtr(cam), cFactor);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getCurrentLod() {
    int ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_getCurrentLod(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isRenderedAtCurrentLod() {
    bool ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_isRenderedAtCurrentLod(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isSelfOrChildRenderedAtCurrentLod() {
    bool ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_isSelfOrChildRenderedAtCurrentLod(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCurrentLod(int lod) {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_setCurrentLod(swigCPtr, lod);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getLodTransition() {
    float ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_getLodTransition(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLodTransition(float t) {
    OgreTerrainPINVOKE.TerrainQuadTreeNode_setLodTransition(swigCPtr, t);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ushort POSITION_BUFFER {
    set {
      OgreTerrainPINVOKE.TerrainQuadTreeNode_POSITION_BUFFER_set(value);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_POSITION_BUFFER_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ushort DELTA_BUFFER {
    set {
      OgreTerrainPINVOKE.TerrainQuadTreeNode_DELTA_BUFFER_set(value);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = OgreTerrainPINVOKE.TerrainQuadTreeNode_DELTA_BUFFER_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
