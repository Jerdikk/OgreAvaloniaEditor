//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class TransformKeyFrame : KeyFrame {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal TransformKeyFrame(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.TransformKeyFrame_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TransformKeyFrame obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_TransformKeyFrame(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public TransformKeyFrame(AnimationTrack parent, float time) : this(OgrePINVOKE.new_TransformKeyFrame(AnimationTrack.getCPtr(parent), time), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setTranslate(Vector3 trans) {
    OgrePINVOKE.TransformKeyFrame_setTranslate(swigCPtr, Vector3.getCPtr(trans));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 getTranslate() {
    Vector3 ret = new Vector3(OgrePINVOKE.TransformKeyFrame_getTranslate(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setScale(Vector3 scale) {
    OgrePINVOKE.TransformKeyFrame_setScale(swigCPtr, Vector3.getCPtr(scale));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Vector3 getScale() {
    Vector3 ret = new Vector3(OgrePINVOKE.TransformKeyFrame_getScale(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setRotation(Quaternion rot) {
    OgrePINVOKE.TransformKeyFrame_setRotation(swigCPtr, Quaternion.getCPtr(rot));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Quaternion getRotation() {
    Quaternion ret = new Quaternion(OgrePINVOKE.TransformKeyFrame_getRotation(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override KeyFrame _clone(AnimationTrack newParent) {
    global::System.IntPtr cPtr = OgrePINVOKE.TransformKeyFrame__clone(swigCPtr, AnimationTrack.getCPtr(newParent));
    KeyFrame ret = (cPtr == global::System.IntPtr.Zero) ? null : new KeyFrame(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
