//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class TerrainMaterialGeneratorA : TerrainMaterialGenerator {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal TerrainMaterialGeneratorA(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgreTerrainPINVOKE.TerrainMaterialGeneratorA_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TerrainMaterialGeneratorA obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreTerrainPINVOKE.delete_TerrainMaterialGeneratorA(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public TerrainMaterialGeneratorA() : this(OgreTerrainPINVOKE.new_TerrainMaterialGeneratorA(), true) {
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Ogre__RTShader__RenderState getMainRenderState() {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainMaterialGeneratorA_getMainRenderState(swigCPtr);
    SWIGTYPE_p_Ogre__RTShader__RenderState ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Ogre__RTShader__RenderState(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public class SM2Profile : TerrainMaterialGenerator.Profile {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
    internal SM2Profile(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgreTerrainPINVOKE.TerrainMaterialGeneratorA_SM2Profile_SWIGUpcast(cPtr), cMemoryOwn) {
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SM2Profile obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    protected override void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreTerrainPINVOKE.delete_TerrainMaterialGeneratorA_SM2Profile(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        base.Dispose(disposing);
      }
    }
  
    public SM2Profile(TerrainMaterialGeneratorA parent) : this(OgreTerrainPINVOKE.new_TerrainMaterialGeneratorA_SM2Profile(TerrainMaterialGeneratorA.getCPtr(parent)), true) {
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public MaterialPtr generate(Terrain terrain) {
      MaterialPtr ret = new MaterialPtr(OgreTerrainPINVOKE.TerrainMaterialGeneratorA_SM2Profile_generate(swigCPtr, Terrain.getCPtr(terrain)), true);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public byte getMaxLayers(Terrain terrain) {
      byte ret = OgreTerrainPINVOKE.TerrainMaterialGeneratorA_SM2Profile_getMaxLayers(swigCPtr, Terrain.getCPtr(terrain));
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public bool isLayerNormalMappingEnabled() {
      bool ret = OgreTerrainPINVOKE.TerrainMaterialGeneratorA_SM2Profile_isLayerNormalMappingEnabled(swigCPtr);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public void setLayerNormalMappingEnabled(bool enabled) {
      OgreTerrainPINVOKE.TerrainMaterialGeneratorA_SM2Profile_setLayerNormalMappingEnabled(swigCPtr, enabled);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public bool isLayerParallaxMappingEnabled() {
      bool ret = OgreTerrainPINVOKE.TerrainMaterialGeneratorA_SM2Profile_isLayerParallaxMappingEnabled(swigCPtr);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public void setLayerParallaxMappingEnabled(bool enabled) {
      OgreTerrainPINVOKE.TerrainMaterialGeneratorA_SM2Profile_setLayerParallaxMappingEnabled(swigCPtr, enabled);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void setLayerParallaxOcclusionMappingEnabled(bool enabled) {
      OgreTerrainPINVOKE.TerrainMaterialGeneratorA_SM2Profile_setLayerParallaxOcclusionMappingEnabled(swigCPtr, enabled);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public bool isLayerOcclusionMappingEnabled() {
      bool ret = OgreTerrainPINVOKE.TerrainMaterialGeneratorA_SM2Profile_isLayerOcclusionMappingEnabled(swigCPtr);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public bool isLayerSpecularMappingEnabled() {
      bool ret = OgreTerrainPINVOKE.TerrainMaterialGeneratorA_SM2Profile_isLayerSpecularMappingEnabled(swigCPtr);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public void setLayerSpecularMappingEnabled(bool enabled) {
      OgreTerrainPINVOKE.TerrainMaterialGeneratorA_SM2Profile_setLayerSpecularMappingEnabled(swigCPtr, enabled);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void setReceiveDynamicShadowsPSSM(PSSMShadowCameraSetup pssmSettings) {
      OgreTerrainPINVOKE.TerrainMaterialGeneratorA_SM2Profile_setReceiveDynamicShadowsPSSM(swigCPtr, PSSMShadowCameraSetup.getCPtr(pssmSettings));
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public PSSMShadowCameraSetup getReceiveDynamicShadowsPSSM() {
      global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainMaterialGeneratorA_SM2Profile_getReceiveDynamicShadowsPSSM(swigCPtr);
      PSSMShadowCameraSetup ret = (cPtr == global::System.IntPtr.Zero) ? null : new PSSMShadowCameraSetup(cPtr, false);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public void setLightmapEnabled(bool enabled) {
      OgreTerrainPINVOKE.TerrainMaterialGeneratorA_SM2Profile_setLightmapEnabled(swigCPtr, enabled);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void setCompositeMapEnabled(bool enabled) {
      OgreTerrainPINVOKE.TerrainMaterialGeneratorA_SM2Profile_setCompositeMapEnabled(swigCPtr, enabled);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void setReceiveDynamicShadowsEnabled(bool enabled) {
      OgreTerrainPINVOKE.TerrainMaterialGeneratorA_SM2Profile_setReceiveDynamicShadowsEnabled(swigCPtr, enabled);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void setReceiveDynamicShadowsLowLod(bool enabled) {
      OgreTerrainPINVOKE.TerrainMaterialGeneratorA_SM2Profile_setReceiveDynamicShadowsLowLod(swigCPtr, enabled);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public void setLayerNormalMappingEnabled(bool enabled) {
    OgreTerrainPINVOKE.TerrainMaterialGeneratorA_setLayerNormalMappingEnabled(swigCPtr, enabled);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setLayerSpecularMappingEnabled(bool enabled) {
    OgreTerrainPINVOKE.TerrainMaterialGeneratorA_setLayerSpecularMappingEnabled(swigCPtr, enabled);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getReceiveDynamicShadowsEnabled() {
    bool ret = OgreTerrainPINVOKE.TerrainMaterialGeneratorA_getReceiveDynamicShadowsEnabled(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setReceiveDynamicShadowsEnabled(bool enabled) {
    OgreTerrainPINVOKE.TerrainMaterialGeneratorA_setReceiveDynamicShadowsEnabled(swigCPtr, enabled);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setReceiveDynamicShadowsLowLod(bool enabled) {
    OgreTerrainPINVOKE.TerrainMaterialGeneratorA_setReceiveDynamicShadowsLowLod(swigCPtr, enabled);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getReceiveDynamicShadowsLowLod() {
    bool ret = OgreTerrainPINVOKE.TerrainMaterialGeneratorA_getReceiveDynamicShadowsLowLod(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isLightmapEnabled() {
    bool ret = OgreTerrainPINVOKE.TerrainMaterialGeneratorA_isLightmapEnabled(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCompositeMapEnabled(bool enabled) {
    OgreTerrainPINVOKE.TerrainMaterialGeneratorA_setCompositeMapEnabled(swigCPtr, enabled);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isCompositeMapEnabled() {
    bool ret = OgreTerrainPINVOKE.TerrainMaterialGeneratorA_isCompositeMapEnabled(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TerrainMaterialGenerator.Profile getActiveProfile() {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.TerrainMaterialGeneratorA_getActiveProfile(swigCPtr);
    TerrainMaterialGenerator.Profile ret = (cPtr == global::System.IntPtr.Zero) ? null : new TerrainMaterialGenerator.Profile(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isVertexCompressionSupported() {
    bool ret = OgreTerrainPINVOKE.TerrainMaterialGeneratorA_isVertexCompressionSupported(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void requestOptions(Terrain terrain) {
    OgreTerrainPINVOKE.TerrainMaterialGeneratorA_requestOptions(swigCPtr, Terrain.getCPtr(terrain));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public override MaterialPtr generate(Terrain terrain) {
    MaterialPtr ret = new MaterialPtr(OgreTerrainPINVOKE.TerrainMaterialGeneratorA_generate(swigCPtr, Terrain.getCPtr(terrain)), true);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override MaterialPtr generateForCompositeMap(Terrain terrain) {
    MaterialPtr ret = new MaterialPtr(OgreTerrainPINVOKE.TerrainMaterialGeneratorA_generateForCompositeMap(swigCPtr, Terrain.getCPtr(terrain)), true);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void setLightmapEnabled(bool enabled) {
    OgreTerrainPINVOKE.TerrainMaterialGeneratorA_setLightmapEnabled(swigCPtr, enabled);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public override byte getMaxLayers(Terrain terrain) {
    byte ret = OgreTerrainPINVOKE.TerrainMaterialGeneratorA_getMaxLayers(swigCPtr, Terrain.getCPtr(terrain));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void updateParams(MaterialPtr mat, Terrain terrain) {
    OgreTerrainPINVOKE.TerrainMaterialGeneratorA_updateParams(swigCPtr, MaterialPtr.getCPtr(mat), Terrain.getCPtr(terrain));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void updateParamsForCompositeMap(MaterialPtr mat, Terrain terrain) {
    OgreTerrainPINVOKE.TerrainMaterialGeneratorA_updateParamsForCompositeMap(swigCPtr, MaterialPtr.getCPtr(mat), Terrain.getCPtr(terrain));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
