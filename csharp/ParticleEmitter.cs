//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ParticleEmitter : StringInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ParticleEmitter(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.ParticleEmitter_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ParticleEmitter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_ParticleEmitter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ParticleEmitter(ParticleSystem psys) : this(OgrePINVOKE.new_ParticleEmitter(ParticleSystem.getCPtr(psys)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setPosition(Vector3 pos) {
    OgrePINVOKE.ParticleEmitter_setPosition(swigCPtr, Vector3.getCPtr(pos));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Vector3 getPosition() {
    Vector3 ret = new Vector3(OgrePINVOKE.ParticleEmitter_getPosition(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setDirection(Vector3 direction) {
    OgrePINVOKE.ParticleEmitter_setDirection(swigCPtr, Vector3.getCPtr(direction));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Vector3 getDirection() {
    Vector3 ret = new Vector3(OgrePINVOKE.ParticleEmitter_getDirection(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setUp(Vector3 up) {
    OgrePINVOKE.ParticleEmitter_setUp(swigCPtr, Vector3.getCPtr(up));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Vector3 getUp() {
    Vector3 ret = new Vector3(OgrePINVOKE.ParticleEmitter_getUp(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setDirPositionReference(Vector3 position, bool enable) {
    OgrePINVOKE.ParticleEmitter_setDirPositionReference(swigCPtr, Vector3.getCPtr(position), enable);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Vector3 getDirPositionReference() {
    Vector3 ret = new Vector3(OgrePINVOKE.ParticleEmitter_getDirPositionReference(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getDirPositionReferenceEnabled() {
    bool ret = OgrePINVOKE.ParticleEmitter_getDirPositionReferenceEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setAngle(Radian angle) {
    OgrePINVOKE.ParticleEmitter_setAngle(swigCPtr, Radian.getCPtr(angle));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Radian getAngle() {
    Radian ret = new Radian(OgrePINVOKE.ParticleEmitter_getAngle(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setParticleVelocity(float speed) {
    OgrePINVOKE.ParticleEmitter_setParticleVelocity__SWIG_0(swigCPtr, speed);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setParticleVelocity(float min, float max) {
    OgrePINVOKE.ParticleEmitter_setParticleVelocity__SWIG_1(swigCPtr, min, max);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setMinParticleVelocity(float min) {
    OgrePINVOKE.ParticleEmitter_setMinParticleVelocity(swigCPtr, min);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setMaxParticleVelocity(float max) {
    OgrePINVOKE.ParticleEmitter_setMaxParticleVelocity(swigCPtr, max);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float getParticleVelocity() {
    float ret = OgrePINVOKE.ParticleEmitter_getParticleVelocity(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float getMinParticleVelocity() {
    float ret = OgrePINVOKE.ParticleEmitter_getMinParticleVelocity(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float getMaxParticleVelocity() {
    float ret = OgrePINVOKE.ParticleEmitter_getMaxParticleVelocity(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setEmissionRate(float particlesPerSecond) {
    OgrePINVOKE.ParticleEmitter_setEmissionRate(swigCPtr, particlesPerSecond);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float getEmissionRate() {
    float ret = OgrePINVOKE.ParticleEmitter_getEmissionRate(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setTimeToLive(float ttl) {
    OgrePINVOKE.ParticleEmitter_setTimeToLive__SWIG_0(swigCPtr, ttl);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setTimeToLive(float minTtl, float maxTtl) {
    OgrePINVOKE.ParticleEmitter_setTimeToLive__SWIG_1(swigCPtr, minTtl, maxTtl);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setMinTimeToLive(float min) {
    OgrePINVOKE.ParticleEmitter_setMinTimeToLive(swigCPtr, min);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setMaxTimeToLive(float max) {
    OgrePINVOKE.ParticleEmitter_setMaxTimeToLive(swigCPtr, max);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float getTimeToLive() {
    float ret = OgrePINVOKE.ParticleEmitter_getTimeToLive(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float getMinTimeToLive() {
    float ret = OgrePINVOKE.ParticleEmitter_getMinTimeToLive(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float getMaxTimeToLive() {
    float ret = OgrePINVOKE.ParticleEmitter_getMaxTimeToLive(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setColour(ColourValue colour) {
    OgrePINVOKE.ParticleEmitter_setColour__SWIG_0(swigCPtr, ColourValue.getCPtr(colour));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setColour(ColourValue colourStart, ColourValue colourEnd) {
    OgrePINVOKE.ParticleEmitter_setColour__SWIG_1(swigCPtr, ColourValue.getCPtr(colourStart), ColourValue.getCPtr(colourEnd));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setColourRangeStart(ColourValue colour) {
    OgrePINVOKE.ParticleEmitter_setColourRangeStart(swigCPtr, ColourValue.getCPtr(colour));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setColourRangeEnd(ColourValue colour) {
    OgrePINVOKE.ParticleEmitter_setColourRangeEnd(swigCPtr, ColourValue.getCPtr(colour));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ColourValue getColour() {
    ColourValue ret = new ColourValue(OgrePINVOKE.ParticleEmitter_getColour(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ColourValue getColourRangeStart() {
    ColourValue ret = new ColourValue(OgrePINVOKE.ParticleEmitter_getColourRangeStart(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ColourValue getColourRangeEnd() {
    ColourValue ret = new ColourValue(OgrePINVOKE.ParticleEmitter_getColourRangeEnd(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ushort _getEmissionCount(float timeElapsed) {
    ushort ret = OgrePINVOKE.ParticleEmitter__getEmissionCount(swigCPtr, timeElapsed);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void _initParticle(Particle pParticle) {
    OgrePINVOKE.ParticleEmitter__initParticle(swigCPtr, Particle.getCPtr(pParticle));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getType() {
    string ret = OgrePINVOKE.ParticleEmitter_getType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setEnabled(bool enabled) {
    OgrePINVOKE.ParticleEmitter_setEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool getEnabled() {
    bool ret = OgrePINVOKE.ParticleEmitter_getEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setStartTime(float startTime) {
    OgrePINVOKE.ParticleEmitter_setStartTime(swigCPtr, startTime);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float getStartTime() {
    float ret = OgrePINVOKE.ParticleEmitter_getStartTime(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setDuration(float duration) {
    OgrePINVOKE.ParticleEmitter_setDuration__SWIG_0(swigCPtr, duration);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float getDuration() {
    float ret = OgrePINVOKE.ParticleEmitter_getDuration(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setDuration(float min, float max) {
    OgrePINVOKE.ParticleEmitter_setDuration__SWIG_1(swigCPtr, min, max);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setMinDuration(float min) {
    OgrePINVOKE.ParticleEmitter_setMinDuration(swigCPtr, min);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setMaxDuration(float max) {
    OgrePINVOKE.ParticleEmitter_setMaxDuration(swigCPtr, max);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float getMinDuration() {
    float ret = OgrePINVOKE.ParticleEmitter_getMinDuration(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float getMaxDuration() {
    float ret = OgrePINVOKE.ParticleEmitter_getMaxDuration(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setRepeatDelay(float duration) {
    OgrePINVOKE.ParticleEmitter_setRepeatDelay__SWIG_0(swigCPtr, duration);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float getRepeatDelay() {
    float ret = OgrePINVOKE.ParticleEmitter_getRepeatDelay(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setRepeatDelay(float min, float max) {
    OgrePINVOKE.ParticleEmitter_setRepeatDelay__SWIG_1(swigCPtr, min, max);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setMinRepeatDelay(float min) {
    OgrePINVOKE.ParticleEmitter_setMinRepeatDelay(swigCPtr, min);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setMaxRepeatDelay(float max) {
    OgrePINVOKE.ParticleEmitter_setMaxRepeatDelay(swigCPtr, max);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float getMinRepeatDelay() {
    float ret = OgrePINVOKE.ParticleEmitter_getMinRepeatDelay(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float getMaxRepeatDelay() {
    float ret = OgrePINVOKE.ParticleEmitter_getMaxRepeatDelay(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getName() {
    string ret = OgrePINVOKE.ParticleEmitter_getName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setName(string newName) {
    OgrePINVOKE.ParticleEmitter_setName(swigCPtr, newName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getEmittedEmitter() {
    string ret = OgrePINVOKE.ParticleEmitter_getEmittedEmitter(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setEmittedEmitter(string emittedEmitter) {
    OgrePINVOKE.ParticleEmitter_setEmittedEmitter(swigCPtr, emittedEmitter);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool isEmitted() {
    bool ret = OgrePINVOKE.ParticleEmitter_isEmitted(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setEmitted(bool emitted) {
    OgrePINVOKE.ParticleEmitter_setEmitted(swigCPtr, emitted);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
