//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class PanelOverlayElement : OverlayContainer {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PanelOverlayElement(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgreOverlayPINVOKE.PanelOverlayElement_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PanelOverlayElement obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreOverlayPINVOKE.delete_PanelOverlayElement(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public PanelOverlayElement(string name) : this(OgreOverlayPINVOKE.new_PanelOverlayElement(name), true) {
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void initialise() {
    OgreOverlayPINVOKE.PanelOverlayElement_initialise(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void _releaseManualHardwareResources() {
    OgreOverlayPINVOKE.PanelOverlayElement__releaseManualHardwareResources(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void _restoreManualHardwareResources() {
    OgreOverlayPINVOKE.PanelOverlayElement__restoreManualHardwareResources(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTiling(float x, float y, ushort layer) {
    OgreOverlayPINVOKE.PanelOverlayElement_setTiling__SWIG_0(swigCPtr, x, y, layer);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTiling(float x, float y) {
    OgreOverlayPINVOKE.PanelOverlayElement_setTiling__SWIG_1(swigCPtr, x, y);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getTileX(ushort layer) {
    float ret = OgreOverlayPINVOKE.PanelOverlayElement_getTileX__SWIG_0(swigCPtr, layer);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getTileX() {
    float ret = OgreOverlayPINVOKE.PanelOverlayElement_getTileX__SWIG_1(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getTileY(ushort layer) {
    float ret = OgreOverlayPINVOKE.PanelOverlayElement_getTileY__SWIG_0(swigCPtr, layer);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getTileY() {
    float ret = OgreOverlayPINVOKE.PanelOverlayElement_getTileY__SWIG_1(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setUV(float u1, float v1, float u2, float v2) {
    OgreOverlayPINVOKE.PanelOverlayElement_setUV(swigCPtr, u1, v1, u2, v2);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getUV(SWIGTYPE_p_float u1, SWIGTYPE_p_float v1, SWIGTYPE_p_float u2, SWIGTYPE_p_float v2) {
    OgreOverlayPINVOKE.PanelOverlayElement_getUV(swigCPtr, SWIGTYPE_p_float.getCPtr(u1), SWIGTYPE_p_float.getCPtr(v1), SWIGTYPE_p_float.getCPtr(u2), SWIGTYPE_p_float.getCPtr(v2));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTransparent(bool isTransparent) {
    OgreOverlayPINVOKE.PanelOverlayElement_setTransparent(swigCPtr, isTransparent);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isTransparent() {
    bool ret = OgreOverlayPINVOKE.PanelOverlayElement_isTransparent(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string getTypeName() {
    string ret = OgreOverlayPINVOKE.PanelOverlayElement_getTypeName(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getRenderOperation(RenderOperation op) {
    OgreOverlayPINVOKE.PanelOverlayElement_getRenderOperation(swigCPtr, RenderOperation.getCPtr(op));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void _updateRenderQueue(RenderQueue queue) {
    OgreOverlayPINVOKE.PanelOverlayElement__updateRenderQueue(swigCPtr, RenderQueue.getCPtr(queue));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
