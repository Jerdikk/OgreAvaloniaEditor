//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class btCollisionObjectFloatData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btCollisionObjectFloatData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btCollisionObjectFloatData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btCollisionObjectFloatData() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreBulletPINVOKE.delete_btCollisionObjectFloatData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public global::System.IntPtr m_broadphaseHandle {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_broadphaseHandle_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
	  global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionObjectFloatData_m_broadphaseHandle_get(swigCPtr);
	  if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
	  return cPtr;
	}
  
  }

  public global::System.IntPtr m_collisionShape {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_collisionShape_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
	  global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionObjectFloatData_m_collisionShape_get(swigCPtr);
	  if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
	  return cPtr;
	}
  
  }

  public SWIGTYPE_p_btCollisionShapeData m_rootCollisionShape {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_rootCollisionShape_set(swigCPtr, SWIGTYPE_p_btCollisionShapeData.getCPtr(value));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionObjectFloatData_m_rootCollisionShape_get(swigCPtr);
      SWIGTYPE_p_btCollisionShapeData ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btCollisionShapeData(cPtr, false);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string m_name {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_name_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_name_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btTransformFloatData m_worldTransform {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_worldTransform_set(swigCPtr, SWIGTYPE_p_btTransformFloatData.getCPtr(value));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btTransformFloatData ret = new SWIGTYPE_p_btTransformFloatData(OgreBulletPINVOKE.btCollisionObjectFloatData_m_worldTransform_get(swigCPtr), true);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btTransformFloatData m_interpolationWorldTransform {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_interpolationWorldTransform_set(swigCPtr, SWIGTYPE_p_btTransformFloatData.getCPtr(value));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btTransformFloatData ret = new SWIGTYPE_p_btTransformFloatData(OgreBulletPINVOKE.btCollisionObjectFloatData_m_interpolationWorldTransform_get(swigCPtr), true);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public btVector3FloatData m_interpolationLinearVelocity {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_interpolationLinearVelocity_set(swigCPtr, btVector3FloatData.getCPtr(value));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionObjectFloatData_m_interpolationLinearVelocity_get(swigCPtr);
      btVector3FloatData ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3FloatData(cPtr, false);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public btVector3FloatData m_interpolationAngularVelocity {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_interpolationAngularVelocity_set(swigCPtr, btVector3FloatData.getCPtr(value));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionObjectFloatData_m_interpolationAngularVelocity_get(swigCPtr);
      btVector3FloatData ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3FloatData(cPtr, false);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public btVector3FloatData m_anisotropicFriction {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_anisotropicFriction_set(swigCPtr, btVector3FloatData.getCPtr(value));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgreBulletPINVOKE.btCollisionObjectFloatData_m_anisotropicFriction_get(swigCPtr);
      btVector3FloatData ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3FloatData(cPtr, false);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_contactProcessingThreshold {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_contactProcessingThreshold_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_contactProcessingThreshold_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_deactivationTime {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_deactivationTime_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_deactivationTime_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_friction {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_friction_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_friction_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_rollingFriction {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_rollingFriction_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_rollingFriction_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_contactDamping {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_contactDamping_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_contactDamping_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_contactStiffness {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_contactStiffness_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_contactStiffness_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_restitution {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_restitution_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_restitution_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_hitFraction {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_hitFraction_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_hitFraction_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_ccdSweptSphereRadius {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_ccdSweptSphereRadius_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_ccdSweptSphereRadius_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_ccdMotionThreshold {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_ccdMotionThreshold_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_ccdMotionThreshold_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int m_hasAnisotropicFriction {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_hasAnisotropicFriction_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_hasAnisotropicFriction_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int m_collisionFlags {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_collisionFlags_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_collisionFlags_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int m_islandTag1 {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_islandTag1_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_islandTag1_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int m_companionId {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_companionId_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_companionId_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int m_activationState1 {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_activationState1_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_activationState1_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int m_internalType {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_internalType_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_internalType_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int m_checkCollideWith {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_checkCollideWith_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_checkCollideWith_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int m_collisionFilterGroup {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_collisionFilterGroup_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_collisionFilterGroup_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int m_collisionFilterMask {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_collisionFilterMask_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_collisionFilterMask_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int m_uniqueId {
    set {
      OgreBulletPINVOKE.btCollisionObjectFloatData_m_uniqueId_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = OgreBulletPINVOKE.btCollisionObjectFloatData_m_uniqueId_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public btCollisionObjectFloatData() : this(OgreBulletPINVOKE.new_btCollisionObjectFloatData(), true) {
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
