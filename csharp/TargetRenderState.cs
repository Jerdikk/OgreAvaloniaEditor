//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class TargetRenderState : RenderState {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal TargetRenderState(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RTShaderPINVOKE.TargetRenderState_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TargetRenderState obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RTShaderPINVOKE.delete_TargetRenderState(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public TargetRenderState() : this(RTShaderPINVOKE.new_TargetRenderState(), true) {
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void link(RenderState templateRS, Pass srcPass, Pass dstPass) {
    RTShaderPINVOKE.TargetRenderState_link__SWIG_0(swigCPtr, RenderState.getCPtr(templateRS), Pass.getCPtr(srcPass), Pass.getCPtr(dstPass));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void link(StringList srsTypes, Pass srcPass, Pass dstPass) {
    RTShaderPINVOKE.TargetRenderState_link__SWIG_1(swigCPtr, StringList.getCPtr(srsTypes), Pass.getCPtr(srcPass), Pass.getCPtr(dstPass));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateGpuProgramsParams(Renderable rend, Pass pass, SWIGTYPE_p_Ogre__AutoParamDataSource source, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t pLightList) {
    RTShaderPINVOKE.TargetRenderState_updateGpuProgramsParams(swigCPtr, Renderable.getCPtr(rend), Pass.getCPtr(pass), SWIGTYPE_p_Ogre__AutoParamDataSource.getCPtr(source), SWIGTYPE_p_std__vectorT_Ogre__Light_p_t.getCPtr(pLightList));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addSubRenderStateInstance(SubRenderState subRenderState) {
    RTShaderPINVOKE.TargetRenderState_addSubRenderStateInstance(swigCPtr, SubRenderState.getCPtr(subRenderState));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void acquirePrograms(Pass pass) {
    RTShaderPINVOKE.TargetRenderState_acquirePrograms(swigCPtr, Pass.getCPtr(pass));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void releasePrograms(Pass pass) {
    RTShaderPINVOKE.TargetRenderState_releasePrograms(swigCPtr, Pass.getCPtr(pass));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string UserKey {
    set {
      RTShaderPINVOKE.TargetRenderState_UserKey_set(value);
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = RTShaderPINVOKE.TargetRenderState_UserKey_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
