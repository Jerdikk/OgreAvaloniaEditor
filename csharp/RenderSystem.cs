//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class RenderSystem : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RenderSystem(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RenderSystem obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RenderSystem() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_RenderSystem(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual string getName() {
    string ret = OgrePINVOKE.RenderSystem_getName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ConfigOptionMap getConfigOptions() {
    ConfigOptionMap ret = new ConfigOptionMap(OgrePINVOKE.RenderSystem_getConfigOptions(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setConfigOption(string name, string value) {
    OgrePINVOKE.RenderSystem_setConfigOption(swigCPtr, name, value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public RenderWindowDescription getRenderWindowDescription() {
    RenderWindowDescription ret = new RenderWindowDescription(OgrePINVOKE.RenderSystem_getRenderWindowDescription(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual HardwareOcclusionQuery createHardwareOcclusionQuery() {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderSystem_createHardwareOcclusionQuery(swigCPtr);
    HardwareOcclusionQuery ret = (cPtr == global::System.IntPtr.Zero) ? null : new HardwareOcclusionQuery(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void destroyHardwareOcclusionQuery(HardwareOcclusionQuery hq) {
    OgrePINVOKE.RenderSystem_destroyHardwareOcclusionQuery(swigCPtr, HardwareOcclusionQuery.getCPtr(hq));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string validateConfigOptions() {
    string ret = OgrePINVOKE.RenderSystem_validateConfigOptions(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void _initialise() {
    OgrePINVOKE.RenderSystem__initialise(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public RenderSystemCapabilities getMutableCapabilities() {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderSystem_getMutableCapabilities(swigCPtr);
    RenderSystemCapabilities ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderSystemCapabilities(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void useCustomRenderSystemCapabilities(RenderSystemCapabilities capabilities) {
    OgrePINVOKE.RenderSystem_useCustomRenderSystemCapabilities(swigCPtr, RenderSystemCapabilities.getCPtr(capabilities));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void reinitialise() {
    OgrePINVOKE.RenderSystem_reinitialise(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void shutdown() {
    OgrePINVOKE.RenderSystem_shutdown(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual GpuProgramParametersPtr getFixedFunctionParams(int tracking, FogMode fog) {
    GpuProgramParametersPtr ret = new GpuProgramParametersPtr(OgrePINVOKE.RenderSystem_getFixedFunctionParams(swigCPtr, tracking, (int)fog), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void applyFixedFunctionParams(GpuProgramParametersPtr params_, ushort variabilityMask) {
    OgrePINVOKE.RenderSystem_applyFixedFunctionParams(swigCPtr, GpuProgramParametersPtr.getCPtr(params_), variabilityMask);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setShadingType(ShadeOptions so) {
    OgrePINVOKE.RenderSystem_setShadingType(swigCPtr, (int)so);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setLightingEnabled(bool enabled) {
    OgrePINVOKE.RenderSystem_setLightingEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual RenderWindow _createRenderWindow(string name, uint width, uint height, bool fullScreen, NameValueMap miscParams) {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderSystem__createRenderWindow__SWIG_0(swigCPtr, name, width, height, fullScreen, NameValueMap.getCPtr(miscParams));
    RenderWindow ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderWindow(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual RenderWindow _createRenderWindow(string name, uint width, uint height, bool fullScreen) {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderSystem__createRenderWindow__SWIG_1(swigCPtr, name, width, height, fullScreen);
    RenderWindow ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderWindow(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual MultiRenderTarget createMultiRenderTarget(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderSystem_createMultiRenderTarget(swigCPtr, name);
    MultiRenderTarget ret = (cPtr == global::System.IntPtr.Zero) ? null : new MultiRenderTarget(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void destroyRenderWindow(string name) {
    OgrePINVOKE.RenderSystem_destroyRenderWindow(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void destroyRenderTexture(string name) {
    OgrePINVOKE.RenderSystem_destroyRenderTexture(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void destroyRenderTarget(string name) {
    OgrePINVOKE.RenderSystem_destroyRenderTarget(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void attachRenderTarget(RenderTarget target) {
    OgrePINVOKE.RenderSystem_attachRenderTarget(swigCPtr, RenderTarget.getCPtr(target));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public RenderTarget getRenderTarget(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderSystem_getRenderTarget(swigCPtr, name);
    RenderTarget ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderTarget(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual RenderTarget detachRenderTarget(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderSystem_detachRenderTarget(swigCPtr, name);
    RenderTarget ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderTarget(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public HardwareVertexBufferPtr getGlobalInstanceVertexBuffer() {
    HardwareVertexBufferPtr ret = new HardwareVertexBufferPtr(OgrePINVOKE.RenderSystem_getGlobalInstanceVertexBuffer(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGlobalInstanceVertexBuffer(HardwareVertexBufferPtr val) {
    OgrePINVOKE.RenderSystem_setGlobalInstanceVertexBuffer(swigCPtr, HardwareVertexBufferPtr.getCPtr(val));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public VertexDeclaration getGlobalInstanceVertexDeclaration() {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderSystem_getGlobalInstanceVertexDeclaration(swigCPtr);
    VertexDeclaration ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexDeclaration(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGlobalInstanceVertexDeclaration(VertexDeclaration val) {
    OgrePINVOKE.RenderSystem_setGlobalInstanceVertexDeclaration(swigCPtr, VertexDeclaration.getCPtr(val));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getGlobalInstanceCount() {
    uint ret = OgrePINVOKE.RenderSystem_getGlobalInstanceCount(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGlobalInstanceCount(uint val) {
    OgrePINVOKE.RenderSystem_setGlobalInstanceCount(swigCPtr, val);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDepthBufferFor(RenderTarget renderTarget) {
    OgrePINVOKE.RenderSystem_setDepthBufferFor(swigCPtr, RenderTarget.getCPtr(renderTarget));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isReverseDepthBufferEnabled() {
    bool ret = OgrePINVOKE.RenderSystem_isReverseDepthBufferEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void _useLights(ushort limit) {
    OgrePINVOKE.RenderSystem__useLights(swigCPtr, limit);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setTextureUnitSettings(uint texUnit, TextureUnitState tl) {
    OgrePINVOKE.RenderSystem__setTextureUnitSettings(swigCPtr, texUnit, TextureUnitState.getCPtr(tl));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setSampler(uint texUnit, Sampler s) {
    OgrePINVOKE.RenderSystem__setSampler(swigCPtr, texUnit, Sampler.getCPtr(s));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _disableTextureUnit(uint texUnit) {
    OgrePINVOKE.RenderSystem__disableTextureUnit(swigCPtr, texUnit);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _disableTextureUnitsFrom(uint texUnit) {
    OgrePINVOKE.RenderSystem__disableTextureUnitsFrom(swigCPtr, texUnit);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setPointSpritesEnabled(bool enabled) {
    OgrePINVOKE.RenderSystem__setPointSpritesEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setPointParameters(bool attenuationEnabled, float minSize, float maxSize) {
    OgrePINVOKE.RenderSystem__setPointParameters(swigCPtr, attenuationEnabled, minSize, maxSize);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setLineWidth(float width) {
    OgrePINVOKE.RenderSystem__setLineWidth(swigCPtr, width);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setTexture(uint unit, bool enabled, TexturePtr texPtr) {
    OgrePINVOKE.RenderSystem__setTexture(swigCPtr, unit, enabled, TexturePtr.getCPtr(texPtr));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setTextureCoordSet(uint unit, uint index) {
    OgrePINVOKE.RenderSystem__setTextureCoordSet(swigCPtr, unit, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setTextureCoordCalculation(uint unit, TexCoordCalcMethod m, Frustum frustum) {
    OgrePINVOKE.RenderSystem__setTextureCoordCalculation__SWIG_0(swigCPtr, unit, (int)m, Frustum.getCPtr(frustum));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setTextureCoordCalculation(uint unit, TexCoordCalcMethod m) {
    OgrePINVOKE.RenderSystem__setTextureCoordCalculation__SWIG_1(swigCPtr, unit, (int)m);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setTextureBlendMode(uint unit, LayerBlendModeEx bm) {
    OgrePINVOKE.RenderSystem__setTextureBlendMode(swigCPtr, unit, LayerBlendModeEx.getCPtr(bm));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setTextureMatrix(uint unit, Matrix4 xform) {
    OgrePINVOKE.RenderSystem__setTextureMatrix(swigCPtr, unit, Matrix4.getCPtr(xform));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setColourBlendState(ColourBlendState state) {
    OgrePINVOKE.RenderSystem_setColourBlendState(swigCPtr, ColourBlendState.getCPtr(state));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setAlphaRejectSettings(CompareFunction func, byte value, bool alphaToCoverage) {
    OgrePINVOKE.RenderSystem__setAlphaRejectSettings(swigCPtr, (int)func, value, alphaToCoverage);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setTextureProjectionRelativeTo(bool enabled, Vector3 pos) {
    OgrePINVOKE.RenderSystem__setTextureProjectionRelativeTo(swigCPtr, enabled, Vector3.getCPtr(pos));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_Ogre__DepthBuffer _createDepthBufferFor(RenderTarget renderTarget) {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderSystem__createDepthBufferFor(swigCPtr, RenderTarget.getCPtr(renderTarget));
    SWIGTYPE_p_Ogre__DepthBuffer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Ogre__DepthBuffer(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _cleanupDepthBuffers(bool bCleanManualBuffers) {
    OgrePINVOKE.RenderSystem__cleanupDepthBuffers__SWIG_0(swigCPtr, bCleanManualBuffers);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _cleanupDepthBuffers() {
    OgrePINVOKE.RenderSystem__cleanupDepthBuffers__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _beginFrame() {
    OgrePINVOKE.RenderSystem__beginFrame(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _endFrame() {
    OgrePINVOKE.RenderSystem__endFrame(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setViewport(Viewport vp) {
    OgrePINVOKE.RenderSystem__setViewport(swigCPtr, Viewport.getCPtr(vp));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Viewport _getViewport() {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderSystem__getViewport(swigCPtr);
    Viewport ret = (cPtr == global::System.IntPtr.Zero) ? null : new Viewport(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void _setCullingMode(CullingMode mode) {
    OgrePINVOKE.RenderSystem__setCullingMode(swigCPtr, (int)mode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual CullingMode _getCullingMode() {
    CullingMode ret = (CullingMode)OgrePINVOKE.RenderSystem__getCullingMode(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void _setDepthBufferParams(bool depthTest, bool depthWrite, CompareFunction depthFunction) {
    OgrePINVOKE.RenderSystem__setDepthBufferParams__SWIG_0(swigCPtr, depthTest, depthWrite, (int)depthFunction);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setDepthBufferParams(bool depthTest, bool depthWrite) {
    OgrePINVOKE.RenderSystem__setDepthBufferParams__SWIG_1(swigCPtr, depthTest, depthWrite);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setDepthBufferParams(bool depthTest) {
    OgrePINVOKE.RenderSystem__setDepthBufferParams__SWIG_2(swigCPtr, depthTest);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setDepthBufferParams() {
    OgrePINVOKE.RenderSystem__setDepthBufferParams__SWIG_3(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setDepthBias(float constantBias, float slopeScaleBias) {
    OgrePINVOKE.RenderSystem__setDepthBias__SWIG_0(swigCPtr, constantBias, slopeScaleBias);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setDepthBias(float constantBias) {
    OgrePINVOKE.RenderSystem__setDepthBias__SWIG_1(swigCPtr, constantBias);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setDepthClamp(bool enable) {
    OgrePINVOKE.RenderSystem__setDepthClamp(swigCPtr, enable);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _beginGeometryCount() {
    OgrePINVOKE.RenderSystem__beginGeometryCount(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual uint _getFaceCount() {
    uint ret = OgrePINVOKE.RenderSystem__getFaceCount(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint _getBatchCount() {
    uint ret = OgrePINVOKE.RenderSystem__getBatchCount(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint _getVertexCount() {
    uint ret = OgrePINVOKE.RenderSystem__getVertexCount(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void _convertProjectionMatrix(Matrix4 matrix, Matrix4 dest, bool forGpuProgram) {
    OgrePINVOKE.RenderSystem__convertProjectionMatrix__SWIG_0(swigCPtr, Matrix4.getCPtr(matrix), Matrix4.getCPtr(dest), forGpuProgram);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _convertProjectionMatrix(Matrix4 matrix, Matrix4 dest) {
    OgrePINVOKE.RenderSystem__convertProjectionMatrix__SWIG_1(swigCPtr, Matrix4.getCPtr(matrix), Matrix4.getCPtr(dest));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setPolygonMode(PolygonMode level) {
    OgrePINVOKE.RenderSystem__setPolygonMode(swigCPtr, (int)level);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setStencilState(StencilState state) {
    OgrePINVOKE.RenderSystem_setStencilState(swigCPtr, StencilState.getCPtr(state));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setNormaliseNormals(bool normalise) {
    OgrePINVOKE.RenderSystem_setNormaliseNormals(swigCPtr, normalise);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _render(RenderOperation op) {
    OgrePINVOKE.RenderSystem__render(swigCPtr, RenderOperation.getCPtr(op));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _dispatchCompute(Vector3i workgroupDim) {
    OgrePINVOKE.RenderSystem__dispatchCompute(swigCPtr, Vector3i.getCPtr(workgroupDim));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public RenderSystemCapabilities getCapabilities() {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderSystem_getCapabilities(swigCPtr);
    RenderSystemCapabilities ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderSystemCapabilities(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DriverVersion getDriverVersion() {
    DriverVersion ret = new DriverVersion(OgrePINVOKE.RenderSystem_getDriverVersion(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string _getDefaultViewportMaterialScheme() {
    string ret = OgrePINVOKE.RenderSystem__getDefaultViewportMaterialScheme(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void bindGpuProgram(GpuProgram prg) {
    OgrePINVOKE.RenderSystem_bindGpuProgram(swigCPtr, GpuProgram.getCPtr(prg));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void bindGpuProgramParameters(GpuProgramType gptype, GpuProgramParametersPtr params_, ushort variabilityMask) {
    OgrePINVOKE.RenderSystem_bindGpuProgramParameters(swigCPtr, (int)gptype, GpuProgramParametersPtr.getCPtr(params_), variabilityMask);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void unbindGpuProgram(GpuProgramType gptype) {
    OgrePINVOKE.RenderSystem_unbindGpuProgram(swigCPtr, (int)gptype);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isGpuProgramBound(GpuProgramType gptype) {
    bool ret = OgrePINVOKE.RenderSystem_isGpuProgramBound(swigCPtr, (int)gptype);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getNativeShadingLanguageVersion() {
    ushort ret = OgrePINVOKE.RenderSystem_getNativeShadingLanguageVersion(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setClipPlanes(SWIGTYPE_p_std__vectorT_Ogre__Plane_t clipPlanes) {
    OgrePINVOKE.RenderSystem_setClipPlanes(swigCPtr, SWIGTYPE_p_std__vectorT_Ogre__Plane_t.getCPtr(clipPlanes));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _initRenderTargets() {
    OgrePINVOKE.RenderSystem__initRenderTargets(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyCameraRemoved(Camera cam) {
    OgrePINVOKE.RenderSystem__notifyCameraRemoved(swigCPtr, Camera.getCPtr(cam));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _updateAllRenderTargets(bool swapBuffers) {
    OgrePINVOKE.RenderSystem__updateAllRenderTargets__SWIG_0(swigCPtr, swapBuffers);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _updateAllRenderTargets() {
    OgrePINVOKE.RenderSystem__updateAllRenderTargets__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _swapAllRenderTargetBuffers() {
    OgrePINVOKE.RenderSystem__swapAllRenderTargetBuffers(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setInvertVertexWinding(bool invert) {
    OgrePINVOKE.RenderSystem_setInvertVertexWinding(swigCPtr, invert);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getInvertVertexWinding() {
    bool ret = OgrePINVOKE.RenderSystem_getInvertVertexWinding(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setScissorTest(bool enabled, SWIGTYPE_p_Ogre__TRectT_int_t rect) {
    OgrePINVOKE.RenderSystem_setScissorTest__SWIG_0(swigCPtr, enabled, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setScissorTest(bool enabled) {
    OgrePINVOKE.RenderSystem_setScissorTest__SWIG_1(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setScissorTest(bool enabled, uint left, uint top, uint right, uint bottom) {
    OgrePINVOKE.RenderSystem_setScissorTest__SWIG_2(swigCPtr, enabled, left, top, right, bottom);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setScissorTest(bool enabled, uint left, uint top, uint right) {
    OgrePINVOKE.RenderSystem_setScissorTest__SWIG_3(swigCPtr, enabled, left, top, right);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setScissorTest(bool enabled, uint left, uint top) {
    OgrePINVOKE.RenderSystem_setScissorTest__SWIG_4(swigCPtr, enabled, left, top);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setScissorTest(bool enabled, uint left) {
    OgrePINVOKE.RenderSystem_setScissorTest__SWIG_5(swigCPtr, enabled, left);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void clearFrameBuffer(uint buffers, ColourValue colour, float depth, ushort stencil) {
    OgrePINVOKE.RenderSystem_clearFrameBuffer__SWIG_0(swigCPtr, buffers, ColourValue.getCPtr(colour), depth, stencil);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void clearFrameBuffer(uint buffers, ColourValue colour, float depth) {
    OgrePINVOKE.RenderSystem_clearFrameBuffer__SWIG_1(swigCPtr, buffers, ColourValue.getCPtr(colour), depth);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void clearFrameBuffer(uint buffers, ColourValue colour) {
    OgrePINVOKE.RenderSystem_clearFrameBuffer__SWIG_2(swigCPtr, buffers, ColourValue.getCPtr(colour));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void clearFrameBuffer(uint buffers) {
    OgrePINVOKE.RenderSystem_clearFrameBuffer__SWIG_3(swigCPtr, buffers);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float getHorizontalTexelOffset() {
    float ret = OgrePINVOKE.RenderSystem_getHorizontalTexelOffset(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float getVerticalTexelOffset() {
    float ret = OgrePINVOKE.RenderSystem_getVerticalTexelOffset(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float getMinimumDepthInputValue() {
    float ret = OgrePINVOKE.RenderSystem_getMinimumDepthInputValue(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float getMaximumDepthInputValue() {
    float ret = OgrePINVOKE.RenderSystem_getMaximumDepthInputValue(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setCurrentPassIterationCount(uint count) {
    OgrePINVOKE.RenderSystem_setCurrentPassIterationCount(swigCPtr, count);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDeriveDepthBias(bool derive, float baseValue, float multiplier, float slopeScale) {
    OgrePINVOKE.RenderSystem_setDeriveDepthBias__SWIG_0(swigCPtr, derive, baseValue, multiplier, slopeScale);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDeriveDepthBias(bool derive, float baseValue, float multiplier) {
    OgrePINVOKE.RenderSystem_setDeriveDepthBias__SWIG_1(swigCPtr, derive, baseValue, multiplier);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDeriveDepthBias(bool derive, float baseValue) {
    OgrePINVOKE.RenderSystem_setDeriveDepthBias__SWIG_2(swigCPtr, derive, baseValue);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDeriveDepthBias(bool derive) {
    OgrePINVOKE.RenderSystem_setDeriveDepthBias__SWIG_3(swigCPtr, derive);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setRenderTarget(RenderTarget target) {
    OgrePINVOKE.RenderSystem__setRenderTarget(swigCPtr, RenderTarget.getCPtr(target));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public class Listener : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Listener(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Listener obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Listener() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_RenderSystem_Listener(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public Listener() : this(OgrePINVOKE.new_RenderSystem_Listener(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      SwigDirectorConnect();
    }
  
    public virtual void eventOccurred(string eventName, NameValueMap parameters) {
      OgrePINVOKE.RenderSystem_Listener_eventOccurred__SWIG_0(swigCPtr, eventName, NameValueMap.getCPtr(parameters));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public virtual void eventOccurred(string eventName) {
      OgrePINVOKE.RenderSystem_Listener_eventOccurred__SWIG_1(swigCPtr, eventName);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    private void SwigDirectorConnect() {
      if (SwigDerivedClassHasMethod("eventOccurred", swigMethodTypes0))
        swigDelegate0 = new SwigDelegateListener_0(SwigDirectorMethodeventOccurred__SWIG_0);
      if (SwigDerivedClassHasMethod("eventOccurred", swigMethodTypes1))
        swigDelegate1 = new SwigDelegateListener_1(SwigDirectorMethodeventOccurred__SWIG_1);
      OgrePINVOKE.RenderSystem_Listener_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
    }
  
    private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
      global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
      bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Listener));
      return hasDerivedMethod;
    }
  
    private void SwigDirectorMethodeventOccurred__SWIG_0(string eventName, global::System.IntPtr parameters) {
      eventOccurred(eventName, (parameters == global::System.IntPtr.Zero) ? null : new NameValueMap(parameters, false));
    }
  
    private void SwigDirectorMethodeventOccurred__SWIG_1(string eventName) {
      eventOccurred(eventName);
    }
  
    public delegate void SwigDelegateListener_0(string eventName, global::System.IntPtr parameters);
    public delegate void SwigDelegateListener_1(string eventName);
  
    private SwigDelegateListener_0 swigDelegate0;
    private SwigDelegateListener_1 swigDelegate1;
  
    private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(string), typeof(NameValueMap) };
    private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(string) };
  }

  public static void setSharedListener(RenderSystem.Listener listener) {
    OgrePINVOKE.RenderSystem_setSharedListener(RenderSystem.Listener.getCPtr(listener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static RenderSystem.Listener getSharedListener() {
    global::System.IntPtr cPtr = OgrePINVOKE.RenderSystem_getSharedListener();
    RenderSystem.Listener ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderSystem.Listener(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addListener(RenderSystem.Listener l) {
    OgrePINVOKE.RenderSystem_addListener(swigCPtr, RenderSystem.Listener.getCPtr(l));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeListener(RenderSystem.Listener l) {
    OgrePINVOKE.RenderSystem_removeListener(swigCPtr, RenderSystem.Listener.getCPtr(l));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringList getRenderSystemEvents() {
    StringList ret = new StringList(OgrePINVOKE.RenderSystem_getRenderSystemEvents(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void preExtraThreadsStarted() {
    OgrePINVOKE.RenderSystem_preExtraThreadsStarted(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void postExtraThreadsStarted() {
    OgrePINVOKE.RenderSystem_postExtraThreadsStarted(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void registerThread() {
    OgrePINVOKE.RenderSystem_registerThread(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void unregisterThread() {
    OgrePINVOKE.RenderSystem_unregisterThread(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void beginProfileEvent(string eventName) {
    OgrePINVOKE.RenderSystem_beginProfileEvent(swigCPtr, eventName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void endProfileEvent() {
    OgrePINVOKE.RenderSystem_endProfileEvent(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void markProfileEvent(string event_) {
    OgrePINVOKE.RenderSystem_markProfileEvent(swigCPtr, event_);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getCustomAttribute(string name, global::System.IntPtr pData) {
    OgrePINVOKE.RenderSystem_getCustomAttribute(swigCPtr, name, pData);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool setDrawBuffer(ColourBufferType colourBuffer) {
    bool ret = OgrePINVOKE.RenderSystem_setDrawBuffer(swigCPtr, (int)colourBuffer);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
