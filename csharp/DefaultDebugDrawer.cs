//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class DefaultDebugDrawer : DebugDrawer {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal DefaultDebugDrawer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.DefaultDebugDrawer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DefaultDebugDrawer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_DefaultDebugDrawer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public DefaultDebugDrawer() : this(OgrePINVOKE.new_DefaultDebugDrawer(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStatic(bool enable) {
    OgrePINVOKE.DefaultDebugDrawer_setStatic(swigCPtr, enable);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void drawBone(Node node, Affine3 transform) {
    OgrePINVOKE.DefaultDebugDrawer_drawBone__SWIG_0(swigCPtr, Node.getCPtr(node), Affine3.getCPtr(transform));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void drawBone(Node node) {
    OgrePINVOKE.DefaultDebugDrawer_drawBone__SWIG_1(swigCPtr, Node.getCPtr(node));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void drawSceneNode(SceneNode node) {
    OgrePINVOKE.DefaultDebugDrawer_drawSceneNode(swigCPtr, SceneNode.getCPtr(node));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void drawFrustum(Frustum frust) {
    OgrePINVOKE.DefaultDebugDrawer_drawFrustum(swigCPtr, Frustum.getCPtr(frust));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void drawWireBox(AxisAlignedBox aabb, ColourValue colour) {
    OgrePINVOKE.DefaultDebugDrawer_drawWireBox__SWIG_0(swigCPtr, AxisAlignedBox.getCPtr(aabb), ColourValue.getCPtr(colour));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void drawWireBox(AxisAlignedBox aabb) {
    OgrePINVOKE.DefaultDebugDrawer_drawWireBox__SWIG_1(swigCPtr, AxisAlignedBox.getCPtr(aabb));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void drawAxes(Affine3 pose, float size) {
    OgrePINVOKE.DefaultDebugDrawer_drawAxes__SWIG_0(swigCPtr, Affine3.getCPtr(pose), size);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void drawAxes(Affine3 pose) {
    OgrePINVOKE.DefaultDebugDrawer_drawAxes__SWIG_1(swigCPtr, Affine3.getCPtr(pose));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBoneAxesSize(float size) {
    OgrePINVOKE.DefaultDebugDrawer_setBoneAxesSize(swigCPtr, size);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum DrawType {
    DT_AXES = 1 << 0,
    DT_WIREBOX = 1 << 1
  }

}

}
