//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class MeshSerializerListener : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MeshSerializerListener(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MeshSerializerListener obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MeshSerializerListener() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_MeshSerializerListener(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void processMaterialName(Mesh mesh, SWIGTYPE_p_std__string name) {
    OgrePINVOKE.MeshSerializerListener_processMaterialName(swigCPtr, Mesh.getCPtr(mesh), SWIGTYPE_p_std__string.getCPtr(name));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void processSkeletonName(Mesh mesh, SWIGTYPE_p_std__string name) {
    OgrePINVOKE.MeshSerializerListener_processSkeletonName(swigCPtr, Mesh.getCPtr(mesh), SWIGTYPE_p_std__string.getCPtr(name));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void processMeshCompleted(Mesh mesh) {
    OgrePINVOKE.MeshSerializerListener_processMeshCompleted(swigCPtr, Mesh.getCPtr(mesh));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public MeshSerializerListener() : this(OgrePINVOKE.new_MeshSerializerListener(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("processMaterialName", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateMeshSerializerListener_0(SwigDirectorMethodprocessMaterialName);
    if (SwigDerivedClassHasMethod("processSkeletonName", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateMeshSerializerListener_1(SwigDirectorMethodprocessSkeletonName);
    if (SwigDerivedClassHasMethod("processMeshCompleted", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateMeshSerializerListener_2(SwigDirectorMethodprocessMeshCompleted);
    OgrePINVOKE.MeshSerializerListener_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(MeshSerializerListener));
    return hasDerivedMethod;
  }

  private void SwigDirectorMethodprocessMaterialName(global::System.IntPtr mesh, global::System.IntPtr name) {
    processMaterialName((mesh == global::System.IntPtr.Zero) ? null : new Mesh(mesh, false), (name == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__string(name, false));
  }

  private void SwigDirectorMethodprocessSkeletonName(global::System.IntPtr mesh, global::System.IntPtr name) {
    processSkeletonName((mesh == global::System.IntPtr.Zero) ? null : new Mesh(mesh, false), (name == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__string(name, false));
  }

  private void SwigDirectorMethodprocessMeshCompleted(global::System.IntPtr mesh) {
    processMeshCompleted((mesh == global::System.IntPtr.Zero) ? null : new Mesh(mesh, false));
  }

  public delegate void SwigDelegateMeshSerializerListener_0(global::System.IntPtr mesh, global::System.IntPtr name);
  public delegate void SwigDelegateMeshSerializerListener_1(global::System.IntPtr mesh, global::System.IntPtr name);
  public delegate void SwigDelegateMeshSerializerListener_2(global::System.IntPtr mesh);

  private SwigDelegateMeshSerializerListener_0 swigDelegate0;
  private SwigDelegateMeshSerializerListener_1 swigDelegate1;
  private SwigDelegateMeshSerializerListener_2 swigDelegate2;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(Mesh), typeof(SWIGTYPE_p_std__string) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(Mesh), typeof(SWIGTYPE_p_std__string) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(Mesh) };
}

}
