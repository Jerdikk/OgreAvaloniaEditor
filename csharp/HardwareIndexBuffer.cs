//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class HardwareIndexBuffer : HardwareBuffer {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal HardwareIndexBuffer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.HardwareIndexBuffer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(HardwareIndexBuffer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_HardwareIndexBuffer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public HardwareIndexBuffer(HardwareBufferManagerBase mgr, HardwareIndexBuffer.IndexType idxType, uint numIndexes, byte usage, bool useShadowBuffer) : this(OgrePINVOKE.new_HardwareIndexBuffer__SWIG_0(HardwareBufferManagerBase.getCPtr(mgr), (int)idxType, numIndexes, usage, useShadowBuffer), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public HardwareIndexBuffer(HardwareBufferManagerBase mgr, HardwareIndexBuffer.IndexType idxType, uint numIndexes, HardwareBuffer delegate_) : this(OgrePINVOKE.new_HardwareIndexBuffer__SWIG_1(HardwareBufferManagerBase.getCPtr(mgr), (int)idxType, numIndexes, HardwareBuffer.getCPtr(delegate_)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public HardwareBufferManagerBase getManager() {
    global::System.IntPtr cPtr = OgrePINVOKE.HardwareIndexBuffer_getManager(swigCPtr);
    HardwareBufferManagerBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new HardwareBufferManagerBase(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public HardwareIndexBuffer.IndexType getType() {
    HardwareIndexBuffer.IndexType ret = (HardwareIndexBuffer.IndexType)OgrePINVOKE.HardwareIndexBuffer_getType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumIndexes() {
    uint ret = OgrePINVOKE.HardwareIndexBuffer_getNumIndexes(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte getIndexSize() {
    byte ret = OgrePINVOKE.HardwareIndexBuffer_getIndexSize(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint indexSize(HardwareIndexBuffer.IndexType type) {
    uint ret = OgrePINVOKE.HardwareIndexBuffer_indexSize((int)type);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum IndexType {
    IT_16BIT,
    IT_32BIT
  }

}

}
