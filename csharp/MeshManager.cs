//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class MeshManager : ResourceManager {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal MeshManager(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.MeshManager_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MeshManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_MeshManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public MeshManager() : this(OgrePINVOKE.new_MeshManager(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _initialise() {
    OgrePINVOKE.MeshManager__initialise(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public MeshPtr getByName(string name, string groupName) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_getByName__SWIG_0(swigCPtr, name, groupName), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr getByName(string name) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_getByName__SWIG_1(swigCPtr, name), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr create(string name, string group, bool isManual, ManualResourceLoader loader, NameValueMap createParams) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_create__SWIG_0(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader), NameValueMap.getCPtr(createParams)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr create(string name, string group, bool isManual, ManualResourceLoader loader) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_create__SWIG_1(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr create(string name, string group, bool isManual) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_create__SWIG_2(swigCPtr, name, group, isManual), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr create(string name, string group) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_create__SWIG_3(swigCPtr, name, group), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t createOrRetrieve(string name, string group, bool isManual, ManualResourceLoader loader, NameValueMap createParams) {
    SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t(OgrePINVOKE.MeshManager_createOrRetrieve__SWIG_0_0(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader), NameValueMap.getCPtr(createParams)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t createOrRetrieve(string name, string group, bool isManual, ManualResourceLoader loader) {
    SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t(OgrePINVOKE.MeshManager_createOrRetrieve__SWIG_0_1(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t createOrRetrieve(string name, string group, bool isManual) {
    SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t(OgrePINVOKE.MeshManager_createOrRetrieve__SWIG_0_2(swigCPtr, name, group, isManual), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t createOrRetrieve(string name, string group) {
    SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t(OgrePINVOKE.MeshManager_createOrRetrieve__SWIG_0_3(swigCPtr, name, group), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t createOrRetrieve(string name, string group, bool isManual, ManualResourceLoader loader, NameValueMap createParams, byte vertexBufferUsage, byte indexBufferUsage, bool vertexBufferShadowed, bool indexBufferShadowed) {
    SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t(OgrePINVOKE.MeshManager_createOrRetrieve__SWIG_1(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader), NameValueMap.getCPtr(createParams), vertexBufferUsage, indexBufferUsage, vertexBufferShadowed, indexBufferShadowed), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t createOrRetrieve(string name, string group, bool isManual, ManualResourceLoader loader, NameValueMap createParams, byte vertexBufferUsage, byte indexBufferUsage, bool vertexBufferShadowed) {
    SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t(OgrePINVOKE.MeshManager_createOrRetrieve__SWIG_2(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader), NameValueMap.getCPtr(createParams), vertexBufferUsage, indexBufferUsage, vertexBufferShadowed), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t createOrRetrieve(string name, string group, bool isManual, ManualResourceLoader loader, NameValueMap createParams, byte vertexBufferUsage, byte indexBufferUsage) {
    SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t(OgrePINVOKE.MeshManager_createOrRetrieve__SWIG_3(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader), NameValueMap.getCPtr(createParams), vertexBufferUsage, indexBufferUsage), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t createOrRetrieve(string name, string group, bool isManual, ManualResourceLoader loader, NameValueMap createParams, byte vertexBufferUsage) {
    SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t(OgrePINVOKE.MeshManager_createOrRetrieve__SWIG_4(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader), NameValueMap.getCPtr(createParams), vertexBufferUsage), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr prepare(string filename, string groupName, byte vertexBufferUsage, byte indexBufferUsage, bool vertexBufferShadowed, bool indexBufferShadowed) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_prepare__SWIG_0(swigCPtr, filename, groupName, vertexBufferUsage, indexBufferUsage, vertexBufferShadowed, indexBufferShadowed), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr prepare(string filename, string groupName, byte vertexBufferUsage, byte indexBufferUsage, bool vertexBufferShadowed) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_prepare__SWIG_1(swigCPtr, filename, groupName, vertexBufferUsage, indexBufferUsage, vertexBufferShadowed), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr prepare(string filename, string groupName, byte vertexBufferUsage, byte indexBufferUsage) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_prepare__SWIG_2(swigCPtr, filename, groupName, vertexBufferUsage, indexBufferUsage), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr prepare(string filename, string groupName, byte vertexBufferUsage) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_prepare__SWIG_3(swigCPtr, filename, groupName, vertexBufferUsage), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr prepare(string filename, string groupName) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_prepare__SWIG_4(swigCPtr, filename, groupName), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr load(string filename, string groupName, byte vertexBufferUsage, byte indexBufferUsage, bool vertexBufferShadowed, bool indexBufferShadowed) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_load__SWIG_0(swigCPtr, filename, groupName, vertexBufferUsage, indexBufferUsage, vertexBufferShadowed, indexBufferShadowed), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr load(string filename, string groupName, byte vertexBufferUsage, byte indexBufferUsage, bool vertexBufferShadowed) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_load__SWIG_1(swigCPtr, filename, groupName, vertexBufferUsage, indexBufferUsage, vertexBufferShadowed), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr load(string filename, string groupName, byte vertexBufferUsage, byte indexBufferUsage) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_load__SWIG_2(swigCPtr, filename, groupName, vertexBufferUsage, indexBufferUsage), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr load(string filename, string groupName, byte vertexBufferUsage) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_load__SWIG_3(swigCPtr, filename, groupName, vertexBufferUsage), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr load(string filename, string groupName) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_load__SWIG_4(swigCPtr, filename, groupName), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createManual(string name, string groupName, ManualResourceLoader loader) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createManual__SWIG_0(swigCPtr, name, groupName, ManualResourceLoader.getCPtr(loader)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createManual(string name, string groupName) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createManual__SWIG_1(swigCPtr, name, groupName), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createPlane(string name, string groupName, Plane plane, float width, float height, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile, Vector3 upVector, byte vertexBufferUsage, byte indexBufferUsage, bool vertexShadowBuffer, bool indexShadowBuffer) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createPlane__SWIG_0(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile, Vector3.getCPtr(upVector), vertexBufferUsage, indexBufferUsage, vertexShadowBuffer, indexShadowBuffer), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createPlane(string name, string groupName, Plane plane, float width, float height, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile, Vector3 upVector, byte vertexBufferUsage, byte indexBufferUsage, bool vertexShadowBuffer) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createPlane__SWIG_1(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile, Vector3.getCPtr(upVector), vertexBufferUsage, indexBufferUsage, vertexShadowBuffer), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createPlane(string name, string groupName, Plane plane, float width, float height, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile, Vector3 upVector, byte vertexBufferUsage, byte indexBufferUsage) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createPlane__SWIG_2(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile, Vector3.getCPtr(upVector), vertexBufferUsage, indexBufferUsage), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createPlane(string name, string groupName, Plane plane, float width, float height, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile, Vector3 upVector, byte vertexBufferUsage) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createPlane__SWIG_3(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile, Vector3.getCPtr(upVector), vertexBufferUsage), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createPlane(string name, string groupName, Plane plane, float width, float height, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile, Vector3 upVector) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createPlane__SWIG_4(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile, Vector3.getCPtr(upVector)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createPlane(string name, string groupName, Plane plane, float width, float height, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createPlane__SWIG_5(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createPlane(string name, string groupName, Plane plane, float width, float height, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createPlane__SWIG_6(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, xsegments, ysegments, normals, numTexCoordSets, uTile), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createPlane(string name, string groupName, Plane plane, float width, float height, int xsegments, int ysegments, bool normals, ushort numTexCoordSets) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createPlane__SWIG_7(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, xsegments, ysegments, normals, numTexCoordSets), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createPlane(string name, string groupName, Plane plane, float width, float height, int xsegments, int ysegments, bool normals) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createPlane__SWIG_8(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, xsegments, ysegments, normals), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createPlane(string name, string groupName, Plane plane, float width, float height, int xsegments, int ysegments) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createPlane__SWIG_9(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, xsegments, ysegments), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createPlane(string name, string groupName, Plane plane, float width, float height, int xsegments) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createPlane__SWIG_10(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, xsegments), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createPlane(string name, string groupName, Plane plane, float width, float height) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createPlane__SWIG_11(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedIllusionPlane(string name, string groupName, Plane plane, float width, float height, float curvature, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile, Vector3 upVector, Quaternion orientation, byte vertexBufferUsage, byte indexBufferUsage, bool vertexShadowBuffer, bool indexShadowBuffer, int ySegmentsToKeep) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedIllusionPlane__SWIG_0(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, curvature, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile, Vector3.getCPtr(upVector), Quaternion.getCPtr(orientation), vertexBufferUsage, indexBufferUsage, vertexShadowBuffer, indexShadowBuffer, ySegmentsToKeep), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedIllusionPlane(string name, string groupName, Plane plane, float width, float height, float curvature, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile, Vector3 upVector, Quaternion orientation, byte vertexBufferUsage, byte indexBufferUsage, bool vertexShadowBuffer, bool indexShadowBuffer) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedIllusionPlane__SWIG_1(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, curvature, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile, Vector3.getCPtr(upVector), Quaternion.getCPtr(orientation), vertexBufferUsage, indexBufferUsage, vertexShadowBuffer, indexShadowBuffer), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedIllusionPlane(string name, string groupName, Plane plane, float width, float height, float curvature, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile, Vector3 upVector, Quaternion orientation, byte vertexBufferUsage, byte indexBufferUsage, bool vertexShadowBuffer) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedIllusionPlane__SWIG_2(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, curvature, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile, Vector3.getCPtr(upVector), Quaternion.getCPtr(orientation), vertexBufferUsage, indexBufferUsage, vertexShadowBuffer), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedIllusionPlane(string name, string groupName, Plane plane, float width, float height, float curvature, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile, Vector3 upVector, Quaternion orientation, byte vertexBufferUsage, byte indexBufferUsage) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedIllusionPlane__SWIG_3(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, curvature, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile, Vector3.getCPtr(upVector), Quaternion.getCPtr(orientation), vertexBufferUsage, indexBufferUsage), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedIllusionPlane(string name, string groupName, Plane plane, float width, float height, float curvature, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile, Vector3 upVector, Quaternion orientation, byte vertexBufferUsage) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedIllusionPlane__SWIG_4(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, curvature, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile, Vector3.getCPtr(upVector), Quaternion.getCPtr(orientation), vertexBufferUsage), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedIllusionPlane(string name, string groupName, Plane plane, float width, float height, float curvature, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile, Vector3 upVector, Quaternion orientation) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedIllusionPlane__SWIG_5(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, curvature, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile, Vector3.getCPtr(upVector), Quaternion.getCPtr(orientation)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedIllusionPlane(string name, string groupName, Plane plane, float width, float height, float curvature, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile, Vector3 upVector) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedIllusionPlane__SWIG_6(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, curvature, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile, Vector3.getCPtr(upVector)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedIllusionPlane(string name, string groupName, Plane plane, float width, float height, float curvature, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedIllusionPlane__SWIG_7(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, curvature, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedIllusionPlane(string name, string groupName, Plane plane, float width, float height, float curvature, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedIllusionPlane__SWIG_8(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, curvature, xsegments, ysegments, normals, numTexCoordSets, uTile), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedIllusionPlane(string name, string groupName, Plane plane, float width, float height, float curvature, int xsegments, int ysegments, bool normals, ushort numTexCoordSets) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedIllusionPlane__SWIG_9(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, curvature, xsegments, ysegments, normals, numTexCoordSets), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedIllusionPlane(string name, string groupName, Plane plane, float width, float height, float curvature, int xsegments, int ysegments, bool normals) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedIllusionPlane__SWIG_10(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, curvature, xsegments, ysegments, normals), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedIllusionPlane(string name, string groupName, Plane plane, float width, float height, float curvature, int xsegments, int ysegments) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedIllusionPlane__SWIG_11(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, curvature, xsegments, ysegments), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedIllusionPlane(string name, string groupName, Plane plane, float width, float height, float curvature, int xsegments) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedIllusionPlane__SWIG_12(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, curvature, xsegments), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedIllusionPlane(string name, string groupName, Plane plane, float width, float height, float curvature) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedIllusionPlane__SWIG_13(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, curvature), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedPlane(string name, string groupName, Plane plane, float width, float height, float bow, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile, Vector3 upVector, byte vertexBufferUsage, byte indexBufferUsage, bool vertexShadowBuffer, bool indexShadowBuffer) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedPlane__SWIG_0(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, bow, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile, Vector3.getCPtr(upVector), vertexBufferUsage, indexBufferUsage, vertexShadowBuffer, indexShadowBuffer), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedPlane(string name, string groupName, Plane plane, float width, float height, float bow, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile, Vector3 upVector, byte vertexBufferUsage, byte indexBufferUsage, bool vertexShadowBuffer) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedPlane__SWIG_1(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, bow, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile, Vector3.getCPtr(upVector), vertexBufferUsage, indexBufferUsage, vertexShadowBuffer), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedPlane(string name, string groupName, Plane plane, float width, float height, float bow, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile, Vector3 upVector, byte vertexBufferUsage, byte indexBufferUsage) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedPlane__SWIG_2(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, bow, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile, Vector3.getCPtr(upVector), vertexBufferUsage, indexBufferUsage), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedPlane(string name, string groupName, Plane plane, float width, float height, float bow, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile, Vector3 upVector, byte vertexBufferUsage) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedPlane__SWIG_3(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, bow, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile, Vector3.getCPtr(upVector), vertexBufferUsage), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedPlane(string name, string groupName, Plane plane, float width, float height, float bow, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile, Vector3 upVector) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedPlane__SWIG_4(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, bow, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile, Vector3.getCPtr(upVector)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedPlane(string name, string groupName, Plane plane, float width, float height, float bow, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile, float vTile) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedPlane__SWIG_5(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, bow, xsegments, ysegments, normals, numTexCoordSets, uTile, vTile), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedPlane(string name, string groupName, Plane plane, float width, float height, float bow, int xsegments, int ysegments, bool normals, ushort numTexCoordSets, float uTile) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedPlane__SWIG_6(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, bow, xsegments, ysegments, normals, numTexCoordSets, uTile), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedPlane(string name, string groupName, Plane plane, float width, float height, float bow, int xsegments, int ysegments, bool normals, ushort numTexCoordSets) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedPlane__SWIG_7(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, bow, xsegments, ysegments, normals, numTexCoordSets), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedPlane(string name, string groupName, Plane plane, float width, float height, float bow, int xsegments, int ysegments, bool normals) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedPlane__SWIG_8(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, bow, xsegments, ysegments, normals), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedPlane(string name, string groupName, Plane plane, float width, float height, float bow, int xsegments, int ysegments) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedPlane__SWIG_9(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, bow, xsegments, ysegments), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedPlane(string name, string groupName, Plane plane, float width, float height, float bow, int xsegments) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedPlane__SWIG_10(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, bow, xsegments), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedPlane(string name, string groupName, Plane plane, float width, float height, float bow) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedPlane__SWIG_11(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height, bow), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshPtr createCurvedPlane(string name, string groupName, Plane plane, float width, float height) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.MeshManager_createCurvedPlane__SWIG_12(swigCPtr, name, groupName, Plane.getCPtr(plane), width, height), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PatchMeshPtr createBezierPatch(string name, string groupName, global::System.IntPtr controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide, byte vbUsage, byte ibUsage, bool vbUseShadow, bool ibUseShadow) {
    PatchMeshPtr ret = new PatchMeshPtr(OgrePINVOKE.MeshManager_createBezierPatch__SWIG_0(swigCPtr, name, groupName, controlPointBuffer, VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, (int)visibleSide, vbUsage, ibUsage, vbUseShadow, ibUseShadow), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PatchMeshPtr createBezierPatch(string name, string groupName, global::System.IntPtr controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide, byte vbUsage, byte ibUsage, bool vbUseShadow) {
    PatchMeshPtr ret = new PatchMeshPtr(OgrePINVOKE.MeshManager_createBezierPatch__SWIG_1(swigCPtr, name, groupName, controlPointBuffer, VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, (int)visibleSide, vbUsage, ibUsage, vbUseShadow), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PatchMeshPtr createBezierPatch(string name, string groupName, global::System.IntPtr controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide, byte vbUsage, byte ibUsage) {
    PatchMeshPtr ret = new PatchMeshPtr(OgrePINVOKE.MeshManager_createBezierPatch__SWIG_2(swigCPtr, name, groupName, controlPointBuffer, VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, (int)visibleSide, vbUsage, ibUsage), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PatchMeshPtr createBezierPatch(string name, string groupName, global::System.IntPtr controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide, byte vbUsage) {
    PatchMeshPtr ret = new PatchMeshPtr(OgrePINVOKE.MeshManager_createBezierPatch__SWIG_3(swigCPtr, name, groupName, controlPointBuffer, VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, (int)visibleSide, vbUsage), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PatchMeshPtr createBezierPatch(string name, string groupName, global::System.IntPtr controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide) {
    PatchMeshPtr ret = new PatchMeshPtr(OgrePINVOKE.MeshManager_createBezierPatch__SWIG_4(swigCPtr, name, groupName, controlPointBuffer, VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, (int)visibleSide), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PatchMeshPtr createBezierPatch(string name, string groupName, global::System.IntPtr controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel) {
    PatchMeshPtr ret = new PatchMeshPtr(OgrePINVOKE.MeshManager_createBezierPatch__SWIG_5(swigCPtr, name, groupName, controlPointBuffer, VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PatchMeshPtr createBezierPatch(string name, string groupName, global::System.IntPtr controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel) {
    PatchMeshPtr ret = new PatchMeshPtr(OgrePINVOKE.MeshManager_createBezierPatch__SWIG_6(swigCPtr, name, groupName, controlPointBuffer, VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PatchMeshPtr createBezierPatch(string name, string groupName, global::System.IntPtr controlPointBuffer, VertexDeclaration declaration, uint width, uint height) {
    PatchMeshPtr ret = new PatchMeshPtr(OgrePINVOKE.MeshManager_createBezierPatch__SWIG_7(swigCPtr, name, groupName, controlPointBuffer, VertexDeclaration.getCPtr(declaration), width, height), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setPrepareAllMeshesForShadowVolumes(bool enable) {
    OgrePINVOKE.MeshManager_setPrepareAllMeshesForShadowVolumes(swigCPtr, enable);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getPrepareAllMeshesForShadowVolumes() {
    bool ret = OgrePINVOKE.MeshManager_getPrepareAllMeshesForShadowVolumes(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MeshManager getSingleton() {
    MeshManager ret = new MeshManager(OgrePINVOKE.MeshManager_getSingleton(), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VertexElementType getBlendWeightsBaseElementType() {
    VertexElementType ret = (VertexElementType)OgrePINVOKE.MeshManager_getBlendWeightsBaseElementType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBlendWeightsBaseElementType(VertexElementType vet) {
    OgrePINVOKE.MeshManager_setBlendWeightsBaseElementType(swigCPtr, (int)vet);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setBonesUseObjectSpace(bool enable) {
    OgrePINVOKE.MeshManager_setBonesUseObjectSpace(enable);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool getBonesUseObjectSpace() {
    bool ret = OgrePINVOKE.MeshManager_getBonesUseObjectSpace();
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getBoundsPaddingFactor() {
    float ret = OgrePINVOKE.MeshManager_getBoundsPaddingFactor(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBoundsPaddingFactor(float paddingFactor) {
    OgrePINVOKE.MeshManager_setBoundsPaddingFactor(swigCPtr, paddingFactor);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setListener(MeshSerializerListener listener) {
    OgrePINVOKE.MeshManager_setListener(swigCPtr, MeshSerializerListener.getCPtr(listener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public MeshSerializerListener getListener() {
    global::System.IntPtr cPtr = OgrePINVOKE.MeshManager_getListener(swigCPtr);
    MeshSerializerListener ret = (cPtr == global::System.IntPtr.Zero) ? null : new MeshSerializerListener(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
