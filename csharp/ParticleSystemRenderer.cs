//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ParticleSystemRenderer : StringInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ParticleSystemRenderer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.ParticleSystemRenderer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ParticleSystemRenderer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_ParticleSystemRenderer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual string getType() {
    string ret = OgrePINVOKE.ParticleSystemRenderer_getType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _updateRenderQueue(RenderQueue queue, SWIGTYPE_p_std__vectorT_Ogre__Particle_p_t currentParticles, bool cullIndividually) {
    OgrePINVOKE.ParticleSystemRenderer__updateRenderQueue(swigCPtr, RenderQueue.getCPtr(queue), SWIGTYPE_p_std__vectorT_Ogre__Particle_p_t.getCPtr(currentParticles), cullIndividually);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _setMaterial(MaterialPtr mat) {
    OgrePINVOKE.ParticleSystemRenderer__setMaterial(swigCPtr, MaterialPtr.getCPtr(mat));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyCurrentCamera(Camera cam) {
    OgrePINVOKE.ParticleSystemRenderer__notifyCurrentCamera(swigCPtr, Camera.getCPtr(cam));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyAttached(Node parent, bool isTagPoint) {
    OgrePINVOKE.ParticleSystemRenderer__notifyAttached__SWIG_0(swigCPtr, Node.getCPtr(parent), isTagPoint);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyAttached(Node parent) {
    OgrePINVOKE.ParticleSystemRenderer__notifyAttached__SWIG_1(swigCPtr, Node.getCPtr(parent));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _notifyParticleQuota(uint quota) {
    OgrePINVOKE.ParticleSystemRenderer__notifyParticleQuota(swigCPtr, quota);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _notifyDefaultDimensions(float width, float height) {
    OgrePINVOKE.ParticleSystemRenderer__notifyDefaultDimensions(swigCPtr, width, height);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _notifyParticleEmitted(Particle particle) {
    OgrePINVOKE.ParticleSystemRenderer__notifyParticleEmitted(swigCPtr, Particle.getCPtr(particle));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _notifyParticleExpired(Particle particle) {
    OgrePINVOKE.ParticleSystemRenderer__notifyParticleExpired(swigCPtr, Particle.getCPtr(particle));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _notifyParticleMoved(SWIGTYPE_p_std__vectorT_Ogre__Particle_p_t currentParticles) {
    OgrePINVOKE.ParticleSystemRenderer__notifyParticleMoved(swigCPtr, SWIGTYPE_p_std__vectorT_Ogre__Particle_p_t.getCPtr(currentParticles));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _notifyParticleCleared(SWIGTYPE_p_std__vectorT_Ogre__Particle_p_t currentParticles) {
    OgrePINVOKE.ParticleSystemRenderer__notifyParticleCleared(swigCPtr, SWIGTYPE_p_std__vectorT_Ogre__Particle_p_t.getCPtr(currentParticles));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Ogre__ParticleVisualData _createVisualData() {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemRenderer__createVisualData(swigCPtr);
    SWIGTYPE_p_Ogre__ParticleVisualData ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Ogre__ParticleVisualData(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _destroyVisualData(SWIGTYPE_p_Ogre__ParticleVisualData arg0) {
    OgrePINVOKE.ParticleSystemRenderer__destroyVisualData(swigCPtr, SWIGTYPE_p_Ogre__ParticleVisualData.getCPtr(arg0));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setRenderQueueGroup(byte queueID) {
    OgrePINVOKE.ParticleSystemRenderer_setRenderQueueGroup(swigCPtr, queueID);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setRenderQueueGroupAndPriority(byte queueID, ushort priority) {
    OgrePINVOKE.ParticleSystemRenderer_setRenderQueueGroupAndPriority(swigCPtr, queueID, priority);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setKeepParticlesInLocalSpace(bool keepLocal) {
    OgrePINVOKE.ParticleSystemRenderer_setKeepParticlesInLocalSpace(swigCPtr, keepLocal);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SortMode _getSortMode() {
    SortMode ret = (SortMode)OgrePINVOKE.ParticleSystemRenderer__getSortMode(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void visitRenderables(Renderable.Visitor visitor, bool debugRenderables) {
    OgrePINVOKE.ParticleSystemRenderer_visitRenderables__SWIG_0(swigCPtr, Renderable.Visitor.getCPtr(visitor), debugRenderables);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void visitRenderables(Renderable.Visitor visitor) {
    OgrePINVOKE.ParticleSystemRenderer_visitRenderables__SWIG_1(swigCPtr, Renderable.Visitor.getCPtr(visitor));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _notifyBoundingBox(AxisAlignedBox aabb) {
    OgrePINVOKE.ParticleSystemRenderer__notifyBoundingBox(swigCPtr, AxisAlignedBox.getCPtr(aabb));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _notifyCastShadows(bool enabled) {
    OgrePINVOKE.ParticleSystemRenderer__notifyCastShadows(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
