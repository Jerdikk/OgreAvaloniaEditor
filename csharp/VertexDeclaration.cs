//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class VertexDeclaration : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VertexDeclaration(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VertexDeclaration obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~VertexDeclaration() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_VertexDeclaration(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public VertexDeclaration() : this(OgrePINVOKE.new_VertexDeclaration(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getElementCount() {
    uint ret = OgrePINVOKE.VertexDeclaration_getElementCount(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__listT_Ogre__VertexElement_t getElements() {
    SWIGTYPE_p_std__listT_Ogre__VertexElement_t ret = new SWIGTYPE_p_std__listT_Ogre__VertexElement_t(OgrePINVOKE.VertexDeclaration_getElements(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VertexElement getElement(ushort index) {
    global::System.IntPtr cPtr = OgrePINVOKE.VertexDeclaration_getElement(swigCPtr, index);
    VertexElement ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexElement(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void sort() {
    OgrePINVOKE.VertexDeclaration_sort(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void closeGapsInSource() {
    OgrePINVOKE.VertexDeclaration_closeGapsInSource(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public VertexDeclaration getAutoOrganisedDeclaration(bool skeletalAnimation, bool vertexAnimation, bool vertexAnimationNormals) {
    global::System.IntPtr cPtr = OgrePINVOKE.VertexDeclaration_getAutoOrganisedDeclaration(swigCPtr, skeletalAnimation, vertexAnimation, vertexAnimationNormals);
    VertexDeclaration ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexDeclaration(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getMaxSource() {
    ushort ret = OgrePINVOKE.VertexDeclaration_getMaxSource(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VertexElement addElement(ushort source, uint offset, VertexElementType theType, VertexElementSemantic semantic, ushort index) {
    VertexElement ret = new VertexElement(OgrePINVOKE.VertexDeclaration_addElement__SWIG_0(swigCPtr, source, offset, (int)theType, (int)semantic, index), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VertexElement addElement(ushort source, uint offset, VertexElementType theType, VertexElementSemantic semantic) {
    VertexElement ret = new VertexElement(OgrePINVOKE.VertexDeclaration_addElement__SWIG_1(swigCPtr, source, offset, (int)theType, (int)semantic), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VertexElement insertElement(ushort atPosition, ushort source, uint offset, VertexElementType theType, VertexElementSemantic semantic, ushort index) {
    VertexElement ret = new VertexElement(OgrePINVOKE.VertexDeclaration_insertElement__SWIG_0(swigCPtr, atPosition, source, offset, (int)theType, (int)semantic, index), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VertexElement insertElement(ushort atPosition, ushort source, uint offset, VertexElementType theType, VertexElementSemantic semantic) {
    VertexElement ret = new VertexElement(OgrePINVOKE.VertexDeclaration_insertElement__SWIG_1(swigCPtr, atPosition, source, offset, (int)theType, (int)semantic), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeElement(ushort elem_index) {
    OgrePINVOKE.VertexDeclaration_removeElement__SWIG_0(swigCPtr, elem_index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeElement(VertexElementSemantic semantic, ushort index) {
    OgrePINVOKE.VertexDeclaration_removeElement__SWIG_1(swigCPtr, (int)semantic, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeElement(VertexElementSemantic semantic) {
    OgrePINVOKE.VertexDeclaration_removeElement__SWIG_2(swigCPtr, (int)semantic);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeAllElements() {
    OgrePINVOKE.VertexDeclaration_removeAllElements(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void modifyElement(ushort elem_index, ushort source, uint offset, VertexElementType theType, VertexElementSemantic semantic, ushort index) {
    OgrePINVOKE.VertexDeclaration_modifyElement__SWIG_0(swigCPtr, elem_index, source, offset, (int)theType, (int)semantic, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void modifyElement(ushort elem_index, ushort source, uint offset, VertexElementType theType, VertexElementSemantic semantic) {
    OgrePINVOKE.VertexDeclaration_modifyElement__SWIG_1(swigCPtr, elem_index, source, offset, (int)theType, (int)semantic);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public VertexElement findElementBySemantic(VertexElementSemantic sem, ushort index) {
    global::System.IntPtr cPtr = OgrePINVOKE.VertexDeclaration_findElementBySemantic__SWIG_0(swigCPtr, (int)sem, index);
    VertexElement ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexElement(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VertexElement findElementBySemantic(VertexElementSemantic sem) {
    global::System.IntPtr cPtr = OgrePINVOKE.VertexDeclaration_findElementBySemantic__SWIG_1(swigCPtr, (int)sem);
    VertexElement ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexElement(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__listT_Ogre__VertexElement_t findElementsBySource(ushort source) {
    SWIGTYPE_p_std__listT_Ogre__VertexElement_t ret = new SWIGTYPE_p_std__listT_Ogre__VertexElement_t(OgrePINVOKE.VertexDeclaration_findElementsBySource(swigCPtr, source), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getVertexSize(ushort source) {
    uint ret = OgrePINVOKE.VertexDeclaration_getVertexSize(swigCPtr, source);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getNextFreeTextureCoordinate() {
    ushort ret = OgrePINVOKE.VertexDeclaration_getNextFreeTextureCoordinate(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VertexDeclaration clone(HardwareBufferManagerBase mgr) {
    global::System.IntPtr cPtr = OgrePINVOKE.VertexDeclaration_clone__SWIG_0(swigCPtr, HardwareBufferManagerBase.getCPtr(mgr));
    VertexDeclaration ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexDeclaration(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VertexDeclaration clone() {
    global::System.IntPtr cPtr = OgrePINVOKE.VertexDeclaration_clone__SWIG_1(swigCPtr);
    VertexDeclaration ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexDeclaration(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
