//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class Event : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Event(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Event obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Event() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BitesPINVOKE.delete_Event(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int type {
    set {
      BitesPINVOKE.Event_type_set(swigCPtr, value);
      if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = BitesPINVOKE.Event_type_get(swigCPtr);
      if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public KeyboardEvent key {
    set {
      BitesPINVOKE.Event_key_set(swigCPtr, KeyboardEvent.getCPtr(value));
      if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = BitesPINVOKE.Event_key_get(swigCPtr);
      KeyboardEvent ret = (cPtr == global::System.IntPtr.Zero) ? null : new KeyboardEvent(cPtr, false);
      if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MouseButtonEvent button {
    set {
      BitesPINVOKE.Event_button_set(swigCPtr, MouseButtonEvent.getCPtr(value));
      if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = BitesPINVOKE.Event_button_get(swigCPtr);
      MouseButtonEvent ret = (cPtr == global::System.IntPtr.Zero) ? null : new MouseButtonEvent(cPtr, false);
      if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MouseWheelEvent wheel {
    set {
      BitesPINVOKE.Event_wheel_set(swigCPtr, MouseWheelEvent.getCPtr(value));
      if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = BitesPINVOKE.Event_wheel_get(swigCPtr);
      MouseWheelEvent ret = (cPtr == global::System.IntPtr.Zero) ? null : new MouseWheelEvent(cPtr, false);
      if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MouseMotionEvent motion {
    set {
      BitesPINVOKE.Event_motion_set(swigCPtr, MouseMotionEvent.getCPtr(value));
      if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = BitesPINVOKE.Event_motion_get(swigCPtr);
      MouseMotionEvent ret = (cPtr == global::System.IntPtr.Zero) ? null : new MouseMotionEvent(cPtr, false);
      if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public TouchFingerEvent tfinger {
    set {
      BitesPINVOKE.Event_tfinger_set(swigCPtr, TouchFingerEvent.getCPtr(value));
      if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = BitesPINVOKE.Event_tfinger_get(swigCPtr);
      TouchFingerEvent ret = (cPtr == global::System.IntPtr.Zero) ? null : new TouchFingerEvent(cPtr, false);
      if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public TextInputEvent text {
    set {
      BitesPINVOKE.Event_text_set(swigCPtr, TextInputEvent.getCPtr(value));
      if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = BitesPINVOKE.Event_text_get(swigCPtr);
      TextInputEvent ret = (cPtr == global::System.IntPtr.Zero) ? null : new TextInputEvent(cPtr, false);
      if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public AxisEvent axis {
    set {
      BitesPINVOKE.Event_axis_set(swigCPtr, AxisEvent.getCPtr(value));
      if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = BitesPINVOKE.Event_axis_get(swigCPtr);
      AxisEvent ret = (cPtr == global::System.IntPtr.Zero) ? null : new AxisEvent(cPtr, false);
      if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ButtonEvent cbutton {
    set {
      BitesPINVOKE.Event_cbutton_set(swigCPtr, ButtonEvent.getCPtr(value));
      if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = BitesPINVOKE.Event_cbutton_get(swigCPtr);
      ButtonEvent ret = (cPtr == global::System.IntPtr.Zero) ? null : new ButtonEvent(cPtr, false);
      if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Event() : this(BitesPINVOKE.new_Event(), true) {
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
