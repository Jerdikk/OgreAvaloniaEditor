//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class Terrain : SceneManager.SceneManager_Listener {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Terrain(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgreTerrainPINVOKE.Terrain_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Terrain obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreTerrainPINVOKE.delete_Terrain(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Terrain(SceneManager sm) : this(OgreTerrainPINVOKE.new_Terrain(SceneManager.getCPtr(sm)), true) {
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint TERRAIN_CHUNK_ID {
    get {
      uint ret = OgreTerrainPINVOKE.Terrain_TERRAIN_CHUNK_ID_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ushort TERRAIN_CHUNK_VERSION {
    get {
      ushort ret = OgreTerrainPINVOKE.Terrain_TERRAIN_CHUNK_VERSION_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ushort TERRAIN_MAX_BATCH_SIZE {
    get {
      ushort ret = OgreTerrainPINVOKE.Terrain_TERRAIN_MAX_BATCH_SIZE_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint TERRAINLAYERDECLARATION_CHUNK_ID {
    get {
      uint ret = OgreTerrainPINVOKE.Terrain_TERRAINLAYERDECLARATION_CHUNK_ID_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ushort TERRAINLAYERDECLARATION_CHUNK_VERSION {
    get {
      ushort ret = OgreTerrainPINVOKE.Terrain_TERRAINLAYERDECLARATION_CHUNK_VERSION_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint TERRAINLAYERSAMPLER_CHUNK_ID {
    get {
      uint ret = OgreTerrainPINVOKE.Terrain_TERRAINLAYERSAMPLER_CHUNK_ID_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ushort TERRAINLAYERSAMPLER_CHUNK_VERSION {
    get {
      ushort ret = OgreTerrainPINVOKE.Terrain_TERRAINLAYERSAMPLER_CHUNK_VERSION_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint TERRAINLAYERSAMPLERELEMENT_CHUNK_ID {
    get {
      uint ret = OgreTerrainPINVOKE.Terrain_TERRAINLAYERSAMPLERELEMENT_CHUNK_ID_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ushort TERRAINLAYERSAMPLERELEMENT_CHUNK_VERSION {
    get {
      ushort ret = OgreTerrainPINVOKE.Terrain_TERRAINLAYERSAMPLERELEMENT_CHUNK_VERSION_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint TERRAINLAYERINSTANCE_CHUNK_ID {
    get {
      uint ret = OgreTerrainPINVOKE.Terrain_TERRAINLAYERINSTANCE_CHUNK_ID_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ushort TERRAINLAYERINSTANCE_CHUNK_VERSION {
    get {
      ushort ret = OgreTerrainPINVOKE.Terrain_TERRAINLAYERINSTANCE_CHUNK_VERSION_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint TERRAINDERIVEDDATA_CHUNK_ID {
    get {
      uint ret = OgreTerrainPINVOKE.Terrain_TERRAINDERIVEDDATA_CHUNK_ID_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ushort TERRAINDERIVEDDATA_CHUNK_VERSION {
    get {
      ushort ret = OgreTerrainPINVOKE.Terrain_TERRAINDERIVEDDATA_CHUNK_VERSION_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint TERRAINGENERALINFO_CHUNK_ID {
    get {
      uint ret = OgreTerrainPINVOKE.Terrain_TERRAINGENERALINFO_CHUNK_ID_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ushort TERRAINGENERALINFO_CHUNK_VERSION {
    get {
      ushort ret = OgreTerrainPINVOKE.Terrain_TERRAINGENERALINFO_CHUNK_VERSION_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint LOD_MORPH_CUSTOM_PARAM {
    get {
      uint ret = OgreTerrainPINVOKE.Terrain_LOD_MORPH_CUSTOM_PARAM_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public class LayerInstance : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal LayerInstance(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LayerInstance obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~LayerInstance() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreTerrainPINVOKE.delete_Terrain_LayerInstance(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public float worldSize {
      set {
        OgreTerrainPINVOKE.Terrain_LayerInstance_worldSize_set(swigCPtr, value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgreTerrainPINVOKE.Terrain_LayerInstance_worldSize_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public StringList textureNames {
      set {
        OgreTerrainPINVOKE.Terrain_LayerInstance_textureNames_set(swigCPtr, StringList.getCPtr(value));
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_LayerInstance_textureNames_get(swigCPtr);
        StringList ret = (cPtr == global::System.IntPtr.Zero) ? null : new StringList(cPtr, false);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public LayerInstance() : this(OgreTerrainPINVOKE.new_Terrain_LayerInstance(), true) {
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public class ImportData : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ImportData(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImportData obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ImportData() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreTerrainPINVOKE.delete_Terrain_ImportData(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public Terrain.Alignment terrainAlign {
      set {
        OgreTerrainPINVOKE.Terrain_ImportData_terrainAlign_set(swigCPtr, (int)value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        Terrain.Alignment ret = (Terrain.Alignment)OgreTerrainPINVOKE.Terrain_ImportData_terrainAlign_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public ushort terrainSize {
      set {
        OgreTerrainPINVOKE.Terrain_ImportData_terrainSize_set(swigCPtr, value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        ushort ret = OgreTerrainPINVOKE.Terrain_ImportData_terrainSize_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public ushort maxBatchSize {
      set {
        OgreTerrainPINVOKE.Terrain_ImportData_maxBatchSize_set(swigCPtr, value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        ushort ret = OgreTerrainPINVOKE.Terrain_ImportData_maxBatchSize_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public ushort minBatchSize {
      set {
        OgreTerrainPINVOKE.Terrain_ImportData_minBatchSize_set(swigCPtr, value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        ushort ret = OgreTerrainPINVOKE.Terrain_ImportData_minBatchSize_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Vector3 pos {
      set {
        OgreTerrainPINVOKE.Terrain_ImportData_pos_set(swigCPtr, Vector3.getCPtr(value));
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_ImportData_pos_get(swigCPtr);
        Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float worldSize {
      set {
        OgreTerrainPINVOKE.Terrain_ImportData_worldSize_set(swigCPtr, value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgreTerrainPINVOKE.Terrain_ImportData_worldSize_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Image inputImage {
      set {
        OgreTerrainPINVOKE.Terrain_ImportData_inputImage_set(swigCPtr, Image.getCPtr(value));
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_ImportData_inputImage_get(swigCPtr);
        Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, false);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public SWIGTYPE_p_float inputFloat {
      set {
        OgreTerrainPINVOKE.Terrain_ImportData_inputFloat_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_ImportData_inputFloat_get(swigCPtr);
        SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float constantHeight {
      set {
        OgreTerrainPINVOKE.Terrain_ImportData_constantHeight_set(swigCPtr, value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgreTerrainPINVOKE.Terrain_ImportData_constantHeight_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public bool deleteInputData {
      set {
        OgreTerrainPINVOKE.Terrain_ImportData_deleteInputData_set(swigCPtr, value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        bool ret = OgreTerrainPINVOKE.Terrain_ImportData_deleteInputData_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float inputScale {
      set {
        OgreTerrainPINVOKE.Terrain_ImportData_inputScale_set(swigCPtr, value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgreTerrainPINVOKE.Terrain_ImportData_inputScale_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float inputBias {
      set {
        OgreTerrainPINVOKE.Terrain_ImportData_inputBias_set(swigCPtr, value);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgreTerrainPINVOKE.Terrain_ImportData_inputBias_get(swigCPtr);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public SWIGTYPE_p_std__vectorT_Ogre__TerrainLayerSampler_t layerDeclaration {
      set {
        OgreTerrainPINVOKE.Terrain_ImportData_layerDeclaration_set(swigCPtr, SWIGTYPE_p_std__vectorT_Ogre__TerrainLayerSampler_t.getCPtr(value));
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_ImportData_layerDeclaration_get(swigCPtr);
        SWIGTYPE_p_std__vectorT_Ogre__TerrainLayerSampler_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_Ogre__TerrainLayerSampler_t(cPtr, false);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public LayerInstanceList layerList {
      set {
        OgreTerrainPINVOKE.Terrain_ImportData_layerList_set(swigCPtr, LayerInstanceList.getCPtr(value));
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_ImportData_layerList_get(swigCPtr);
        LayerInstanceList ret = (cPtr == global::System.IntPtr.Zero) ? null : new LayerInstanceList(cPtr, false);
        if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public ImportData() : this(OgreTerrainPINVOKE.new_Terrain_ImportData__SWIG_0(), true) {
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public ImportData(Terrain.ImportData rhs) : this(OgreTerrainPINVOKE.new_Terrain_ImportData__SWIG_1(Terrain.ImportData.getCPtr(rhs)), true) {
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void destroy() {
      OgreTerrainPINVOKE.Terrain_ImportData_destroy(swigCPtr);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public SceneManager getSceneManager() {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_getSceneManager(swigCPtr);
    SceneManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneManager(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public class GpuBufferAllocator : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal GpuBufferAllocator(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GpuBufferAllocator obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~GpuBufferAllocator() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreTerrainPINVOKE.delete_Terrain_GpuBufferAllocator(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public virtual void allocateVertexBuffers(Terrain forTerrain, uint numVertices, HardwareVertexBufferPtr destPos, HardwareVertexBufferPtr destDelta) {
      OgreTerrainPINVOKE.Terrain_GpuBufferAllocator_allocateVertexBuffers(swigCPtr, Terrain.getCPtr(forTerrain), numVertices, HardwareVertexBufferPtr.getCPtr(destPos), HardwareVertexBufferPtr.getCPtr(destDelta));
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public virtual void freeVertexBuffers(HardwareVertexBufferPtr posbuf, HardwareVertexBufferPtr deltabuf) {
      OgreTerrainPINVOKE.Terrain_GpuBufferAllocator_freeVertexBuffers(swigCPtr, HardwareVertexBufferPtr.getCPtr(posbuf), HardwareVertexBufferPtr.getCPtr(deltabuf));
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public virtual HardwareIndexBufferPtr getSharedIndexBuffer(ushort batchSize, ushort vdatasize, uint vertexIncrement, ushort xoffset, ushort yoffset, ushort numSkirtRowsCols, ushort skirtRowColSkip) {
      HardwareIndexBufferPtr ret = new HardwareIndexBufferPtr(OgreTerrainPINVOKE.Terrain_GpuBufferAllocator_getSharedIndexBuffer(swigCPtr, batchSize, vdatasize, vertexIncrement, xoffset, yoffset, numSkirtRowsCols, skirtRowColSkip), true);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public virtual void freeAllBuffers() {
      OgreTerrainPINVOKE.Terrain_GpuBufferAllocator_freeAllBuffers(swigCPtr);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public class DefaultGpuBufferAllocator : Terrain.GpuBufferAllocator {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
    internal DefaultGpuBufferAllocator(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgreTerrainPINVOKE.Terrain_DefaultGpuBufferAllocator_SWIGUpcast(cPtr), cMemoryOwn) {
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DefaultGpuBufferAllocator obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    protected override void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreTerrainPINVOKE.delete_Terrain_DefaultGpuBufferAllocator(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        base.Dispose(disposing);
      }
    }
  
    public DefaultGpuBufferAllocator() : this(OgreTerrainPINVOKE.new_Terrain_DefaultGpuBufferAllocator(), true) {
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public override void allocateVertexBuffers(Terrain forTerrain, uint numVertices, HardwareVertexBufferPtr destPos, HardwareVertexBufferPtr destDelta) {
      OgreTerrainPINVOKE.Terrain_DefaultGpuBufferAllocator_allocateVertexBuffers(swigCPtr, Terrain.getCPtr(forTerrain), numVertices, HardwareVertexBufferPtr.getCPtr(destPos), HardwareVertexBufferPtr.getCPtr(destDelta));
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public override void freeVertexBuffers(HardwareVertexBufferPtr posbuf, HardwareVertexBufferPtr deltabuf) {
      OgreTerrainPINVOKE.Terrain_DefaultGpuBufferAllocator_freeVertexBuffers(swigCPtr, HardwareVertexBufferPtr.getCPtr(posbuf), HardwareVertexBufferPtr.getCPtr(deltabuf));
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public override HardwareIndexBufferPtr getSharedIndexBuffer(ushort batchSize, ushort vdatasize, uint vertexIncrement, ushort xoffset, ushort yoffset, ushort numSkirtRowsCols, ushort skirtRowColSkip) {
      HardwareIndexBufferPtr ret = new HardwareIndexBufferPtr(OgreTerrainPINVOKE.Terrain_DefaultGpuBufferAllocator_getSharedIndexBuffer(swigCPtr, batchSize, vdatasize, vertexIncrement, xoffset, yoffset, numSkirtRowsCols, skirtRowColSkip), true);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public override void freeAllBuffers() {
      OgreTerrainPINVOKE.Terrain_DefaultGpuBufferAllocator_freeAllBuffers(swigCPtr);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void warmStart(uint numInstances, ushort terrainSize, ushort maxBatchSize, ushort minBatchSize) {
      OgreTerrainPINVOKE.Terrain_DefaultGpuBufferAllocator_warmStart(swigCPtr, numInstances, terrainSize, maxBatchSize, minBatchSize);
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public void setGpuBufferAllocator(Terrain.GpuBufferAllocator alloc) {
    OgreTerrainPINVOKE.Terrain_setGpuBufferAllocator(swigCPtr, Terrain.GpuBufferAllocator.getCPtr(alloc));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public Terrain.GpuBufferAllocator getGpuBufferAllocator() {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_getGpuBufferAllocator(swigCPtr);
    Terrain.GpuBufferAllocator ret = (cPtr == global::System.IntPtr.Zero) ? null : new Terrain.GpuBufferAllocator(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint _getNumIndexesForBatchSize(ushort batchSize) {
    uint ret = OgreTerrainPINVOKE.Terrain__getNumIndexesForBatchSize(batchSize);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void _populateIndexBuffer(SWIGTYPE_p_unsigned_short pIndexes, ushort batchSize, ushort vdatasize, ushort vertexIncrement, ushort xoffset, ushort yoffset, ushort numSkirtRowsCols, ushort skirtRowColSkip) {
    OgreTerrainPINVOKE.Terrain__populateIndexBuffer(SWIGTYPE_p_unsigned_short.getCPtr(pIndexes), batchSize, vdatasize, vertexIncrement, xoffset, yoffset, numSkirtRowsCols, skirtRowColSkip);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ushort _calcSkirtVertexIndex(ushort mainIndex, ushort vdatasize, bool isCol, ushort numSkirtRowsCols, ushort skirtRowColSkip) {
    ushort ret = OgreTerrainPINVOKE.Terrain__calcSkirtVertexIndex(mainIndex, vdatasize, isCol, numSkirtRowsCols, skirtRowColSkip);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void convertPosition(Terrain.Space inSpace, Vector3 inPos, Terrain.Space outSpace, Vector3 outPos) {
    OgreTerrainPINVOKE.Terrain_convertPosition__SWIG_0(swigCPtr, (int)inSpace, Vector3.getCPtr(inPos), (int)outSpace, Vector3.getCPtr(outPos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 convertPosition(Terrain.Space inSpace, Vector3 inPos, Terrain.Space outSpace) {
    Vector3 ret = new Vector3(OgreTerrainPINVOKE.Terrain_convertPosition__SWIG_1(swigCPtr, (int)inSpace, Vector3.getCPtr(inPos), (int)outSpace), true);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void convertDirection(Terrain.Space inSpace, Vector3 inDir, Terrain.Space outSpace, Vector3 outDir) {
    OgreTerrainPINVOKE.Terrain_convertDirection__SWIG_0(swigCPtr, (int)inSpace, Vector3.getCPtr(inDir), (int)outSpace, Vector3.getCPtr(outDir));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 convertDirection(Terrain.Space inSpace, Vector3 inDir, Terrain.Space outSpace) {
    Vector3 ret = new Vector3(OgreTerrainPINVOKE.Terrain_convertDirection__SWIG_1(swigCPtr, (int)inSpace, Vector3.getCPtr(inDir), (int)outSpace), true);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setResourceGroup(string resGroup) {
    OgreTerrainPINVOKE.Terrain_setResourceGroup(swigCPtr, resGroup);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getResourceGroup() {
    string ret = OgreTerrainPINVOKE.Terrain_getResourceGroup(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string _getDerivedResourceGroup() {
    string ret = OgreTerrainPINVOKE.Terrain__getDerivedResourceGroup(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void save(string filename) {
    OgreTerrainPINVOKE.Terrain_save__SWIG_0(swigCPtr, filename);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void save(SWIGTYPE_p_Ogre__StreamSerialiser stream) {
    OgreTerrainPINVOKE.Terrain_save__SWIG_1(swigCPtr, SWIGTYPE_p_Ogre__StreamSerialiser.getCPtr(stream));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool prepare(string filename) {
    bool ret = OgreTerrainPINVOKE.Terrain_prepare__SWIG_0(swigCPtr, filename);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool prepare(DataStreamPtr stream) {
    bool ret = OgreTerrainPINVOKE.Terrain_prepare__SWIG_1(swigCPtr, DataStreamPtr.getCPtr(stream));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool prepare(SWIGTYPE_p_Ogre__StreamSerialiser stream) {
    bool ret = OgreTerrainPINVOKE.Terrain_prepare__SWIG_2(swigCPtr, SWIGTYPE_p_Ogre__StreamSerialiser.getCPtr(stream));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool prepare(Terrain.ImportData importData) {
    bool ret = OgreTerrainPINVOKE.Terrain_prepare__SWIG_3(swigCPtr, Terrain.ImportData.getCPtr(importData));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void load(string filename) {
    OgreTerrainPINVOKE.Terrain_load__SWIG_0(swigCPtr, filename);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void load(SWIGTYPE_p_Ogre__StreamSerialiser stream) {
    OgreTerrainPINVOKE.Terrain_load__SWIG_1(swigCPtr, SWIGTYPE_p_Ogre__StreamSerialiser.getCPtr(stream));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void load(int lodLevel, bool synchronous) {
    OgreTerrainPINVOKE.Terrain_load__SWIG_2(swigCPtr, lodLevel, synchronous);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void load(int lodLevel) {
    OgreTerrainPINVOKE.Terrain_load__SWIG_3(swigCPtr, lodLevel);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void load() {
    OgreTerrainPINVOKE.Terrain_load__SWIG_4(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isLoaded() {
    bool ret = OgreTerrainPINVOKE.Terrain_isLoaded(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isModified() {
    bool ret = OgreTerrainPINVOKE.Terrain_isModified(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isHeightDataModified() {
    bool ret = OgreTerrainPINVOKE.Terrain_isHeightDataModified(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void unload() {
    OgreTerrainPINVOKE.Terrain_unload(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void unprepare() {
    OgreTerrainPINVOKE.Terrain_unprepare(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_float getHeightData() {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_getHeightData__SWIG_0(swigCPtr);
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_float getHeightData(uint x, uint y) {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_getHeightData__SWIG_1(swigCPtr, x, y);
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getHeightAtPoint(uint x, uint y) {
    float ret = OgreTerrainPINVOKE.Terrain_getHeightAtPoint(swigCPtr, x, y);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setHeightAtPoint(uint x, uint y, float h) {
    OgreTerrainPINVOKE.Terrain_setHeightAtPoint(swigCPtr, x, y, h);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getHeightAtTerrainPosition(float x, float y) {
    float ret = OgreTerrainPINVOKE.Terrain_getHeightAtTerrainPosition(swigCPtr, x, y);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getHeightAtWorldPosition(float x, float y, float z) {
    float ret = OgreTerrainPINVOKE.Terrain_getHeightAtWorldPosition__SWIG_0(swigCPtr, x, y, z);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getHeightAtWorldPosition(Vector3 pos) {
    float ret = OgreTerrainPINVOKE.Terrain_getHeightAtWorldPosition__SWIG_1(swigCPtr, Vector3.getCPtr(pos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_float getDeltaData() {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_getDeltaData__SWIG_0(swigCPtr);
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_float getDeltaData(uint x, uint y) {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_getDeltaData__SWIG_1(swigCPtr, x, y);
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getPoint(uint x, uint y, Vector3 outpos) {
    OgreTerrainPINVOKE.Terrain_getPoint__SWIG_0(swigCPtr, x, y, Vector3.getCPtr(outpos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getPointFromSelfOrNeighbour(int x, int y, Vector3 outpos) {
    OgreTerrainPINVOKE.Terrain_getPointFromSelfOrNeighbour(swigCPtr, x, y, Vector3.getCPtr(outpos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getPoint(uint x, uint y, float height, Vector3 outpos) {
    OgreTerrainPINVOKE.Terrain_getPoint__SWIG_1(swigCPtr, x, y, height, Vector3.getCPtr(outpos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public Affine3 getPointTransform() {
    Affine3 ret = new Affine3(OgreTerrainPINVOKE.Terrain_getPointTransform(swigCPtr), true);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getTerrainVector(Vector3 inVec, Vector3 outVec) {
    OgreTerrainPINVOKE.Terrain_getTerrainVector__SWIG_0(swigCPtr, Vector3.getCPtr(inVec), Vector3.getCPtr(outVec));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getTerrainVector(float x, float y, float z, Vector3 outVec) {
    OgreTerrainPINVOKE.Terrain_getTerrainVector__SWIG_1(swigCPtr, x, y, z, Vector3.getCPtr(outVec));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getTerrainVectorAlign(Vector3 inVec, Terrain.Alignment align, Vector3 outVec) {
    OgreTerrainPINVOKE.Terrain_getTerrainVectorAlign__SWIG_0(swigCPtr, Vector3.getCPtr(inVec), (int)align, Vector3.getCPtr(outVec));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getTerrainVectorAlign(float x, float y, float z, Terrain.Alignment align, Vector3 outVec) {
    OgreTerrainPINVOKE.Terrain_getTerrainVectorAlign__SWIG_1(swigCPtr, x, y, z, (int)align, Vector3.getCPtr(outVec));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getVector(Vector3 inVec, Vector3 outVec) {
    OgreTerrainPINVOKE.Terrain_getVector__SWIG_0(swigCPtr, Vector3.getCPtr(inVec), Vector3.getCPtr(outVec));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getVector(float x, float y, float z, Vector3 outVec) {
    OgreTerrainPINVOKE.Terrain_getVector__SWIG_1(swigCPtr, x, y, z, Vector3.getCPtr(outVec));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getVectorAlign(Vector3 inVec, Terrain.Alignment align, Vector3 outVec) {
    OgreTerrainPINVOKE.Terrain_getVectorAlign__SWIG_0(swigCPtr, Vector3.getCPtr(inVec), (int)align, Vector3.getCPtr(outVec));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getVectorAlign(float x, float y, float z, Terrain.Alignment align, Vector3 outVec) {
    OgreTerrainPINVOKE.Terrain_getVectorAlign__SWIG_1(swigCPtr, x, y, z, (int)align, Vector3.getCPtr(outVec));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getPosition(Vector3 TSpos, Vector3 outWSpos) {
    OgreTerrainPINVOKE.Terrain_getPosition__SWIG_0(swigCPtr, Vector3.getCPtr(TSpos), Vector3.getCPtr(outWSpos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getPosition(float x, float y, float z, Vector3 outWSpos) {
    OgreTerrainPINVOKE.Terrain_getPosition__SWIG_1(swigCPtr, x, y, z, Vector3.getCPtr(outWSpos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getTerrainPosition(Vector3 WSpos, Vector3 outTSpos) {
    OgreTerrainPINVOKE.Terrain_getTerrainPosition__SWIG_0(swigCPtr, Vector3.getCPtr(WSpos), Vector3.getCPtr(outTSpos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getTerrainPosition(float x, float y, float z, Vector3 outTSpos) {
    OgreTerrainPINVOKE.Terrain_getTerrainPosition__SWIG_1(swigCPtr, x, y, z, Vector3.getCPtr(outTSpos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getPositionAlign(Vector3 TSpos, Terrain.Alignment align, Vector3 outWSpos) {
    OgreTerrainPINVOKE.Terrain_getPositionAlign__SWIG_0(swigCPtr, Vector3.getCPtr(TSpos), (int)align, Vector3.getCPtr(outWSpos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getPositionAlign(float x, float y, float z, Terrain.Alignment align, Vector3 outWSpos) {
    OgreTerrainPINVOKE.Terrain_getPositionAlign__SWIG_1(swigCPtr, x, y, z, (int)align, Vector3.getCPtr(outWSpos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getTerrainPositionAlign(Vector3 WSpos, Terrain.Alignment align, Vector3 outTSpos) {
    OgreTerrainPINVOKE.Terrain_getTerrainPositionAlign__SWIG_0(swigCPtr, Vector3.getCPtr(WSpos), (int)align, Vector3.getCPtr(outTSpos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getTerrainPositionAlign(float x, float y, float z, Terrain.Alignment align, Vector3 outTSpos) {
    OgreTerrainPINVOKE.Terrain_getTerrainPositionAlign__SWIG_1(swigCPtr, x, y, z, (int)align, Vector3.getCPtr(outTSpos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public Terrain.Alignment getAlignment() {
    Terrain.Alignment ret = (Terrain.Alignment)OgreTerrainPINVOKE.Terrain_getAlignment(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getSize() {
    ushort ret = OgreTerrainPINVOKE.Terrain_getSize(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSize(ushort newSize) {
    OgreTerrainPINVOKE.Terrain_setSize(swigCPtr, newSize);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getMaxBatchSize() {
    ushort ret = OgreTerrainPINVOKE.Terrain_getMaxBatchSize(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getMinBatchSize() {
    ushort ret = OgreTerrainPINVOKE.Terrain_getMinBatchSize(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getWorldSize() {
    float ret = OgreTerrainPINVOKE.Terrain_getWorldSize(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setWorldSize(float newWorldSize) {
    OgreTerrainPINVOKE.Terrain_setWorldSize(swigCPtr, newWorldSize);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public byte getLayerCount() {
    byte ret = OgreTerrainPINVOKE.Terrain_getLayerCount(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Ogre__TerrainLayerSampler_t getLayerDeclaration() {
    SWIGTYPE_p_std__vectorT_Ogre__TerrainLayerSampler_t ret = new SWIGTYPE_p_std__vectorT_Ogre__TerrainLayerSampler_t(OgreTerrainPINVOKE.Terrain_getLayerDeclaration(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addLayer(float worldSize, StringList textureNames) {
    OgreTerrainPINVOKE.Terrain_addLayer__SWIG_0(swigCPtr, worldSize, StringList.getCPtr(textureNames));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addLayer(float worldSize) {
    OgreTerrainPINVOKE.Terrain_addLayer__SWIG_1(swigCPtr, worldSize);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addLayer() {
    OgreTerrainPINVOKE.Terrain_addLayer__SWIG_2(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addLayer(byte index, float worldSize, StringList textureNames) {
    OgreTerrainPINVOKE.Terrain_addLayer__SWIG_3(swigCPtr, index, worldSize, StringList.getCPtr(textureNames));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addLayer(byte index, float worldSize) {
    OgreTerrainPINVOKE.Terrain_addLayer__SWIG_4(swigCPtr, index, worldSize);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addLayer(byte index) {
    OgreTerrainPINVOKE.Terrain_addLayer__SWIG_5(swigCPtr, index);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeLayer(byte index) {
    OgreTerrainPINVOKE.Terrain_removeLayer(swigCPtr, index);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void replaceLayer(byte index, bool keepBlends, float worldSize, StringList textureNames) {
    OgreTerrainPINVOKE.Terrain_replaceLayer__SWIG_0(swigCPtr, index, keepBlends, worldSize, StringList.getCPtr(textureNames));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void replaceLayer(byte index, bool keepBlends, float worldSize) {
    OgreTerrainPINVOKE.Terrain_replaceLayer__SWIG_1(swigCPtr, index, keepBlends, worldSize);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void replaceLayer(byte index, bool keepBlends) {
    OgreTerrainPINVOKE.Terrain_replaceLayer__SWIG_2(swigCPtr, index, keepBlends);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public byte getMaxLayers() {
    byte ret = OgreTerrainPINVOKE.Terrain_getMaxLayers(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getLayerWorldSize(byte index) {
    float ret = OgreTerrainPINVOKE.Terrain_getLayerWorldSize(swigCPtr, index);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLayerWorldSize(byte index, float size) {
    OgreTerrainPINVOKE.Terrain_setLayerWorldSize(swigCPtr, index, size);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getLayerUVMultiplier(byte index) {
    float ret = OgreTerrainPINVOKE.Terrain_getLayerUVMultiplier(swigCPtr, index);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getLayerTextureName(byte layerIndex, byte samplerIndex) {
    string ret = OgreTerrainPINVOKE.Terrain_getLayerTextureName(swigCPtr, layerIndex, samplerIndex);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLayerTextureName(byte layerIndex, byte samplerIndex, string textureName) {
    OgreTerrainPINVOKE.Terrain_setLayerTextureName(swigCPtr, layerIndex, samplerIndex, textureName);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getLayerBlendMapSize() {
    ushort ret = OgreTerrainPINVOKE.Terrain_getLayerBlendMapSize(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getLightmapSize() {
    ushort ret = OgreTerrainPINVOKE.Terrain_getLightmapSize(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr getLightmap() {
    TexturePtr ret = new TexturePtr(OgreTerrainPINVOKE.Terrain_getLightmap(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getCompositeMapSize() {
    ushort ret = OgreTerrainPINVOKE.Terrain_getCompositeMapSize(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr getCompositeMap() {
    TexturePtr ret = new TexturePtr(OgreTerrainPINVOKE.Terrain_getCompositeMap(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 getPosition() {
    Vector3 ret = new Vector3(OgreTerrainPINVOKE.Terrain_getPosition__SWIG_2(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setPosition(Vector3 pos) {
    OgreTerrainPINVOKE.Terrain_setPosition(swigCPtr, Vector3.getCPtr(pos));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public SceneNode _getRootSceneNode() {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain__getRootSceneNode(swigCPtr);
    SceneNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneNode(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void dirty() {
    OgreTerrainPINVOKE.Terrain_dirty(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void dirtyRect(SWIGTYPE_p_Ogre__TRectT_int_t rect) {
    OgreTerrainPINVOKE.Terrain_dirtyRect(swigCPtr, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void _dirtyCompositeMapRect(SWIGTYPE_p_Ogre__TRectT_int_t rect) {
    OgreTerrainPINVOKE.Terrain__dirtyCompositeMapRect(swigCPtr, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void dirtyLightmapRect(SWIGTYPE_p_Ogre__TRectT_int_t rect) {
    OgreTerrainPINVOKE.Terrain_dirtyLightmapRect(swigCPtr, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void dirtyLightmap() {
    OgreTerrainPINVOKE.Terrain_dirtyLightmap(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void update(bool synchronous) {
    OgreTerrainPINVOKE.Terrain_update__SWIG_0(swigCPtr, synchronous);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void update() {
    OgreTerrainPINVOKE.Terrain_update__SWIG_1(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateGeometry() {
    OgreTerrainPINVOKE.Terrain_updateGeometry(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateGeometryWithoutNotifyNeighbours() {
    OgreTerrainPINVOKE.Terrain_updateGeometryWithoutNotifyNeighbours(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public static byte DERIVED_DATA_DELTAS {
    get {
      byte ret = OgreTerrainPINVOKE.Terrain_DERIVED_DATA_DELTAS_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static byte DERIVED_DATA_NORMALS {
    get {
      byte ret = OgreTerrainPINVOKE.Terrain_DERIVED_DATA_NORMALS_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static byte DERIVED_DATA_LIGHTMAP {
    get {
      byte ret = OgreTerrainPINVOKE.Terrain_DERIVED_DATA_LIGHTMAP_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static byte DERIVED_DATA_ALL {
    get {
      byte ret = OgreTerrainPINVOKE.Terrain_DERIVED_DATA_ALL_get();
      if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public void updateDerivedData(bool synchronous, byte typeMask) {
    OgreTerrainPINVOKE.Terrain_updateDerivedData__SWIG_0(swigCPtr, synchronous, typeMask);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateDerivedData(bool synchronous) {
    OgreTerrainPINVOKE.Terrain_updateDerivedData__SWIG_1(swigCPtr, synchronous);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateDerivedData() {
    OgreTerrainPINVOKE.Terrain_updateDerivedData__SWIG_2(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateCompositeMap() {
    OgreTerrainPINVOKE.Terrain_updateCompositeMap(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateCompositeMapWithDelay(float delay) {
    OgreTerrainPINVOKE.Terrain_updateCompositeMapWithDelay__SWIG_0(swigCPtr, delay);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateCompositeMapWithDelay() {
    OgreTerrainPINVOKE.Terrain_updateCompositeMapWithDelay__SWIG_1(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getSkirtSize() {
    float ret = OgreTerrainPINVOKE.Terrain_getSkirtSize(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getNumLodLevels() {
    ushort ret = OgreTerrainPINVOKE.Terrain_getNumLodLevels(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getNumLodLevelsPerLeaf() {
    ushort ret = OgreTerrainPINVOKE.Terrain_getNumLodLevelsPerLeaf(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__TRectT_int_t calculateHeightDeltas(SWIGTYPE_p_Ogre__TRectT_int_t rect) {
    SWIGTYPE_p_Ogre__TRectT_int_t ret = new SWIGTYPE_p_Ogre__TRectT_int_t(OgreTerrainPINVOKE.Terrain_calculateHeightDeltas(swigCPtr, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect)), true);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void finaliseHeightDeltas(SWIGTYPE_p_Ogre__TRectT_int_t rect, bool cpuData) {
    OgreTerrainPINVOKE.Terrain_finaliseHeightDeltas(swigCPtr, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect), cpuData);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public PixelBox calculateNormals(SWIGTYPE_p_Ogre__TRectT_int_t rect, SWIGTYPE_p_Ogre__TRectT_int_t outFinalRect) {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_calculateNormals(swigCPtr, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect), SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(outFinalRect));
    PixelBox ret = (cPtr == global::System.IntPtr.Zero) ? null : new PixelBox(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void finaliseNormals(SWIGTYPE_p_Ogre__TRectT_int_t rect, PixelBox normalsBox) {
    OgreTerrainPINVOKE.Terrain_finaliseNormals(swigCPtr, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect), PixelBox.getCPtr(normalsBox));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public PixelBox calculateLightmap(SWIGTYPE_p_Ogre__TRectT_int_t rect, SWIGTYPE_p_Ogre__TRectT_int_t extraTargetRect, SWIGTYPE_p_Ogre__TRectT_int_t outFinalRect) {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_calculateLightmap(swigCPtr, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect), SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(extraTargetRect), SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(outFinalRect));
    PixelBox ret = (cPtr == global::System.IntPtr.Zero) ? null : new PixelBox(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void finaliseLightmap(SWIGTYPE_p_Ogre__TRectT_int_t rect, PixelBox lightmapBox) {
    OgreTerrainPINVOKE.Terrain_finaliseLightmap(swigCPtr, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(rect), PixelBox.getCPtr(lightmapBox));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getResolutionAtLod(ushort lodLevel) {
    ushort ret = OgreTerrainPINVOKE.Terrain_getResolutionAtLod(swigCPtr, lodLevel);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TerrainRayResult rayIntersects(Ray ray, bool cascadeToNeighbours, float distanceLimit) {
    TerrainRayResult ret = new TerrainRayResult(OgreTerrainPINVOKE.Terrain_rayIntersects__SWIG_0(swigCPtr, Ray.getCPtr(ray), cascadeToNeighbours, distanceLimit), true);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TerrainRayResult rayIntersects(Ray ray, bool cascadeToNeighbours) {
    TerrainRayResult ret = new TerrainRayResult(OgreTerrainPINVOKE.Terrain_rayIntersects__SWIG_1(swigCPtr, Ray.getCPtr(ray), cascadeToNeighbours), true);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TerrainRayResult rayIntersects(Ray ray) {
    TerrainRayResult ret = new TerrainRayResult(OgreTerrainPINVOKE.Terrain_rayIntersects__SWIG_2(swigCPtr, Ray.getCPtr(ray)), true);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AxisAlignedBox getAABB() {
    AxisAlignedBox ret = new AxisAlignedBox(OgreTerrainPINVOKE.Terrain_getAABB(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AxisAlignedBox getWorldAABB() {
    AxisAlignedBox ret = new AxisAlignedBox(OgreTerrainPINVOKE.Terrain_getWorldAABB(swigCPtr), true);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getMinHeight() {
    float ret = OgreTerrainPINVOKE.Terrain_getMinHeight(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getMaxHeight() {
    float ret = OgreTerrainPINVOKE.Terrain_getMaxHeight(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getBoundingRadius() {
    float ret = OgreTerrainPINVOKE.Terrain_getBoundingRadius(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr getMaterial() {
    MaterialPtr ret = new MaterialPtr(OgreTerrainPINVOKE.Terrain_getMaterial(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr _getMaterial() {
    MaterialPtr ret = new MaterialPtr(OgreTerrainPINVOKE.Terrain__getMaterial(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr getCompositeMapMaterial() {
    MaterialPtr ret = new MaterialPtr(OgreTerrainPINVOKE.Terrain_getCompositeMapMaterial(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr _getCompositeMapMaterial() {
    MaterialPtr ret = new MaterialPtr(OgreTerrainPINVOKE.Terrain__getCompositeMapMaterial(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getMaterialName() {
    string ret = OgreTerrainPINVOKE.Terrain_getMaterialName(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void preFindVisibleObjects(SceneManager source, SceneManager.IlluminationRenderStage irs, Viewport v) {
    OgreTerrainPINVOKE.Terrain_preFindVisibleObjects(swigCPtr, SceneManager.getCPtr(source), (int)irs, Viewport.getCPtr(v));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void sceneManagerDestroyed(SceneManager source) {
    OgreTerrainPINVOKE.Terrain_sceneManagerDestroyed(swigCPtr, SceneManager.getCPtr(source));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public byte getRenderQueueGroup() {
    byte ret = OgreTerrainPINVOKE.Terrain_getRenderQueueGroup(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setRenderQueueGroup(byte grp) {
    OgreTerrainPINVOKE.Terrain_setRenderQueueGroup(swigCPtr, grp);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getVisibilityFlags() {
    uint ret = OgreTerrainPINVOKE.Terrain_getVisibilityFlags(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setVisibilityFlags(uint flags) {
    OgreTerrainPINVOKE.Terrain_setVisibilityFlags(swigCPtr, flags);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getQueryFlags() {
    uint ret = OgreTerrainPINVOKE.Terrain_getQueryFlags(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setQueryFlags(uint flags) {
    OgreTerrainPINVOKE.Terrain_setQueryFlags(swigCPtr, flags);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addQueryFlags(uint flags) {
    OgreTerrainPINVOKE.Terrain_addQueryFlags(swigCPtr, flags);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeQueryFlags(uint flags) {
    OgreTerrainPINVOKE.Terrain_removeQueryFlags(swigCPtr, flags);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public TerrainLayerBlendMap getLayerBlendMap(byte layerIndex) {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_getLayerBlendMap(swigCPtr, layerIndex);
    TerrainLayerBlendMap ret = (cPtr == global::System.IntPtr.Zero) ? null : new TerrainLayerBlendMap(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte getBlendTextureIndex(byte layerIndex) {
    byte ret = OgreTerrainPINVOKE.Terrain_getBlendTextureIndex(swigCPtr, layerIndex);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte getBlendTextureCount() {
    byte ret = OgreTerrainPINVOKE.Terrain_getBlendTextureCount__SWIG_0(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static byte getBlendTextureCount(byte numLayers) {
    byte ret = OgreTerrainPINVOKE.Terrain_getBlendTextureCount__SWIG_1(numLayers);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Ogre__SharedPtrT_Ogre__Texture_t_t getBlendTextures() {
    SWIGTYPE_p_std__vectorT_Ogre__SharedPtrT_Ogre__Texture_t_t ret = new SWIGTYPE_p_std__vectorT_Ogre__SharedPtrT_Ogre__Texture_t_t(OgreTerrainPINVOKE.Terrain_getBlendTextures(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getBlendTextureName(byte textureIndex) {
    string ret = OgreTerrainPINVOKE.Terrain_getBlendTextureName(swigCPtr, textureIndex);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGlobalColourMapEnabled(bool enabled, ushort size) {
    OgreTerrainPINVOKE.Terrain_setGlobalColourMapEnabled__SWIG_0(swigCPtr, enabled, size);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGlobalColourMapEnabled(bool enabled) {
    OgreTerrainPINVOKE.Terrain_setGlobalColourMapEnabled__SWIG_1(swigCPtr, enabled);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getGlobalColourMapEnabled() {
    bool ret = OgreTerrainPINVOKE.Terrain_getGlobalColourMapEnabled(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getGlobalColourMapSize() {
    ushort ret = OgreTerrainPINVOKE.Terrain_getGlobalColourMapSize(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr getGlobalColourMap() {
    TexturePtr ret = new TexturePtr(OgreTerrainPINVOKE.Terrain_getGlobalColourMap(swigCPtr), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void widenRectByVector(Vector3 vec, SWIGTYPE_p_Ogre__TRectT_int_t inRect, SWIGTYPE_p_Ogre__TRectT_int_t outRect) {
    OgreTerrainPINVOKE.Terrain_widenRectByVector__SWIG_0(swigCPtr, Vector3.getCPtr(vec), SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(inRect), SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(outRect));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void widenRectByVector(Vector3 vec, SWIGTYPE_p_Ogre__TRectT_int_t inRect, float minHeight, float maxHeight, SWIGTYPE_p_Ogre__TRectT_int_t outRect) {
    OgreTerrainPINVOKE.Terrain_widenRectByVector__SWIG_1(swigCPtr, Vector3.getCPtr(vec), SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(inRect), minHeight, maxHeight, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(outRect));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void freeTemporaryResources() {
    OgreTerrainPINVOKE.Terrain_freeTemporaryResources(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public TexturePtr getLayerBlendTexture(byte index) {
    TexturePtr ret = new TexturePtr(OgreTerrainPINVOKE.Terrain_getLayerBlendTexture(swigCPtr, index), false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__pairT_unsigned_char_unsigned_char_t getLayerBlendTextureIndex(byte layerIndex) {
    SWIGTYPE_p_std__pairT_unsigned_char_unsigned_char_t ret = new SWIGTYPE_p_std__pairT_unsigned_char_unsigned_char_t(OgreTerrainPINVOKE.Terrain_getLayerBlendTextureIndex(swigCPtr, layerIndex), true);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _setMorphRequired(bool morph) {
    OgreTerrainPINVOKE.Terrain__setMorphRequired(swigCPtr, morph);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool _getMorphRequired() {
    bool ret = OgreTerrainPINVOKE.Terrain__getMorphRequired(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _setNormalMapRequired(bool normalMap) {
    OgreTerrainPINVOKE.Terrain__setNormalMapRequired(swigCPtr, normalMap);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setLightMapRequired(bool lightMap, bool shadowsOnly) {
    OgreTerrainPINVOKE.Terrain__setLightMapRequired__SWIG_0(swigCPtr, lightMap, shadowsOnly);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setLightMapRequired(bool lightMap) {
    OgreTerrainPINVOKE.Terrain__setLightMapRequired__SWIG_1(swigCPtr, lightMap);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setCompositeMapRequired(bool compositeMap) {
    OgreTerrainPINVOKE.Terrain__setCompositeMapRequired(swigCPtr, compositeMap);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool _getUseVertexCompression() {
    bool ret = OgreTerrainPINVOKE.Terrain__getUseVertexCompression(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getLODLevelWhenVertexEliminated(int x, int y) {
    ushort ret = OgreTerrainPINVOKE.Terrain_getLODLevelWhenVertexEliminated__SWIG_0(swigCPtr, x, y);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getLODLevelWhenVertexEliminated(int rowOrColulmn) {
    ushort ret = OgreTerrainPINVOKE.Terrain_getLODLevelWhenVertexEliminated__SWIG_1(swigCPtr, rowOrColulmn);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TerrainQuadTreeNode getQuadTree() {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_getQuadTree(swigCPtr);
    TerrainQuadTreeNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new TerrainQuadTreeNode(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr getTerrainNormalMap() {
    TexturePtr ret = new TexturePtr(OgreTerrainPINVOKE.Terrain_getTerrainNormalMap(swigCPtr), true);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Terrain getNeighbour(Terrain.NeighbourIndex index) {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_getNeighbour(swigCPtr, (int)index);
    Terrain ret = (cPtr == global::System.IntPtr.Zero) ? null : new Terrain(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setNeighbour(Terrain.NeighbourIndex index, Terrain neighbour, bool recalculate, bool notifyOther) {
    OgreTerrainPINVOKE.Terrain_setNeighbour__SWIG_0(swigCPtr, (int)index, Terrain.getCPtr(neighbour), recalculate, notifyOther);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setNeighbour(Terrain.NeighbourIndex index, Terrain neighbour, bool recalculate) {
    OgreTerrainPINVOKE.Terrain_setNeighbour__SWIG_1(swigCPtr, (int)index, Terrain.getCPtr(neighbour), recalculate);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setNeighbour(Terrain.NeighbourIndex index, Terrain neighbour) {
    OgreTerrainPINVOKE.Terrain_setNeighbour__SWIG_2(swigCPtr, (int)index, Terrain.getCPtr(neighbour));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public static Terrain.NeighbourIndex getOppositeNeighbour(Terrain.NeighbourIndex index) {
    Terrain.NeighbourIndex ret = (Terrain.NeighbourIndex)OgreTerrainPINVOKE.Terrain_getOppositeNeighbour((int)index);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Terrain.NeighbourIndex getNeighbourIndex(int offsetx, int offsety) {
    Terrain.NeighbourIndex ret = (Terrain.NeighbourIndex)OgreTerrainPINVOKE.Terrain_getNeighbourIndex(offsetx, offsety);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void notifyNeighbours() {
    OgreTerrainPINVOKE.Terrain_notifyNeighbours(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void neighbourModified(Terrain.NeighbourIndex index, SWIGTYPE_p_Ogre__TRectT_int_t edgerect, SWIGTYPE_p_Ogre__TRectT_int_t shadowrect) {
    OgreTerrainPINVOKE.Terrain_neighbourModified(swigCPtr, (int)index, SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(edgerect), SWIGTYPE_p_Ogre__TRectT_int_t.getCPtr(shadowrect));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public Terrain raySelectNeighbour(Ray ray, float distanceLimit) {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_raySelectNeighbour__SWIG_0(swigCPtr, Ray.getCPtr(ray), distanceLimit);
    Terrain ret = (cPtr == global::System.IntPtr.Zero) ? null : new Terrain(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Terrain raySelectNeighbour(Ray ray) {
    global::System.IntPtr cPtr = OgreTerrainPINVOKE.Terrain_raySelectNeighbour__SWIG_1(swigCPtr, Ray.getCPtr(ray));
    Terrain ret = (cPtr == global::System.IntPtr.Zero) ? null : new Terrain(cPtr, false);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _dumpTextures(string prefix, string suffix) {
    OgreTerrainPINVOKE.Terrain__dumpTextures(swigCPtr, prefix, suffix);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isDerivedDataUpdateInProgress() {
    bool ret = OgreTerrainPINVOKE.Terrain_isDerivedDataUpdateInProgress(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void convertWorldToTerrainAxes(Terrain.Alignment align, Vector3 worldVec, Vector3 terrainVec) {
    OgreTerrainPINVOKE.Terrain_convertWorldToTerrainAxes((int)align, Vector3.getCPtr(worldVec), Vector3.getCPtr(terrainVec));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void convertTerrainToWorldAxes(Terrain.Alignment align, Vector3 terrainVec, Vector3 worldVec) {
    OgreTerrainPINVOKE.Terrain_convertTerrainToWorldAxes((int)align, Vector3.getCPtr(terrainVec), Vector3.getCPtr(worldVec));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void writeLayerDeclaration(SWIGTYPE_p_std__vectorT_Ogre__TerrainLayerSampler_t decl, SWIGTYPE_p_Ogre__StreamSerialiser ser) {
    OgreTerrainPINVOKE.Terrain_writeLayerDeclaration(SWIGTYPE_p_std__vectorT_Ogre__TerrainLayerSampler_t.getCPtr(decl), SWIGTYPE_p_Ogre__StreamSerialiser.getCPtr(ser));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool readLayerDeclaration(SWIGTYPE_p_Ogre__StreamSerialiser ser, SWIGTYPE_p_std__vectorT_Ogre__TerrainLayerSampler_t targetdecl) {
    bool ret = OgreTerrainPINVOKE.Terrain_readLayerDeclaration(SWIGTYPE_p_Ogre__StreamSerialiser.getCPtr(ser), SWIGTYPE_p_std__vectorT_Ogre__TerrainLayerSampler_t.getCPtr(targetdecl));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void writeLayerInstanceList(LayerInstanceList lst, SWIGTYPE_p_Ogre__StreamSerialiser ser) {
    OgreTerrainPINVOKE.Terrain_writeLayerInstanceList(LayerInstanceList.getCPtr(lst), SWIGTYPE_p_Ogre__StreamSerialiser.getCPtr(ser));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool readLayerInstanceList(SWIGTYPE_p_Ogre__StreamSerialiser ser, uint numSamplers, LayerInstanceList targetlst) {
    bool ret = OgreTerrainPINVOKE.Terrain_readLayerInstanceList(SWIGTYPE_p_Ogre__StreamSerialiser.getCPtr(ser), numSamplers, LayerInstanceList.getCPtr(targetlst));
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void waitForDerivedProcesses() {
    OgreTerrainPINVOKE.Terrain_waitForDerivedProcesses(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void increaseLodLevel(bool synchronous) {
    OgreTerrainPINVOKE.Terrain_increaseLodLevel__SWIG_0(swigCPtr, synchronous);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void increaseLodLevel() {
    OgreTerrainPINVOKE.Terrain_increaseLodLevel__SWIG_1(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public void decreaseLodLevel() {
    OgreTerrainPINVOKE.Terrain_decreaseLodLevel(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getHighestLodPrepared() {
    int ret = OgreTerrainPINVOKE.Terrain_getHighestLodPrepared(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getHighestLodLoaded() {
    int ret = OgreTerrainPINVOKE.Terrain_getHighestLodLoaded(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getTargetLodLevel() {
    int ret = OgreTerrainPINVOKE.Terrain_getTargetLodLevel(swigCPtr);
    if (OgreTerrainPINVOKE.SWIGPendingException.Pending) throw OgreTerrainPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum Alignment {
    ALIGN_X_Z = 0,
    ALIGN_X_Y = 1,
    ALIGN_Y_Z = 2
  }

  public enum NeighbourIndex {
    NEIGHBOUR_EAST = 0,
    NEIGHBOUR_NORTHEAST = 1,
    NEIGHBOUR_NORTH = 2,
    NEIGHBOUR_NORTHWEST = 3,
    NEIGHBOUR_WEST = 4,
    NEIGHBOUR_SOUTHWEST = 5,
    NEIGHBOUR_SOUTH = 6,
    NEIGHBOUR_SOUTHEAST = 7,
    NEIGHBOUR_COUNT = 8
  }

  public enum Space {
    WORLD_SPACE = 0,
    LOCAL_SPACE = 1,
    TERRAIN_SPACE = 2,
    POINT_SPACE = 3
  }

}

}
