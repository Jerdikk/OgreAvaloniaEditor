//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class Sampler : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Sampler(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Sampler obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Sampler() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_Sampler(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public class UVWAddressingMode : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal UVWAddressingMode(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UVWAddressingMode obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~UVWAddressingMode() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_Sampler_UVWAddressingMode(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public TextureAddressingMode u {
      set {
        OgrePINVOKE.Sampler_UVWAddressingMode_u_set(swigCPtr, (int)value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        TextureAddressingMode ret = (TextureAddressingMode)OgrePINVOKE.Sampler_UVWAddressingMode_u_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public TextureAddressingMode v {
      set {
        OgrePINVOKE.Sampler_UVWAddressingMode_v_set(swigCPtr, (int)value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        TextureAddressingMode ret = (TextureAddressingMode)OgrePINVOKE.Sampler_UVWAddressingMode_v_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public TextureAddressingMode w {
      set {
        OgrePINVOKE.Sampler_UVWAddressingMode_w_set(swigCPtr, (int)value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        TextureAddressingMode ret = (TextureAddressingMode)OgrePINVOKE.Sampler_UVWAddressingMode_w_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public UVWAddressingMode() : this(OgrePINVOKE.new_Sampler_UVWAddressingMode(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public Sampler() : this(OgrePINVOKE.new_Sampler(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFiltering(TextureFilterOptions filterType) {
    OgrePINVOKE.Sampler_setFiltering__SWIG_0(swigCPtr, (int)filterType);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFiltering(FilterType ftype, FilterOptions opts) {
    OgrePINVOKE.Sampler_setFiltering__SWIG_1(swigCPtr, (int)ftype, (int)opts);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFiltering(FilterOptions minFilter, FilterOptions magFilter, FilterOptions mipFilter) {
    OgrePINVOKE.Sampler_setFiltering__SWIG_2(swigCPtr, (int)minFilter, (int)magFilter, (int)mipFilter);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public FilterOptions getFiltering(FilterType ftype) {
    FilterOptions ret = (FilterOptions)OgrePINVOKE.Sampler_getFiltering(swigCPtr, (int)ftype);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Sampler.UVWAddressingMode getAddressingMode() {
    Sampler.UVWAddressingMode ret = new Sampler.UVWAddressingMode(OgrePINVOKE.Sampler_getAddressingMode(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAddressingMode(TextureAddressingMode tam) {
    OgrePINVOKE.Sampler_setAddressingMode__SWIG_0(swigCPtr, (int)tam);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAddressingMode(TextureAddressingMode u, TextureAddressingMode v, TextureAddressingMode w) {
    OgrePINVOKE.Sampler_setAddressingMode__SWIG_1(swigCPtr, (int)u, (int)v, (int)w);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAddressingMode(Sampler.UVWAddressingMode uvw) {
    OgrePINVOKE.Sampler_setAddressingMode__SWIG_2(swigCPtr, Sampler.UVWAddressingMode.getCPtr(uvw));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAnisotropy(uint maxAniso) {
    OgrePINVOKE.Sampler_setAnisotropy(swigCPtr, maxAniso);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getAnisotropy() {
    uint ret = OgrePINVOKE.Sampler_getAnisotropy(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMipmapBias(float bias) {
    OgrePINVOKE.Sampler_setMipmapBias(swigCPtr, bias);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getMipmapBias() {
    float ret = OgrePINVOKE.Sampler_getMipmapBias(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCompareEnabled(bool enabled) {
    OgrePINVOKE.Sampler_setCompareEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getCompareEnabled() {
    bool ret = OgrePINVOKE.Sampler_getCompareEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCompareFunction(CompareFunction function) {
    OgrePINVOKE.Sampler_setCompareFunction(swigCPtr, (int)function);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public CompareFunction getCompareFunction() {
    CompareFunction ret = (CompareFunction)OgrePINVOKE.Sampler_getCompareFunction(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBorderColour(ColourValue colour) {
    OgrePINVOKE.Sampler_setBorderColour(swigCPtr, ColourValue.getCPtr(colour));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ColourValue getBorderColour() {
    ColourValue ret = new ColourValue(OgrePINVOKE.Sampler_getBorderColour(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
