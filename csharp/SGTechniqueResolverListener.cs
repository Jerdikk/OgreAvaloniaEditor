//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class SGTechniqueResolverListener : MaterialManager.MaterialManager_Listener {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SGTechniqueResolverListener(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BitesPINVOKE.SGTechniqueResolverListener_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SGTechniqueResolverListener obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BitesPINVOKE.delete_SGTechniqueResolverListener(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public SGTechniqueResolverListener(SWIGTYPE_p_Ogre__RTShader__ShaderGenerator pShaderGenerator) : this(BitesPINVOKE.new_SGTechniqueResolverListener(SWIGTYPE_p_Ogre__RTShader__ShaderGenerator.getCPtr(pShaderGenerator)), true) {
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
  }

  public override Technique handleSchemeNotFound(ushort schemeIndex, string schemeName, Material originalMaterial, ushort lodIndex, Renderable rend) {
    global::System.IntPtr cPtr = BitesPINVOKE.SGTechniqueResolverListener_handleSchemeNotFound(swigCPtr, schemeIndex, schemeName, Material.getCPtr(originalMaterial), lodIndex, Renderable.getCPtr(rend));
    Technique ret = (cPtr == global::System.IntPtr.Zero) ? null : new Technique(cPtr, false);
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool afterIlluminationPassesCreated(Technique tech) {
    bool ret = BitesPINVOKE.SGTechniqueResolverListener_afterIlluminationPassesCreated(swigCPtr, Technique.getCPtr(tech));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool beforeIlluminationPassesCleared(Technique tech) {
    bool ret = BitesPINVOKE.SGTechniqueResolverListener_beforeIlluminationPassesCleared(swigCPtr, Technique.getCPtr(tech));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
