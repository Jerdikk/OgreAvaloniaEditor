//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class RenderQueueListener : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RenderQueueListener(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RenderQueueListener obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RenderQueueListener() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_RenderQueueListener(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void preRenderQueues() {
    if (SwigDerivedClassHasMethod("preRenderQueues", swigMethodTypes0)) OgrePINVOKE.RenderQueueListener_preRenderQueuesSwigExplicitRenderQueueListener(swigCPtr); else OgrePINVOKE.RenderQueueListener_preRenderQueues(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void postRenderQueues() {
    if (SwigDerivedClassHasMethod("postRenderQueues", swigMethodTypes1)) OgrePINVOKE.RenderQueueListener_postRenderQueuesSwigExplicitRenderQueueListener(swigCPtr); else OgrePINVOKE.RenderQueueListener_postRenderQueues(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void renderQueueStarted(byte queueGroupId, string cameraName, SWIGTYPE_p_bool skipThisInvocation) {
    if (SwigDerivedClassHasMethod("renderQueueStarted", swigMethodTypes2)) OgrePINVOKE.RenderQueueListener_renderQueueStartedSwigExplicitRenderQueueListener(swigCPtr, queueGroupId, cameraName, SWIGTYPE_p_bool.getCPtr(skipThisInvocation)); else OgrePINVOKE.RenderQueueListener_renderQueueStarted(swigCPtr, queueGroupId, cameraName, SWIGTYPE_p_bool.getCPtr(skipThisInvocation));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void renderQueueEnded(byte queueGroupId, string cameraName, SWIGTYPE_p_bool repeatThisInvocation) {
    if (SwigDerivedClassHasMethod("renderQueueEnded", swigMethodTypes3)) OgrePINVOKE.RenderQueueListener_renderQueueEndedSwigExplicitRenderQueueListener(swigCPtr, queueGroupId, cameraName, SWIGTYPE_p_bool.getCPtr(repeatThisInvocation)); else OgrePINVOKE.RenderQueueListener_renderQueueEnded(swigCPtr, queueGroupId, cameraName, SWIGTYPE_p_bool.getCPtr(repeatThisInvocation));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public RenderQueueListener() : this(OgrePINVOKE.new_RenderQueueListener(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("preRenderQueues", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateRenderQueueListener_0(SwigDirectorMethodpreRenderQueues);
    if (SwigDerivedClassHasMethod("postRenderQueues", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateRenderQueueListener_1(SwigDirectorMethodpostRenderQueues);
    if (SwigDerivedClassHasMethod("renderQueueStarted", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateRenderQueueListener_2(SwigDirectorMethodrenderQueueStarted);
    if (SwigDerivedClassHasMethod("renderQueueEnded", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateRenderQueueListener_3(SwigDirectorMethodrenderQueueEnded);
    OgrePINVOKE.RenderQueueListener_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(RenderQueueListener));
    return hasDerivedMethod;
  }

  private void SwigDirectorMethodpreRenderQueues() {
    preRenderQueues();
  }

  private void SwigDirectorMethodpostRenderQueues() {
    postRenderQueues();
  }

  private void SwigDirectorMethodrenderQueueStarted(byte queueGroupId, string cameraName, global::System.IntPtr skipThisInvocation) {
    renderQueueStarted(queueGroupId, cameraName, new SWIGTYPE_p_bool(skipThisInvocation, false));
  }

  private void SwigDirectorMethodrenderQueueEnded(byte queueGroupId, string cameraName, global::System.IntPtr repeatThisInvocation) {
    renderQueueEnded(queueGroupId, cameraName, new SWIGTYPE_p_bool(repeatThisInvocation, false));
  }

  public delegate void SwigDelegateRenderQueueListener_0();
  public delegate void SwigDelegateRenderQueueListener_1();
  public delegate void SwigDelegateRenderQueueListener_2(byte queueGroupId, string cameraName, global::System.IntPtr skipThisInvocation);
  public delegate void SwigDelegateRenderQueueListener_3(byte queueGroupId, string cameraName, global::System.IntPtr repeatThisInvocation);

  private SwigDelegateRenderQueueListener_0 swigDelegate0;
  private SwigDelegateRenderQueueListener_1 swigDelegate1;
  private SwigDelegateRenderQueueListener_2 swigDelegate2;
  private SwigDelegateRenderQueueListener_3 swigDelegate3;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(byte), typeof(string), typeof(SWIGTYPE_p_bool) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(byte), typeof(string), typeof(SWIGTYPE_p_bool) };
}

}
