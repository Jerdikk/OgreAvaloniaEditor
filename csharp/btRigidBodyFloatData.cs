//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class btRigidBodyFloatData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btRigidBodyFloatData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btRigidBodyFloatData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btRigidBodyFloatData() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreBulletPINVOKE.delete_btRigidBodyFloatData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public btCollisionObjectFloatData m_collisionObjectData {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_collisionObjectData_set(swigCPtr, btCollisionObjectFloatData.getCPtr(value));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgreBulletPINVOKE.btRigidBodyFloatData_m_collisionObjectData_get(swigCPtr);
      btCollisionObjectFloatData ret = (cPtr == global::System.IntPtr.Zero) ? null : new btCollisionObjectFloatData(cPtr, false);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_btMatrix3x3FloatData m_invInertiaTensorWorld {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_invInertiaTensorWorld_set(swigCPtr, SWIGTYPE_p_btMatrix3x3FloatData.getCPtr(value));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_btMatrix3x3FloatData ret = new SWIGTYPE_p_btMatrix3x3FloatData(OgreBulletPINVOKE.btRigidBodyFloatData_m_invInertiaTensorWorld_get(swigCPtr), true);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public btVector3FloatData m_linearVelocity {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_linearVelocity_set(swigCPtr, btVector3FloatData.getCPtr(value));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgreBulletPINVOKE.btRigidBodyFloatData_m_linearVelocity_get(swigCPtr);
      btVector3FloatData ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3FloatData(cPtr, false);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public btVector3FloatData m_angularVelocity {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_angularVelocity_set(swigCPtr, btVector3FloatData.getCPtr(value));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgreBulletPINVOKE.btRigidBodyFloatData_m_angularVelocity_get(swigCPtr);
      btVector3FloatData ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3FloatData(cPtr, false);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public btVector3FloatData m_angularFactor {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_angularFactor_set(swigCPtr, btVector3FloatData.getCPtr(value));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgreBulletPINVOKE.btRigidBodyFloatData_m_angularFactor_get(swigCPtr);
      btVector3FloatData ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3FloatData(cPtr, false);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public btVector3FloatData m_linearFactor {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_linearFactor_set(swigCPtr, btVector3FloatData.getCPtr(value));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgreBulletPINVOKE.btRigidBodyFloatData_m_linearFactor_get(swigCPtr);
      btVector3FloatData ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3FloatData(cPtr, false);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public btVector3FloatData m_gravity {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_gravity_set(swigCPtr, btVector3FloatData.getCPtr(value));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgreBulletPINVOKE.btRigidBodyFloatData_m_gravity_get(swigCPtr);
      btVector3FloatData ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3FloatData(cPtr, false);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public btVector3FloatData m_gravity_acceleration {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_gravity_acceleration_set(swigCPtr, btVector3FloatData.getCPtr(value));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgreBulletPINVOKE.btRigidBodyFloatData_m_gravity_acceleration_get(swigCPtr);
      btVector3FloatData ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3FloatData(cPtr, false);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public btVector3FloatData m_invInertiaLocal {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_invInertiaLocal_set(swigCPtr, btVector3FloatData.getCPtr(value));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgreBulletPINVOKE.btRigidBodyFloatData_m_invInertiaLocal_get(swigCPtr);
      btVector3FloatData ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3FloatData(cPtr, false);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public btVector3FloatData m_totalForce {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_totalForce_set(swigCPtr, btVector3FloatData.getCPtr(value));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgreBulletPINVOKE.btRigidBodyFloatData_m_totalForce_get(swigCPtr);
      btVector3FloatData ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3FloatData(cPtr, false);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public btVector3FloatData m_totalTorque {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_totalTorque_set(swigCPtr, btVector3FloatData.getCPtr(value));
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgreBulletPINVOKE.btRigidBodyFloatData_m_totalTorque_get(swigCPtr);
      btVector3FloatData ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3FloatData(cPtr, false);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_inverseMass {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_inverseMass_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btRigidBodyFloatData_m_inverseMass_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_linearDamping {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_linearDamping_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btRigidBodyFloatData_m_linearDamping_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_angularDamping {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_angularDamping_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btRigidBodyFloatData_m_angularDamping_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_additionalDampingFactor {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_additionalDampingFactor_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btRigidBodyFloatData_m_additionalDampingFactor_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_additionalLinearDampingThresholdSqr {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_additionalAngularDampingThresholdSqr {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_additionalAngularDampingFactor {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_additionalAngularDampingFactor_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btRigidBodyFloatData_m_additionalAngularDampingFactor_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_linearSleepingThreshold {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_linearSleepingThreshold_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btRigidBodyFloatData_m_linearSleepingThreshold_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float m_angularSleepingThreshold {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_angularSleepingThreshold_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = OgreBulletPINVOKE.btRigidBodyFloatData_m_angularSleepingThreshold_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int m_additionalDamping {
    set {
      OgreBulletPINVOKE.btRigidBodyFloatData_m_additionalDamping_set(swigCPtr, value);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = OgreBulletPINVOKE.btRigidBodyFloatData_m_additionalDamping_get(swigCPtr);
      if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public btRigidBodyFloatData() : this(OgreBulletPINVOKE.new_btRigidBodyFloatData(), true) {
    if (OgreBulletPINVOKE.SWIGPendingException.Pending) throw OgreBulletPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
