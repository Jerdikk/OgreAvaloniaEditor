//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class OverlaySystem : RenderQueueListener {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal OverlaySystem(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgreOverlayPINVOKE.OverlaySystem_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OverlaySystem obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreOverlayPINVOKE.delete_OverlaySystem(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override void renderQueueStarted(byte queueGroupId, string cameraName, SWIGTYPE_p_bool skipThisInvocation) {
    OgreOverlayPINVOKE.OverlaySystem_renderQueueStarted(swigCPtr, queueGroupId, cameraName, SWIGTYPE_p_bool.getCPtr(skipThisInvocation));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void eventOccurred(string eventName, NameValueMap parameters) {
    OgreOverlayPINVOKE.OverlaySystem_eventOccurred(swigCPtr, eventName, NameValueMap.getCPtr(parameters));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public static OverlaySystem getSingleton() {
    OverlaySystem ret = new OverlaySystem(OgreOverlayPINVOKE.OverlaySystem_getSingleton(), false);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
