//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class RenderObjectListener : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RenderObjectListener(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RenderObjectListener obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RenderObjectListener() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_RenderObjectListener(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void notifyRenderSingleObject(Renderable rend, Pass pass, SWIGTYPE_p_Ogre__AutoParamDataSource source, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t pLightList, bool suppressRenderStateChanges) {
    OgrePINVOKE.RenderObjectListener_notifyRenderSingleObject(swigCPtr, Renderable.getCPtr(rend), Pass.getCPtr(pass), SWIGTYPE_p_Ogre__AutoParamDataSource.getCPtr(source), SWIGTYPE_p_std__vectorT_Ogre__Light_p_t.getCPtr(pLightList), suppressRenderStateChanges);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public RenderObjectListener() : this(OgrePINVOKE.new_RenderObjectListener(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("notifyRenderSingleObject", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateRenderObjectListener_0(SwigDirectorMethodnotifyRenderSingleObject);
    OgrePINVOKE.RenderObjectListener_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(RenderObjectListener));
    return hasDerivedMethod;
  }

  private void SwigDirectorMethodnotifyRenderSingleObject(global::System.IntPtr rend, global::System.IntPtr pass, global::System.IntPtr source, global::System.IntPtr pLightList, bool suppressRenderStateChanges) {
    notifyRenderSingleObject((rend == global::System.IntPtr.Zero) ? null : new Renderable(rend, false), (pass == global::System.IntPtr.Zero) ? null : new Pass(pass, false), (source == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Ogre__AutoParamDataSource(source, false), (pLightList == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_Ogre__Light_p_t(pLightList, false), suppressRenderStateChanges);
  }

  public delegate void SwigDelegateRenderObjectListener_0(global::System.IntPtr rend, global::System.IntPtr pass, global::System.IntPtr source, global::System.IntPtr pLightList, bool suppressRenderStateChanges);

  private SwigDelegateRenderObjectListener_0 swigDelegate0;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(Renderable), typeof(Pass), typeof(SWIGTYPE_p_Ogre__AutoParamDataSource), typeof(SWIGTYPE_p_std__vectorT_Ogre__Light_p_t), typeof(bool) };
}

}
