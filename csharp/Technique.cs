//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class Technique : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Technique(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Technique obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Technique() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_Technique(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public class GPUVendorRule : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal GPUVendorRule(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GPUVendorRule obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~GPUVendorRule() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_Technique_GPUVendorRule(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public GPUVendor vendor {
      set {
        OgrePINVOKE.Technique_GPUVendorRule_vendor_set(swigCPtr, (int)value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        GPUVendor ret = (GPUVendor)OgrePINVOKE.Technique_GPUVendorRule_vendor_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Technique.IncludeOrExclude includeOrExclude {
      set {
        OgrePINVOKE.Technique_GPUVendorRule_includeOrExclude_set(swigCPtr, (int)value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        Technique.IncludeOrExclude ret = (Technique.IncludeOrExclude)OgrePINVOKE.Technique_GPUVendorRule_includeOrExclude_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public GPUVendorRule() : this(OgrePINVOKE.new_Technique_GPUVendorRule__SWIG_0(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public GPUVendorRule(GPUVendor v, Technique.IncludeOrExclude ie) : this(OgrePINVOKE.new_Technique_GPUVendorRule__SWIG_1((int)v, (int)ie), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public class GPUDeviceNameRule : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal GPUDeviceNameRule(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GPUDeviceNameRule obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~GPUDeviceNameRule() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_Technique_GPUDeviceNameRule(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public string devicePattern {
      set {
        OgrePINVOKE.Technique_GPUDeviceNameRule_devicePattern_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        string ret = OgrePINVOKE.Technique_GPUDeviceNameRule_devicePattern_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Technique.IncludeOrExclude includeOrExclude {
      set {
        OgrePINVOKE.Technique_GPUDeviceNameRule_includeOrExclude_set(swigCPtr, (int)value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        Technique.IncludeOrExclude ret = (Technique.IncludeOrExclude)OgrePINVOKE.Technique_GPUDeviceNameRule_includeOrExclude_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public bool caseSensitive {
      set {
        OgrePINVOKE.Technique_GPUDeviceNameRule_caseSensitive_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        bool ret = OgrePINVOKE.Technique_GPUDeviceNameRule_caseSensitive_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public GPUDeviceNameRule() : this(OgrePINVOKE.new_Technique_GPUDeviceNameRule__SWIG_0(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public GPUDeviceNameRule(string pattern, Technique.IncludeOrExclude ie, bool caseSen) : this(OgrePINVOKE.new_Technique_GPUDeviceNameRule__SWIG_1(pattern, (int)ie, caseSen), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public Technique(Material parent) : this(OgrePINVOKE.new_Technique__SWIG_0(Material.getCPtr(parent)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Technique(Material parent, Technique oth) : this(OgrePINVOKE.new_Technique__SWIG_1(Material.getCPtr(parent), Technique.getCPtr(oth)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isSupported() {
    bool ret = OgrePINVOKE.Technique_isSupported(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string _compile(bool autoManageTextureUnits) {
    string ret = OgrePINVOKE.Technique__compile(swigCPtr, autoManageTextureUnits);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool checkHardwareSupport(bool autoManageTextureUnits, SWIGTYPE_p_std__stringstream compileErrors) {
    bool ret = OgrePINVOKE.Technique_checkHardwareSupport(swigCPtr, autoManageTextureUnits, SWIGTYPE_p_std__stringstream.getCPtr(compileErrors));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint calculateSize() {
    uint ret = OgrePINVOKE.Technique_calculateSize(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Pass createPass() {
    global::System.IntPtr cPtr = OgrePINVOKE.Technique_createPass(swigCPtr);
    Pass ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pass(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Pass getPass(uint index) {
    global::System.IntPtr cPtr = OgrePINVOKE.Technique_getPass__SWIG_0(swigCPtr, index);
    Pass ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pass(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Pass getPass(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.Technique_getPass__SWIG_1(swigCPtr, name);
    Pass ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pass(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumPasses() {
    uint ret = OgrePINVOKE.Technique_getNumPasses(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removePass(ushort index) {
    OgrePINVOKE.Technique_removePass(swigCPtr, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeAllPasses() {
    OgrePINVOKE.Technique_removeAllPasses(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool movePass(ushort sourceIndex, ushort destinationIndex) {
    bool ret = OgrePINVOKE.Technique_movePass(swigCPtr, sourceIndex, destinationIndex);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PassList getPasses() {
    PassList ret = new PassList(OgrePINVOKE.Technique_getPasses(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IlluminationPassList getIlluminationPasses() {
    IlluminationPassList ret = new IlluminationPassList(OgrePINVOKE.Technique_getIlluminationPasses(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _compileIlluminationPasses() {
    OgrePINVOKE.Technique__compileIlluminationPasses(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Material getParent() {
    global::System.IntPtr cPtr = OgrePINVOKE.Technique_getParent(swigCPtr);
    Material ret = (cPtr == global::System.IntPtr.Zero) ? null : new Material(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getResourceGroup() {
    string ret = OgrePINVOKE.Technique_getResourceGroup(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isTransparent() {
    bool ret = OgrePINVOKE.Technique_isTransparent(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isTransparentSortingEnabled() {
    bool ret = OgrePINVOKE.Technique_isTransparentSortingEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isTransparentSortingForced() {
    bool ret = OgrePINVOKE.Technique_isTransparentSortingForced(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _prepare() {
    OgrePINVOKE.Technique__prepare(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _unprepare() {
    OgrePINVOKE.Technique__unprepare(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _load() {
    OgrePINVOKE.Technique__load(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _unload() {
    OgrePINVOKE.Technique__unload(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isLoaded() {
    bool ret = OgrePINVOKE.Technique_isLoaded(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _notifyNeedsRecompile() {
    OgrePINVOKE.Technique__notifyNeedsRecompile(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public MaterialPtr getShadowCasterMaterial() {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.Technique_getShadowCasterMaterial(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShadowCasterMaterial(MaterialPtr val) {
    OgrePINVOKE.Technique_setShadowCasterMaterial__SWIG_0(swigCPtr, MaterialPtr.getCPtr(val));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadowCasterMaterial(string name) {
    OgrePINVOKE.Technique_setShadowCasterMaterial__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public MaterialPtr getShadowReceiverMaterial() {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.Technique_getShadowReceiverMaterial(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShadowReceiverMaterial(MaterialPtr val) {
    OgrePINVOKE.Technique_setShadowReceiverMaterial__SWIG_0(swigCPtr, MaterialPtr.getCPtr(val));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadowReceiverMaterial(string name) {
    OgrePINVOKE.Technique_setShadowReceiverMaterial__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setPointSize(float ps) {
    OgrePINVOKE.Technique_setPointSize(swigCPtr, ps);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAmbient(float red, float green, float blue) {
    OgrePINVOKE.Technique_setAmbient__SWIG_0(swigCPtr, red, green, blue);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAmbient(ColourValue ambient) {
    OgrePINVOKE.Technique_setAmbient__SWIG_1(swigCPtr, ColourValue.getCPtr(ambient));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDiffuse(float red, float green, float blue, float alpha) {
    OgrePINVOKE.Technique_setDiffuse__SWIG_0(swigCPtr, red, green, blue, alpha);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDiffuse(ColourValue diffuse) {
    OgrePINVOKE.Technique_setDiffuse__SWIG_1(swigCPtr, ColourValue.getCPtr(diffuse));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSpecular(float red, float green, float blue, float alpha) {
    OgrePINVOKE.Technique_setSpecular__SWIG_0(swigCPtr, red, green, blue, alpha);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSpecular(ColourValue specular) {
    OgrePINVOKE.Technique_setSpecular__SWIG_1(swigCPtr, ColourValue.getCPtr(specular));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShininess(float val) {
    OgrePINVOKE.Technique_setShininess(swigCPtr, val);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSelfIllumination(float red, float green, float blue) {
    OgrePINVOKE.Technique_setSelfIllumination__SWIG_0(swigCPtr, red, green, blue);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSelfIllumination(ColourValue selfIllum) {
    OgrePINVOKE.Technique_setSelfIllumination__SWIG_1(swigCPtr, ColourValue.getCPtr(selfIllum));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDepthCheckEnabled(bool enabled) {
    OgrePINVOKE.Technique_setDepthCheckEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDepthWriteEnabled(bool enabled) {
    OgrePINVOKE.Technique_setDepthWriteEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDepthFunction(CompareFunction func) {
    OgrePINVOKE.Technique_setDepthFunction(swigCPtr, (int)func);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setColourWriteEnabled(bool enabled) {
    OgrePINVOKE.Technique_setColourWriteEnabled__SWIG_0(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setColourWriteEnabled(bool red, bool green, bool blue, bool alpha) {
    OgrePINVOKE.Technique_setColourWriteEnabled__SWIG_1(swigCPtr, red, green, blue, alpha);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setCullingMode(CullingMode mode) {
    OgrePINVOKE.Technique_setCullingMode(swigCPtr, (int)mode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setManualCullingMode(ManualCullingMode mode) {
    OgrePINVOKE.Technique_setManualCullingMode(swigCPtr, (int)mode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setLightingEnabled(bool enabled) {
    OgrePINVOKE.Technique_setLightingEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadingMode(ShadeOptions mode) {
    OgrePINVOKE.Technique_setShadingMode(swigCPtr, (int)mode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFog(bool overrideScene, FogMode mode, ColourValue colour, float expDensity, float linearStart, float linearEnd) {
    OgrePINVOKE.Technique_setFog__SWIG_0(swigCPtr, overrideScene, (int)mode, ColourValue.getCPtr(colour), expDensity, linearStart, linearEnd);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFog(bool overrideScene, FogMode mode, ColourValue colour, float expDensity, float linearStart) {
    OgrePINVOKE.Technique_setFog__SWIG_1(swigCPtr, overrideScene, (int)mode, ColourValue.getCPtr(colour), expDensity, linearStart);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFog(bool overrideScene, FogMode mode, ColourValue colour, float expDensity) {
    OgrePINVOKE.Technique_setFog__SWIG_2(swigCPtr, overrideScene, (int)mode, ColourValue.getCPtr(colour), expDensity);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFog(bool overrideScene, FogMode mode, ColourValue colour) {
    OgrePINVOKE.Technique_setFog__SWIG_3(swigCPtr, overrideScene, (int)mode, ColourValue.getCPtr(colour));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFog(bool overrideScene, FogMode mode) {
    OgrePINVOKE.Technique_setFog__SWIG_4(swigCPtr, overrideScene, (int)mode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFog(bool overrideScene) {
    OgrePINVOKE.Technique_setFog__SWIG_5(swigCPtr, overrideScene);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDepthBias(float constantBias, float slopeScaleBias) {
    OgrePINVOKE.Technique_setDepthBias(swigCPtr, constantBias, slopeScaleBias);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTextureFiltering(TextureFilterOptions filterType) {
    OgrePINVOKE.Technique_setTextureFiltering(swigCPtr, (int)filterType);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTextureAnisotropy(uint maxAniso) {
    OgrePINVOKE.Technique_setTextureAnisotropy(swigCPtr, maxAniso);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSceneBlending(SceneBlendType sbt) {
    OgrePINVOKE.Technique_setSceneBlending__SWIG_0(swigCPtr, (int)sbt);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSeparateSceneBlending(SceneBlendType sbt, SceneBlendType sbta) {
    OgrePINVOKE.Technique_setSeparateSceneBlending__SWIG_0(swigCPtr, (int)sbt, (int)sbta);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSceneBlending(SceneBlendFactor sourceFactor, SceneBlendFactor destFactor) {
    OgrePINVOKE.Technique_setSceneBlending__SWIG_1(swigCPtr, (int)sourceFactor, (int)destFactor);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSeparateSceneBlending(SceneBlendFactor sourceFactor, SceneBlendFactor destFactor, SceneBlendFactor sourceFactorAlpha, SceneBlendFactor destFactorAlpha) {
    OgrePINVOKE.Technique_setSeparateSceneBlending__SWIG_1(swigCPtr, (int)sourceFactor, (int)destFactor, (int)sourceFactorAlpha, (int)destFactorAlpha);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setLodIndex(ushort index) {
    OgrePINVOKE.Technique_setLodIndex(swigCPtr, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getLodIndex() {
    ushort ret = OgrePINVOKE.Technique_getLodIndex(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSchemeName(string schemeName) {
    OgrePINVOKE.Technique_setSchemeName(swigCPtr, schemeName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getSchemeName() {
    string ret = OgrePINVOKE.Technique_getSchemeName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort _getSchemeIndex() {
    ushort ret = OgrePINVOKE.Technique__getSchemeIndex(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isDepthWriteEnabled() {
    bool ret = OgrePINVOKE.Technique_isDepthWriteEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isDepthCheckEnabled() {
    bool ret = OgrePINVOKE.Technique_isDepthCheckEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasColourWriteDisabled() {
    bool ret = OgrePINVOKE.Technique_hasColourWriteDisabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setName(string name) {
    OgrePINVOKE.Technique_setName(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getName() {
    string ret = OgrePINVOKE.Technique_getName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool checkGPURules(SWIGTYPE_p_std__stringstream errors) {
    bool ret = OgrePINVOKE.Technique_checkGPURules(swigCPtr, SWIGTYPE_p_std__stringstream.getCPtr(errors));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addGPUVendorRule(GPUVendor vendor, Technique.IncludeOrExclude includeOrExclude) {
    OgrePINVOKE.Technique_addGPUVendorRule__SWIG_0(swigCPtr, (int)vendor, (int)includeOrExclude);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addGPUVendorRule(Technique.GPUVendorRule rule) {
    OgrePINVOKE.Technique_addGPUVendorRule__SWIG_1(swigCPtr, Technique.GPUVendorRule.getCPtr(rule));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeGPUVendorRule(GPUVendor vendor) {
    OgrePINVOKE.Technique_removeGPUVendorRule(swigCPtr, (int)vendor);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_Ogre__Technique__GPUVendorRule_t getGPUVendorRules() {
    SWIGTYPE_p_std__vectorT_Ogre__Technique__GPUVendorRule_t ret = new SWIGTYPE_p_std__vectorT_Ogre__Technique__GPUVendorRule_t(OgrePINVOKE.Technique_getGPUVendorRules(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addGPUDeviceNameRule(string devicePattern, Technique.IncludeOrExclude includeOrExclude, bool caseSensitive) {
    OgrePINVOKE.Technique_addGPUDeviceNameRule__SWIG_0(swigCPtr, devicePattern, (int)includeOrExclude, caseSensitive);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addGPUDeviceNameRule(string devicePattern, Technique.IncludeOrExclude includeOrExclude) {
    OgrePINVOKE.Technique_addGPUDeviceNameRule__SWIG_1(swigCPtr, devicePattern, (int)includeOrExclude);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addGPUDeviceNameRule(Technique.GPUDeviceNameRule rule) {
    OgrePINVOKE.Technique_addGPUDeviceNameRule__SWIG_2(swigCPtr, Technique.GPUDeviceNameRule.getCPtr(rule));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeGPUDeviceNameRule(string devicePattern) {
    OgrePINVOKE.Technique_removeGPUDeviceNameRule(swigCPtr, devicePattern);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_Ogre__Technique__GPUDeviceNameRule_t getGPUDeviceNameRules() {
    SWIGTYPE_p_std__vectorT_Ogre__Technique__GPUDeviceNameRule_t ret = new SWIGTYPE_p_std__vectorT_Ogre__Technique__GPUDeviceNameRule_t(OgrePINVOKE.Technique_getGPUDeviceNameRules(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UserObjectBindings getUserObjectBindings() {
    UserObjectBindings ret = new UserObjectBindings(OgrePINVOKE.Technique_getUserObjectBindings__SWIG_0(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum IncludeOrExclude {
    INCLUDE = 0,
    EXCLUDE = 1
  }

}

}
