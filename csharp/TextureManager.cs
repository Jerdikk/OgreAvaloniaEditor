//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class TextureManager : ResourceManager {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal TextureManager(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.TextureManager_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TextureManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_TextureManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t createSampler(string name) {
    SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t ret = new SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t(OgrePINVOKE.TextureManager_createSampler__SWIG_0(swigCPtr, name), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t createSampler() {
    SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t ret = new SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t(OgrePINVOKE.TextureManager_createSampler__SWIG_1(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t getSampler(string name) {
    SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t ret = new SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t(OgrePINVOKE.TextureManager_getSampler(swigCPtr, name), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeAllNamedSamplers() {
    OgrePINVOKE.TextureManager_removeAllNamedSamplers(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public TexturePtr create(string name, string group, bool isManual, ManualResourceLoader loader, NameValueMap createParams) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_create__SWIG_0(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader), NameValueMap.getCPtr(createParams)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr create(string name, string group, bool isManual, ManualResourceLoader loader) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_create__SWIG_1(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr create(string name, string group, bool isManual) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_create__SWIG_2(swigCPtr, name, group, isManual), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr create(string name, string group) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_create__SWIG_3(swigCPtr, name, group), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr getByName(string name, string groupName) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_getByName__SWIG_0(swigCPtr, name, groupName), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr getByName(string name) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_getByName__SWIG_1(swigCPtr, name), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t createOrRetrieve(string name, string group, bool isManual, ManualResourceLoader loader, NameValueMap createParams) {
    SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t(OgrePINVOKE.TextureManager_createOrRetrieve__SWIG_0_0(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader), NameValueMap.getCPtr(createParams)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t createOrRetrieve(string name, string group, bool isManual, ManualResourceLoader loader) {
    SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t(OgrePINVOKE.TextureManager_createOrRetrieve__SWIG_0_1(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t createOrRetrieve(string name, string group, bool isManual) {
    SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t(OgrePINVOKE.TextureManager_createOrRetrieve__SWIG_0_2(swigCPtr, name, group, isManual), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t createOrRetrieve(string name, string group) {
    SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t(OgrePINVOKE.TextureManager_createOrRetrieve__SWIG_0_3(swigCPtr, name, group), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t createOrRetrieve(string name, string group, bool isManual, ManualResourceLoader loader, NameValueMap createParams, TextureType texType, int numMipmaps, float gamma, bool isAlpha, PixelFormat desiredFormat, bool hwGammaCorrection) {
    SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t(OgrePINVOKE.TextureManager_createOrRetrieve__SWIG_1(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader), NameValueMap.getCPtr(createParams), (int)texType, numMipmaps, gamma, isAlpha, (int)desiredFormat, hwGammaCorrection), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t createOrRetrieve(string name, string group, bool isManual, ManualResourceLoader loader, NameValueMap createParams, TextureType texType, int numMipmaps, float gamma, bool isAlpha, PixelFormat desiredFormat) {
    SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t(OgrePINVOKE.TextureManager_createOrRetrieve__SWIG_2(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader), NameValueMap.getCPtr(createParams), (int)texType, numMipmaps, gamma, isAlpha, (int)desiredFormat), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t createOrRetrieve(string name, string group, bool isManual, ManualResourceLoader loader, NameValueMap createParams, TextureType texType, int numMipmaps, float gamma, bool isAlpha) {
    SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t(OgrePINVOKE.TextureManager_createOrRetrieve__SWIG_3(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader), NameValueMap.getCPtr(createParams), (int)texType, numMipmaps, gamma, isAlpha), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t createOrRetrieve(string name, string group, bool isManual, ManualResourceLoader loader, NameValueMap createParams, TextureType texType, int numMipmaps, float gamma) {
    SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t(OgrePINVOKE.TextureManager_createOrRetrieve__SWIG_4(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader), NameValueMap.getCPtr(createParams), (int)texType, numMipmaps, gamma), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t createOrRetrieve(string name, string group, bool isManual, ManualResourceLoader loader, NameValueMap createParams, TextureType texType, int numMipmaps) {
    SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t(OgrePINVOKE.TextureManager_createOrRetrieve__SWIG_5(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader), NameValueMap.getCPtr(createParams), (int)texType, numMipmaps), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t createOrRetrieve(string name, string group, bool isManual, ManualResourceLoader loader, NameValueMap createParams, TextureType texType) {
    SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__SharedPtrT_Ogre__Resource_t_bool_t(OgrePINVOKE.TextureManager_createOrRetrieve__SWIG_6(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader), NameValueMap.getCPtr(createParams), (int)texType), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr prepare(string name, string group, TextureType texType, int numMipmaps, float gamma, bool isAlpha, PixelFormat desiredFormat, bool hwGammaCorrection) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_prepare__SWIG_0(swigCPtr, name, group, (int)texType, numMipmaps, gamma, isAlpha, (int)desiredFormat, hwGammaCorrection), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr prepare(string name, string group, TextureType texType, int numMipmaps, float gamma, bool isAlpha, PixelFormat desiredFormat) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_prepare__SWIG_1(swigCPtr, name, group, (int)texType, numMipmaps, gamma, isAlpha, (int)desiredFormat), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr prepare(string name, string group, TextureType texType, int numMipmaps, float gamma, bool isAlpha) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_prepare__SWIG_2(swigCPtr, name, group, (int)texType, numMipmaps, gamma, isAlpha), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr prepare(string name, string group, TextureType texType, int numMipmaps, float gamma) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_prepare__SWIG_3(swigCPtr, name, group, (int)texType, numMipmaps, gamma), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr prepare(string name, string group, TextureType texType, int numMipmaps) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_prepare__SWIG_4(swigCPtr, name, group, (int)texType, numMipmaps), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr prepare(string name, string group, TextureType texType) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_prepare__SWIG_5(swigCPtr, name, group, (int)texType), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr prepare(string name, string group) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_prepare__SWIG_6(swigCPtr, name, group), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr load(string name, string group, TextureType texType, int numMipmaps, float gamma, PixelFormat desiredFormat, bool hwGammaCorrection) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_load__SWIG_0(swigCPtr, name, group, (int)texType, numMipmaps, gamma, (int)desiredFormat, hwGammaCorrection), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr load(string name, string group, TextureType texType, int numMipmaps, float gamma, PixelFormat desiredFormat) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_load__SWIG_1(swigCPtr, name, group, (int)texType, numMipmaps, gamma, (int)desiredFormat), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr load(string name, string group, TextureType texType, int numMipmaps, float gamma) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_load__SWIG_2(swigCPtr, name, group, (int)texType, numMipmaps, gamma), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr load(string name, string group, TextureType texType, int numMipmaps) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_load__SWIG_3(swigCPtr, name, group, (int)texType, numMipmaps), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr load(string name, string group, TextureType texType) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_load__SWIG_4(swigCPtr, name, group, (int)texType), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr load(string name, string group) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_load__SWIG_5(swigCPtr, name, group), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr load(string name, string group, TextureType texType, int numMipmaps, float gamma, bool isAlpha, PixelFormat desiredFormat, bool hwGammaCorrection) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_load__SWIG_6(swigCPtr, name, group, (int)texType, numMipmaps, gamma, isAlpha, (int)desiredFormat, hwGammaCorrection), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr load(string name, string group, TextureType texType, int numMipmaps, float gamma, bool isAlpha, PixelFormat desiredFormat) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_load__SWIG_7(swigCPtr, name, group, (int)texType, numMipmaps, gamma, isAlpha, (int)desiredFormat), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr load(string name, string group, TextureType texType, int numMipmaps, float gamma, bool isAlpha) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_load__SWIG_8(swigCPtr, name, group, (int)texType, numMipmaps, gamma, isAlpha), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TexturePtr loadImage(string name, string group, Image img, TextureType texType, int numMipmaps, float gamma, bool isAlpha, PixelFormat desiredFormat, bool hwGammaCorrection) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_loadImage__SWIG_0(swigCPtr, name, group, Image.getCPtr(img), (int)texType, numMipmaps, gamma, isAlpha, (int)desiredFormat, hwGammaCorrection), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TexturePtr loadImage(string name, string group, Image img, TextureType texType, int numMipmaps, float gamma, bool isAlpha, PixelFormat desiredFormat) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_loadImage__SWIG_1(swigCPtr, name, group, Image.getCPtr(img), (int)texType, numMipmaps, gamma, isAlpha, (int)desiredFormat), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TexturePtr loadImage(string name, string group, Image img, TextureType texType, int numMipmaps, float gamma, bool isAlpha) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_loadImage__SWIG_2(swigCPtr, name, group, Image.getCPtr(img), (int)texType, numMipmaps, gamma, isAlpha), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TexturePtr loadImage(string name, string group, Image img, TextureType texType, int numMipmaps, float gamma) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_loadImage__SWIG_3(swigCPtr, name, group, Image.getCPtr(img), (int)texType, numMipmaps, gamma), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TexturePtr loadImage(string name, string group, Image img, TextureType texType, int numMipmaps) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_loadImage__SWIG_4(swigCPtr, name, group, Image.getCPtr(img), (int)texType, numMipmaps), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TexturePtr loadImage(string name, string group, Image img, TextureType texType) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_loadImage__SWIG_5(swigCPtr, name, group, Image.getCPtr(img), (int)texType), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TexturePtr loadImage(string name, string group, Image img) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_loadImage__SWIG_6(swigCPtr, name, group, Image.getCPtr(img)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TexturePtr loadRawData(string name, string group, DataStreamPtr stream, ushort width, ushort height, PixelFormat format, TextureType texType, int numMipmaps, float gamma, bool hwGammaCorrection) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_loadRawData__SWIG_0(swigCPtr, name, group, DataStreamPtr.getCPtr(stream), width, height, (int)format, (int)texType, numMipmaps, gamma, hwGammaCorrection), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TexturePtr loadRawData(string name, string group, DataStreamPtr stream, ushort width, ushort height, PixelFormat format, TextureType texType, int numMipmaps, float gamma) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_loadRawData__SWIG_1(swigCPtr, name, group, DataStreamPtr.getCPtr(stream), width, height, (int)format, (int)texType, numMipmaps, gamma), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TexturePtr loadRawData(string name, string group, DataStreamPtr stream, ushort width, ushort height, PixelFormat format, TextureType texType, int numMipmaps) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_loadRawData__SWIG_2(swigCPtr, name, group, DataStreamPtr.getCPtr(stream), width, height, (int)format, (int)texType, numMipmaps), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TexturePtr loadRawData(string name, string group, DataStreamPtr stream, ushort width, ushort height, PixelFormat format, TextureType texType) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_loadRawData__SWIG_3(swigCPtr, name, group, DataStreamPtr.getCPtr(stream), width, height, (int)format, (int)texType), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TexturePtr loadRawData(string name, string group, DataStreamPtr stream, ushort width, ushort height, PixelFormat format) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_loadRawData__SWIG_4(swigCPtr, name, group, DataStreamPtr.getCPtr(stream), width, height, (int)format), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TexturePtr createManual(string name, string group, TextureType texType, uint width, uint height, uint depth, int numMipmaps, PixelFormat format, int usage, ManualResourceLoader loader, bool hwGammaCorrection, uint fsaa, string fsaaHint) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_createManual__SWIG_0(swigCPtr, name, group, (int)texType, width, height, depth, numMipmaps, (int)format, usage, ManualResourceLoader.getCPtr(loader), hwGammaCorrection, fsaa, fsaaHint), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TexturePtr createManual(string name, string group, TextureType texType, uint width, uint height, uint depth, int numMipmaps, PixelFormat format, int usage, ManualResourceLoader loader, bool hwGammaCorrection, uint fsaa) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_createManual__SWIG_1(swigCPtr, name, group, (int)texType, width, height, depth, numMipmaps, (int)format, usage, ManualResourceLoader.getCPtr(loader), hwGammaCorrection, fsaa), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TexturePtr createManual(string name, string group, TextureType texType, uint width, uint height, uint depth, int numMipmaps, PixelFormat format, int usage, ManualResourceLoader loader, bool hwGammaCorrection) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_createManual__SWIG_2(swigCPtr, name, group, (int)texType, width, height, depth, numMipmaps, (int)format, usage, ManualResourceLoader.getCPtr(loader), hwGammaCorrection), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TexturePtr createManual(string name, string group, TextureType texType, uint width, uint height, uint depth, int numMipmaps, PixelFormat format, int usage, ManualResourceLoader loader) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_createManual__SWIG_3(swigCPtr, name, group, (int)texType, width, height, depth, numMipmaps, (int)format, usage, ManualResourceLoader.getCPtr(loader)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TexturePtr createManual(string name, string group, TextureType texType, uint width, uint height, uint depth, int numMipmaps, PixelFormat format, int usage) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_createManual__SWIG_4(swigCPtr, name, group, (int)texType, width, height, depth, numMipmaps, (int)format, usage), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TexturePtr createManual(string name, string group, TextureType texType, uint width, uint height, uint depth, int numMipmaps, PixelFormat format) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_createManual__SWIG_5(swigCPtr, name, group, (int)texType, width, height, depth, numMipmaps, (int)format), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr createManual(string name, string group, TextureType texType, uint width, uint height, int numMipmaps, PixelFormat format, int usage, ManualResourceLoader loader, bool hwGammaCorrection, uint fsaa, string fsaaHint) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_createManual__SWIG_6(swigCPtr, name, group, (int)texType, width, height, numMipmaps, (int)format, usage, ManualResourceLoader.getCPtr(loader), hwGammaCorrection, fsaa, fsaaHint), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr createManual(string name, string group, TextureType texType, uint width, uint height, int numMipmaps, PixelFormat format, int usage, ManualResourceLoader loader, bool hwGammaCorrection, uint fsaa) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_createManual__SWIG_7(swigCPtr, name, group, (int)texType, width, height, numMipmaps, (int)format, usage, ManualResourceLoader.getCPtr(loader), hwGammaCorrection, fsaa), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr createManual(string name, string group, TextureType texType, uint width, uint height, int numMipmaps, PixelFormat format, int usage, ManualResourceLoader loader, bool hwGammaCorrection) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_createManual__SWIG_8(swigCPtr, name, group, (int)texType, width, height, numMipmaps, (int)format, usage, ManualResourceLoader.getCPtr(loader), hwGammaCorrection), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr createManual(string name, string group, TextureType texType, uint width, uint height, int numMipmaps, PixelFormat format, int usage, ManualResourceLoader loader) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager_createManual__SWIG_9(swigCPtr, name, group, (int)texType, width, height, numMipmaps, (int)format, usage, ManualResourceLoader.getCPtr(loader)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setPreferredIntegerBitDepth(ushort bits, bool reloadTextures) {
    OgrePINVOKE.TextureManager_setPreferredIntegerBitDepth__SWIG_0(swigCPtr, bits, reloadTextures);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setPreferredIntegerBitDepth(ushort bits) {
    OgrePINVOKE.TextureManager_setPreferredIntegerBitDepth__SWIG_1(swigCPtr, bits);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ushort getPreferredIntegerBitDepth() {
    ushort ret = OgrePINVOKE.TextureManager_getPreferredIntegerBitDepth(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setPreferredFloatBitDepth(ushort bits, bool reloadTextures) {
    OgrePINVOKE.TextureManager_setPreferredFloatBitDepth__SWIG_0(swigCPtr, bits, reloadTextures);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setPreferredFloatBitDepth(ushort bits) {
    OgrePINVOKE.TextureManager_setPreferredFloatBitDepth__SWIG_1(swigCPtr, bits);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ushort getPreferredFloatBitDepth() {
    ushort ret = OgrePINVOKE.TextureManager_getPreferredFloatBitDepth(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setPreferredBitDepths(ushort integerBits, ushort floatBits, bool reloadTextures) {
    OgrePINVOKE.TextureManager_setPreferredBitDepths__SWIG_0(swigCPtr, integerBits, floatBits, reloadTextures);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setPreferredBitDepths(ushort integerBits, ushort floatBits) {
    OgrePINVOKE.TextureManager_setPreferredBitDepths__SWIG_1(swigCPtr, integerBits, floatBits);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool isFormatSupported(TextureType ttype, PixelFormat format, int usage) {
    bool ret = OgrePINVOKE.TextureManager_isFormatSupported(swigCPtr, (int)ttype, (int)format, usage);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isEquivalentFormatSupported(TextureType ttype, PixelFormat format, int usage) {
    bool ret = OgrePINVOKE.TextureManager_isEquivalentFormatSupported(swigCPtr, (int)ttype, (int)format, usage);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PixelFormat getNativeFormat(TextureType ttype, PixelFormat format, int usage) {
    PixelFormat ret = (PixelFormat)OgrePINVOKE.TextureManager_getNativeFormat(swigCPtr, (int)ttype, (int)format, usage);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isHardwareFilteringSupported(TextureType ttype, PixelFormat format, int usage, bool preciseFormatOnly) {
    bool ret = OgrePINVOKE.TextureManager_isHardwareFilteringSupported__SWIG_0(swigCPtr, (int)ttype, (int)format, usage, preciseFormatOnly);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isHardwareFilteringSupported(TextureType ttype, PixelFormat format, int usage) {
    bool ret = OgrePINVOKE.TextureManager_isHardwareFilteringSupported__SWIG_1(swigCPtr, (int)ttype, (int)format, usage);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setDefaultNumMipmaps(uint num) {
    OgrePINVOKE.TextureManager_setDefaultNumMipmaps(swigCPtr, num);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual uint getDefaultNumMipmaps() {
    uint ret = OgrePINVOKE.TextureManager_getDefaultNumMipmaps(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TexturePtr _getWarningTexture() {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.TextureManager__getWarningTexture(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t getDefaultSampler() {
    SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t ret = new SWIGTYPE_p_std__shared_ptrT_Ogre__Sampler_t(OgrePINVOKE.TextureManager_getDefaultSampler(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TextureManager getSingleton() {
    TextureManager ret = new TextureManager(OgrePINVOKE.TextureManager_getSingleton(), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
