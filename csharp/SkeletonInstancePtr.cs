//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class SkeletonInstancePtr : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SkeletonInstancePtr(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SkeletonInstancePtr obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SkeletonInstancePtr() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_SkeletonInstancePtr(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SkeletonInstancePtr(SWIGTYPE_p_std__nullptr_t arg0) : this(OgrePINVOKE.new_SkeletonInstancePtr__SWIG_0(SWIGTYPE_p_std__nullptr_t.getCPtr(arg0)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SkeletonInstancePtr() : this(OgrePINVOKE.new_SkeletonInstancePtr__SWIG_1(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SkeletonInstancePtr(SkeletonInstancePtr r) : this(OgrePINVOKE.new_SkeletonInstancePtr__SWIG_2(SkeletonInstancePtr.getCPtr(r)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SkeletonInstance __deref__() {
    global::System.IntPtr cPtr = OgrePINVOKE.SkeletonInstancePtr___deref__(swigCPtr);
    SkeletonInstance ret = (cPtr == global::System.IntPtr.Zero) ? null : new SkeletonInstance(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getNumAnimations() {
    ushort ret = OgrePINVOKE.SkeletonInstancePtr_getNumAnimations(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Animation getAnimation(ushort index) {
    global::System.IntPtr cPtr = OgrePINVOKE.SkeletonInstancePtr_getAnimation__SWIG_0(swigCPtr, index);
    Animation ret = (cPtr == global::System.IntPtr.Zero) ? null : new Animation(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Animation getAnimation(string name, SWIGTYPE_p_p_Ogre__LinkedSkeletonAnimationSource linker) {
    global::System.IntPtr cPtr = OgrePINVOKE.SkeletonInstancePtr_getAnimation__SWIG_1(swigCPtr, name, SWIGTYPE_p_p_Ogre__LinkedSkeletonAnimationSource.getCPtr(linker));
    Animation ret = (cPtr == global::System.IntPtr.Zero) ? null : new Animation(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Animation getAnimation(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SkeletonInstancePtr_getAnimation__SWIG_2(swigCPtr, name);
    Animation ret = (cPtr == global::System.IntPtr.Zero) ? null : new Animation(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Animation _getAnimationImpl(string name, SWIGTYPE_p_p_Ogre__LinkedSkeletonAnimationSource linker) {
    global::System.IntPtr cPtr = OgrePINVOKE.SkeletonInstancePtr__getAnimationImpl__SWIG_0(swigCPtr, name, SWIGTYPE_p_p_Ogre__LinkedSkeletonAnimationSource.getCPtr(linker));
    Animation ret = (cPtr == global::System.IntPtr.Zero) ? null : new Animation(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Animation _getAnimationImpl(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SkeletonInstancePtr__getAnimationImpl__SWIG_1(swigCPtr, name);
    Animation ret = (cPtr == global::System.IntPtr.Zero) ? null : new Animation(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Animation createAnimation(string name, float length) {
    global::System.IntPtr cPtr = OgrePINVOKE.SkeletonInstancePtr_createAnimation(swigCPtr, name, length);
    Animation ret = (cPtr == global::System.IntPtr.Zero) ? null : new Animation(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeAnimation(string name) {
    OgrePINVOKE.SkeletonInstancePtr_removeAnimation(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Ogre__TagPoint createTagPointOnBone(Bone bone, Quaternion offsetOrientation, Vector3 offsetPosition) {
    global::System.IntPtr cPtr = OgrePINVOKE.SkeletonInstancePtr_createTagPointOnBone__SWIG_0(swigCPtr, Bone.getCPtr(bone), Quaternion.getCPtr(offsetOrientation), Vector3.getCPtr(offsetPosition));
    SWIGTYPE_p_Ogre__TagPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Ogre__TagPoint(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__TagPoint createTagPointOnBone(Bone bone, Quaternion offsetOrientation) {
    global::System.IntPtr cPtr = OgrePINVOKE.SkeletonInstancePtr_createTagPointOnBone__SWIG_1(swigCPtr, Bone.getCPtr(bone), Quaternion.getCPtr(offsetOrientation));
    SWIGTYPE_p_Ogre__TagPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Ogre__TagPoint(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__TagPoint createTagPointOnBone(Bone bone) {
    global::System.IntPtr cPtr = OgrePINVOKE.SkeletonInstancePtr_createTagPointOnBone__SWIG_2(swigCPtr, Bone.getCPtr(bone));
    SWIGTYPE_p_Ogre__TagPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Ogre__TagPoint(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void freeTagPoint(SWIGTYPE_p_Ogre__TagPoint tagPoint) {
    OgrePINVOKE.SkeletonInstancePtr_freeTagPoint(swigCPtr, SWIGTYPE_p_Ogre__TagPoint.getCPtr(tagPoint));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addLinkedSkeletonAnimationSource(string skelName, float scale) {
    OgrePINVOKE.SkeletonInstancePtr_addLinkedSkeletonAnimationSource__SWIG_0(swigCPtr, skelName, scale);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addLinkedSkeletonAnimationSource(string skelName) {
    OgrePINVOKE.SkeletonInstancePtr_addLinkedSkeletonAnimationSource__SWIG_1(swigCPtr, skelName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeAllLinkedSkeletonAnimationSources() {
    OgrePINVOKE.SkeletonInstancePtr_removeAllLinkedSkeletonAnimationSources(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_Ogre__LinkedSkeletonAnimationSource_t getLinkedSkeletonAnimationSources() {
    SWIGTYPE_p_std__vectorT_Ogre__LinkedSkeletonAnimationSource_t ret = new SWIGTYPE_p_std__vectorT_Ogre__LinkedSkeletonAnimationSource_t(OgrePINVOKE.SkeletonInstancePtr_getLinkedSkeletonAnimationSources(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _initAnimationState(AnimationStateSet animSet) {
    OgrePINVOKE.SkeletonInstancePtr__initAnimationState(swigCPtr, AnimationStateSet.getCPtr(animSet));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _refreshAnimationState(AnimationStateSet animSet) {
    OgrePINVOKE.SkeletonInstancePtr__refreshAnimationState(swigCPtr, AnimationStateSet.getCPtr(animSet));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getName() {
    string ret = OgrePINVOKE.SkeletonInstancePtr_getName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getHandle() {
    uint ret = OgrePINVOKE.SkeletonInstancePtr_getHandle(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getGroup() {
    string ret = OgrePINVOKE.SkeletonInstancePtr_getGroup(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Bone createBone() {
    global::System.IntPtr cPtr = OgrePINVOKE.SkeletonInstancePtr_createBone__SWIG_0(swigCPtr);
    Bone ret = (cPtr == global::System.IntPtr.Zero) ? null : new Bone(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Bone createBone(ushort handle) {
    global::System.IntPtr cPtr = OgrePINVOKE.SkeletonInstancePtr_createBone__SWIG_1(swigCPtr, handle);
    Bone ret = (cPtr == global::System.IntPtr.Zero) ? null : new Bone(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Bone createBone(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SkeletonInstancePtr_createBone__SWIG_2(swigCPtr, name);
    Bone ret = (cPtr == global::System.IntPtr.Zero) ? null : new Bone(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Bone createBone(string name, ushort handle) {
    global::System.IntPtr cPtr = OgrePINVOKE.SkeletonInstancePtr_createBone__SWIG_3(swigCPtr, name, handle);
    Bone ret = (cPtr == global::System.IntPtr.Zero) ? null : new Bone(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getNumBones() {
    ushort ret = OgrePINVOKE.SkeletonInstancePtr_getNumBones(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BoneList getRootBones() {
    BoneList ret = new BoneList(OgrePINVOKE.SkeletonInstancePtr_getRootBones(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BoneList getBones() {
    BoneList ret = new BoneList(OgrePINVOKE.SkeletonInstancePtr_getBones(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Bone getBone(ushort handle) {
    global::System.IntPtr cPtr = OgrePINVOKE.SkeletonInstancePtr_getBone__SWIG_0(swigCPtr, handle);
    Bone ret = (cPtr == global::System.IntPtr.Zero) ? null : new Bone(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Bone getBone(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SkeletonInstancePtr_getBone__SWIG_1(swigCPtr, name);
    Bone ret = (cPtr == global::System.IntPtr.Zero) ? null : new Bone(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasBone(string name) {
    bool ret = OgrePINVOKE.SkeletonInstancePtr_hasBone(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBindingPose() {
    OgrePINVOKE.SkeletonInstancePtr_setBindingPose(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset(bool resetManualBones) {
    OgrePINVOKE.SkeletonInstancePtr_reset__SWIG_0(swigCPtr, resetManualBones);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    OgrePINVOKE.SkeletonInstancePtr_reset__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasAnimation(string name) {
    bool ret = OgrePINVOKE.SkeletonInstancePtr_hasAnimation(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAnimationState(AnimationStateSet animSet) {
    OgrePINVOKE.SkeletonInstancePtr_setAnimationState(swigCPtr, AnimationStateSet.getCPtr(animSet));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _getBoneMatrices(Affine3 pMatrices) {
    OgrePINVOKE.SkeletonInstancePtr__getBoneMatrices(swigCPtr, Affine3.getCPtr(pMatrices));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SkeletonAnimationBlendMode getBlendMode() {
    SkeletonAnimationBlendMode ret = (SkeletonAnimationBlendMode)OgrePINVOKE.SkeletonInstancePtr_getBlendMode(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBlendMode(SkeletonAnimationBlendMode state) {
    OgrePINVOKE.SkeletonInstancePtr_setBlendMode(swigCPtr, (int)state);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _updateTransforms() {
    OgrePINVOKE.SkeletonInstancePtr__updateTransforms(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void optimiseAllAnimations(bool preservingIdentityNodeTracks) {
    OgrePINVOKE.SkeletonInstancePtr_optimiseAllAnimations__SWIG_0(swigCPtr, preservingIdentityNodeTracks);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void optimiseAllAnimations() {
    OgrePINVOKE.SkeletonInstancePtr_optimiseAllAnimations__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyManualBonesDirty() {
    OgrePINVOKE.SkeletonInstancePtr__notifyManualBonesDirty(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyManualBoneStateChange(Bone bone) {
    OgrePINVOKE.SkeletonInstancePtr__notifyManualBoneStateChange(swigCPtr, Bone.getCPtr(bone));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getManualBonesDirty() {
    bool ret = OgrePINVOKE.SkeletonInstancePtr_getManualBonesDirty(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasManualBones() {
    bool ret = OgrePINVOKE.SkeletonInstancePtr_hasManualBones(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _mergeSkeletonAnimations(Skeleton source, SWIGTYPE_p_std__vectorT_unsigned_short_t boneHandleMap, StringList animations) {
    OgrePINVOKE.SkeletonInstancePtr__mergeSkeletonAnimations__SWIG_0(swigCPtr, Skeleton.getCPtr(source), SWIGTYPE_p_std__vectorT_unsigned_short_t.getCPtr(boneHandleMap), StringList.getCPtr(animations));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _mergeSkeletonAnimations(Skeleton source, SWIGTYPE_p_std__vectorT_unsigned_short_t boneHandleMap) {
    OgrePINVOKE.SkeletonInstancePtr__mergeSkeletonAnimations__SWIG_1(swigCPtr, Skeleton.getCPtr(source), SWIGTYPE_p_std__vectorT_unsigned_short_t.getCPtr(boneHandleMap));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _buildMapBoneByHandle(Skeleton source, SWIGTYPE_p_std__vectorT_unsigned_short_t boneHandleMap) {
    OgrePINVOKE.SkeletonInstancePtr__buildMapBoneByHandle(swigCPtr, Skeleton.getCPtr(source), SWIGTYPE_p_std__vectorT_unsigned_short_t.getCPtr(boneHandleMap));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _buildMapBoneByName(Skeleton source, SWIGTYPE_p_std__vectorT_unsigned_short_t boneHandleMap) {
    OgrePINVOKE.SkeletonInstancePtr__buildMapBoneByName(swigCPtr, Skeleton.getCPtr(source), SWIGTYPE_p_std__vectorT_unsigned_short_t.getCPtr(boneHandleMap));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void prepare(bool backgroundThread) {
    OgrePINVOKE.SkeletonInstancePtr_prepare__SWIG_0(swigCPtr, backgroundThread);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void prepare() {
    OgrePINVOKE.SkeletonInstancePtr_prepare__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void load(bool backgroundThread) {
    OgrePINVOKE.SkeletonInstancePtr_load__SWIG_0(swigCPtr, backgroundThread);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void load() {
    OgrePINVOKE.SkeletonInstancePtr_load__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void reload(Resource.LoadingFlags flags) {
    OgrePINVOKE.SkeletonInstancePtr_reload__SWIG_0(swigCPtr, (int)flags);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void reload() {
    OgrePINVOKE.SkeletonInstancePtr_reload__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isReloadable() {
    bool ret = OgrePINVOKE.SkeletonInstancePtr_isReloadable(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isManuallyLoaded() {
    bool ret = OgrePINVOKE.SkeletonInstancePtr_isManuallyLoaded(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void unload() {
    OgrePINVOKE.SkeletonInstancePtr_unload(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getSize() {
    uint ret = OgrePINVOKE.SkeletonInstancePtr_getSize(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void touch() {
    OgrePINVOKE.SkeletonInstancePtr_touch(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isPrepared() {
    bool ret = OgrePINVOKE.SkeletonInstancePtr_isPrepared(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isLoaded() {
    bool ret = OgrePINVOKE.SkeletonInstancePtr_isLoaded(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isLoading() {
    bool ret = OgrePINVOKE.SkeletonInstancePtr_isLoading(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Resource.LoadingState getLoadingState() {
    Resource.LoadingState ret = (Resource.LoadingState)OgrePINVOKE.SkeletonInstancePtr_getLoadingState(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isBackgroundLoaded() {
    bool ret = OgrePINVOKE.SkeletonInstancePtr_isBackgroundLoaded(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBackgroundLoaded(bool bl) {
    OgrePINVOKE.SkeletonInstancePtr_setBackgroundLoaded(swigCPtr, bl);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void escalateLoading() {
    OgrePINVOKE.SkeletonInstancePtr_escalateLoading(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addListener(Resource.Listener lis) {
    OgrePINVOKE.SkeletonInstancePtr_addListener(swigCPtr, Resource.Listener.getCPtr(lis));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeListener(Resource.Listener lis) {
    OgrePINVOKE.SkeletonInstancePtr_removeListener(swigCPtr, Resource.Listener.getCPtr(lis));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void changeGroupOwnership(string newGroup) {
    OgrePINVOKE.SkeletonInstancePtr_changeGroupOwnership(swigCPtr, newGroup);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ResourceManager getCreator() {
    global::System.IntPtr cPtr = OgrePINVOKE.SkeletonInstancePtr_getCreator(swigCPtr);
    ResourceManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new ResourceManager(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getOrigin() {
    string ret = OgrePINVOKE.SkeletonInstancePtr_getOrigin(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _notifyOrigin(string origin) {
    OgrePINVOKE.SkeletonInstancePtr__notifyOrigin(swigCPtr, origin);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getStateCount() {
    uint ret = OgrePINVOKE.SkeletonInstancePtr_getStateCount(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _dirtyState() {
    OgrePINVOKE.SkeletonInstancePtr__dirtyState(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _fireLoadingComplete(bool unused) {
    OgrePINVOKE.SkeletonInstancePtr__fireLoadingComplete__SWIG_0(swigCPtr, unused);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _fireLoadingComplete() {
    OgrePINVOKE.SkeletonInstancePtr__fireLoadingComplete__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _firePreparingComplete(bool unused) {
    OgrePINVOKE.SkeletonInstancePtr__firePreparingComplete__SWIG_0(swigCPtr, unused);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _firePreparingComplete() {
    OgrePINVOKE.SkeletonInstancePtr__firePreparingComplete__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _fireUnloadingComplete() {
    OgrePINVOKE.SkeletonInstancePtr__fireUnloadingComplete(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ParamDictionary getParamDictionary() {
    global::System.IntPtr cPtr = OgrePINVOKE.SkeletonInstancePtr_getParamDictionary__SWIG_0(swigCPtr);
    ParamDictionary ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParamDictionary(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringList getParameters() {
    StringList ret = new StringList(OgrePINVOKE.SkeletonInstancePtr_getParameters(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool setParameter(string name, string value) {
    bool ret = OgrePINVOKE.SkeletonInstancePtr_setParameter(swigCPtr, name, value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setParameterList(NameValueMap paramList) {
    OgrePINVOKE.SkeletonInstancePtr_setParameterList(swigCPtr, NameValueMap.getCPtr(paramList));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getParameter(string name) {
    string ret = OgrePINVOKE.SkeletonInstancePtr_getParameter(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void copyParametersTo(StringInterface dest) {
    OgrePINVOKE.SkeletonInstancePtr_copyParametersTo(swigCPtr, StringInterface.getCPtr(dest));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void cleanupDictionary() {
    OgrePINVOKE.SkeletonInstancePtr_cleanupDictionary(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
