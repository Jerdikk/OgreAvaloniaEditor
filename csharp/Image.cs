//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class Image : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Image(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Image obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Image() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_Image(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Image(PixelFormat format, uint width, uint height, uint depth, SWIGTYPE_p_unsigned_char buffer, bool autoDelete) : this(OgrePINVOKE.new_Image__SWIG_0((int)format, width, height, depth, SWIGTYPE_p_unsigned_char.getCPtr(buffer), autoDelete), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Image(PixelFormat format, uint width, uint height, uint depth, SWIGTYPE_p_unsigned_char buffer) : this(OgrePINVOKE.new_Image__SWIG_1((int)format, width, height, depth, SWIGTYPE_p_unsigned_char.getCPtr(buffer)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Image(PixelFormat format, uint width, uint height, uint depth) : this(OgrePINVOKE.new_Image__SWIG_2((int)format, width, height, depth), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Image(PixelFormat format, uint width, uint height) : this(OgrePINVOKE.new_Image__SWIG_3((int)format, width, height), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Image(PixelFormat format, uint width) : this(OgrePINVOKE.new_Image__SWIG_4((int)format, width), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Image(PixelFormat format) : this(OgrePINVOKE.new_Image__SWIG_5((int)format), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Image() : this(OgrePINVOKE.new_Image__SWIG_6(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Image(Image img) : this(OgrePINVOKE.new_Image__SWIG_7(Image.getCPtr(img)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void create(PixelFormat format, uint width, uint height, uint depth, uint numFaces, uint numMipMaps) {
    OgrePINVOKE.Image_create__SWIG_0(swigCPtr, (int)format, width, height, depth, numFaces, numMipMaps);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void create(PixelFormat format, uint width, uint height, uint depth, uint numFaces) {
    OgrePINVOKE.Image_create__SWIG_1(swigCPtr, (int)format, width, height, depth, numFaces);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void create(PixelFormat format, uint width, uint height, uint depth) {
    OgrePINVOKE.Image_create__SWIG_2(swigCPtr, (int)format, width, height, depth);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void create(PixelFormat format, uint width, uint height) {
    OgrePINVOKE.Image_create__SWIG_3(swigCPtr, (int)format, width, height);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTo(ColourValue col) {
    OgrePINVOKE.Image_setTo(swigCPtr, ColourValue.getCPtr(col));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Image flipAroundY() {
    Image ret = new Image(OgrePINVOKE.Image_flipAroundY(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image flipAroundX() {
    Image ret = new Image(OgrePINVOKE.Image_flipAroundX(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image loadDynamicImage(SWIGTYPE_p_unsigned_char data, uint width, uint height, uint depth, PixelFormat format, bool autoDelete, uint numFaces, uint numMipMaps) {
    Image ret = new Image(OgrePINVOKE.Image_loadDynamicImage__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(data), width, height, depth, (int)format, autoDelete, numFaces, numMipMaps), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image loadDynamicImage(SWIGTYPE_p_unsigned_char data, uint width, uint height, uint depth, PixelFormat format, bool autoDelete, uint numFaces) {
    Image ret = new Image(OgrePINVOKE.Image_loadDynamicImage__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(data), width, height, depth, (int)format, autoDelete, numFaces), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image loadDynamicImage(SWIGTYPE_p_unsigned_char data, uint width, uint height, uint depth, PixelFormat format, bool autoDelete) {
    Image ret = new Image(OgrePINVOKE.Image_loadDynamicImage__SWIG_2(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(data), width, height, depth, (int)format, autoDelete), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image loadDynamicImage(SWIGTYPE_p_unsigned_char data, uint width, uint height, uint depth, PixelFormat format) {
    Image ret = new Image(OgrePINVOKE.Image_loadDynamicImage__SWIG_3(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(data), width, height, depth, (int)format), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image loadDynamicImage(SWIGTYPE_p_unsigned_char data, uint width, uint height, PixelFormat format) {
    Image ret = new Image(OgrePINVOKE.Image_loadDynamicImage__SWIG_4(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(data), width, height, (int)format), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image loadRawData(DataStreamPtr stream, uint width, uint height, uint depth, PixelFormat format, uint numFaces, uint numMipMaps) {
    Image ret = new Image(OgrePINVOKE.Image_loadRawData__SWIG_0(swigCPtr, DataStreamPtr.getCPtr(stream), width, height, depth, (int)format, numFaces, numMipMaps), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image loadRawData(DataStreamPtr stream, uint width, uint height, uint depth, PixelFormat format, uint numFaces) {
    Image ret = new Image(OgrePINVOKE.Image_loadRawData__SWIG_1(swigCPtr, DataStreamPtr.getCPtr(stream), width, height, depth, (int)format, numFaces), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image loadRawData(DataStreamPtr stream, uint width, uint height, uint depth, PixelFormat format) {
    Image ret = new Image(OgrePINVOKE.Image_loadRawData__SWIG_2(swigCPtr, DataStreamPtr.getCPtr(stream), width, height, depth, (int)format), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image loadRawData(DataStreamPtr stream, uint width, uint height, PixelFormat format) {
    Image ret = new Image(OgrePINVOKE.Image_loadRawData__SWIG_3(swigCPtr, DataStreamPtr.getCPtr(stream), width, height, (int)format), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image load(string filename, string groupName) {
    Image ret = new Image(OgrePINVOKE.Image_load__SWIG_0(swigCPtr, filename, groupName), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image load(DataStreamPtr stream, string type) {
    Image ret = new Image(OgrePINVOKE.Image_load__SWIG_1(swigCPtr, DataStreamPtr.getCPtr(stream), type), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image load(DataStreamPtr stream) {
    Image ret = new Image(OgrePINVOKE.Image_load__SWIG_2(swigCPtr, DataStreamPtr.getCPtr(stream)), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image loadTwoImagesAsRGBA(string rgbFilename, string alphaFilename, string groupName, PixelFormat format) {
    Image ret = new Image(OgrePINVOKE.Image_loadTwoImagesAsRGBA__SWIG_0(swigCPtr, rgbFilename, alphaFilename, groupName, (int)format), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image loadTwoImagesAsRGBA(string rgbFilename, string alphaFilename, string groupName) {
    Image ret = new Image(OgrePINVOKE.Image_loadTwoImagesAsRGBA__SWIG_1(swigCPtr, rgbFilename, alphaFilename, groupName), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image loadTwoImagesAsRGBA(DataStreamPtr rgbStream, DataStreamPtr alphaStream, PixelFormat format, string rgbType, string alphaType) {
    Image ret = new Image(OgrePINVOKE.Image_loadTwoImagesAsRGBA__SWIG_2(swigCPtr, DataStreamPtr.getCPtr(rgbStream), DataStreamPtr.getCPtr(alphaStream), (int)format, rgbType, alphaType), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image loadTwoImagesAsRGBA(DataStreamPtr rgbStream, DataStreamPtr alphaStream, PixelFormat format, string rgbType) {
    Image ret = new Image(OgrePINVOKE.Image_loadTwoImagesAsRGBA__SWIG_3(swigCPtr, DataStreamPtr.getCPtr(rgbStream), DataStreamPtr.getCPtr(alphaStream), (int)format, rgbType), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image loadTwoImagesAsRGBA(DataStreamPtr rgbStream, DataStreamPtr alphaStream, PixelFormat format) {
    Image ret = new Image(OgrePINVOKE.Image_loadTwoImagesAsRGBA__SWIG_4(swigCPtr, DataStreamPtr.getCPtr(rgbStream), DataStreamPtr.getCPtr(alphaStream), (int)format), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image loadTwoImagesAsRGBA(DataStreamPtr rgbStream, DataStreamPtr alphaStream) {
    Image ret = new Image(OgrePINVOKE.Image_loadTwoImagesAsRGBA__SWIG_5(swigCPtr, DataStreamPtr.getCPtr(rgbStream), DataStreamPtr.getCPtr(alphaStream)), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image combineTwoImagesAsRGBA(Image rgb, Image alpha, PixelFormat format) {
    Image ret = new Image(OgrePINVOKE.Image_combineTwoImagesAsRGBA__SWIG_0(swigCPtr, Image.getCPtr(rgb), Image.getCPtr(alpha), (int)format), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Image combineTwoImagesAsRGBA(Image rgb, Image alpha) {
    Image ret = new Image(OgrePINVOKE.Image_combineTwoImagesAsRGBA__SWIG_1(swigCPtr, Image.getCPtr(rgb), Image.getCPtr(alpha)), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void save(string filename) {
    OgrePINVOKE.Image_save(swigCPtr, filename);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public DataStreamPtr encode(string formatextension) {
    DataStreamPtr ret = new DataStreamPtr(OgrePINVOKE.Image_encode(swigCPtr, formatextension), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned_char getData(uint x, uint y, uint z) {
    global::System.IntPtr cPtr = OgrePINVOKE.Image_getData__SWIG_0(swigCPtr, x, y, z);
    SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned_char getData(uint x, uint y) {
    global::System.IntPtr cPtr = OgrePINVOKE.Image_getData__SWIG_1(swigCPtr, x, y);
    SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned_char getData(uint x) {
    global::System.IntPtr cPtr = OgrePINVOKE.Image_getData__SWIG_2(swigCPtr, x);
    SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned_char getData() {
    global::System.IntPtr cPtr = OgrePINVOKE.Image_getData__SWIG_3(swigCPtr);
    SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getSize() {
    uint ret = OgrePINVOKE.Image_getSize(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumMipmaps() {
    uint ret = OgrePINVOKE.Image_getNumMipmaps(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasFlag(ImageFlags imgFlag) {
    bool ret = OgrePINVOKE.Image_hasFlag(swigCPtr, (int)imgFlag);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getWidth() {
    uint ret = OgrePINVOKE.Image_getWidth(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getHeight() {
    uint ret = OgrePINVOKE.Image_getHeight(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getDepth() {
    uint ret = OgrePINVOKE.Image_getDepth(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumFaces() {
    uint ret = OgrePINVOKE.Image_getNumFaces(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getRowSpan() {
    uint ret = OgrePINVOKE.Image_getRowSpan(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PixelFormat getFormat() {
    PixelFormat ret = (PixelFormat)OgrePINVOKE.Image_getFormat(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte getBPP() {
    byte ret = OgrePINVOKE.Image_getBPP(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getHasAlpha() {
    bool ret = OgrePINVOKE.Image_getHasAlpha(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void applyGamma(SWIGTYPE_p_unsigned_char buffer, float gamma, uint size, byte bpp) {
    OgrePINVOKE.Image_applyGamma(SWIGTYPE_p_unsigned_char.getCPtr(buffer), gamma, size, bpp);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ColourValue getColourAt(uint x, uint y, uint z) {
    ColourValue ret = new ColourValue(OgrePINVOKE.Image_getColourAt(swigCPtr, x, y, z), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setColourAt(ColourValue cv, uint x, uint y, uint z) {
    OgrePINVOKE.Image_setColourAt(swigCPtr, ColourValue.getCPtr(cv), x, y, z);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public PixelBox getPixelBox(uint face, uint mipmap) {
    PixelBox ret = new PixelBox(OgrePINVOKE.Image_getPixelBox__SWIG_0(swigCPtr, face, mipmap), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PixelBox getPixelBox(uint face) {
    PixelBox ret = new PixelBox(OgrePINVOKE.Image_getPixelBox__SWIG_1(swigCPtr, face), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PixelBox getPixelBox() {
    PixelBox ret = new PixelBox(OgrePINVOKE.Image_getPixelBox__SWIG_2(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void freeMemory() {
    OgrePINVOKE.Image_freeMemory(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void scale(PixelBox src, PixelBox dst, Image.Filter filter) {
    OgrePINVOKE.Image_scale__SWIG_0(PixelBox.getCPtr(src), PixelBox.getCPtr(dst), (int)filter);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void scale(PixelBox src, PixelBox dst) {
    OgrePINVOKE.Image_scale__SWIG_1(PixelBox.getCPtr(src), PixelBox.getCPtr(dst));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void resize(ushort width, ushort height, Image.Filter filter) {
    OgrePINVOKE.Image_resize__SWIG_0(swigCPtr, width, height, (int)filter);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void resize(ushort width, ushort height) {
    OgrePINVOKE.Image_resize__SWIG_1(swigCPtr, width, height);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint calculateSize(uint mipmaps, uint faces, uint width, uint height, uint depth, PixelFormat format) {
    uint ret = OgrePINVOKE.Image_calculateSize(mipmaps, faces, width, height, depth, (int)format);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getFileExtFromMagic(DataStreamPtr stream) {
    string ret = OgrePINVOKE.Image_getFileExtFromMagic(DataStreamPtr.getCPtr(stream));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum Filter {
    FILTER_NEAREST,
    FILTER_LINEAR,
    FILTER_BILINEAR = FILTER_LINEAR
  }

}

}
