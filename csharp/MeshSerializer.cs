//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class MeshSerializer : Serializer {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal MeshSerializer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.MeshSerializer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MeshSerializer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_MeshSerializer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public MeshSerializer() : this(OgrePINVOKE.new_MeshSerializer(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void exportMesh(Mesh pMesh, string filename, MeshVersion version, Serializer.Endian endianMode) {
    OgrePINVOKE.MeshSerializer_exportMesh__SWIG_0(swigCPtr, Mesh.getCPtr(pMesh), filename, (int)version, (int)endianMode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void exportMesh(Mesh pMesh, string filename, MeshVersion version) {
    OgrePINVOKE.MeshSerializer_exportMesh__SWIG_1(swigCPtr, Mesh.getCPtr(pMesh), filename, (int)version);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void exportMesh(Mesh pMesh, string filename, Serializer.Endian endianMode) {
    OgrePINVOKE.MeshSerializer_exportMesh__SWIG_2(swigCPtr, Mesh.getCPtr(pMesh), filename, (int)endianMode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void exportMesh(Mesh pMesh, string filename) {
    OgrePINVOKE.MeshSerializer_exportMesh__SWIG_3(swigCPtr, Mesh.getCPtr(pMesh), filename);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void exportMesh(MeshPtr pMesh, string filename, Serializer.Endian endianMode) {
    OgrePINVOKE.MeshSerializer_exportMesh__SWIG_4(swigCPtr, MeshPtr.getCPtr(pMesh), filename, (int)endianMode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void exportMesh(MeshPtr pMesh, string filename) {
    OgrePINVOKE.MeshSerializer_exportMesh__SWIG_5(swigCPtr, MeshPtr.getCPtr(pMesh), filename);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void exportMesh(Mesh pMesh, DataStreamPtr stream, Serializer.Endian endianMode) {
    OgrePINVOKE.MeshSerializer_exportMesh__SWIG_6(swigCPtr, Mesh.getCPtr(pMesh), DataStreamPtr.getCPtr(stream), (int)endianMode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void exportMesh(Mesh pMesh, DataStreamPtr stream) {
    OgrePINVOKE.MeshSerializer_exportMesh__SWIG_7(swigCPtr, Mesh.getCPtr(pMesh), DataStreamPtr.getCPtr(stream));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void exportMesh(Mesh pMesh, DataStreamPtr stream, MeshVersion version, Serializer.Endian endianMode) {
    OgrePINVOKE.MeshSerializer_exportMesh__SWIG_8(swigCPtr, Mesh.getCPtr(pMesh), DataStreamPtr.getCPtr(stream), (int)version, (int)endianMode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void exportMesh(Mesh pMesh, DataStreamPtr stream, MeshVersion version) {
    OgrePINVOKE.MeshSerializer_exportMesh__SWIG_9(swigCPtr, Mesh.getCPtr(pMesh), DataStreamPtr.getCPtr(stream), (int)version);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void importMesh(DataStreamPtr stream, Mesh pDest) {
    OgrePINVOKE.MeshSerializer_importMesh(swigCPtr, DataStreamPtr.getCPtr(stream), Mesh.getCPtr(pDest));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setListener(MeshSerializerListener listener) {
    OgrePINVOKE.MeshSerializer_setListener(swigCPtr, MeshSerializerListener.getCPtr(listener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public MeshSerializerListener getListener() {
    global::System.IntPtr cPtr = OgrePINVOKE.MeshSerializer_getListener(swigCPtr);
    MeshSerializerListener ret = (cPtr == global::System.IntPtr.Zero) ? null : new MeshSerializerListener(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
