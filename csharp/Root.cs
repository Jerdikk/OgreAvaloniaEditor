//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class Root : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Root(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Root obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Root() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_Root(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Root(string pluginFileName, string configFileName, string logFileName) : this(OgrePINVOKE.new_Root__SWIG_0(pluginFileName, configFileName, logFileName), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Root(string pluginFileName, string configFileName) : this(OgrePINVOKE.new_Root__SWIG_1(pluginFileName, configFileName), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Root(string pluginFileName) : this(OgrePINVOKE.new_Root__SWIG_2(pluginFileName), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Root() : this(OgrePINVOKE.new_Root__SWIG_3(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void saveConfig() {
    OgrePINVOKE.Root_saveConfig(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool restoreConfig() {
    bool ret = OgrePINVOKE.Root_restoreConfig(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool showConfigDialog(ConfigDialog dialog) {
    bool ret = OgrePINVOKE.Root_showConfigDialog(swigCPtr, ConfigDialog.getCPtr(dialog));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addRenderSystem(RenderSystem newRend) {
    OgrePINVOKE.Root_addRenderSystem(swigCPtr, RenderSystem.getCPtr(newRend));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public RenderSystemList getAvailableRenderers() {
    RenderSystemList ret = new RenderSystemList(OgrePINVOKE.Root_getAvailableRenderers(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RenderSystem getRenderSystemByName(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_getRenderSystemByName(swigCPtr, name);
    RenderSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderSystem(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setRenderSystem(RenderSystem system) {
    OgrePINVOKE.Root_setRenderSystem(swigCPtr, RenderSystem.getCPtr(system));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public RenderSystem getRenderSystem() {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_getRenderSystem(swigCPtr);
    RenderSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderSystem(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RenderWindow initialise(bool autoCreateWindow, string windowTitle) {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_initialise__SWIG_0(swigCPtr, autoCreateWindow, windowTitle);
    RenderWindow ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderWindow(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RenderWindow initialise(bool autoCreateWindow) {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_initialise__SWIG_1(swigCPtr, autoCreateWindow);
    RenderWindow ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderWindow(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isInitialised() {
    bool ret = OgrePINVOKE.Root_isInitialised(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void useCustomRenderSystemCapabilities(RenderSystemCapabilities capabilities) {
    OgrePINVOKE.Root_useCustomRenderSystemCapabilities(swigCPtr, RenderSystemCapabilities.getCPtr(capabilities));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getRemoveRenderQueueStructuresOnClear() {
    bool ret = OgrePINVOKE.Root_getRemoveRenderQueueStructuresOnClear(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setRemoveRenderQueueStructuresOnClear(bool r) {
    OgrePINVOKE.Root_setRemoveRenderQueueStructuresOnClear(swigCPtr, r);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addSceneManagerFactory(SceneManagerFactory fact) {
    OgrePINVOKE.Root_addSceneManagerFactory(swigCPtr, SceneManagerFactory.getCPtr(fact));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeSceneManagerFactory(SceneManagerFactory fact) {
    OgrePINVOKE.Root_removeSceneManagerFactory(swigCPtr, SceneManagerFactory.getCPtr(fact));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringList getSceneManagerTypes() {
    StringList ret = new StringList(OgrePINVOKE.Root_getSceneManagerTypes(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneManager createSceneManager() {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_createSceneManager__SWIG_0(swigCPtr);
    SceneManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneManager(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneManager createSceneManager(string typeName, string instanceName) {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_createSceneManager__SWIG_1(swigCPtr, typeName, instanceName);
    SceneManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneManager(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneManager createSceneManager(string typeName) {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_createSceneManager__SWIG_2(swigCPtr, typeName);
    SceneManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneManager(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroySceneManager(SceneManager sm) {
    OgrePINVOKE.Root_destroySceneManager(swigCPtr, SceneManager.getCPtr(sm));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SceneManager getSceneManager(string instanceName) {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_getSceneManager(swigCPtr, instanceName);
    SceneManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneManager(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasSceneManager(string instanceName) {
    bool ret = OgrePINVOKE.Root_hasSceneManager(swigCPtr, instanceName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__mapT_std__string_Ogre__SceneManager_p_std__lessT_std__string_t_t getSceneManagers() {
    SWIGTYPE_p_std__mapT_std__string_Ogre__SceneManager_p_std__lessT_std__string_t_t ret = new SWIGTYPE_p_std__mapT_std__string_Ogre__SceneManager_p_std__lessT_std__string_t_t(OgrePINVOKE.Root_getSceneManagers(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TextureManager getTextureManager() {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_getTextureManager(swigCPtr);
    TextureManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new TextureManager(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshManager getMeshManager() {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_getMeshManager(swigCPtr);
    MeshManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new MeshManager(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addFrameListener(FrameListener newListener) {
    OgrePINVOKE.Root_addFrameListener(swigCPtr, FrameListener.getCPtr(newListener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeFrameListener(FrameListener oldListener) {
    OgrePINVOKE.Root_removeFrameListener(swigCPtr, FrameListener.getCPtr(oldListener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void queueEndRendering(bool state) {
    OgrePINVOKE.Root_queueEndRendering__SWIG_0(swigCPtr, state);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void queueEndRendering() {
    OgrePINVOKE.Root_queueEndRendering__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool endRenderingQueued() {
    bool ret = OgrePINVOKE.Root_endRenderingQueued(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void startRendering() {
    OgrePINVOKE.Root_startRendering(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool renderOneFrame() {
    bool ret = OgrePINVOKE.Root_renderOneFrame__SWIG_0(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool renderOneFrame(float timeSinceLastFrame) {
    bool ret = OgrePINVOKE.Root_renderOneFrame__SWIG_1(swigCPtr, timeSinceLastFrame);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void shutdown() {
    OgrePINVOKE.Root_shutdown(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static DataStreamPtr createFileStream(string filename, string groupName, bool overwrite, string locationPattern) {
    DataStreamPtr ret = new DataStreamPtr(OgrePINVOKE.Root_createFileStream__SWIG_0(filename, groupName, overwrite, locationPattern), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DataStreamPtr createFileStream(string filename, string groupName, bool overwrite) {
    DataStreamPtr ret = new DataStreamPtr(OgrePINVOKE.Root_createFileStream__SWIG_1(filename, groupName, overwrite), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DataStreamPtr createFileStream(string filename, string groupName) {
    DataStreamPtr ret = new DataStreamPtr(OgrePINVOKE.Root_createFileStream__SWIG_2(filename, groupName), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DataStreamPtr createFileStream(string filename) {
    DataStreamPtr ret = new DataStreamPtr(OgrePINVOKE.Root_createFileStream__SWIG_3(filename), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DataStreamPtr openFileStream(string filename, string groupName) {
    DataStreamPtr ret = new DataStreamPtr(OgrePINVOKE.Root_openFileStream__SWIG_0(filename, groupName), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DataStreamPtr openFileStream(string filename) {
    DataStreamPtr ret = new DataStreamPtr(OgrePINVOKE.Root_openFileStream__SWIG_1(filename), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RenderWindow getAutoCreatedWindow() {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_getAutoCreatedWindow(swigCPtr);
    RenderWindow ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderWindow(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RenderWindow createRenderWindow(string name, uint width, uint height, bool fullScreen, NameValueMap miscParams) {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_createRenderWindow__SWIG_0(swigCPtr, name, width, height, fullScreen, NameValueMap.getCPtr(miscParams));
    RenderWindow ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderWindow(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RenderWindow createRenderWindow(string name, uint width, uint height, bool fullScreen) {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_createRenderWindow__SWIG_1(swigCPtr, name, width, height, fullScreen);
    RenderWindow ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderWindow(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RenderWindow createRenderWindow(RenderWindowDescription desc) {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_createRenderWindow__SWIG_2(swigCPtr, RenderWindowDescription.getCPtr(desc));
    RenderWindow ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderWindow(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RenderTarget detachRenderTarget(RenderTarget pWin) {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_detachRenderTarget__SWIG_0(swigCPtr, RenderTarget.getCPtr(pWin));
    RenderTarget ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderTarget(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RenderTarget detachRenderTarget(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_detachRenderTarget__SWIG_1(swigCPtr, name);
    RenderTarget ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderTarget(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyRenderTarget(RenderTarget target) {
    OgrePINVOKE.Root_destroyRenderTarget__SWIG_0(swigCPtr, RenderTarget.getCPtr(target));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyRenderTarget(string name) {
    OgrePINVOKE.Root_destroyRenderTarget__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public RenderTarget getRenderTarget(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_getRenderTarget(swigCPtr, name);
    RenderTarget ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderTarget(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void loadPlugin(string pluginName) {
    OgrePINVOKE.Root_loadPlugin(swigCPtr, pluginName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void unloadPlugin(string pluginName) {
    OgrePINVOKE.Root_unloadPlugin(swigCPtr, pluginName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void installPlugin(SWIGTYPE_p_Ogre__Plugin plugin) {
    OgrePINVOKE.Root_installPlugin(swigCPtr, SWIGTYPE_p_Ogre__Plugin.getCPtr(plugin));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void uninstallPlugin(SWIGTYPE_p_Ogre__Plugin plugin) {
    OgrePINVOKE.Root_uninstallPlugin(swigCPtr, SWIGTYPE_p_Ogre__Plugin.getCPtr(plugin));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_Ogre__Plugin_p_t getInstalledPlugins() {
    SWIGTYPE_p_std__vectorT_Ogre__Plugin_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__Plugin_p_t(OgrePINVOKE.Root_getInstalledPlugins(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__Timer getTimer() {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_getTimer(swigCPtr);
    SWIGTYPE_p_Ogre__Timer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Ogre__Timer(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool _fireFrameStarted(FrameEvent evt) {
    bool ret = OgrePINVOKE.Root__fireFrameStarted__SWIG_0(swigCPtr, FrameEvent.getCPtr(evt));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool _fireFrameRenderingQueued(FrameEvent evt) {
    bool ret = OgrePINVOKE.Root__fireFrameRenderingQueued__SWIG_0(swigCPtr, FrameEvent.getCPtr(evt));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool _fireFrameEnded(FrameEvent evt) {
    bool ret = OgrePINVOKE.Root__fireFrameEnded__SWIG_0(swigCPtr, FrameEvent.getCPtr(evt));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool _fireFrameStarted() {
    bool ret = OgrePINVOKE.Root__fireFrameStarted__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool _fireFrameRenderingQueued() {
    bool ret = OgrePINVOKE.Root__fireFrameRenderingQueued__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool _fireFrameEnded() {
    bool ret = OgrePINVOKE.Root__fireFrameEnded__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNextFrameNumber() {
    uint ret = OgrePINVOKE.Root_getNextFrameNumber(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneManager _getCurrentSceneManager() {
    global::System.IntPtr cPtr = OgrePINVOKE.Root__getCurrentSceneManager(swigCPtr);
    SceneManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneManager(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _setCurrentSceneManager(SceneManager sm) {
    OgrePINVOKE.Root__setCurrentSceneManager(swigCPtr, SceneManager.getCPtr(sm));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool _updateAllRenderTargets() {
    bool ret = OgrePINVOKE.Root__updateAllRenderTargets__SWIG_0(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool _updateAllRenderTargets(FrameEvent evt) {
    bool ret = OgrePINVOKE.Root__updateAllRenderTargets__SWIG_1(swigCPtr, FrameEvent.getCPtr(evt));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Root getSingleton() {
    Root ret = new Root(OgrePINVOKE.Root_getSingleton(), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clearEventTimes() {
    OgrePINVOKE.Root_clearEventTimes(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFrameSmoothingPeriod(float period) {
    OgrePINVOKE.Root_setFrameSmoothingPeriod(swigCPtr, period);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getFrameSmoothingPeriod() {
    float ret = OgrePINVOKE.Root_getFrameSmoothingPeriod(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addMovableObjectFactory(MovableObjectFactory fact, bool overrideExisting) {
    OgrePINVOKE.Root_addMovableObjectFactory__SWIG_0(swigCPtr, MovableObjectFactory.getCPtr(fact), overrideExisting);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addMovableObjectFactory(MovableObjectFactory fact) {
    OgrePINVOKE.Root_addMovableObjectFactory__SWIG_1(swigCPtr, MovableObjectFactory.getCPtr(fact));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeMovableObjectFactory(MovableObjectFactory fact) {
    OgrePINVOKE.Root_removeMovableObjectFactory(swigCPtr, MovableObjectFactory.getCPtr(fact));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasMovableObjectFactory(string typeName) {
    bool ret = OgrePINVOKE.Root_hasMovableObjectFactory(swigCPtr, typeName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MovableObjectFactory getMovableObjectFactory(string typeName) {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_getMovableObjectFactory(swigCPtr, typeName);
    MovableObjectFactory ret = (cPtr == global::System.IntPtr.Zero) ? null : new MovableObjectFactory(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint _allocateNextMovableObjectTypeFlag() {
    uint ret = OgrePINVOKE.Root__allocateNextMovableObjectTypeFlag(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__mapT_std__string_Ogre__MovableObjectFactory_p_std__lessT_std__string_t_t getMovableObjectFactories() {
    SWIGTYPE_p_std__mapT_std__string_Ogre__MovableObjectFactory_p_std__lessT_std__string_t_t ret = new SWIGTYPE_p_std__mapT_std__string_Ogre__MovableObjectFactory_p_std__lessT_std__string_t_t(OgrePINVOKE.Root_getMovableObjectFactories(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__WorkQueue getWorkQueue() {
    global::System.IntPtr cPtr = OgrePINVOKE.Root_getWorkQueue(swigCPtr);
    SWIGTYPE_p_Ogre__WorkQueue ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Ogre__WorkQueue(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setWorkQueue(SWIGTYPE_p_Ogre__WorkQueue queue) {
    OgrePINVOKE.Root_setWorkQueue(swigCPtr, SWIGTYPE_p_Ogre__WorkQueue.getCPtr(queue));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBlendIndicesGpuRedundant(bool redundant) {
    OgrePINVOKE.Root_setBlendIndicesGpuRedundant(swigCPtr, redundant);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isBlendIndicesGpuRedundant() {
    bool ret = OgrePINVOKE.Root_isBlendIndicesGpuRedundant(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBlendWeightsGpuRedundant(bool redundant) {
    OgrePINVOKE.Root_setBlendWeightsGpuRedundant(swigCPtr, redundant);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isBlendWeightsGpuRedundant() {
    bool ret = OgrePINVOKE.Root_isBlendWeightsGpuRedundant(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDefaultMinPixelSize(float pixelSize) {
    OgrePINVOKE.Root_setDefaultMinPixelSize(swigCPtr, pixelSize);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getDefaultMinPixelSize() {
    float ret = OgrePINVOKE.Root_getDefaultMinPixelSize(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
