//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class AxisAlignedBox : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AxisAlignedBox(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AxisAlignedBox obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AxisAlignedBox() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_AxisAlignedBox(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public AxisAlignedBox() : this(OgrePINVOKE.new_AxisAlignedBox__SWIG_0(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public AxisAlignedBox(AxisAlignedBox.Extent e) : this(OgrePINVOKE.new_AxisAlignedBox__SWIG_1((int)e), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public AxisAlignedBox(Vector3 min, Vector3 max) : this(OgrePINVOKE.new_AxisAlignedBox__SWIG_2(Vector3.getCPtr(min), Vector3.getCPtr(max)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public AxisAlignedBox(float mx, float my, float mz, float Mx, float My, float Mz) : this(OgrePINVOKE.new_AxisAlignedBox__SWIG_3(mx, my, mz, Mx, My, Mz), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 getMinimum() {
    Vector3 ret = new Vector3(OgrePINVOKE.AxisAlignedBox_getMinimum__SWIG_0(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 getMaximum() {
    Vector3 ret = new Vector3(OgrePINVOKE.AxisAlignedBox_getMaximum__SWIG_0(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMinimum(Vector3 vec) {
    OgrePINVOKE.AxisAlignedBox_setMinimum__SWIG_0(swigCPtr, Vector3.getCPtr(vec));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMinimum(float x, float y, float z) {
    OgrePINVOKE.AxisAlignedBox_setMinimum__SWIG_1(swigCPtr, x, y, z);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMinimumX(float x) {
    OgrePINVOKE.AxisAlignedBox_setMinimumX(swigCPtr, x);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMinimumY(float y) {
    OgrePINVOKE.AxisAlignedBox_setMinimumY(swigCPtr, y);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMinimumZ(float z) {
    OgrePINVOKE.AxisAlignedBox_setMinimumZ(swigCPtr, z);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMaximum(Vector3 vec) {
    OgrePINVOKE.AxisAlignedBox_setMaximum__SWIG_0(swigCPtr, Vector3.getCPtr(vec));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMaximum(float x, float y, float z) {
    OgrePINVOKE.AxisAlignedBox_setMaximum__SWIG_1(swigCPtr, x, y, z);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMaximumX(float x) {
    OgrePINVOKE.AxisAlignedBox_setMaximumX(swigCPtr, x);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMaximumY(float y) {
    OgrePINVOKE.AxisAlignedBox_setMaximumY(swigCPtr, y);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMaximumZ(float z) {
    OgrePINVOKE.AxisAlignedBox_setMaximumZ(swigCPtr, z);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setExtents(Vector3 min, Vector3 max) {
    OgrePINVOKE.AxisAlignedBox_setExtents__SWIG_0(swigCPtr, Vector3.getCPtr(min), Vector3.getCPtr(max));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setExtents(float mx, float my, float mz, float Mx, float My, float Mz) {
    OgrePINVOKE.AxisAlignedBox_setExtents__SWIG_1(swigCPtr, mx, my, mz, Mx, My, Mz);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__arrayT_Ogre__VectorT_3_float_t_8_t getAllCorners() {
    SWIGTYPE_p_std__arrayT_Ogre__VectorT_3_float_t_8_t ret = new SWIGTYPE_p_std__arrayT_Ogre__VectorT_3_float_t_8_t(OgrePINVOKE.AxisAlignedBox_getAllCorners(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 getCorner(AxisAlignedBox.CornerEnum cornerToGet) {
    Vector3 ret = new Vector3(OgrePINVOKE.AxisAlignedBox_getCorner(swigCPtr, (int)cornerToGet), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void merge(AxisAlignedBox rhs) {
    OgrePINVOKE.AxisAlignedBox_merge__SWIG_0(swigCPtr, AxisAlignedBox.getCPtr(rhs));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void merge(Vector3 point) {
    OgrePINVOKE.AxisAlignedBox_merge__SWIG_1(swigCPtr, Vector3.getCPtr(point));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void transform(Matrix4 matrix) {
    OgrePINVOKE.AxisAlignedBox_transform__SWIG_0(swigCPtr, Matrix4.getCPtr(matrix));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void transform(Affine3 m) {
    OgrePINVOKE.AxisAlignedBox_transform__SWIG_1(swigCPtr, Affine3.getCPtr(m));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setNull() {
    OgrePINVOKE.AxisAlignedBox_setNull(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isNull() {
    bool ret = OgrePINVOKE.AxisAlignedBox_isNull(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isFinite() {
    bool ret = OgrePINVOKE.AxisAlignedBox_isFinite(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setInfinite() {
    OgrePINVOKE.AxisAlignedBox_setInfinite(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isInfinite() {
    bool ret = OgrePINVOKE.AxisAlignedBox_isInfinite(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool intersects(AxisAlignedBox b2) {
    bool ret = OgrePINVOKE.AxisAlignedBox_intersects__SWIG_0(swigCPtr, AxisAlignedBox.getCPtr(b2));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AxisAlignedBox intersection(AxisAlignedBox b2) {
    AxisAlignedBox ret = new AxisAlignedBox(OgrePINVOKE.AxisAlignedBox_intersection(swigCPtr, AxisAlignedBox.getCPtr(b2)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float volume() {
    float ret = OgrePINVOKE.AxisAlignedBox_volume(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void scale(Vector3 s) {
    OgrePINVOKE.AxisAlignedBox_scale(swigCPtr, Vector3.getCPtr(s));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool intersects(Sphere s) {
    bool ret = OgrePINVOKE.AxisAlignedBox_intersects__SWIG_1(swigCPtr, Sphere.getCPtr(s));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool intersects(Plane p) {
    bool ret = OgrePINVOKE.AxisAlignedBox_intersects__SWIG_2(swigCPtr, Plane.getCPtr(p));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool intersects(Vector3 v) {
    bool ret = OgrePINVOKE.AxisAlignedBox_intersects__SWIG_3(swigCPtr, Vector3.getCPtr(v));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 getCenter() {
    Vector3 ret = new Vector3(OgrePINVOKE.AxisAlignedBox_getCenter(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 getSize() {
    Vector3 ret = new Vector3(OgrePINVOKE.AxisAlignedBox_getSize(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 getHalfSize() {
    Vector3 ret = new Vector3(OgrePINVOKE.AxisAlignedBox_getHalfSize(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool contains(Vector3 v) {
    bool ret = OgrePINVOKE.AxisAlignedBox_contains__SWIG_0(swigCPtr, Vector3.getCPtr(v));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float squaredDistance(Vector3 v) {
    float ret = OgrePINVOKE.AxisAlignedBox_squaredDistance(swigCPtr, Vector3.getCPtr(v));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float distance(Vector3 v) {
    float ret = OgrePINVOKE.AxisAlignedBox_distance(swigCPtr, Vector3.getCPtr(v));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool contains(AxisAlignedBox other) {
    bool ret = OgrePINVOKE.AxisAlignedBox_contains__SWIG_1(swigCPtr, AxisAlignedBox.getCPtr(other));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static AxisAlignedBox BOX_NULL {
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.AxisAlignedBox_BOX_NULL_get();
      AxisAlignedBox ret = (cPtr == global::System.IntPtr.Zero) ? null : new AxisAlignedBox(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static AxisAlignedBox BOX_INFINITE {
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.AxisAlignedBox_BOX_INFINITE_get();
      AxisAlignedBox ret = (cPtr == global::System.IntPtr.Zero) ? null : new AxisAlignedBox(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public override string ToString() {
    string ret = OgrePINVOKE.AxisAlignedBox_ToString(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum Extent {
    EXTENT_NULL,
    EXTENT_FINITE,
    EXTENT_INFINITE
  }

  public enum CornerEnum {
    FAR_LEFT_BOTTOM = 0,
    FAR_LEFT_TOP = 1,
    FAR_RIGHT_TOP = 2,
    FAR_RIGHT_BOTTOM = 3,
    NEAR_RIGHT_BOTTOM = 7,
    NEAR_LEFT_BOTTOM = 6,
    NEAR_LEFT_TOP = 5,
    NEAR_RIGHT_TOP = 4
  }

}

}
