//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class PixelUtil : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PixelUtil(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PixelUtil obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PixelUtil() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_PixelUtil(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static byte getNumElemBytes(PixelFormat format) {
    byte ret = OgrePINVOKE.PixelUtil_getNumElemBytes((int)format);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static byte getNumElemBits(PixelFormat format) {
    byte ret = OgrePINVOKE.PixelUtil_getNumElemBits((int)format);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint getMemorySize(uint width, uint height, uint depth, PixelFormat format) {
    uint ret = OgrePINVOKE.PixelUtil_getMemorySize(width, height, depth, (int)format);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint getFlags(PixelFormat format) {
    uint ret = OgrePINVOKE.PixelUtil_getFlags((int)format);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool hasAlpha(PixelFormat format) {
    bool ret = OgrePINVOKE.PixelUtil_hasAlpha((int)format);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isFloatingPoint(PixelFormat format) {
    bool ret = OgrePINVOKE.PixelUtil_isFloatingPoint((int)format);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isInteger(PixelFormat format) {
    bool ret = OgrePINVOKE.PixelUtil_isInteger((int)format);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isCompressed(PixelFormat format) {
    bool ret = OgrePINVOKE.PixelUtil_isCompressed((int)format);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isDepth(PixelFormat format) {
    bool ret = OgrePINVOKE.PixelUtil_isDepth((int)format);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isNativeEndian(PixelFormat format) {
    bool ret = OgrePINVOKE.PixelUtil_isNativeEndian((int)format);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isLuminance(PixelFormat format) {
    bool ret = OgrePINVOKE.PixelUtil_isLuminance((int)format);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void getBitDepths(PixelFormat format, SWIGTYPE_p_int rgba) {
    OgrePINVOKE.PixelUtil_getBitDepths((int)format, SWIGTYPE_p_int.getCPtr(rgba));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void getBitMasks(PixelFormat format, SWIGTYPE_p_unsigned_long_long rgba) {
    OgrePINVOKE.PixelUtil_getBitMasks((int)format, SWIGTYPE_p_unsigned_long_long.getCPtr(rgba));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void getBitShifts(PixelFormat format, SWIGTYPE_p_unsigned_char rgba) {
    OgrePINVOKE.PixelUtil_getBitShifts((int)format, SWIGTYPE_p_unsigned_char.getCPtr(rgba));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static string getFormatName(PixelFormat srcformat) {
    string ret = OgrePINVOKE.PixelUtil_getFormatName((int)srcformat);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isAccessible(PixelFormat srcformat) {
    bool ret = OgrePINVOKE.PixelUtil_isAccessible((int)srcformat);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PixelComponentType getComponentType(PixelFormat fmt) {
    PixelComponentType ret = (PixelComponentType)OgrePINVOKE.PixelUtil_getComponentType((int)fmt);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static byte getComponentCount(PixelFormat fmt) {
    byte ret = OgrePINVOKE.PixelUtil_getComponentCount((int)fmt);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PixelFormat getFormatFromName(string name, bool accessibleOnly, bool caseSensitive) {
    PixelFormat ret = (PixelFormat)OgrePINVOKE.PixelUtil_getFormatFromName__SWIG_0(name, accessibleOnly, caseSensitive);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PixelFormat getFormatFromName(string name, bool accessibleOnly) {
    PixelFormat ret = (PixelFormat)OgrePINVOKE.PixelUtil_getFormatFromName__SWIG_1(name, accessibleOnly);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PixelFormat getFormatFromName(string name) {
    PixelFormat ret = (PixelFormat)OgrePINVOKE.PixelUtil_getFormatFromName__SWIG_2(name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PixelFormat getFormatForBitDepths(PixelFormat fmt, ushort integerBits, ushort floatBits) {
    PixelFormat ret = (PixelFormat)OgrePINVOKE.PixelUtil_getFormatForBitDepths((int)fmt, integerBits, floatBits);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void packColour(ColourValue colour, PixelFormat pf, global::System.IntPtr dest) {
    OgrePINVOKE.PixelUtil_packColour__SWIG_0(ColourValue.getCPtr(colour), (int)pf, dest);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void packColour(byte r, byte g, byte b, byte a, PixelFormat pf, global::System.IntPtr dest) {
    OgrePINVOKE.PixelUtil_packColour__SWIG_1(r, g, b, a, (int)pf, dest);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void packColour(float r, float g, float b, float a, PixelFormat pf, global::System.IntPtr dest) {
    OgrePINVOKE.PixelUtil_packColour__SWIG_2(r, g, b, a, (int)pf, dest);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void unpackColour(ColourValue colour, PixelFormat pf, global::System.IntPtr src) {
    OgrePINVOKE.PixelUtil_unpackColour__SWIG_0(ColourValue.getCPtr(colour), (int)pf, src);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void unpackColour(SWIGTYPE_p_float r, SWIGTYPE_p_float g, SWIGTYPE_p_float b, SWIGTYPE_p_float a, PixelFormat pf, global::System.IntPtr src) {
    OgrePINVOKE.PixelUtil_unpackColour__SWIG_2(SWIGTYPE_p_float.getCPtr(r), SWIGTYPE_p_float.getCPtr(g), SWIGTYPE_p_float.getCPtr(b), SWIGTYPE_p_float.getCPtr(a), (int)pf, src);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void unpackColour(SWIGTYPE_p_unsigned_char r, SWIGTYPE_p_unsigned_char g, SWIGTYPE_p_unsigned_char b, SWIGTYPE_p_unsigned_char a, PixelFormat pf, global::System.IntPtr src) {
    OgrePINVOKE.PixelUtil_unpackColour__SWIG_3(SWIGTYPE_p_unsigned_char.getCPtr(r), SWIGTYPE_p_unsigned_char.getCPtr(g), SWIGTYPE_p_unsigned_char.getCPtr(b), SWIGTYPE_p_unsigned_char.getCPtr(a), (int)pf, src);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void bulkPixelConversion(global::System.IntPtr src, PixelFormat srcFormat, global::System.IntPtr dst, PixelFormat dstFormat, uint count) {
    OgrePINVOKE.PixelUtil_bulkPixelConversion__SWIG_0(src, (int)srcFormat, dst, (int)dstFormat, count);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void bulkPixelConversion(PixelBox src, PixelBox dst) {
    OgrePINVOKE.PixelUtil_bulkPixelConversion__SWIG_1(PixelBox.getCPtr(src), PixelBox.getCPtr(dst));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void bulkPixelVerticalFlip(PixelBox box) {
    OgrePINVOKE.PixelUtil_bulkPixelVerticalFlip(PixelBox.getCPtr(box));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public PixelUtil() : this(OgrePINVOKE.new_PixelUtil(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
