//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class LodStrategy : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LodStrategy(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LodStrategy obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~LodStrategy() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_LodStrategy(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual float getBaseValue() {
    float ret = OgrePINVOKE.LodStrategy_getBaseValue(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float transformBias(float factor) {
    float ret = OgrePINVOKE.LodStrategy_transformBias(swigCPtr, factor);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float transformUserValue(float userValue) {
    float ret = OgrePINVOKE.LodStrategy_transformUserValue(swigCPtr, userValue);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getValue(MovableObject movableObject, Camera camera) {
    float ret = OgrePINVOKE.LodStrategy_getValue(swigCPtr, MovableObject.getCPtr(movableObject), Camera.getCPtr(camera));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ushort getIndex(float value, SWIGTYPE_p_std__vectorT_Ogre__MeshLodUsage_t meshLodUsageList) {
    ushort ret = OgrePINVOKE.LodStrategy_getIndex__SWIG_0(swigCPtr, value, SWIGTYPE_p_std__vectorT_Ogre__MeshLodUsage_t.getCPtr(meshLodUsageList));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ushort getIndex(float value, SplitPointList materialLodValueList) {
    ushort ret = OgrePINVOKE.LodStrategy_getIndex__SWIG_1(swigCPtr, value, SplitPointList.getCPtr(materialLodValueList));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void sort(SWIGTYPE_p_std__vectorT_Ogre__MeshLodUsage_t meshLodUsageList) {
    OgrePINVOKE.LodStrategy_sort(swigCPtr, SWIGTYPE_p_std__vectorT_Ogre__MeshLodUsage_t.getCPtr(meshLodUsageList));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool isSorted(SplitPointList values) {
    bool ret = OgrePINVOKE.LodStrategy_isSorted(swigCPtr, SplitPointList.getCPtr(values));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void assertSorted(SplitPointList values) {
    OgrePINVOKE.LodStrategy_assertSorted(swigCPtr, SplitPointList.getCPtr(values));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getName() {
    string ret = OgrePINVOKE.LodStrategy_getName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
