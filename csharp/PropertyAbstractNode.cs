//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class PropertyAbstractNode : AbstractNode {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PropertyAbstractNode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.PropertyAbstractNode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PropertyAbstractNode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_PropertyAbstractNode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public string name {
    set {
      OgrePINVOKE.PropertyAbstractNode_name_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = OgrePINVOKE.PropertyAbstractNode_name_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint id {
    set {
      OgrePINVOKE.PropertyAbstractNode_id_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = OgrePINVOKE.PropertyAbstractNode_id_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t values {
    set {
      OgrePINVOKE.PropertyAbstractNode_values_set(swigCPtr, SWIGTYPE_p_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t.getCPtr(value));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.PropertyAbstractNode_values_get(swigCPtr);
      SWIGTYPE_p_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PropertyAbstractNode(AbstractNode ptr) : this(OgrePINVOKE.new_PropertyAbstractNode(AbstractNode.getCPtr(ptr)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override AbstractNode clone() {
    global::System.IntPtr cPtr = OgrePINVOKE.PropertyAbstractNode_clone(swigCPtr);
    AbstractNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new AbstractNode(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string getValue() {
    string ret = OgrePINVOKE.PropertyAbstractNode_getValue(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
