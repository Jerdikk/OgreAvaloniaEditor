//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class AnimationStateSet : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AnimationStateSet(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AnimationStateSet obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AnimationStateSet() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_AnimationStateSet(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public AnimationStateSet() : this(OgrePINVOKE.new_AnimationStateSet__SWIG_0(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public AnimationStateSet(AnimationStateSet rhs) : this(OgrePINVOKE.new_AnimationStateSet__SWIG_1(AnimationStateSet.getCPtr(rhs)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public AnimationState createAnimationState(string animName, float timePos, float length, float weight, bool enabled) {
    global::System.IntPtr cPtr = OgrePINVOKE.AnimationStateSet_createAnimationState__SWIG_0(swigCPtr, animName, timePos, length, weight, enabled);
    AnimationState ret = (cPtr == global::System.IntPtr.Zero) ? null : new AnimationState(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AnimationState createAnimationState(string animName, float timePos, float length, float weight) {
    global::System.IntPtr cPtr = OgrePINVOKE.AnimationStateSet_createAnimationState__SWIG_1(swigCPtr, animName, timePos, length, weight);
    AnimationState ret = (cPtr == global::System.IntPtr.Zero) ? null : new AnimationState(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AnimationState createAnimationState(string animName, float timePos, float length) {
    global::System.IntPtr cPtr = OgrePINVOKE.AnimationStateSet_createAnimationState__SWIG_2(swigCPtr, animName, timePos, length);
    AnimationState ret = (cPtr == global::System.IntPtr.Zero) ? null : new AnimationState(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AnimationState getAnimationState(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.AnimationStateSet_getAnimationState(swigCPtr, name);
    AnimationState ret = (cPtr == global::System.IntPtr.Zero) ? null : new AnimationState(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasAnimationState(string name) {
    bool ret = OgrePINVOKE.AnimationStateSet_hasAnimationState(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeAnimationState(string name) {
    OgrePINVOKE.AnimationStateSet_removeAnimationState(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeAllAnimationStates() {
    OgrePINVOKE.AnimationStateSet_removeAllAnimationStates(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public AnimationStateMap getAnimationStates() {
    AnimationStateMap ret = new AnimationStateMap(OgrePINVOKE.AnimationStateSet_getAnimationStates(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void copyMatchingState(AnimationStateSet target) {
    OgrePINVOKE.AnimationStateSet_copyMatchingState(swigCPtr, AnimationStateSet.getCPtr(target));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyDirty() {
    OgrePINVOKE.AnimationStateSet__notifyDirty(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getDirtyFrameNumber() {
    uint ret = OgrePINVOKE.AnimationStateSet_getDirtyFrameNumber(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _notifyAnimationStateEnabled(AnimationState target, bool enabled) {
    OgrePINVOKE.AnimationStateSet__notifyAnimationStateEnabled(swigCPtr, AnimationState.getCPtr(target), enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasEnabledAnimationState() {
    bool ret = OgrePINVOKE.AnimationStateSet_hasEnabledAnimationState(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__listT_Ogre__AnimationState_p_t getEnabledAnimationStates() {
    SWIGTYPE_p_std__listT_Ogre__AnimationState_p_t ret = new SWIGTYPE_p_std__listT_Ogre__AnimationState_p_t(OgrePINVOKE.AnimationStateSet_getEnabledAnimationStates(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
