//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ManualObject : MovableObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ManualObject(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.ManualObject_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ManualObject obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_ManualObject(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ManualObject(string name) : this(OgrePINVOKE.new_ManualObject(name), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void _releaseManualHardwareResources() {
    OgrePINVOKE.ManualObject__releaseManualHardwareResources(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    OgrePINVOKE.ManualObject_clear(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void estimateVertexCount(uint vcount) {
    OgrePINVOKE.ManualObject_estimateVertexCount(swigCPtr, vcount);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void estimateIndexCount(uint icount) {
    OgrePINVOKE.ManualObject_estimateIndexCount(swigCPtr, icount);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void begin(string materialName, RenderOperation.OperationType opType, string groupName) {
    OgrePINVOKE.ManualObject_begin__SWIG_0(swigCPtr, materialName, (int)opType, groupName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void begin(string materialName, RenderOperation.OperationType opType) {
    OgrePINVOKE.ManualObject_begin__SWIG_1(swigCPtr, materialName, (int)opType);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void begin(string materialName) {
    OgrePINVOKE.ManualObject_begin__SWIG_2(swigCPtr, materialName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void begin(MaterialPtr mat, RenderOperation.OperationType opType) {
    OgrePINVOKE.ManualObject_begin__SWIG_3(swigCPtr, MaterialPtr.getCPtr(mat), (int)opType);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void begin(MaterialPtr mat) {
    OgrePINVOKE.ManualObject_begin__SWIG_4(swigCPtr, MaterialPtr.getCPtr(mat));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBufferUsage(byte usage) {
    OgrePINVOKE.ManualObject_setBufferUsage(swigCPtr, usage);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDynamic(bool dyn) {
    OgrePINVOKE.ManualObject_setDynamic(swigCPtr, dyn);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getDynamic() {
    bool ret = OgrePINVOKE.ManualObject_getDynamic(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void beginUpdate(uint sectionIndex) {
    OgrePINVOKE.ManualObject_beginUpdate(swigCPtr, sectionIndex);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void position(Vector3 pos) {
    OgrePINVOKE.ManualObject_position__SWIG_0(swigCPtr, Vector3.getCPtr(pos));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void position(float x, float y, float z) {
    OgrePINVOKE.ManualObject_position__SWIG_1(swigCPtr, x, y, z);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void normal(Vector3 norm) {
    OgrePINVOKE.ManualObject_normal__SWIG_0(swigCPtr, Vector3.getCPtr(norm));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void normal(float x, float y, float z) {
    OgrePINVOKE.ManualObject_normal__SWIG_1(swigCPtr, x, y, z);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void tangent(Vector3 tan) {
    OgrePINVOKE.ManualObject_tangent__SWIG_0(swigCPtr, Vector3.getCPtr(tan));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void tangent(float x, float y, float z) {
    OgrePINVOKE.ManualObject_tangent__SWIG_1(swigCPtr, x, y, z);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void textureCoord(float u) {
    OgrePINVOKE.ManualObject_textureCoord__SWIG_0(swigCPtr, u);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void textureCoord(float u, float v) {
    OgrePINVOKE.ManualObject_textureCoord__SWIG_1(swigCPtr, u, v);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void textureCoord(float u, float v, float w) {
    OgrePINVOKE.ManualObject_textureCoord__SWIG_2(swigCPtr, u, v, w);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void textureCoord(float x, float y, float z, float w) {
    OgrePINVOKE.ManualObject_textureCoord__SWIG_3(swigCPtr, x, y, z, w);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void textureCoord(Vector2 uv) {
    OgrePINVOKE.ManualObject_textureCoord__SWIG_4(swigCPtr, Vector2.getCPtr(uv));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void textureCoord(Vector3 uvw) {
    OgrePINVOKE.ManualObject_textureCoord__SWIG_5(swigCPtr, Vector3.getCPtr(uvw));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void textureCoord(Vector4 xyzw) {
    OgrePINVOKE.ManualObject_textureCoord__SWIG_6(swigCPtr, Vector4.getCPtr(xyzw));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void colour(ColourValue col) {
    OgrePINVOKE.ManualObject_colour__SWIG_0(swigCPtr, ColourValue.getCPtr(col));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void colour(float r, float g, float b, float a) {
    OgrePINVOKE.ManualObject_colour__SWIG_1(swigCPtr, r, g, b, a);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void colour(float r, float g, float b) {
    OgrePINVOKE.ManualObject_colour__SWIG_2(swigCPtr, r, g, b);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void index(uint idx) {
    OgrePINVOKE.ManualObject_index(swigCPtr, idx);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void triangle(uint i1, uint i2, uint i3) {
    OgrePINVOKE.ManualObject_triangle(swigCPtr, i1, i2, i3);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void quad(uint i1, uint i2, uint i3, uint i4) {
    OgrePINVOKE.ManualObject_quad(swigCPtr, i1, i2, i3, i4);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual uint getCurrentVertexCount() {
    uint ret = OgrePINVOKE.ManualObject_getCurrentVertexCount(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint getCurrentIndexCount() {
    uint ret = OgrePINVOKE.ManualObject_getCurrentIndexCount(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ManualObject.ManualObjectSection end() {
    global::System.IntPtr cPtr = OgrePINVOKE.ManualObject_end(swigCPtr);
    ManualObject.ManualObjectSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new ManualObject.ManualObjectSection(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMaterialName(uint subIndex, string name, string group) {
    OgrePINVOKE.ManualObject_setMaterialName__SWIG_0(swigCPtr, subIndex, name, group);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMaterialName(uint subIndex, string name) {
    OgrePINVOKE.ManualObject_setMaterialName__SWIG_1(swigCPtr, subIndex, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMaterial(uint subIndex, MaterialPtr mat) {
    OgrePINVOKE.ManualObject_setMaterial(swigCPtr, subIndex, MaterialPtr.getCPtr(mat));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual MeshPtr convertToMesh(string meshName, string groupName) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.ManualObject_convertToMesh__SWIG_0(swigCPtr, meshName, groupName), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual MeshPtr convertToMesh(string meshName) {
    MeshPtr ret = new MeshPtr(OgrePINVOKE.ManualObject_convertToMesh__SWIG_1(swigCPtr, meshName), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setUseIdentityProjection(bool useIdentityProjection) {
    OgrePINVOKE.ManualObject_setUseIdentityProjection(swigCPtr, useIdentityProjection);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getUseIdentityProjection() {
    bool ret = OgrePINVOKE.ManualObject_getUseIdentityProjection(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setUseIdentityView(bool useIdentityView) {
    OgrePINVOKE.ManualObject_setUseIdentityView(swigCPtr, useIdentityView);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getUseIdentityView() {
    bool ret = OgrePINVOKE.ManualObject_getUseIdentityView(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBoundingBox(AxisAlignedBox box) {
    OgrePINVOKE.ManualObject_setBoundingBox(swigCPtr, AxisAlignedBox.getCPtr(box));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_Ogre__ManualObject__ManualObjectSection_p_t getSections() {
    SWIGTYPE_p_std__vectorT_Ogre__ManualObject__ManualObjectSection_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__ManualObject__ManualObjectSection_p_t(OgrePINVOKE.ManualObject_getSections(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ManualObject.ManualObjectSection getSection(uint index) {
    global::System.IntPtr cPtr = OgrePINVOKE.ManualObject_getSection(swigCPtr, index);
    ManualObject.ManualObjectSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new ManualObject.ManualObjectSection(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumSections() {
    uint ret = OgrePINVOKE.ManualObject_getNumSections(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setKeepDeclarationOrder(bool keepOrder) {
    OgrePINVOKE.ManualObject_setKeepDeclarationOrder(swigCPtr, keepOrder);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getKeepDeclarationOrder() {
    bool ret = OgrePINVOKE.ManualObject_getKeepDeclarationOrder(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getMovableType() {
    string ret = OgrePINVOKE.ManualObject_getMovableType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AxisAlignedBox getBoundingBox() {
    AxisAlignedBox ret = new AxisAlignedBox(OgrePINVOKE.ManualObject_getBoundingBox(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getBoundingRadius() {
    float ret = OgrePINVOKE.ManualObject_getBoundingRadius(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _updateRenderQueue(RenderQueue queue) {
    OgrePINVOKE.ManualObject__updateRenderQueue(swigCPtr, RenderQueue.getCPtr(queue));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override SWIGTYPE_p_Ogre__EdgeData getEdgeList() {
    global::System.IntPtr cPtr = OgrePINVOKE.ManualObject_getEdgeList(swigCPtr);
    SWIGTYPE_p_Ogre__EdgeData ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Ogre__EdgeData(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t getShadowVolumeRenderableList(Light light, HardwareIndexBufferPtr indexBuffer, SWIGTYPE_p_size_t indexBufferUsedSize, float extrusionDist, int flags) {
    SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t(OgrePINVOKE.ManualObject_getShadowVolumeRenderableList__SWIG_0(swigCPtr, Light.getCPtr(light), HardwareIndexBufferPtr.getCPtr(indexBuffer), SWIGTYPE_p_size_t.getCPtr(indexBufferUsedSize), extrusionDist, flags), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t getShadowVolumeRenderableList(Light light, HardwareIndexBufferPtr indexBuffer, SWIGTYPE_p_size_t indexBufferUsedSize, float extrusionDist) {
    SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t(OgrePINVOKE.ManualObject_getShadowVolumeRenderableList__SWIG_1(swigCPtr, Light.getCPtr(light), HardwareIndexBufferPtr.getCPtr(indexBuffer), SWIGTYPE_p_size_t.getCPtr(indexBufferUsedSize), extrusionDist), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public class ManualObjectSection : Renderable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
    internal ManualObjectSection(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.ManualObject_ManualObjectSection_SWIGUpcast(cPtr), cMemoryOwn) {
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ManualObjectSection obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    protected override void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_ManualObject_ManualObjectSection(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        base.Dispose(disposing);
      }
    }
  
    public ManualObjectSection(ManualObject parent, string materialName, RenderOperation.OperationType opType, string groupName) : this(OgrePINVOKE.new_ManualObject_ManualObjectSection__SWIG_0(ManualObject.getCPtr(parent), materialName, (int)opType, groupName), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public ManualObjectSection(ManualObject parent, string materialName, RenderOperation.OperationType opType) : this(OgrePINVOKE.new_ManualObject_ManualObjectSection__SWIG_1(ManualObject.getCPtr(parent), materialName, (int)opType), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public ManualObjectSection(ManualObject parent, MaterialPtr mat, RenderOperation.OperationType opType) : this(OgrePINVOKE.new_ManualObject_ManualObjectSection__SWIG_2(ManualObject.getCPtr(parent), MaterialPtr.getCPtr(mat), (int)opType), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public RenderOperation getRenderOperation() {
      global::System.IntPtr cPtr = OgrePINVOKE.ManualObject_ManualObjectSection_getRenderOperation__SWIG_0(swigCPtr);
      RenderOperation ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderOperation(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public string getMaterialName() {
      string ret = OgrePINVOKE.ManualObject_ManualObjectSection_getMaterialName(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public string getMaterialGroup() {
      string ret = OgrePINVOKE.ManualObject_ManualObjectSection_getMaterialGroup(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public void setMaterialName(string name, string groupName) {
      OgrePINVOKE.ManualObject_ManualObjectSection_setMaterialName__SWIG_0(swigCPtr, name, groupName);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void setMaterialName(string name) {
      OgrePINVOKE.ManualObject_ManualObjectSection_setMaterialName__SWIG_1(swigCPtr, name);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void setMaterial(MaterialPtr mat) {
      OgrePINVOKE.ManualObject_ManualObjectSection_setMaterial(swigCPtr, MaterialPtr.getCPtr(mat));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void set32BitIndices(bool n32) {
      OgrePINVOKE.ManualObject_ManualObjectSection_set32BitIndices(swigCPtr, n32);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public bool get32BitIndices() {
      bool ret = OgrePINVOKE.ManualObject_ManualObjectSection_get32BitIndices(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public MaterialPtr getMaterial() {
      MaterialPtr ret = new MaterialPtr(OgrePINVOKE.ManualObject_ManualObjectSection_getMaterial(swigCPtr), false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public void getRenderOperation(RenderOperation op) {
      OgrePINVOKE.ManualObject_ManualObjectSection_getRenderOperation__SWIG_1(swigCPtr, RenderOperation.getCPtr(op));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void getWorldTransforms(Matrix4 xform) {
      OgrePINVOKE.ManualObject_ManualObjectSection_getWorldTransforms(swigCPtr, Matrix4.getCPtr(xform));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public float getSquaredViewDepth(Camera arg0) {
      float ret = OgrePINVOKE.ManualObject_ManualObjectSection_getSquaredViewDepth(swigCPtr, Camera.getCPtr(arg0));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public SWIGTYPE_p_std__vectorT_Ogre__Light_p_t getLights() {
      SWIGTYPE_p_std__vectorT_Ogre__Light_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__Light_p_t(OgrePINVOKE.ManualObject_ManualObjectSection_getLights(swigCPtr), false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  
    public void convertToSubMesh(SubMesh sm) {
      OgrePINVOKE.ManualObject_ManualObjectSection_convertToSubMesh(swigCPtr, SubMesh.getCPtr(sm));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public void visitRenderables(Renderable.Visitor visitor, bool debugRenderables) {
    OgrePINVOKE.ManualObject_visitRenderables__SWIG_0(swigCPtr, Renderable.Visitor.getCPtr(visitor), debugRenderables);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void visitRenderables(Renderable.Visitor visitor) {
    OgrePINVOKE.ManualObject_visitRenderables__SWIG_1(swigCPtr, Renderable.Visitor.getCPtr(visitor));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
