//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class RenderWindow : RenderTarget {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal RenderWindow(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.RenderWindow_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RenderWindow obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_RenderWindow(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual float getViewPointToPixelScale() {
    float ret = OgrePINVOKE.RenderWindow_getViewPointToPixelScale(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void create(string name, uint widthPt, uint heightPt, bool fullScreen, NameValueMap miscParams) {
    OgrePINVOKE.RenderWindow_create(swigCPtr, name, widthPt, heightPt, fullScreen, NameValueMap.getCPtr(miscParams));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setFullscreen(bool fullScreen, uint widthPt, uint heightPt) {
    OgrePINVOKE.RenderWindow_setFullscreen(swigCPtr, fullScreen, widthPt, heightPt);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void destroy() {
    OgrePINVOKE.RenderWindow_destroy(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void resize(uint widthPt, uint heightPt) {
    OgrePINVOKE.RenderWindow_resize(swigCPtr, widthPt, heightPt);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void windowMovedOrResized() {
    OgrePINVOKE.RenderWindow_windowMovedOrResized(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void reposition(int leftPt, int topPt) {
    OgrePINVOKE.RenderWindow_reposition(swigCPtr, leftPt, topPt);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool isVisible() {
    bool ret = OgrePINVOKE.RenderWindow_isVisible(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setVisible(bool visible) {
    OgrePINVOKE.RenderWindow_setVisible(swigCPtr, visible);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool isHidden() {
    bool ret = OgrePINVOKE.RenderWindow_isHidden(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setHidden(bool hidden) {
    OgrePINVOKE.RenderWindow_setHidden(swigCPtr, hidden);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setVSyncEnabled(bool vsync) {
    OgrePINVOKE.RenderWindow_setVSyncEnabled(swigCPtr, vsync);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool isVSyncEnabled() {
    bool ret = OgrePINVOKE.RenderWindow_isVSyncEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setVSyncInterval(uint interval) {
    OgrePINVOKE.RenderWindow_setVSyncInterval(swigCPtr, interval);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getVSyncInterval() {
    uint ret = OgrePINVOKE.RenderWindow_getVSyncInterval(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isActive() {
    bool ret = OgrePINVOKE.RenderWindow_isActive(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isClosed() {
    bool ret = OgrePINVOKE.RenderWindow_isClosed(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isPrimary() {
    bool ret = OgrePINVOKE.RenderWindow_isPrimary(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isFullScreen() {
    bool ret = OgrePINVOKE.RenderWindow_isFullScreen(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getMetrics(SWIGTYPE_p_unsigned_int width, SWIGTYPE_p_unsigned_int height, SWIGTYPE_p_int left, SWIGTYPE_p_int top) {
    OgrePINVOKE.RenderWindow_getMetrics(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(width), SWIGTYPE_p_unsigned_int.getCPtr(height), SWIGTYPE_p_int.getCPtr(left), SWIGTYPE_p_int.getCPtr(top));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override PixelFormat suggestPixelFormat() {
    PixelFormat ret = (PixelFormat)OgrePINVOKE.RenderWindow_suggestPixelFormat(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isDeactivatedOnFocusChange() {
    bool ret = OgrePINVOKE.RenderWindow_isDeactivatedOnFocusChange(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDeactivateOnFocusChange(bool deactivate) {
    OgrePINVOKE.RenderWindow_setDeactivateOnFocusChange(swigCPtr, deactivate);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
