//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class RTShader {
  public static string SRS_TRANSFORM {
    get {
      string ret = RTShaderPINVOKE.SRS_TRANSFORM_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string SRS_VERTEX_COLOUR {
    get {
      string ret = RTShaderPINVOKE.SRS_VERTEX_COLOUR_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string SRS_TEXTURING {
    get {
      string ret = RTShaderPINVOKE.SRS_TEXTURING_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string SRS_PER_VERTEX_LIGHTING {
    get {
      string ret = RTShaderPINVOKE.SRS_PER_VERTEX_LIGHTING_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string SRS_FOG {
    get {
      string ret = RTShaderPINVOKE.SRS_FOG_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string SRS_ALPHA_TEST {
    get {
      string ret = RTShaderPINVOKE.SRS_ALPHA_TEST_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string SRS_INTEGRATED_PSSM3 {
    get {
      string ret = RTShaderPINVOKE.SRS_INTEGRATED_PSSM3_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string SRS_SHADOW_MAPPING {
    get {
      string ret = RTShaderPINVOKE.SRS_SHADOW_MAPPING_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string SRS_PER_PIXEL_LIGHTING {
    get {
      string ret = RTShaderPINVOKE.SRS_PER_PIXEL_LIGHTING_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string SRS_COOK_TORRANCE_LIGHTING {
    get {
      string ret = RTShaderPINVOKE.SRS_COOK_TORRANCE_LIGHTING_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string SRS_IMAGE_BASED_LIGHTING {
    get {
      string ret = RTShaderPINVOKE.SRS_IMAGE_BASED_LIGHTING_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string SRS_NORMALMAP {
    get {
      string ret = RTShaderPINVOKE.SRS_NORMALMAP_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string SRS_WBOIT {
    get {
      string ret = RTShaderPINVOKE.SRS_WBOIT_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string SRS_GBUFFER {
    get {
      string ret = RTShaderPINVOKE.SRS_GBUFFER_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string SRS_TRIPLANAR_TEXTURING {
    get {
      string ret = RTShaderPINVOKE.SRS_TRIPLANAR_TEXTURING_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string SRS_LAYERED_BLENDING {
    get {
      string ret = RTShaderPINVOKE.SRS_LAYERED_BLENDING_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string SRS_HARDWARE_SKINNING {
    get {
      string ret = RTShaderPINVOKE.SRS_HARDWARE_SKINNING_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
