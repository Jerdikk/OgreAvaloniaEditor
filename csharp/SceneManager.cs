//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class SceneManager : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SceneManager(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SceneManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SceneManager() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_SceneManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public class SkyDomeGenParameters : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal SkyDomeGenParameters(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SkyDomeGenParameters obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~SkyDomeGenParameters() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_SceneManager_SkyDomeGenParameters(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public float skyDomeCurvature {
      set {
        OgrePINVOKE.SceneManager_SkyDomeGenParameters_skyDomeCurvature_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgrePINVOKE.SceneManager_SkyDomeGenParameters_skyDomeCurvature_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float skyDomeTiling {
      set {
        OgrePINVOKE.SceneManager_SkyDomeGenParameters_skyDomeTiling_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgrePINVOKE.SceneManager_SkyDomeGenParameters_skyDomeTiling_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float skyDomeDistance {
      set {
        OgrePINVOKE.SceneManager_SkyDomeGenParameters_skyDomeDistance_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgrePINVOKE.SceneManager_SkyDomeGenParameters_skyDomeDistance_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int skyDomeXSegments {
      set {
        OgrePINVOKE.SceneManager_SkyDomeGenParameters_skyDomeXSegments_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = OgrePINVOKE.SceneManager_SkyDomeGenParameters_skyDomeXSegments_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int skyDomeYSegments {
      set {
        OgrePINVOKE.SceneManager_SkyDomeGenParameters_skyDomeYSegments_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = OgrePINVOKE.SceneManager_SkyDomeGenParameters_skyDomeYSegments_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int skyDomeYSegments_keep {
      set {
        OgrePINVOKE.SceneManager_SkyDomeGenParameters_skyDomeYSegments_keep_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = OgrePINVOKE.SceneManager_SkyDomeGenParameters_skyDomeYSegments_keep_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public SkyDomeGenParameters() : this(OgrePINVOKE.new_SceneManager_SkyDomeGenParameters(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public class SkyPlaneGenParameters : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal SkyPlaneGenParameters(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SkyPlaneGenParameters obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~SkyPlaneGenParameters() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_SceneManager_SkyPlaneGenParameters(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public float skyPlaneScale {
      set {
        OgrePINVOKE.SceneManager_SkyPlaneGenParameters_skyPlaneScale_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgrePINVOKE.SceneManager_SkyPlaneGenParameters_skyPlaneScale_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float skyPlaneTiling {
      set {
        OgrePINVOKE.SceneManager_SkyPlaneGenParameters_skyPlaneTiling_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgrePINVOKE.SceneManager_SkyPlaneGenParameters_skyPlaneTiling_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float skyPlaneBow {
      set {
        OgrePINVOKE.SceneManager_SkyPlaneGenParameters_skyPlaneBow_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgrePINVOKE.SceneManager_SkyPlaneGenParameters_skyPlaneBow_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int skyPlaneXSegments {
      set {
        OgrePINVOKE.SceneManager_SkyPlaneGenParameters_skyPlaneXSegments_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = OgrePINVOKE.SceneManager_SkyPlaneGenParameters_skyPlaneXSegments_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int skyPlaneYSegments {
      set {
        OgrePINVOKE.SceneManager_SkyPlaneGenParameters_skyPlaneYSegments_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = OgrePINVOKE.SceneManager_SkyPlaneGenParameters_skyPlaneYSegments_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public SkyPlaneGenParameters() : this(OgrePINVOKE.new_SceneManager_SkyPlaneGenParameters(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public class SkyBoxGenParameters : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal SkyBoxGenParameters(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SkyBoxGenParameters obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~SkyBoxGenParameters() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_SceneManager_SkyBoxGenParameters(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public float skyBoxDistance {
      set {
        OgrePINVOKE.SceneManager_SkyBoxGenParameters_skyBoxDistance_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgrePINVOKE.SceneManager_SkyBoxGenParameters_skyBoxDistance_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public SkyBoxGenParameters() : this(OgrePINVOKE.new_SceneManager_SkyBoxGenParameters(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public class SceneManager_Listener : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal SceneManager_Listener(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SceneManager_Listener obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~SceneManager_Listener() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_SceneManager_SceneManager_Listener(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public SceneManager_Listener() : this(OgrePINVOKE.new_SceneManager_SceneManager_Listener(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      SwigDirectorConnect();
    }
  
    public virtual void preUpdateSceneGraph(SceneManager source, Camera camera) {
      if (SwigDerivedClassHasMethod("preUpdateSceneGraph", swigMethodTypes0)) OgrePINVOKE.SceneManager_SceneManager_Listener_preUpdateSceneGraphSwigExplicitSceneManager_Listener(swigCPtr, SceneManager.getCPtr(source), Camera.getCPtr(camera)); else OgrePINVOKE.SceneManager_SceneManager_Listener_preUpdateSceneGraph(swigCPtr, SceneManager.getCPtr(source), Camera.getCPtr(camera));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public virtual void postUpdateSceneGraph(SceneManager source, Camera camera) {
      if (SwigDerivedClassHasMethod("postUpdateSceneGraph", swigMethodTypes1)) OgrePINVOKE.SceneManager_SceneManager_Listener_postUpdateSceneGraphSwigExplicitSceneManager_Listener(swigCPtr, SceneManager.getCPtr(source), Camera.getCPtr(camera)); else OgrePINVOKE.SceneManager_SceneManager_Listener_postUpdateSceneGraph(swigCPtr, SceneManager.getCPtr(source), Camera.getCPtr(camera));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public virtual void preFindVisibleObjects(SceneManager source, SceneManager.IlluminationRenderStage irs, Viewport v) {
      if (SwigDerivedClassHasMethod("preFindVisibleObjects", swigMethodTypes2)) OgrePINVOKE.SceneManager_SceneManager_Listener_preFindVisibleObjectsSwigExplicitSceneManager_Listener(swigCPtr, SceneManager.getCPtr(source), (int)irs, Viewport.getCPtr(v)); else OgrePINVOKE.SceneManager_SceneManager_Listener_preFindVisibleObjects(swigCPtr, SceneManager.getCPtr(source), (int)irs, Viewport.getCPtr(v));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public virtual void postFindVisibleObjects(SceneManager source, SceneManager.IlluminationRenderStage irs, Viewport v) {
      if (SwigDerivedClassHasMethod("postFindVisibleObjects", swigMethodTypes3)) OgrePINVOKE.SceneManager_SceneManager_Listener_postFindVisibleObjectsSwigExplicitSceneManager_Listener(swigCPtr, SceneManager.getCPtr(source), (int)irs, Viewport.getCPtr(v)); else OgrePINVOKE.SceneManager_SceneManager_Listener_postFindVisibleObjects(swigCPtr, SceneManager.getCPtr(source), (int)irs, Viewport.getCPtr(v));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public virtual void sceneManagerDestroyed(SceneManager source) {
      if (SwigDerivedClassHasMethod("sceneManagerDestroyed", swigMethodTypes4)) OgrePINVOKE.SceneManager_SceneManager_Listener_sceneManagerDestroyedSwigExplicitSceneManager_Listener(swigCPtr, SceneManager.getCPtr(source)); else OgrePINVOKE.SceneManager_SceneManager_Listener_sceneManagerDestroyed(swigCPtr, SceneManager.getCPtr(source));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    private void SwigDirectorConnect() {
      if (SwigDerivedClassHasMethod("preUpdateSceneGraph", swigMethodTypes0))
        swigDelegate0 = new SwigDelegateSceneManager_Listener_0(SwigDirectorMethodpreUpdateSceneGraph);
      if (SwigDerivedClassHasMethod("postUpdateSceneGraph", swigMethodTypes1))
        swigDelegate1 = new SwigDelegateSceneManager_Listener_1(SwigDirectorMethodpostUpdateSceneGraph);
      if (SwigDerivedClassHasMethod("preFindVisibleObjects", swigMethodTypes2))
        swigDelegate2 = new SwigDelegateSceneManager_Listener_2(SwigDirectorMethodpreFindVisibleObjects);
      if (SwigDerivedClassHasMethod("postFindVisibleObjects", swigMethodTypes3))
        swigDelegate3 = new SwigDelegateSceneManager_Listener_3(SwigDirectorMethodpostFindVisibleObjects);
      if (SwigDerivedClassHasMethod("sceneManagerDestroyed", swigMethodTypes4))
        swigDelegate4 = new SwigDelegateSceneManager_Listener_4(SwigDirectorMethodsceneManagerDestroyed);
      OgrePINVOKE.SceneManager_SceneManager_Listener_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4);
    }
  
    private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
      global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
      bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(SceneManager_Listener));
      return hasDerivedMethod;
    }
  
    private void SwigDirectorMethodpreUpdateSceneGraph(global::System.IntPtr source, global::System.IntPtr camera) {
      preUpdateSceneGraph((source == global::System.IntPtr.Zero) ? null : new SceneManager(source, false), (camera == global::System.IntPtr.Zero) ? null : new Camera(camera, false));
    }
  
    private void SwigDirectorMethodpostUpdateSceneGraph(global::System.IntPtr source, global::System.IntPtr camera) {
      postUpdateSceneGraph((source == global::System.IntPtr.Zero) ? null : new SceneManager(source, false), (camera == global::System.IntPtr.Zero) ? null : new Camera(camera, false));
    }
  
    private void SwigDirectorMethodpreFindVisibleObjects(global::System.IntPtr source, int irs, global::System.IntPtr v) {
      preFindVisibleObjects((source == global::System.IntPtr.Zero) ? null : new SceneManager(source, false), (SceneManager.IlluminationRenderStage)irs, (v == global::System.IntPtr.Zero) ? null : new Viewport(v, false));
    }
  
    private void SwigDirectorMethodpostFindVisibleObjects(global::System.IntPtr source, int irs, global::System.IntPtr v) {
      postFindVisibleObjects((source == global::System.IntPtr.Zero) ? null : new SceneManager(source, false), (SceneManager.IlluminationRenderStage)irs, (v == global::System.IntPtr.Zero) ? null : new Viewport(v, false));
    }
  
    private void SwigDirectorMethodsceneManagerDestroyed(global::System.IntPtr source) {
      sceneManagerDestroyed((source == global::System.IntPtr.Zero) ? null : new SceneManager(source, false));
    }
  
    public delegate void SwigDelegateSceneManager_Listener_0(global::System.IntPtr source, global::System.IntPtr camera);
    public delegate void SwigDelegateSceneManager_Listener_1(global::System.IntPtr source, global::System.IntPtr camera);
    public delegate void SwigDelegateSceneManager_Listener_2(global::System.IntPtr source, int irs, global::System.IntPtr v);
    public delegate void SwigDelegateSceneManager_Listener_3(global::System.IntPtr source, int irs, global::System.IntPtr v);
    public delegate void SwigDelegateSceneManager_Listener_4(global::System.IntPtr source);
  
    private SwigDelegateSceneManager_Listener_0 swigDelegate0;
    private SwigDelegateSceneManager_Listener_1 swigDelegate1;
    private SwigDelegateSceneManager_Listener_2 swigDelegate2;
    private SwigDelegateSceneManager_Listener_3 swigDelegate3;
    private SwigDelegateSceneManager_Listener_4 swigDelegate4;
  
    private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(SceneManager), typeof(Camera) };
    private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(SceneManager), typeof(Camera) };
    private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(SceneManager), typeof(SceneManager.IlluminationRenderStage), typeof(Viewport) };
    private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(SceneManager), typeof(SceneManager.IlluminationRenderStage), typeof(Viewport) };
    private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(SceneManager) };
  }

  public class SceneMgrQueuedRenderableVisitor : QueuedRenderableVisitor {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
    internal SceneMgrQueuedRenderableVisitor(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.SceneManager_SceneMgrQueuedRenderableVisitor_SWIGUpcast(cPtr), cMemoryOwn) {
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SceneMgrQueuedRenderableVisitor obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    protected override void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_SceneManager_SceneMgrQueuedRenderableVisitor(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        base.Dispose(disposing);
      }
    }
  
    public SceneMgrQueuedRenderableVisitor() : this(OgrePINVOKE.new_SceneManager_SceneMgrQueuedRenderableVisitor(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public override void visit(Pass p, SWIGTYPE_p_std__vectorT_Ogre__Renderable_p_t rs) {
      OgrePINVOKE.SceneManager_SceneMgrQueuedRenderableVisitor_visit__SWIG_0(swigCPtr, Pass.getCPtr(p), SWIGTYPE_p_std__vectorT_Ogre__Renderable_p_t.getCPtr(rs));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public override void visit(RenderablePass rp) {
      OgrePINVOKE.SceneManager_SceneMgrQueuedRenderableVisitor_visit__SWIG_1(swigCPtr, RenderablePass.getCPtr(rp));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public SceneManager targetSceneMgr {
      set {
        OgrePINVOKE.SceneManager_SceneMgrQueuedRenderableVisitor_targetSceneMgr_set(swigCPtr, SceneManager.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_SceneMgrQueuedRenderableVisitor_targetSceneMgr_get(swigCPtr);
        SceneManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneManager(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public bool transparentShadowCastersMode {
      set {
        OgrePINVOKE.SceneManager_SceneMgrQueuedRenderableVisitor_transparentShadowCastersMode_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        bool ret = OgrePINVOKE.SceneManager_SceneMgrQueuedRenderableVisitor_transparentShadowCastersMode_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public bool autoLights {
      set {
        OgrePINVOKE.SceneManager_SceneMgrQueuedRenderableVisitor_autoLights_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        bool ret = OgrePINVOKE.SceneManager_SceneMgrQueuedRenderableVisitor_autoLights_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public SWIGTYPE_p_std__vectorT_Ogre__Light_p_t manualLightList {
      set {
        OgrePINVOKE.SceneManager_SceneMgrQueuedRenderableVisitor_manualLightList_set(swigCPtr, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_SceneMgrQueuedRenderableVisitor_manualLightList_get(swigCPtr);
        SWIGTYPE_p_std__vectorT_Ogre__Light_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_Ogre__Light_p_t(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public bool scissoring {
      set {
        OgrePINVOKE.SceneManager_SceneMgrQueuedRenderableVisitor_scissoring_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        bool ret = OgrePINVOKE.SceneManager_SceneMgrQueuedRenderableVisitor_scissoring_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public void renderObjects(QueuedRenderableCollection objs, QueuedRenderableCollection.OrganisationMode om, bool lightScissoringClipping, bool doLightIteration, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t manualLightList, bool transparentShadowCastersMode) {
      OgrePINVOKE.SceneManager_SceneMgrQueuedRenderableVisitor_renderObjects__SWIG_0(swigCPtr, QueuedRenderableCollection.getCPtr(objs), (int)om, lightScissoringClipping, doLightIteration, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t.getCPtr(manualLightList), transparentShadowCastersMode);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void renderObjects(QueuedRenderableCollection objs, QueuedRenderableCollection.OrganisationMode om, bool lightScissoringClipping, bool doLightIteration, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t manualLightList) {
      OgrePINVOKE.SceneManager_SceneMgrQueuedRenderableVisitor_renderObjects__SWIG_1(swigCPtr, QueuedRenderableCollection.getCPtr(objs), (int)om, lightScissoringClipping, doLightIteration, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t.getCPtr(manualLightList));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void renderObjects(QueuedRenderableCollection objs, QueuedRenderableCollection.OrganisationMode om, bool lightScissoringClipping, bool doLightIteration) {
      OgrePINVOKE.SceneManager_SceneMgrQueuedRenderableVisitor_renderObjects__SWIG_2(swigCPtr, QueuedRenderableCollection.getCPtr(objs), (int)om, lightScissoringClipping, doLightIteration);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void renderTransparents(RenderPriorityGroup priorityGrp, QueuedRenderableCollection.OrganisationMode om) {
      OgrePINVOKE.SceneManager_SceneMgrQueuedRenderableVisitor_renderTransparents(swigCPtr, RenderPriorityGroup.getCPtr(priorityGrp), (int)om);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public class RenderContext : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal RenderContext(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RenderContext obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~RenderContext() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_SceneManager_RenderContext(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public RenderQueue renderQueue {
      set {
        OgrePINVOKE.SceneManager_RenderContext_renderQueue_set(swigCPtr, RenderQueue.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_RenderContext_renderQueue_get(swigCPtr);
        RenderQueue ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderQueue(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Viewport viewport {
      set {
        OgrePINVOKE.SceneManager_RenderContext_viewport_set(swigCPtr, Viewport.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_RenderContext_viewport_get(swigCPtr);
        Viewport ret = (cPtr == global::System.IntPtr.Zero) ? null : new Viewport(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Camera camera {
      set {
        OgrePINVOKE.SceneManager_RenderContext_camera_set(swigCPtr, Camera.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_RenderContext_camera_get(swigCPtr);
        Camera ret = (cPtr == global::System.IntPtr.Zero) ? null : new Camera(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public CompositorChain activeChain {
      set {
        OgrePINVOKE.SceneManager_RenderContext_activeChain_set(swigCPtr, CompositorChain.getCPtr(value));
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_RenderContext_activeChain_get(swigCPtr);
        CompositorChain ret = (cPtr == global::System.IntPtr.Zero) ? null : new CompositorChain(cPtr, false);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public RenderContext() : this(OgrePINVOKE.new_SceneManager_RenderContext(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public SceneManager.RenderContext _pauseRendering() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager__pauseRendering(swigCPtr);
    SceneManager.RenderContext ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneManager.RenderContext(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _resumeRendering(SceneManager.RenderContext context) {
    OgrePINVOKE.SceneManager__resumeRendering(swigCPtr, SceneManager.RenderContext.getCPtr(context));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getName() {
    string ret = OgrePINVOKE.SceneManager_getName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getTypeName() {
    string ret = OgrePINVOKE.SceneManager_getTypeName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Camera createCamera(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createCamera(swigCPtr, name);
    Camera ret = (cPtr == global::System.IntPtr.Zero) ? null : new Camera(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Camera getCamera(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getCamera(swigCPtr, name);
    Camera ret = (cPtr == global::System.IntPtr.Zero) ? null : new Camera(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasCamera(string name) {
    bool ret = OgrePINVOKE.SceneManager_hasCamera(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyCamera(Camera cam) {
    OgrePINVOKE.SceneManager_destroyCamera__SWIG_0(swigCPtr, Camera.getCPtr(cam));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyCamera(string name) {
    OgrePINVOKE.SceneManager_destroyCamera__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyAllCameras() {
    OgrePINVOKE.SceneManager_destroyAllCameras(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setCameraRelativeRendering(bool rel) {
    OgrePINVOKE.SceneManager_setCameraRelativeRendering(swigCPtr, rel);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getCameraRelativeRendering() {
    bool ret = OgrePINVOKE.SceneManager_getCameraRelativeRendering(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CameraMap getCameras() {
    CameraMap ret = new CameraMap(OgrePINVOKE.SceneManager_getCameras(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Light createLight(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createLight__SWIG_0(swigCPtr, name);
    Light ret = (cPtr == global::System.IntPtr.Zero) ? null : new Light(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Light createLight(string name, Light.LightTypes type) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createLight__SWIG_1(swigCPtr, name, (int)type);
    Light ret = (cPtr == global::System.IntPtr.Zero) ? null : new Light(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Light createLight() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createLight__SWIG_2(swigCPtr);
    Light ret = (cPtr == global::System.IntPtr.Zero) ? null : new Light(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Light createLight(Light.LightTypes type) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createLight__SWIG_3(swigCPtr, (int)type);
    Light ret = (cPtr == global::System.IntPtr.Zero) ? null : new Light(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Light getLight(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getLight(swigCPtr, name);
    Light ret = (cPtr == global::System.IntPtr.Zero) ? null : new Light(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool hasLight(string name) {
    bool ret = OgrePINVOKE.SceneManager_hasLight(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Ogre__Plane_t getLightClippingPlanes(Light l) {
    SWIGTYPE_p_std__vectorT_Ogre__Plane_t ret = new SWIGTYPE_p_std__vectorT_Ogre__Plane_t(OgrePINVOKE.SceneManager_getLightClippingPlanes(swigCPtr, Light.getCPtr(l)), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FloatRect getLightScissorRect(Light l, Camera cam) {
    FloatRect ret = new FloatRect(OgrePINVOKE.SceneManager_getLightScissorRect(swigCPtr, Light.getCPtr(l), Camera.getCPtr(cam)), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void invalidatePerFrameScissorRectCache() {
    OgrePINVOKE.SceneManager_invalidatePerFrameScissorRectCache(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void destroyLight(string name) {
    OgrePINVOKE.SceneManager_destroyLight__SWIG_0(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyLight(Light light) {
    OgrePINVOKE.SceneManager_destroyLight__SWIG_1(swigCPtr, Light.getCPtr(light));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void destroyAllLights() {
    OgrePINVOKE.SceneManager_destroyAllLights(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyLightsDirty() {
    OgrePINVOKE.SceneManager__notifyLightsDirty(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint _getLightsDirtyCounter() {
    uint ret = OgrePINVOKE.SceneManager__getLightsDirtyCounter(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Ogre__Light_p_t _getLightsAffectingFrustum() {
    SWIGTYPE_p_std__vectorT_Ogre__Light_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__Light_p_t(OgrePINVOKE.SceneManager__getLightsAffectingFrustum(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _populateLightList(Vector3 position, float radius, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t destList, uint lightMask) {
    OgrePINVOKE.SceneManager__populateLightList__SWIG_0(swigCPtr, Vector3.getCPtr(position), radius, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t.getCPtr(destList), lightMask);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _populateLightList(Vector3 position, float radius, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t destList) {
    OgrePINVOKE.SceneManager__populateLightList__SWIG_1(swigCPtr, Vector3.getCPtr(position), radius, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t.getCPtr(destList));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _populateLightList(SceneNode sn, float radius, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t destList, uint lightMask) {
    OgrePINVOKE.SceneManager__populateLightList__SWIG_2(swigCPtr, SceneNode.getCPtr(sn), radius, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t.getCPtr(destList), lightMask);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _populateLightList(SceneNode sn, float radius, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t destList) {
    OgrePINVOKE.SceneManager__populateLightList__SWIG_3(swigCPtr, SceneNode.getCPtr(sn), radius, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t.getCPtr(destList));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SceneNode createSceneNode() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createSceneNode__SWIG_0(swigCPtr);
    SceneNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneNode(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneNode createSceneNode(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createSceneNode__SWIG_1(swigCPtr, name);
    SceneNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneNode(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void destroySceneNode(SceneNode sn) {
    OgrePINVOKE.SceneManager_destroySceneNode__SWIG_0(swigCPtr, SceneNode.getCPtr(sn));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void destroySceneNode(string name) {
    OgrePINVOKE.SceneManager_destroySceneNode__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SceneNode getRootSceneNode() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getRootSceneNode(swigCPtr);
    SceneNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneNode(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneNode getSceneNode(string name, bool throwExceptionIfNotFound) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getSceneNode__SWIG_0(swigCPtr, name, throwExceptionIfNotFound);
    SceneNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneNode(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneNode getSceneNode(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getSceneNode__SWIG_1(swigCPtr, name);
    SceneNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneNode(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasSceneNode(string name) {
    bool ret = OgrePINVOKE.SceneManager_hasSceneNode(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDisplaySceneNodes(bool display) {
    OgrePINVOKE.SceneManager_setDisplaySceneNodes(swigCPtr, display);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getDisplaySceneNodes() {
    bool ret = OgrePINVOKE.SceneManager_getDisplaySceneNodes(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void showBoundingBoxes(bool bShow) {
    OgrePINVOKE.SceneManager_showBoundingBoxes(swigCPtr, bShow);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getShowBoundingBoxes() {
    bool ret = OgrePINVOKE.SceneManager_getShowBoundingBoxes(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DebugDrawer getDebugDrawer() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getDebugDrawer(swigCPtr);
    DebugDrawer ret = (cPtr == global::System.IntPtr.Zero) ? null : new DebugDrawer(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Entity createEntity(string entityName, string meshName, string groupName) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createEntity__SWIG_0(swigCPtr, entityName, meshName, groupName);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Entity createEntity(string entityName, string meshName) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createEntity__SWIG_1(swigCPtr, entityName, meshName);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Entity createEntity(string entityName, MeshPtr pMesh) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createEntity__SWIG_2(swigCPtr, entityName, MeshPtr.getCPtr(pMesh));
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Entity createEntity(string meshName) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createEntity__SWIG_3(swigCPtr, meshName);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Entity createEntity(MeshPtr pMesh) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createEntity__SWIG_4(swigCPtr, MeshPtr.getCPtr(pMesh));
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Entity getEntity(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getEntity(swigCPtr, name);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasEntity(string name) {
    bool ret = OgrePINVOKE.SceneManager_hasEntity(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyEntity(MovableObject ent) {
    OgrePINVOKE.SceneManager_destroyEntity__SWIG_0(swigCPtr, MovableObject.getCPtr(ent));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyEntity(string name) {
    OgrePINVOKE.SceneManager_destroyEntity__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyAllEntities() {
    OgrePINVOKE.SceneManager_destroyAllEntities(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ManualObject createManualObject(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createManualObject__SWIG_0(swigCPtr, name);
    ManualObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new ManualObject(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ManualObject createManualObject() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createManualObject__SWIG_1(swigCPtr);
    ManualObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new ManualObject(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ManualObject getManualObject(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getManualObject(swigCPtr, name);
    ManualObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new ManualObject(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasManualObject(string name) {
    bool ret = OgrePINVOKE.SceneManager_hasManualObject(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyManualObject(MovableObject obj) {
    OgrePINVOKE.SceneManager_destroyManualObject__SWIG_0(swigCPtr, MovableObject.getCPtr(obj));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyManualObject(string name) {
    OgrePINVOKE.SceneManager_destroyManualObject__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyAllManualObjects() {
    OgrePINVOKE.SceneManager_destroyAllManualObjects(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Rectangle2D createScreenSpaceRect(string name, bool includeTextureCoords) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createScreenSpaceRect__SWIG_0(swigCPtr, name, includeTextureCoords);
    Rectangle2D ret = (cPtr == global::System.IntPtr.Zero) ? null : new Rectangle2D(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Rectangle2D createScreenSpaceRect(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createScreenSpaceRect__SWIG_1(swigCPtr, name);
    Rectangle2D ret = (cPtr == global::System.IntPtr.Zero) ? null : new Rectangle2D(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Rectangle2D createScreenSpaceRect(bool includeTextureCoords) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createScreenSpaceRect__SWIG_2(swigCPtr, includeTextureCoords);
    Rectangle2D ret = (cPtr == global::System.IntPtr.Zero) ? null : new Rectangle2D(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Rectangle2D createScreenSpaceRect() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createScreenSpaceRect__SWIG_3(swigCPtr);
    Rectangle2D ret = (cPtr == global::System.IntPtr.Zero) ? null : new Rectangle2D(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasScreenSpaceRect(string name) {
    bool ret = OgrePINVOKE.SceneManager_hasScreenSpaceRect(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Rectangle2D getScreenSpaceRect(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getScreenSpaceRect(swigCPtr, name);
    Rectangle2D ret = (cPtr == global::System.IntPtr.Zero) ? null : new Rectangle2D(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BillboardChain createBillboardChain(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createBillboardChain__SWIG_0(swigCPtr, name);
    BillboardChain ret = (cPtr == global::System.IntPtr.Zero) ? null : new BillboardChain(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BillboardChain createBillboardChain() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createBillboardChain__SWIG_1(swigCPtr);
    BillboardChain ret = (cPtr == global::System.IntPtr.Zero) ? null : new BillboardChain(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BillboardChain getBillboardChain(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getBillboardChain(swigCPtr, name);
    BillboardChain ret = (cPtr == global::System.IntPtr.Zero) ? null : new BillboardChain(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasBillboardChain(string name) {
    bool ret = OgrePINVOKE.SceneManager_hasBillboardChain(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyBillboardChain(MovableObject obj) {
    OgrePINVOKE.SceneManager_destroyBillboardChain__SWIG_0(swigCPtr, MovableObject.getCPtr(obj));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyBillboardChain(string name) {
    OgrePINVOKE.SceneManager_destroyBillboardChain__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyAllBillboardChains() {
    OgrePINVOKE.SceneManager_destroyAllBillboardChains(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public RibbonTrail createRibbonTrail(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createRibbonTrail__SWIG_0(swigCPtr, name);
    RibbonTrail ret = (cPtr == global::System.IntPtr.Zero) ? null : new RibbonTrail(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RibbonTrail createRibbonTrail() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createRibbonTrail__SWIG_1(swigCPtr);
    RibbonTrail ret = (cPtr == global::System.IntPtr.Zero) ? null : new RibbonTrail(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RibbonTrail getRibbonTrail(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getRibbonTrail(swigCPtr, name);
    RibbonTrail ret = (cPtr == global::System.IntPtr.Zero) ? null : new RibbonTrail(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasRibbonTrail(string name) {
    bool ret = OgrePINVOKE.SceneManager_hasRibbonTrail(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyRibbonTrail(MovableObject obj) {
    OgrePINVOKE.SceneManager_destroyRibbonTrail__SWIG_0(swigCPtr, MovableObject.getCPtr(obj));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyRibbonTrail(string name) {
    OgrePINVOKE.SceneManager_destroyRibbonTrail__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyAllRibbonTrails() {
    OgrePINVOKE.SceneManager_destroyAllRibbonTrails(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ParticleSystem createParticleSystem(string name, string templateName) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createParticleSystem__SWIG_0(swigCPtr, name, templateName);
    ParticleSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleSystem(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParticleSystem createParticleSystem(string name, uint quota, string resourceGroup) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createParticleSystem__SWIG_1(swigCPtr, name, quota, resourceGroup);
    ParticleSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleSystem(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParticleSystem createParticleSystem(string name, uint quota) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createParticleSystem__SWIG_2(swigCPtr, name, quota);
    ParticleSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleSystem(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParticleSystem createParticleSystem(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createParticleSystem__SWIG_3(swigCPtr, name);
    ParticleSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleSystem(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParticleSystem createParticleSystem(uint quota, string resourceGroup) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createParticleSystem__SWIG_4(swigCPtr, quota, resourceGroup);
    ParticleSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleSystem(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParticleSystem createParticleSystem(uint quota) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createParticleSystem__SWIG_5(swigCPtr, quota);
    ParticleSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleSystem(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParticleSystem createParticleSystem() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createParticleSystem__SWIG_6(swigCPtr);
    ParticleSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleSystem(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParticleSystem getParticleSystem(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getParticleSystem(swigCPtr, name);
    ParticleSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleSystem(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasParticleSystem(string name) {
    bool ret = OgrePINVOKE.SceneManager_hasParticleSystem(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyParticleSystem(MovableObject obj) {
    OgrePINVOKE.SceneManager_destroyParticleSystem__SWIG_0(swigCPtr, MovableObject.getCPtr(obj));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyParticleSystem(string name) {
    OgrePINVOKE.SceneManager_destroyParticleSystem__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyAllParticleSystems() {
    OgrePINVOKE.SceneManager_destroyAllParticleSystems(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void clearScene() {
    OgrePINVOKE.SceneManager_clearScene(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAmbientLight(ColourValue colour) {
    OgrePINVOKE.SceneManager_setAmbientLight(swigCPtr, ColourValue.getCPtr(colour));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ColourValue getAmbientLight() {
    ColourValue ret = new ColourValue(OgrePINVOKE.SceneManager_getAmbientLight(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setWorldGeometry(string filename) {
    OgrePINVOKE.SceneManager_setWorldGeometry__SWIG_0(swigCPtr, filename);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setWorldGeometry(DataStreamPtr stream, string typeName) {
    OgrePINVOKE.SceneManager_setWorldGeometry__SWIG_1(swigCPtr, DataStreamPtr.getCPtr(stream), typeName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setWorldGeometry(DataStreamPtr stream) {
    OgrePINVOKE.SceneManager_setWorldGeometry__SWIG_2(swigCPtr, DataStreamPtr.getCPtr(stream));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual uint estimateWorldGeometry(string filename) {
    uint ret = OgrePINVOKE.SceneManager_estimateWorldGeometry__SWIG_0(swigCPtr, filename);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint estimateWorldGeometry(DataStreamPtr stream, string typeName) {
    uint ret = OgrePINVOKE.SceneManager_estimateWorldGeometry__SWIG_1(swigCPtr, DataStreamPtr.getCPtr(stream), typeName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint estimateWorldGeometry(DataStreamPtr stream) {
    uint ret = OgrePINVOKE.SceneManager_estimateWorldGeometry__SWIG_2(swigCPtr, DataStreamPtr.getCPtr(stream));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ViewPoint getSuggestedViewpoint(bool random) {
    ViewPoint ret = new ViewPoint(OgrePINVOKE.SceneManager_getSuggestedViewpoint__SWIG_0(swigCPtr, random), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ViewPoint getSuggestedViewpoint() {
    ViewPoint ret = new ViewPoint(OgrePINVOKE.SceneManager_getSuggestedViewpoint__SWIG_1(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setOption(string strKey, global::System.IntPtr pValue) {
    bool ret = OgrePINVOKE.SceneManager_setOption(swigCPtr, strKey, pValue);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getOption(string strKey, global::System.IntPtr pDestValue) {
    bool ret = OgrePINVOKE.SceneManager_getOption(swigCPtr, strKey, pDestValue);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool hasOption(string strKey) {
    bool ret = OgrePINVOKE.SceneManager_hasOption(swigCPtr, strKey);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getOptionValues(string strKey, StringList refValueList) {
    bool ret = OgrePINVOKE.SceneManager_getOptionValues(swigCPtr, strKey, StringList.getCPtr(refValueList));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getOptionKeys(StringList refKeys) {
    bool ret = OgrePINVOKE.SceneManager_getOptionKeys(swigCPtr, StringList.getCPtr(refKeys));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void _updateSceneGraph(Camera cam) {
    OgrePINVOKE.SceneManager__updateSceneGraph(swigCPtr, Camera.getCPtr(cam));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _findVisibleObjects(Camera cam, VisibleObjectsBoundsInfo visibleBounds, bool onlyShadowCasters) {
    OgrePINVOKE.SceneManager__findVisibleObjects(swigCPtr, Camera.getCPtr(cam), VisibleObjectsBoundsInfo.getCPtr(visibleBounds), onlyShadowCasters);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _issueRenderOp(Renderable rend, Pass pass) {
    OgrePINVOKE.SceneManager__issueRenderOp(swigCPtr, Renderable.getCPtr(rend), Pass.getCPtr(pass));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _renderVisibleObjects() {
    OgrePINVOKE.SceneManager__renderVisibleObjects(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _renderScene(Camera camera, Viewport vp, bool includeOverlays) {
    OgrePINVOKE.SceneManager__renderScene__SWIG_0(swigCPtr, Camera.getCPtr(camera), Viewport.getCPtr(vp), includeOverlays);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _renderScene(Camera camera, Viewport vp) {
    OgrePINVOKE.SceneManager__renderScene__SWIG_1(swigCPtr, Camera.getCPtr(camera), Viewport.getCPtr(vp));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setDestinationRenderSystem(RenderSystem sys) {
    OgrePINVOKE.SceneManager__setDestinationRenderSystem(swigCPtr, RenderSystem.getCPtr(sys));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _releaseManualHardwareResources() {
    OgrePINVOKE.SceneManager__releaseManualHardwareResources(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _restoreManualHardwareResources() {
    OgrePINVOKE.SceneManager__restoreManualHardwareResources(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyPlane(bool enable, Plane plane, string materialName, float scale, float tiling, bool drawFirst, float bow, int xsegments, int ysegments, string groupName) {
    OgrePINVOKE.SceneManager_setSkyPlane__SWIG_0(swigCPtr, enable, Plane.getCPtr(plane), materialName, scale, tiling, drawFirst, bow, xsegments, ysegments, groupName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyPlane(bool enable, Plane plane, string materialName, float scale, float tiling, bool drawFirst, float bow, int xsegments, int ysegments) {
    OgrePINVOKE.SceneManager_setSkyPlane__SWIG_1(swigCPtr, enable, Plane.getCPtr(plane), materialName, scale, tiling, drawFirst, bow, xsegments, ysegments);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyPlane(bool enable, Plane plane, string materialName, float scale, float tiling, bool drawFirst, float bow, int xsegments) {
    OgrePINVOKE.SceneManager_setSkyPlane__SWIG_2(swigCPtr, enable, Plane.getCPtr(plane), materialName, scale, tiling, drawFirst, bow, xsegments);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyPlane(bool enable, Plane plane, string materialName, float scale, float tiling, bool drawFirst, float bow) {
    OgrePINVOKE.SceneManager_setSkyPlane__SWIG_3(swigCPtr, enable, Plane.getCPtr(plane), materialName, scale, tiling, drawFirst, bow);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyPlane(bool enable, Plane plane, string materialName, float scale, float tiling, bool drawFirst) {
    OgrePINVOKE.SceneManager_setSkyPlane__SWIG_4(swigCPtr, enable, Plane.getCPtr(plane), materialName, scale, tiling, drawFirst);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyPlane(bool enable, Plane plane, string materialName, float scale, float tiling) {
    OgrePINVOKE.SceneManager_setSkyPlane__SWIG_5(swigCPtr, enable, Plane.getCPtr(plane), materialName, scale, tiling);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyPlane(bool enable, Plane plane, string materialName, float scale) {
    OgrePINVOKE.SceneManager_setSkyPlane__SWIG_6(swigCPtr, enable, Plane.getCPtr(plane), materialName, scale);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyPlane(bool enable, Plane plane, string materialName) {
    OgrePINVOKE.SceneManager_setSkyPlane__SWIG_7(swigCPtr, enable, Plane.getCPtr(plane), materialName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyPlane(bool enable, Plane plane, string materialName, float scale, float tiling, byte renderQueue, float bow, int xsegments, int ysegments, string groupName) {
    OgrePINVOKE.SceneManager__setSkyPlane__SWIG_0(swigCPtr, enable, Plane.getCPtr(plane), materialName, scale, tiling, renderQueue, bow, xsegments, ysegments, groupName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyPlane(bool enable, Plane plane, string materialName, float scale, float tiling, byte renderQueue, float bow, int xsegments, int ysegments) {
    OgrePINVOKE.SceneManager__setSkyPlane__SWIG_1(swigCPtr, enable, Plane.getCPtr(plane), materialName, scale, tiling, renderQueue, bow, xsegments, ysegments);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyPlane(bool enable, Plane plane, string materialName, float scale, float tiling, byte renderQueue, float bow, int xsegments) {
    OgrePINVOKE.SceneManager__setSkyPlane__SWIG_2(swigCPtr, enable, Plane.getCPtr(plane), materialName, scale, tiling, renderQueue, bow, xsegments);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyPlane(bool enable, Plane plane, string materialName, float scale, float tiling, byte renderQueue, float bow) {
    OgrePINVOKE.SceneManager__setSkyPlane__SWIG_3(swigCPtr, enable, Plane.getCPtr(plane), materialName, scale, tiling, renderQueue, bow);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyPlane(bool enable, Plane plane, string materialName, float scale, float tiling, byte renderQueue) {
    OgrePINVOKE.SceneManager__setSkyPlane__SWIG_4(swigCPtr, enable, Plane.getCPtr(plane), materialName, scale, tiling, renderQueue);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyPlane(bool enable, Plane plane, string materialName, float scale, float tiling) {
    OgrePINVOKE.SceneManager__setSkyPlane__SWIG_5(swigCPtr, enable, Plane.getCPtr(plane), materialName, scale, tiling);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyPlane(bool enable, Plane plane, string materialName, float scale) {
    OgrePINVOKE.SceneManager__setSkyPlane__SWIG_6(swigCPtr, enable, Plane.getCPtr(plane), materialName, scale);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyPlane(bool enable, Plane plane, string materialName) {
    OgrePINVOKE.SceneManager__setSkyPlane__SWIG_7(swigCPtr, enable, Plane.getCPtr(plane), materialName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyPlaneEnabled(bool enable) {
    OgrePINVOKE.SceneManager_setSkyPlaneEnabled(swigCPtr, enable);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isSkyPlaneEnabled() {
    bool ret = OgrePINVOKE.SceneManager_isSkyPlaneEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneNode getSkyPlaneNode() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getSkyPlaneNode(swigCPtr);
    SceneNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneNode(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneManager.SkyPlaneGenParameters getSkyPlaneGenParameters() {
    SceneManager.SkyPlaneGenParameters ret = new SceneManager.SkyPlaneGenParameters(OgrePINVOKE.SceneManager_getSkyPlaneGenParameters(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSkyBox(bool enable, string materialName, float distance, bool drawFirst, Quaternion orientation, string groupName) {
    OgrePINVOKE.SceneManager_setSkyBox__SWIG_0(swigCPtr, enable, materialName, distance, drawFirst, Quaternion.getCPtr(orientation), groupName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyBox(bool enable, string materialName, float distance, bool drawFirst, Quaternion orientation) {
    OgrePINVOKE.SceneManager_setSkyBox__SWIG_1(swigCPtr, enable, materialName, distance, drawFirst, Quaternion.getCPtr(orientation));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyBox(bool enable, string materialName, float distance, bool drawFirst) {
    OgrePINVOKE.SceneManager_setSkyBox__SWIG_2(swigCPtr, enable, materialName, distance, drawFirst);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyBox(bool enable, string materialName, float distance) {
    OgrePINVOKE.SceneManager_setSkyBox__SWIG_3(swigCPtr, enable, materialName, distance);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyBox(bool enable, string materialName) {
    OgrePINVOKE.SceneManager_setSkyBox__SWIG_4(swigCPtr, enable, materialName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyBox(bool enable, string materialName, float distance, byte renderQueue, Quaternion orientation, string groupName) {
    OgrePINVOKE.SceneManager__setSkyBox__SWIG_0(swigCPtr, enable, materialName, distance, renderQueue, Quaternion.getCPtr(orientation), groupName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyBox(bool enable, string materialName, float distance, byte renderQueue, Quaternion orientation) {
    OgrePINVOKE.SceneManager__setSkyBox__SWIG_1(swigCPtr, enable, materialName, distance, renderQueue, Quaternion.getCPtr(orientation));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyBox(bool enable, string materialName, float distance, byte renderQueue) {
    OgrePINVOKE.SceneManager__setSkyBox__SWIG_2(swigCPtr, enable, materialName, distance, renderQueue);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyBox(bool enable, string materialName, float distance) {
    OgrePINVOKE.SceneManager__setSkyBox__SWIG_3(swigCPtr, enable, materialName, distance);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyBox(bool enable, string materialName) {
    OgrePINVOKE.SceneManager__setSkyBox__SWIG_4(swigCPtr, enable, materialName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyBoxEnabled(bool enable) {
    OgrePINVOKE.SceneManager_setSkyBoxEnabled(swigCPtr, enable);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isSkyBoxEnabled() {
    bool ret = OgrePINVOKE.SceneManager_isSkyBoxEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneNode getSkyBoxNode() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getSkyBoxNode(swigCPtr);
    SceneNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneNode(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneManager.SkyBoxGenParameters getSkyBoxGenParameters() {
    SceneManager.SkyBoxGenParameters ret = new SceneManager.SkyBoxGenParameters(OgrePINVOKE.SceneManager_getSkyBoxGenParameters(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSkyDome(bool enable, string materialName, float curvature, float tiling, float distance, bool drawFirst, Quaternion orientation, int xsegments, int ysegments, int ysegments_keep, string groupName) {
    OgrePINVOKE.SceneManager_setSkyDome__SWIG_0(swigCPtr, enable, materialName, curvature, tiling, distance, drawFirst, Quaternion.getCPtr(orientation), xsegments, ysegments, ysegments_keep, groupName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyDome(bool enable, string materialName, float curvature, float tiling, float distance, bool drawFirst, Quaternion orientation, int xsegments, int ysegments, int ysegments_keep) {
    OgrePINVOKE.SceneManager_setSkyDome__SWIG_1(swigCPtr, enable, materialName, curvature, tiling, distance, drawFirst, Quaternion.getCPtr(orientation), xsegments, ysegments, ysegments_keep);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyDome(bool enable, string materialName, float curvature, float tiling, float distance, bool drawFirst, Quaternion orientation, int xsegments, int ysegments) {
    OgrePINVOKE.SceneManager_setSkyDome__SWIG_2(swigCPtr, enable, materialName, curvature, tiling, distance, drawFirst, Quaternion.getCPtr(orientation), xsegments, ysegments);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyDome(bool enable, string materialName, float curvature, float tiling, float distance, bool drawFirst, Quaternion orientation, int xsegments) {
    OgrePINVOKE.SceneManager_setSkyDome__SWIG_3(swigCPtr, enable, materialName, curvature, tiling, distance, drawFirst, Quaternion.getCPtr(orientation), xsegments);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyDome(bool enable, string materialName, float curvature, float tiling, float distance, bool drawFirst, Quaternion orientation) {
    OgrePINVOKE.SceneManager_setSkyDome__SWIG_4(swigCPtr, enable, materialName, curvature, tiling, distance, drawFirst, Quaternion.getCPtr(orientation));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyDome(bool enable, string materialName, float curvature, float tiling, float distance, bool drawFirst) {
    OgrePINVOKE.SceneManager_setSkyDome__SWIG_5(swigCPtr, enable, materialName, curvature, tiling, distance, drawFirst);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyDome(bool enable, string materialName, float curvature, float tiling, float distance) {
    OgrePINVOKE.SceneManager_setSkyDome__SWIG_6(swigCPtr, enable, materialName, curvature, tiling, distance);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyDome(bool enable, string materialName, float curvature, float tiling) {
    OgrePINVOKE.SceneManager_setSkyDome__SWIG_7(swigCPtr, enable, materialName, curvature, tiling);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyDome(bool enable, string materialName, float curvature) {
    OgrePINVOKE.SceneManager_setSkyDome__SWIG_8(swigCPtr, enable, materialName, curvature);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyDome(bool enable, string materialName) {
    OgrePINVOKE.SceneManager_setSkyDome__SWIG_9(swigCPtr, enable, materialName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyDome(bool enable, string materialName, float curvature, float tiling, float distance, byte renderQueue, Quaternion orientation, int xsegments, int ysegments, int ysegments_keep, string groupName) {
    OgrePINVOKE.SceneManager__setSkyDome__SWIG_0(swigCPtr, enable, materialName, curvature, tiling, distance, renderQueue, Quaternion.getCPtr(orientation), xsegments, ysegments, ysegments_keep, groupName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyDome(bool enable, string materialName, float curvature, float tiling, float distance, byte renderQueue, Quaternion orientation, int xsegments, int ysegments, int ysegments_keep) {
    OgrePINVOKE.SceneManager__setSkyDome__SWIG_1(swigCPtr, enable, materialName, curvature, tiling, distance, renderQueue, Quaternion.getCPtr(orientation), xsegments, ysegments, ysegments_keep);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyDome(bool enable, string materialName, float curvature, float tiling, float distance, byte renderQueue, Quaternion orientation, int xsegments, int ysegments) {
    OgrePINVOKE.SceneManager__setSkyDome__SWIG_2(swigCPtr, enable, materialName, curvature, tiling, distance, renderQueue, Quaternion.getCPtr(orientation), xsegments, ysegments);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyDome(bool enable, string materialName, float curvature, float tiling, float distance, byte renderQueue, Quaternion orientation, int xsegments) {
    OgrePINVOKE.SceneManager__setSkyDome__SWIG_3(swigCPtr, enable, materialName, curvature, tiling, distance, renderQueue, Quaternion.getCPtr(orientation), xsegments);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyDome(bool enable, string materialName, float curvature, float tiling, float distance, byte renderQueue, Quaternion orientation) {
    OgrePINVOKE.SceneManager__setSkyDome__SWIG_4(swigCPtr, enable, materialName, curvature, tiling, distance, renderQueue, Quaternion.getCPtr(orientation));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyDome(bool enable, string materialName, float curvature, float tiling, float distance, byte renderQueue) {
    OgrePINVOKE.SceneManager__setSkyDome__SWIG_5(swigCPtr, enable, materialName, curvature, tiling, distance, renderQueue);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyDome(bool enable, string materialName, float curvature, float tiling, float distance) {
    OgrePINVOKE.SceneManager__setSkyDome__SWIG_6(swigCPtr, enable, materialName, curvature, tiling, distance);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyDome(bool enable, string materialName, float curvature, float tiling) {
    OgrePINVOKE.SceneManager__setSkyDome__SWIG_7(swigCPtr, enable, materialName, curvature, tiling);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyDome(bool enable, string materialName, float curvature) {
    OgrePINVOKE.SceneManager__setSkyDome__SWIG_8(swigCPtr, enable, materialName, curvature);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setSkyDome(bool enable, string materialName) {
    OgrePINVOKE.SceneManager__setSkyDome__SWIG_9(swigCPtr, enable, materialName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSkyDomeEnabled(bool enable) {
    OgrePINVOKE.SceneManager_setSkyDomeEnabled(swigCPtr, enable);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isSkyDomeEnabled() {
    bool ret = OgrePINVOKE.SceneManager_isSkyDomeEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneNode getSkyDomeNode() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getSkyDomeNode(swigCPtr);
    SceneNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneNode(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneManager.SkyDomeGenParameters getSkyDomeGenParameters() {
    SceneManager.SkyDomeGenParameters ret = new SceneManager.SkyDomeGenParameters(OgrePINVOKE.SceneManager_getSkyDomeGenParameters(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setFog(FogMode mode, ColourValue colour, float expDensity, float linearStart, float linearEnd) {
    OgrePINVOKE.SceneManager_setFog__SWIG_0(swigCPtr, (int)mode, ColourValue.getCPtr(colour), expDensity, linearStart, linearEnd);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFog(FogMode mode, ColourValue colour, float expDensity, float linearStart) {
    OgrePINVOKE.SceneManager_setFog__SWIG_1(swigCPtr, (int)mode, ColourValue.getCPtr(colour), expDensity, linearStart);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFog(FogMode mode, ColourValue colour, float expDensity) {
    OgrePINVOKE.SceneManager_setFog__SWIG_2(swigCPtr, (int)mode, ColourValue.getCPtr(colour), expDensity);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFog(FogMode mode, ColourValue colour) {
    OgrePINVOKE.SceneManager_setFog__SWIG_3(swigCPtr, (int)mode, ColourValue.getCPtr(colour));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFog(FogMode mode) {
    OgrePINVOKE.SceneManager_setFog__SWIG_4(swigCPtr, (int)mode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFog() {
    OgrePINVOKE.SceneManager_setFog__SWIG_5(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public FogMode getFogMode() {
    FogMode ret = (FogMode)OgrePINVOKE.SceneManager_getFogMode(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ColourValue getFogColour() {
    ColourValue ret = new ColourValue(OgrePINVOKE.SceneManager_getFogColour(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getFogStart() {
    float ret = OgrePINVOKE.SceneManager_getFogStart(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getFogEnd() {
    float ret = OgrePINVOKE.SceneManager_getFogEnd(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getFogDensity() {
    float ret = OgrePINVOKE.SceneManager_getFogDensity(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BillboardSet createBillboardSet(uint poolSize) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createBillboardSet__SWIG_0(swigCPtr, poolSize);
    BillboardSet ret = (cPtr == global::System.IntPtr.Zero) ? null : new BillboardSet(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BillboardSet createBillboardSet() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createBillboardSet__SWIG_1(swigCPtr);
    BillboardSet ret = (cPtr == global::System.IntPtr.Zero) ? null : new BillboardSet(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BillboardSet createBillboardSet(string name, uint poolSize) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createBillboardSet__SWIG_2(swigCPtr, name, poolSize);
    BillboardSet ret = (cPtr == global::System.IntPtr.Zero) ? null : new BillboardSet(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BillboardSet createBillboardSet(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createBillboardSet__SWIG_3(swigCPtr, name);
    BillboardSet ret = (cPtr == global::System.IntPtr.Zero) ? null : new BillboardSet(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BillboardSet getBillboardSet(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getBillboardSet(swigCPtr, name);
    BillboardSet ret = (cPtr == global::System.IntPtr.Zero) ? null : new BillboardSet(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasBillboardSet(string name) {
    bool ret = OgrePINVOKE.SceneManager_hasBillboardSet(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyBillboardSet(MovableObject set) {
    OgrePINVOKE.SceneManager_destroyBillboardSet__SWIG_0(swigCPtr, MovableObject.getCPtr(set));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyBillboardSet(string name) {
    OgrePINVOKE.SceneManager_destroyBillboardSet__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyAllBillboardSets() {
    OgrePINVOKE.SceneManager_destroyAllBillboardSets(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _applySceneAnimations() {
    OgrePINVOKE.SceneManager__applySceneAnimations(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Animation createAnimation(string name, float length) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createAnimation(swigCPtr, name, length);
    Animation ret = (cPtr == global::System.IntPtr.Zero) ? null : new Animation(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Animation getAnimation(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getAnimation(swigCPtr, name);
    Animation ret = (cPtr == global::System.IntPtr.Zero) ? null : new Animation(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasAnimation(string name) {
    bool ret = OgrePINVOKE.SceneManager_hasAnimation(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyAnimation(string name) {
    OgrePINVOKE.SceneManager_destroyAnimation(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyAllAnimations() {
    OgrePINVOKE.SceneManager_destroyAllAnimations(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public AnimationState createAnimationState(string animName) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createAnimationState(swigCPtr, animName);
    AnimationState ret = (cPtr == global::System.IntPtr.Zero) ? null : new AnimationState(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AnimationState getAnimationState(string animName) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getAnimationState(swigCPtr, animName);
    AnimationState ret = (cPtr == global::System.IntPtr.Zero) ? null : new AnimationState(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasAnimationState(string name) {
    bool ret = OgrePINVOKE.SceneManager_hasAnimationState(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyAnimationState(string name) {
    OgrePINVOKE.SceneManager_destroyAnimationState(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyAllAnimationStates() {
    OgrePINVOKE.SceneManager_destroyAllAnimationStates(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__mapT_std__string_Ogre__Animation_p_std__lessT_std__string_t_t getAnimations() {
    SWIGTYPE_p_std__mapT_std__string_Ogre__Animation_p_std__lessT_std__string_t_t ret = new SWIGTYPE_p_std__mapT_std__string_Ogre__Animation_p_std__lessT_std__string_t_t(OgrePINVOKE.SceneManager_getAnimations(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AnimationStateMap getAnimationStates() {
    AnimationStateMap ret = new AnimationStateMap(OgrePINVOKE.SceneManager_getAnimationStates(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void manualRender(RenderOperation rend, Pass pass, Viewport vp, Affine3 worldMatrix, Affine3 viewMatrix, Matrix4 projMatrix, bool doBeginEndFrame) {
    OgrePINVOKE.SceneManager_manualRender__SWIG_0(swigCPtr, RenderOperation.getCPtr(rend), Pass.getCPtr(pass), Viewport.getCPtr(vp), Affine3.getCPtr(worldMatrix), Affine3.getCPtr(viewMatrix), Matrix4.getCPtr(projMatrix), doBeginEndFrame);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void manualRender(RenderOperation rend, Pass pass, Viewport vp, Affine3 worldMatrix, Affine3 viewMatrix, Matrix4 projMatrix) {
    OgrePINVOKE.SceneManager_manualRender__SWIG_1(swigCPtr, RenderOperation.getCPtr(rend), Pass.getCPtr(pass), Viewport.getCPtr(vp), Affine3.getCPtr(worldMatrix), Affine3.getCPtr(viewMatrix), Matrix4.getCPtr(projMatrix));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void manualRender(Renderable rend, Pass pass, Viewport vp, Affine3 viewMatrix, Matrix4 projMatrix, bool doBeginEndFrame, bool lightScissoringClipping, bool doLightIteration, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t manualLightList) {
    OgrePINVOKE.SceneManager_manualRender__SWIG_2(swigCPtr, Renderable.getCPtr(rend), Pass.getCPtr(pass), Viewport.getCPtr(vp), Affine3.getCPtr(viewMatrix), Matrix4.getCPtr(projMatrix), doBeginEndFrame, lightScissoringClipping, doLightIteration, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t.getCPtr(manualLightList));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void manualRender(Renderable rend, Pass pass, Viewport vp, Affine3 viewMatrix, Matrix4 projMatrix, bool doBeginEndFrame, bool lightScissoringClipping, bool doLightIteration) {
    OgrePINVOKE.SceneManager_manualRender__SWIG_3(swigCPtr, Renderable.getCPtr(rend), Pass.getCPtr(pass), Viewport.getCPtr(vp), Affine3.getCPtr(viewMatrix), Matrix4.getCPtr(projMatrix), doBeginEndFrame, lightScissoringClipping, doLightIteration);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void manualRender(Renderable rend, Pass pass, Viewport vp, Affine3 viewMatrix, Matrix4 projMatrix, bool doBeginEndFrame, bool lightScissoringClipping) {
    OgrePINVOKE.SceneManager_manualRender__SWIG_4(swigCPtr, Renderable.getCPtr(rend), Pass.getCPtr(pass), Viewport.getCPtr(vp), Affine3.getCPtr(viewMatrix), Matrix4.getCPtr(projMatrix), doBeginEndFrame, lightScissoringClipping);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void manualRender(Renderable rend, Pass pass, Viewport vp, Affine3 viewMatrix, Matrix4 projMatrix, bool doBeginEndFrame) {
    OgrePINVOKE.SceneManager_manualRender__SWIG_5(swigCPtr, Renderable.getCPtr(rend), Pass.getCPtr(pass), Viewport.getCPtr(vp), Affine3.getCPtr(viewMatrix), Matrix4.getCPtr(projMatrix), doBeginEndFrame);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void manualRender(Renderable rend, Pass pass, Viewport vp, Affine3 viewMatrix, Matrix4 projMatrix) {
    OgrePINVOKE.SceneManager_manualRender__SWIG_6(swigCPtr, Renderable.getCPtr(rend), Pass.getCPtr(pass), Viewport.getCPtr(vp), Affine3.getCPtr(viewMatrix), Matrix4.getCPtr(projMatrix));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public RenderQueue getRenderQueue() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getRenderQueue(swigCPtr);
    RenderQueue ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderQueue(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addRenderQueueListener(RenderQueueListener newListener) {
    OgrePINVOKE.SceneManager_addRenderQueueListener(swigCPtr, RenderQueueListener.getCPtr(newListener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeRenderQueueListener(RenderQueueListener delListener) {
    OgrePINVOKE.SceneManager_removeRenderQueueListener(swigCPtr, RenderQueueListener.getCPtr(delListener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addRenderObjectListener(RenderObjectListener newListener) {
    OgrePINVOKE.SceneManager_addRenderObjectListener(swigCPtr, RenderObjectListener.getCPtr(newListener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeRenderObjectListener(RenderObjectListener delListener) {
    OgrePINVOKE.SceneManager_removeRenderObjectListener(swigCPtr, RenderObjectListener.getCPtr(delListener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addSpecialCaseRenderQueue(byte qid) {
    OgrePINVOKE.SceneManager_addSpecialCaseRenderQueue(swigCPtr, qid);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeSpecialCaseRenderQueue(byte qid) {
    OgrePINVOKE.SceneManager_removeSpecialCaseRenderQueue(swigCPtr, qid);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearSpecialCaseRenderQueues() {
    OgrePINVOKE.SceneManager_clearSpecialCaseRenderQueues(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSpecialCaseRenderQueueMode(SceneManager.SpecialCaseRenderQueueMode mode) {
    OgrePINVOKE.SceneManager_setSpecialCaseRenderQueueMode(swigCPtr, (int)mode);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SceneManager.SpecialCaseRenderQueueMode getSpecialCaseRenderQueueMode() {
    SceneManager.SpecialCaseRenderQueueMode ret = (SceneManager.SpecialCaseRenderQueueMode)OgrePINVOKE.SceneManager_getSpecialCaseRenderQueueMode(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isRenderQueueToBeProcessed(byte qid) {
    bool ret = OgrePINVOKE.SceneManager_isRenderQueueToBeProcessed(swigCPtr, qid);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setWorldGeometryRenderQueue(byte qid) {
    OgrePINVOKE.SceneManager_setWorldGeometryRenderQueue(swigCPtr, qid);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public byte getWorldGeometryRenderQueue() {
    byte ret = OgrePINVOKE.SceneManager_getWorldGeometryRenderQueue(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _notifyAutotrackingSceneNode(SceneNode node, bool autoTrack) {
    OgrePINVOKE.SceneManager__notifyAutotrackingSceneNode(swigCPtr, SceneNode.getCPtr(node), autoTrack);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual AxisAlignedBoxSceneQuery createAABBQuery(AxisAlignedBox box, uint mask) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createAABBQuery__SWIG_0(swigCPtr, AxisAlignedBox.getCPtr(box), mask);
    AxisAlignedBoxSceneQuery ret = (cPtr == global::System.IntPtr.Zero) ? null : new AxisAlignedBoxSceneQuery(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual AxisAlignedBoxSceneQuery createAABBQuery(AxisAlignedBox box) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createAABBQuery__SWIG_1(swigCPtr, AxisAlignedBox.getCPtr(box));
    AxisAlignedBoxSceneQuery ret = (cPtr == global::System.IntPtr.Zero) ? null : new AxisAlignedBoxSceneQuery(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SphereSceneQuery createSphereQuery(Sphere sphere, uint mask) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createSphereQuery__SWIG_0(swigCPtr, Sphere.getCPtr(sphere), mask);
    SphereSceneQuery ret = (cPtr == global::System.IntPtr.Zero) ? null : new SphereSceneQuery(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SphereSceneQuery createSphereQuery(Sphere sphere) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createSphereQuery__SWIG_1(swigCPtr, Sphere.getCPtr(sphere));
    SphereSceneQuery ret = (cPtr == global::System.IntPtr.Zero) ? null : new SphereSceneQuery(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PlaneBoundedVolumeListSceneQuery createPlaneBoundedVolumeQuery(SWIGTYPE_p_std__vectorT_Ogre__PlaneBoundedVolume_t volumes, uint mask) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createPlaneBoundedVolumeQuery__SWIG_0(swigCPtr, SWIGTYPE_p_std__vectorT_Ogre__PlaneBoundedVolume_t.getCPtr(volumes), mask);
    PlaneBoundedVolumeListSceneQuery ret = (cPtr == global::System.IntPtr.Zero) ? null : new PlaneBoundedVolumeListSceneQuery(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PlaneBoundedVolumeListSceneQuery createPlaneBoundedVolumeQuery(SWIGTYPE_p_std__vectorT_Ogre__PlaneBoundedVolume_t volumes) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createPlaneBoundedVolumeQuery__SWIG_1(swigCPtr, SWIGTYPE_p_std__vectorT_Ogre__PlaneBoundedVolume_t.getCPtr(volumes));
    PlaneBoundedVolumeListSceneQuery ret = (cPtr == global::System.IntPtr.Zero) ? null : new PlaneBoundedVolumeListSceneQuery(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual RaySceneQuery createRayQuery(Ray ray, uint mask) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createRayQuery__SWIG_0(swigCPtr, Ray.getCPtr(ray), mask);
    RaySceneQuery ret = (cPtr == global::System.IntPtr.Zero) ? null : new RaySceneQuery(cPtr, true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual RaySceneQuery createRayQuery(Ray ray) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createRayQuery__SWIG_1(swigCPtr, Ray.getCPtr(ray));
    RaySceneQuery ret = (cPtr == global::System.IntPtr.Zero) ? null : new RaySceneQuery(cPtr, true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IntersectionSceneQuery createIntersectionQuery(uint mask) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createIntersectionQuery__SWIG_0(swigCPtr, mask);
    IntersectionSceneQuery ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntersectionSceneQuery(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IntersectionSceneQuery createIntersectionQuery() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createIntersectionQuery__SWIG_1(swigCPtr);
    IntersectionSceneQuery ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntersectionSceneQuery(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyQuery(SceneQuery query) {
    OgrePINVOKE.SceneManager_destroyQuery(swigCPtr, SceneQuery.getCPtr(query));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadowTechnique(ShadowTechnique technique) {
    OgrePINVOKE.SceneManager_setShadowTechnique(swigCPtr, (int)technique);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ShadowTechnique getShadowTechnique() {
    ShadowTechnique ret = (ShadowTechnique)OgrePINVOKE.SceneManager_getShadowTechnique(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShowDebugShadows(bool debug) {
    OgrePINVOKE.SceneManager_setShowDebugShadows(swigCPtr, debug);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getShowDebugShadows() {
    bool ret = OgrePINVOKE.SceneManager_getShowDebugShadows(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShadowColour(ColourValue colour) {
    OgrePINVOKE.SceneManager_setShadowColour(swigCPtr, ColourValue.getCPtr(colour));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ColourValue getShadowColour() {
    ColourValue ret = new ColourValue(OgrePINVOKE.SceneManager_getShadowColour(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShadowDirectionalLightExtrusionDistance(float dist) {
    OgrePINVOKE.SceneManager_setShadowDirectionalLightExtrusionDistance(swigCPtr, dist);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getShadowDirectionalLightExtrusionDistance() {
    float ret = OgrePINVOKE.SceneManager_getShadowDirectionalLightExtrusionDistance(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShadowFarDistance(float distance) {
    OgrePINVOKE.SceneManager_setShadowFarDistance(swigCPtr, distance);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getShadowFarDistance() {
    float ret = OgrePINVOKE.SceneManager_getShadowFarDistance(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getShadowFarDistanceSquared() {
    float ret = OgrePINVOKE.SceneManager_getShadowFarDistanceSquared(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShadowIndexBufferSize(uint size) {
    OgrePINVOKE.SceneManager_setShadowIndexBufferSize(swigCPtr, size);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getShadowIndexBufferSize() {
    uint ret = OgrePINVOKE.SceneManager_getShadowIndexBufferSize(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ShadowCameraSetupPtr getShadowCameraSetup() {
    ShadowCameraSetupPtr ret = new ShadowCameraSetupPtr(OgrePINVOKE.SceneManager_getShadowCameraSetup(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShadowUseInfiniteFarPlane(bool enable) {
    OgrePINVOKE.SceneManager_setShadowUseInfiniteFarPlane(swigCPtr, enable);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isShadowTechniqueStencilBased() {
    bool ret = OgrePINVOKE.SceneManager_isShadowTechniqueStencilBased(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isShadowTechniqueTextureBased() {
    bool ret = OgrePINVOKE.SceneManager_isShadowTechniqueTextureBased(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isShadowTechniqueModulative() {
    bool ret = OgrePINVOKE.SceneManager_isShadowTechniqueModulative(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isShadowTechniqueAdditive() {
    bool ret = OgrePINVOKE.SceneManager_isShadowTechniqueAdditive(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isShadowTechniqueIntegrated() {
    bool ret = OgrePINVOKE.SceneManager_isShadowTechniqueIntegrated(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isShadowTechniqueInUse() {
    bool ret = OgrePINVOKE.SceneManager_isShadowTechniqueInUse(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShadowUseLightClipPlanes(bool enabled) {
    OgrePINVOKE.SceneManager_setShadowUseLightClipPlanes(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getShadowUseLightClipPlanes() {
    bool ret = OgrePINVOKE.SceneManager_getShadowUseLightClipPlanes(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void prepareShadowTextures(Camera cam, Viewport vp, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t lightList) {
    OgrePINVOKE.SceneManager_prepareShadowTextures__SWIG_0(swigCPtr, Camera.getCPtr(cam), Viewport.getCPtr(vp), SWIGTYPE_p_std__vectorT_Ogre__Light_p_t.getCPtr(lightList));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void prepareShadowTextures(Camera cam, Viewport vp) {
    OgrePINVOKE.SceneManager_prepareShadowTextures__SWIG_1(swigCPtr, Camera.getCPtr(cam), Viewport.getCPtr(vp));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadowTextureSize(ushort size) {
    OgrePINVOKE.SceneManager_setShadowTextureSize(swigCPtr, size);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadowTextureConfig(uint shadowIndex, ushort width, ushort height, PixelFormat format, ushort fsaa, ushort depthBufferPoolId) {
    OgrePINVOKE.SceneManager_setShadowTextureConfig__SWIG_0(swigCPtr, shadowIndex, width, height, (int)format, fsaa, depthBufferPoolId);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadowTextureConfig(uint shadowIndex, ushort width, ushort height, PixelFormat format, ushort fsaa) {
    OgrePINVOKE.SceneManager_setShadowTextureConfig__SWIG_1(swigCPtr, shadowIndex, width, height, (int)format, fsaa);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadowTextureConfig(uint shadowIndex, ushort width, ushort height, PixelFormat format) {
    OgrePINVOKE.SceneManager_setShadowTextureConfig__SWIG_2(swigCPtr, shadowIndex, width, height, (int)format);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadowTextureConfig(uint shadowIndex, ShadowTextureConfig config) {
    OgrePINVOKE.SceneManager_setShadowTextureConfig__SWIG_3(swigCPtr, shadowIndex, ShadowTextureConfig.getCPtr(config));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_Ogre__ShadowTextureConfig_t getShadowTextureConfigList() {
    SWIGTYPE_p_std__vectorT_Ogre__ShadowTextureConfig_t ret = new SWIGTYPE_p_std__vectorT_Ogre__ShadowTextureConfig_t(OgrePINVOKE.SceneManager_getShadowTextureConfigList(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShadowTexturePixelFormat(PixelFormat fmt) {
    OgrePINVOKE.SceneManager_setShadowTexturePixelFormat(swigCPtr, (int)fmt);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadowTextureFSAA(ushort fsaa) {
    OgrePINVOKE.SceneManager_setShadowTextureFSAA(swigCPtr, fsaa);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadowTextureCount(uint count) {
    OgrePINVOKE.SceneManager_setShadowTextureCount(swigCPtr, count);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadowTextureCountPerLightType(Light.LightTypes type, uint count) {
    OgrePINVOKE.SceneManager_setShadowTextureCountPerLightType(swigCPtr, (int)type, count);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getShadowTextureCountPerLightType(Light.LightTypes type) {
    uint ret = OgrePINVOKE.SceneManager_getShadowTextureCountPerLightType(swigCPtr, (int)type);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShadowTextureSettings(ushort size, ushort count, PixelFormat fmt, ushort fsaa, ushort depthBufferPoolId) {
    OgrePINVOKE.SceneManager_setShadowTextureSettings__SWIG_0(swigCPtr, size, count, (int)fmt, fsaa, depthBufferPoolId);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadowTextureSettings(ushort size, ushort count, PixelFormat fmt, ushort fsaa) {
    OgrePINVOKE.SceneManager_setShadowTextureSettings__SWIG_1(swigCPtr, size, count, (int)fmt, fsaa);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadowTextureSettings(ushort size, ushort count, PixelFormat fmt) {
    OgrePINVOKE.SceneManager_setShadowTextureSettings__SWIG_2(swigCPtr, size, count, (int)fmt);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadowTextureSettings(ushort size, ushort count) {
    OgrePINVOKE.SceneManager_setShadowTextureSettings__SWIG_3(swigCPtr, size, count);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public TexturePtr getShadowTexture(uint shadowIndex) {
    TexturePtr ret = new TexturePtr(OgrePINVOKE.SceneManager_getShadowTexture(swigCPtr, shadowIndex), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShadowDirLightTextureOffset(float offset) {
    OgrePINVOKE.SceneManager_setShadowDirLightTextureOffset(swigCPtr, offset);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getShadowDirLightTextureOffset() {
    float ret = OgrePINVOKE.SceneManager_getShadowDirLightTextureOffset(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShadowTextureFadeStart(float fadeStart) {
    OgrePINVOKE.SceneManager_setShadowTextureFadeStart(swigCPtr, fadeStart);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadowTextureFadeEnd(float fadeEnd) {
    OgrePINVOKE.SceneManager_setShadowTextureFadeEnd(swigCPtr, fadeEnd);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadowTextureSelfShadow(bool selfShadow) {
    OgrePINVOKE.SceneManager_setShadowTextureSelfShadow(swigCPtr, selfShadow);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getShadowTextureSelfShadow() {
    bool ret = OgrePINVOKE.SceneManager_getShadowTextureSelfShadow(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShadowTextureCasterMaterial(MaterialPtr mat) {
    OgrePINVOKE.SceneManager_setShadowTextureCasterMaterial(swigCPtr, MaterialPtr.getCPtr(mat));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadowTextureReceiverMaterial(MaterialPtr mat) {
    OgrePINVOKE.SceneManager_setShadowTextureReceiverMaterial(swigCPtr, MaterialPtr.getCPtr(mat));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setShadowCasterRenderBackFaces(bool bf) {
    OgrePINVOKE.SceneManager_setShadowCasterRenderBackFaces(swigCPtr, bf);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getShadowCasterRenderBackFaces() {
    bool ret = OgrePINVOKE.SceneManager_getShadowCasterRenderBackFaces(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShadowCameraSetup(ShadowCameraSetupPtr shadowSetup) {
    OgrePINVOKE.SceneManager_setShadowCameraSetup(swigCPtr, ShadowCameraSetupPtr.getCPtr(shadowSetup));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setActiveCompositorChain(CompositorChain chain) {
    OgrePINVOKE.SceneManager__setActiveCompositorChain(swigCPtr, CompositorChain.getCPtr(chain));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setLateMaterialResolving(bool isLate) {
    OgrePINVOKE.SceneManager_setLateMaterialResolving(swigCPtr, isLate);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isLateMaterialResolving() {
    bool ret = OgrePINVOKE.SceneManager_isLateMaterialResolving(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CompositorChain _getActiveCompositorChain() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager__getActiveCompositorChain(swigCPtr);
    CompositorChain ret = (cPtr == global::System.IntPtr.Zero) ? null : new CompositorChain(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addListener(SceneManager.SceneManager_Listener s) {
    OgrePINVOKE.SceneManager_addListener(swigCPtr, SceneManager.SceneManager_Listener.getCPtr(s));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeListener(SceneManager.SceneManager_Listener s) {
    OgrePINVOKE.SceneManager_removeListener(swigCPtr, SceneManager.SceneManager_Listener.getCPtr(s));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addShadowTextureListener(ShadowTextureListener s) {
    OgrePINVOKE.SceneManager_addShadowTextureListener(swigCPtr, ShadowTextureListener.getCPtr(s));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeShadowTextureListener(ShadowTextureListener s) {
    OgrePINVOKE.SceneManager_removeShadowTextureListener(swigCPtr, ShadowTextureListener.getCPtr(s));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public StaticGeometry createStaticGeometry(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createStaticGeometry(swigCPtr, name);
    StaticGeometry ret = (cPtr == global::System.IntPtr.Zero) ? null : new StaticGeometry(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StaticGeometry getStaticGeometry(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getStaticGeometry(swigCPtr, name);
    StaticGeometry ret = (cPtr == global::System.IntPtr.Zero) ? null : new StaticGeometry(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasStaticGeometry(string name) {
    bool ret = OgrePINVOKE.SceneManager_hasStaticGeometry(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyStaticGeometry(StaticGeometry geom) {
    OgrePINVOKE.SceneManager_destroyStaticGeometry__SWIG_0(swigCPtr, StaticGeometry.getCPtr(geom));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyStaticGeometry(string name) {
    OgrePINVOKE.SceneManager_destroyStaticGeometry__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyAllStaticGeometry() {
    OgrePINVOKE.SceneManager_destroyAllStaticGeometry(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public InstanceManager createInstanceManager(string customName, string meshName, string groupName, InstanceManager.InstancingTechnique technique, uint numInstancesPerBatch, ushort flags, ushort subMeshIdx) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createInstanceManager__SWIG_0(swigCPtr, customName, meshName, groupName, (int)technique, numInstancesPerBatch, flags, subMeshIdx);
    InstanceManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new InstanceManager(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public InstanceManager createInstanceManager(string customName, string meshName, string groupName, InstanceManager.InstancingTechnique technique, uint numInstancesPerBatch, ushort flags) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createInstanceManager__SWIG_1(swigCPtr, customName, meshName, groupName, (int)technique, numInstancesPerBatch, flags);
    InstanceManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new InstanceManager(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public InstanceManager createInstanceManager(string customName, string meshName, string groupName, InstanceManager.InstancingTechnique technique, uint numInstancesPerBatch) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createInstanceManager__SWIG_2(swigCPtr, customName, meshName, groupName, (int)technique, numInstancesPerBatch);
    InstanceManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new InstanceManager(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public InstanceManager getInstanceManager(string managerName) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getInstanceManager(swigCPtr, managerName);
    InstanceManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new InstanceManager(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasInstanceManager(string managerName) {
    bool ret = OgrePINVOKE.SceneManager_hasInstanceManager(swigCPtr, managerName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyInstanceManager(string name) {
    OgrePINVOKE.SceneManager_destroyInstanceManager__SWIG_0(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyInstanceManager(InstanceManager instanceManager) {
    OgrePINVOKE.SceneManager_destroyInstanceManager__SWIG_1(swigCPtr, InstanceManager.getCPtr(instanceManager));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyAllInstanceManagers() {
    OgrePINVOKE.SceneManager_destroyAllInstanceManagers(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNumInstancesPerBatch(string meshName, string groupName, string materialName, InstanceManager.InstancingTechnique technique, uint numInstancesPerBatch, ushort flags, ushort subMeshIdx) {
    uint ret = OgrePINVOKE.SceneManager_getNumInstancesPerBatch__SWIG_0(swigCPtr, meshName, groupName, materialName, (int)technique, numInstancesPerBatch, flags, subMeshIdx);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumInstancesPerBatch(string meshName, string groupName, string materialName, InstanceManager.InstancingTechnique technique, uint numInstancesPerBatch, ushort flags) {
    uint ret = OgrePINVOKE.SceneManager_getNumInstancesPerBatch__SWIG_1(swigCPtr, meshName, groupName, materialName, (int)technique, numInstancesPerBatch, flags);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumInstancesPerBatch(string meshName, string groupName, string materialName, InstanceManager.InstancingTechnique technique, uint numInstancesPerBatch) {
    uint ret = OgrePINVOKE.SceneManager_getNumInstancesPerBatch__SWIG_2(swigCPtr, meshName, groupName, materialName, (int)technique, numInstancesPerBatch);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public InstancedEntity createInstancedEntity(string materialName, string managerName) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createInstancedEntity(swigCPtr, materialName, managerName);
    InstancedEntity ret = (cPtr == global::System.IntPtr.Zero) ? null : new InstancedEntity(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyInstancedEntity(InstancedEntity instancedEntity) {
    OgrePINVOKE.SceneManager_destroyInstancedEntity(swigCPtr, InstancedEntity.getCPtr(instancedEntity));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _addDirtyInstanceManager(InstanceManager dirtyManager) {
    OgrePINVOKE.SceneManager__addDirtyInstanceManager(swigCPtr, InstanceManager.getCPtr(dirtyManager));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public MovableObject createMovableObject(string name, string typeName, NameValueMap params_) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createMovableObject__SWIG_0(swigCPtr, name, typeName, NameValueMap.getCPtr(params_));
    MovableObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new MovableObject(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MovableObject createMovableObject(string name, string typeName) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createMovableObject__SWIG_1(swigCPtr, name, typeName);
    MovableObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new MovableObject(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MovableObject createMovableObject(string typeName, NameValueMap params_) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createMovableObject__SWIG_2(swigCPtr, typeName, NameValueMap.getCPtr(params_));
    MovableObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new MovableObject(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MovableObject createMovableObject(string typeName) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_createMovableObject__SWIG_3(swigCPtr, typeName);
    MovableObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new MovableObject(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyMovableObject(string name, string typeName) {
    OgrePINVOKE.SceneManager_destroyMovableObject__SWIG_0(swigCPtr, name, typeName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyMovableObject(MovableObject m) {
    OgrePINVOKE.SceneManager_destroyMovableObject__SWIG_1(swigCPtr, MovableObject.getCPtr(m));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyAllMovableObjectsByType(string typeName) {
    OgrePINVOKE.SceneManager_destroyAllMovableObjectsByType(swigCPtr, typeName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyAllMovableObjects() {
    OgrePINVOKE.SceneManager_destroyAllMovableObjects(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public MovableObject getMovableObject(string name, string typeName) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getMovableObject(swigCPtr, name, typeName);
    MovableObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new MovableObject(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMovableObject(string name, string typeName) {
    bool ret = OgrePINVOKE.SceneManager_hasMovableObject(swigCPtr, name, typeName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MovableObjectMap getMovableObjects(string typeName) {
    MovableObjectMap ret = new MovableObjectMap(OgrePINVOKE.SceneManager_getMovableObjects(swigCPtr, typeName), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void injectMovableObject(MovableObject m) {
    OgrePINVOKE.SceneManager_injectMovableObject(swigCPtr, MovableObject.getCPtr(m));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void extractMovableObject(string name, string typeName) {
    OgrePINVOKE.SceneManager_extractMovableObject__SWIG_0(swigCPtr, name, typeName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void extractMovableObject(MovableObject m) {
    OgrePINVOKE.SceneManager_extractMovableObject__SWIG_1(swigCPtr, MovableObject.getCPtr(m));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void extractAllMovableObjectsByType(string typeName) {
    OgrePINVOKE.SceneManager_extractAllMovableObjectsByType(swigCPtr, typeName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVisibilityMask(uint vmask) {
    OgrePINVOKE.SceneManager_setVisibilityMask(swigCPtr, vmask);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getVisibilityMask() {
    uint ret = OgrePINVOKE.SceneManager_getVisibilityMask(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint _getCombinedVisibilityMask() {
    uint ret = OgrePINVOKE.SceneManager__getCombinedVisibilityMask(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setFindVisibleObjects(bool find) {
    OgrePINVOKE.SceneManager_setFindVisibleObjects(swigCPtr, find);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getFindVisibleObjects() {
    bool ret = OgrePINVOKE.SceneManager_getFindVisibleObjects(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setFlipCullingOnNegativeScale(bool n) {
    OgrePINVOKE.SceneManager_setFlipCullingOnNegativeScale(swigCPtr, n);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getFlipCullingOnNegativeScale() {
    bool ret = OgrePINVOKE.SceneManager_getFlipCullingOnNegativeScale(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _injectRenderWithPass(Pass pass, Renderable rend, bool shadowDerivation, bool doLightIteration, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t manualLightList) {
    OgrePINVOKE.SceneManager__injectRenderWithPass__SWIG_0(swigCPtr, Pass.getCPtr(pass), Renderable.getCPtr(rend), shadowDerivation, doLightIteration, SWIGTYPE_p_std__vectorT_Ogre__Light_p_t.getCPtr(manualLightList));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _injectRenderWithPass(Pass pass, Renderable rend, bool shadowDerivation, bool doLightIteration) {
    OgrePINVOKE.SceneManager__injectRenderWithPass__SWIG_1(swigCPtr, Pass.getCPtr(pass), Renderable.getCPtr(rend), shadowDerivation, doLightIteration);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _injectRenderWithPass(Pass pass, Renderable rend, bool shadowDerivation) {
    OgrePINVOKE.SceneManager__injectRenderWithPass__SWIG_2(swigCPtr, Pass.getCPtr(pass), Renderable.getCPtr(rend), shadowDerivation);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _injectRenderWithPass(Pass pass, Renderable rend) {
    OgrePINVOKE.SceneManager__injectRenderWithPass__SWIG_3(swigCPtr, Pass.getCPtr(pass), Renderable.getCPtr(rend));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Pass _setPass(Pass pass, bool shadowDerivation) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager__setPass__SWIG_0(swigCPtr, Pass.getCPtr(pass), shadowDerivation);
    Pass ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pass(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Pass _setPass(Pass pass) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager__setPass__SWIG_1(swigCPtr, Pass.getCPtr(pass));
    Pass ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pass(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _markGpuParamsDirty(ushort mask) {
    OgrePINVOKE.SceneManager__markGpuParamsDirty(swigCPtr, mask);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _renderQueueGroupObjects(RenderQueueGroup group, QueuedRenderableCollection.OrganisationMode om) {
    OgrePINVOKE.SceneManager__renderQueueGroupObjects(swigCPtr, RenderQueueGroup.getCPtr(group), (int)om);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setQueuedRenderableVisitor(SceneManager.SceneMgrQueuedRenderableVisitor visitor) {
    OgrePINVOKE.SceneManager_setQueuedRenderableVisitor(swigCPtr, SceneManager.SceneMgrQueuedRenderableVisitor.getCPtr(visitor));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SceneManager.SceneMgrQueuedRenderableVisitor getQueuedRenderableVisitor() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getQueuedRenderableVisitor(swigCPtr);
    SceneManager.SceneMgrQueuedRenderableVisitor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneManager.SceneMgrQueuedRenderableVisitor(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RenderSystem getDestinationRenderSystem() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getDestinationRenderSystem(swigCPtr);
    RenderSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderSystem(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Viewport getCurrentViewport() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager_getCurrentViewport(swigCPtr);
    Viewport ret = (cPtr == global::System.IntPtr.Zero) ? null : new Viewport(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VisibleObjectsBoundsInfo getVisibleObjectsBoundsInfo(Camera cam) {
    VisibleObjectsBoundsInfo ret = new VisibleObjectsBoundsInfo(OgrePINVOKE.SceneManager_getVisibleObjectsBoundsInfo(swigCPtr, Camera.getCPtr(cam)), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VisibleObjectsBoundsInfo getShadowCasterBoundsInfo(Light light, uint iteration) {
    VisibleObjectsBoundsInfo ret = new VisibleObjectsBoundsInfo(OgrePINVOKE.SceneManager_getShadowCasterBoundsInfo__SWIG_0(swigCPtr, Light.getCPtr(light), iteration), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VisibleObjectsBoundsInfo getShadowCasterBoundsInfo(Light light) {
    VisibleObjectsBoundsInfo ret = new VisibleObjectsBoundsInfo(OgrePINVOKE.SceneManager_getShadowCasterBoundsInfo__SWIG_1(swigCPtr, Light.getCPtr(light)), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addLodListener(LodListener listener) {
    OgrePINVOKE.SceneManager_addLodListener(swigCPtr, LodListener.getCPtr(listener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeLodListener(LodListener listener) {
    OgrePINVOKE.SceneManager_removeLodListener(swigCPtr, LodListener.getCPtr(listener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyMovableObjectLodChanged(MovableObjectLodChangedEvent evt) {
    OgrePINVOKE.SceneManager__notifyMovableObjectLodChanged(swigCPtr, MovableObjectLodChangedEvent.getCPtr(evt));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyEntityMeshLodChanged(EntityMeshLodChangedEvent evt) {
    OgrePINVOKE.SceneManager__notifyEntityMeshLodChanged(swigCPtr, EntityMeshLodChangedEvent.getCPtr(evt));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyEntityMaterialLodChanged(EntityMaterialLodChangedEvent evt) {
    OgrePINVOKE.SceneManager__notifyEntityMaterialLodChanged(swigCPtr, EntityMaterialLodChangedEvent.getCPtr(evt));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _handleLodEvents() {
    OgrePINVOKE.SceneManager__handleLodEvents(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SceneManager.IlluminationRenderStage _getCurrentRenderStage() {
    SceneManager.IlluminationRenderStage ret = (SceneManager.IlluminationRenderStage)OgrePINVOKE.SceneManager__getCurrentRenderStage(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__AutoParamDataSource _getAutoParamDataSource() {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManager__getAutoParamDataSource(swigCPtr);
    SWIGTYPE_p_Ogre__AutoParamDataSource ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Ogre__AutoParamDataSource(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum QueryTypeMask : uint {
    WORLD_GEOMETRY_TYPE_MASK = 0x80000000,
    ENTITY_TYPE_MASK = 0x40000000,
    FX_TYPE_MASK = 0x20000000,
    STATICGEOMETRY_TYPE_MASK = 0x10000000,
    LIGHT_TYPE_MASK = 0x08000000,
    FRUSTUM_TYPE_MASK = 0x04000000,
    USER_TYPE_MASK_LIMIT = FRUSTUM_TYPE_MASK
  }

  public enum IlluminationRenderStage {
    IRS_NONE,
    IRS_RENDER_TO_TEXTURE,
    IRS_RENDER_RECEIVER_PASS
  }

  public enum SpecialCaseRenderQueueMode {
    SCRQM_INCLUDE,
    SCRQM_EXCLUDE
  }

  public static readonly string PT_PLANE = OgrePINVOKE.SceneManager_PT_PLANE_get();
  public static readonly string PT_CUBE = OgrePINVOKE.SceneManager_PT_CUBE_get();
  public static readonly string PT_SPHERE = OgrePINVOKE.SceneManager_PT_SPHERE_get();
}

}
