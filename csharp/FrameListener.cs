//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class FrameListener : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FrameListener(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FrameListener obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FrameListener() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_FrameListener(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual bool frameStarted(FrameEvent evt) {
    bool ret = (SwigDerivedClassHasMethod("frameStarted", swigMethodTypes0) ? OgrePINVOKE.FrameListener_frameStartedSwigExplicitFrameListener(swigCPtr, FrameEvent.getCPtr(evt)) : OgrePINVOKE.FrameListener_frameStarted(swigCPtr, FrameEvent.getCPtr(evt)));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool frameRenderingQueued(FrameEvent evt) {
    bool ret = (SwigDerivedClassHasMethod("frameRenderingQueued", swigMethodTypes1) ? OgrePINVOKE.FrameListener_frameRenderingQueuedSwigExplicitFrameListener(swigCPtr, FrameEvent.getCPtr(evt)) : OgrePINVOKE.FrameListener_frameRenderingQueued(swigCPtr, FrameEvent.getCPtr(evt)));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool frameEnded(FrameEvent evt) {
    bool ret = (SwigDerivedClassHasMethod("frameEnded", swigMethodTypes2) ? OgrePINVOKE.FrameListener_frameEndedSwigExplicitFrameListener(swigCPtr, FrameEvent.getCPtr(evt)) : OgrePINVOKE.FrameListener_frameEnded(swigCPtr, FrameEvent.getCPtr(evt)));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FrameListener() : this(OgrePINVOKE.new_FrameListener(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("frameStarted", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateFrameListener_0(SwigDirectorMethodframeStarted);
    if (SwigDerivedClassHasMethod("frameRenderingQueued", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateFrameListener_1(SwigDirectorMethodframeRenderingQueued);
    if (SwigDerivedClassHasMethod("frameEnded", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateFrameListener_2(SwigDirectorMethodframeEnded);
    OgrePINVOKE.FrameListener_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(FrameListener));
    return hasDerivedMethod;
  }

  private bool SwigDirectorMethodframeStarted(global::System.IntPtr evt) {
    return frameStarted(new FrameEvent(evt, false));
  }

  private bool SwigDirectorMethodframeRenderingQueued(global::System.IntPtr evt) {
    return frameRenderingQueued(new FrameEvent(evt, false));
  }

  private bool SwigDirectorMethodframeEnded(global::System.IntPtr evt) {
    return frameEnded(new FrameEvent(evt, false));
  }

  public delegate bool SwigDelegateFrameListener_0(global::System.IntPtr evt);
  public delegate bool SwigDelegateFrameListener_1(global::System.IntPtr evt);
  public delegate bool SwigDelegateFrameListener_2(global::System.IntPtr evt);

  private SwigDelegateFrameListener_0 swigDelegate0;
  private SwigDelegateFrameListener_1 swigDelegate1;
  private SwigDelegateFrameListener_2 swigDelegate2;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(FrameEvent) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(FrameEvent) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(FrameEvent) };
}

}
