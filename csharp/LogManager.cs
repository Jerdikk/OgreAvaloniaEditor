//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class LogManager : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LogManager(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LogManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~LogManager() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_LogManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public LogManager() : this(OgrePINVOKE.new_LogManager(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Log createLog(string name, bool defaultLog, bool debuggerOutput, bool suppressFileOutput) {
    global::System.IntPtr cPtr = OgrePINVOKE.LogManager_createLog__SWIG_0(swigCPtr, name, defaultLog, debuggerOutput, suppressFileOutput);
    Log ret = (cPtr == global::System.IntPtr.Zero) ? null : new Log(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Log createLog(string name, bool defaultLog, bool debuggerOutput) {
    global::System.IntPtr cPtr = OgrePINVOKE.LogManager_createLog__SWIG_1(swigCPtr, name, defaultLog, debuggerOutput);
    Log ret = (cPtr == global::System.IntPtr.Zero) ? null : new Log(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Log createLog(string name, bool defaultLog) {
    global::System.IntPtr cPtr = OgrePINVOKE.LogManager_createLog__SWIG_2(swigCPtr, name, defaultLog);
    Log ret = (cPtr == global::System.IntPtr.Zero) ? null : new Log(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Log createLog(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.LogManager_createLog__SWIG_3(swigCPtr, name);
    Log ret = (cPtr == global::System.IntPtr.Zero) ? null : new Log(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Log getLog(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.LogManager_getLog(swigCPtr, name);
    Log ret = (cPtr == global::System.IntPtr.Zero) ? null : new Log(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Log getDefaultLog() {
    global::System.IntPtr cPtr = OgrePINVOKE.LogManager_getDefaultLog(swigCPtr);
    Log ret = (cPtr == global::System.IntPtr.Zero) ? null : new Log(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyLog(string name) {
    OgrePINVOKE.LogManager_destroyLog__SWIG_0(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void destroyLog(Log log) {
    OgrePINVOKE.LogManager_destroyLog__SWIG_1(swigCPtr, Log.getCPtr(log));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Log setDefaultLog(Log newLog) {
    global::System.IntPtr cPtr = OgrePINVOKE.LogManager_setDefaultLog(swigCPtr, Log.getCPtr(newLog));
    Log ret = (cPtr == global::System.IntPtr.Zero) ? null : new Log(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void logMessage(string message, LogMessageLevel lml, bool maskDebug) {
    OgrePINVOKE.LogManager_logMessage__SWIG_0(swigCPtr, message, (int)lml, maskDebug);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void logMessage(string message, LogMessageLevel lml) {
    OgrePINVOKE.LogManager_logMessage__SWIG_1(swigCPtr, message, (int)lml);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void logMessage(string message) {
    OgrePINVOKE.LogManager_logMessage__SWIG_2(swigCPtr, message);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void logError(string message, bool maskDebug) {
    OgrePINVOKE.LogManager_logError__SWIG_0(swigCPtr, message, maskDebug);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void logError(string message) {
    OgrePINVOKE.LogManager_logError__SWIG_1(swigCPtr, message);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void logWarning(string message, bool maskDebug) {
    OgrePINVOKE.LogManager_logWarning__SWIG_0(swigCPtr, message, maskDebug);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void logWarning(string message) {
    OgrePINVOKE.LogManager_logWarning__SWIG_1(swigCPtr, message);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void logMessage(LogMessageLevel lml, string message, bool maskDebug) {
    OgrePINVOKE.LogManager_logMessage__SWIG_3(swigCPtr, (int)lml, message, maskDebug);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void logMessage(LogMessageLevel lml, string message) {
    OgrePINVOKE.LogManager_logMessage__SWIG_4(swigCPtr, (int)lml, message);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMinLogLevel(LogMessageLevel lml) {
    OgrePINVOKE.LogManager_setMinLogLevel(swigCPtr, (int)lml);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static LogManager getSingleton() {
    LogManager ret = new LogManager(OgrePINVOKE.LogManager_getSingleton(), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
