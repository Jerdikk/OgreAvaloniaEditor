//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class QueuedRenderableCollection : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal QueuedRenderableCollection(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(QueuedRenderableCollection obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~QueuedRenderableCollection() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_QueuedRenderableCollection(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public QueuedRenderableCollection() : this(OgrePINVOKE.new_QueuedRenderableCollection(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    OgrePINVOKE.QueuedRenderableCollection_clear(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removePassGroup(Pass p) {
    OgrePINVOKE.QueuedRenderableCollection_removePassGroup(swigCPtr, Pass.getCPtr(p));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void resetOrganisationModes() {
    OgrePINVOKE.QueuedRenderableCollection_resetOrganisationModes(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addOrganisationMode(QueuedRenderableCollection.OrganisationMode om) {
    OgrePINVOKE.QueuedRenderableCollection_addOrganisationMode(swigCPtr, (int)om);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addRenderable(Pass pass, Renderable rend) {
    OgrePINVOKE.QueuedRenderableCollection_addRenderable(swigCPtr, Pass.getCPtr(pass), Renderable.getCPtr(rend));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void sort(Camera cam) {
    OgrePINVOKE.QueuedRenderableCollection_sort(swigCPtr, Camera.getCPtr(cam));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void acceptVisitor(QueuedRenderableVisitor visitor, QueuedRenderableCollection.OrganisationMode om) {
    OgrePINVOKE.QueuedRenderableCollection_acceptVisitor(swigCPtr, QueuedRenderableVisitor.getCPtr(visitor), (int)om);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void merge(QueuedRenderableCollection rhs) {
    OgrePINVOKE.QueuedRenderableCollection_merge(swigCPtr, QueuedRenderableCollection.getCPtr(rhs));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum OrganisationMode {
    OM_PASS_GROUP = 1,
    OM_SORT_DESCENDING = 2,
    OM_SORT_ASCENDING = 6
  }

}

}
