/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_OgreTerrain(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_OgreTerrain(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_OgreTerrain(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


/* Includes the header in the wrapper code */
#include "Ogre.h"
#include "OgreDefaultDebugDrawer.h"
#include "OgreTerrainLayerBlendMap.h"
#include "OgreTerrainMaterialGeneratorA.h"
#include "OgreTerrain.h"
#include "OgreTerrainQuadTreeNode.h"
#include "OgreTerrainAutoUpdateLod.h"
#include "OgreTerrainGroup.h"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>

SWIGINTERN std::vector< Ogre::Terrain::LayerInstance > *new_std_vector_Sl_Ogre_Terrain_LayerInstance_Sg___SWIG_2(int capacity){
        std::vector< Ogre::Terrain::LayerInstance >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Ogre::Terrain::LayerInstance >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Ogre::Terrain::LayerInstance std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__getitemcopy(std::vector< Ogre::Terrain::LayerInstance > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< Ogre::Terrain::LayerInstance >::value_type const &std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__getitem(std::vector< Ogre::Terrain::LayerInstance > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__setitem(std::vector< Ogre::Terrain::LayerInstance > *self,int index,Ogre::Terrain::LayerInstance const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__AddRange(std::vector< Ogre::Terrain::LayerInstance > *self,std::vector< Ogre::Terrain::LayerInstance > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Ogre::Terrain::LayerInstance > *std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__GetRange(std::vector< Ogre::Terrain::LayerInstance > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Ogre::Terrain::LayerInstance >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__Insert(std::vector< Ogre::Terrain::LayerInstance > *self,int index,Ogre::Terrain::LayerInstance const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__InsertRange(std::vector< Ogre::Terrain::LayerInstance > *self,int index,std::vector< Ogre::Terrain::LayerInstance > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__RemoveAt(std::vector< Ogre::Terrain::LayerInstance > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__RemoveRange(std::vector< Ogre::Terrain::LayerInstance > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Ogre::Terrain::LayerInstance > *std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__Repeat(Ogre::Terrain::LayerInstance const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Ogre::Terrain::LayerInstance >(count, value);
      }
SWIGINTERN void std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__Reverse__SWIG_0(std::vector< Ogre::Terrain::LayerInstance > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__Reverse__SWIG_1(std::vector< Ogre::Terrain::LayerInstance > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__SetRange(std::vector< Ogre::Terrain::LayerInstance > *self,int index,std::vector< Ogre::Terrain::LayerInstance > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "OgreTerrainCSHARP_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLayerSampler_alias_set___(void * jarg1, char * jarg2) {
  Ogre::TerrainLayerSampler *arg1 = (Ogre::TerrainLayerSampler *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainLayerSampler *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->alias = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_TerrainLayerSampler_alias_get___(void * jarg1) {
  char * jresult ;
  Ogre::TerrainLayerSampler *arg1 = (Ogre::TerrainLayerSampler *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::TerrainLayerSampler *)jarg1; 
  result = (Ogre::String *) & ((arg1)->alias);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLayerSampler_format_set___(void * jarg1, int jarg2) {
  Ogre::TerrainLayerSampler *arg1 = (Ogre::TerrainLayerSampler *) 0 ;
  Ogre::PixelFormat arg2 ;
  
  arg1 = (Ogre::TerrainLayerSampler *)jarg1; 
  arg2 = (Ogre::PixelFormat)jarg2; 
  if (arg1) (arg1)->format = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_TerrainLayerSampler_format_get___(void * jarg1) {
  int jresult ;
  Ogre::TerrainLayerSampler *arg1 = (Ogre::TerrainLayerSampler *) 0 ;
  Ogre::PixelFormat result;
  
  arg1 = (Ogre::TerrainLayerSampler *)jarg1; 
  result = (Ogre::PixelFormat) ((arg1)->format);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainLayerSampler__SWIG_0___() {
  void * jresult ;
  Ogre::TerrainLayerSampler *result = 0 ;
  
  {
    try {
      result = (Ogre::TerrainLayerSampler *)new Ogre::TerrainLayerSampler();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainLayerSampler__SWIG_1___(char * jarg1, int jarg2) {
  void * jresult ;
  Ogre::String *arg1 = 0 ;
  Ogre::PixelFormat arg2 ;
  Ogre::TerrainLayerSampler *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (Ogre::PixelFormat)jarg2; 
  {
    try {
      result = (Ogre::TerrainLayerSampler *)new Ogre::TerrainLayerSampler((Ogre::String const &)*arg1,arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TerrainLayerSampler___(void * jarg1) {
  Ogre::TerrainLayerSampler *arg1 = (Ogre::TerrainLayerSampler *) 0 ;
  
  arg1 = (Ogre::TerrainLayerSampler *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TerrainMaterialGenerator_Profile___(void * jarg1) {
  Ogre::TerrainMaterialGenerator::Profile *arg1 = (Ogre::TerrainMaterialGenerator::Profile *) 0 ;
  
  arg1 = (Ogre::TerrainMaterialGenerator::Profile *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainMaterialGenerator_Profile___() {
  void * jresult ;
  Ogre::TerrainMaterialGenerator::Profile *result = 0 ;
  
  {
    try {
      result = (Ogre::TerrainMaterialGenerator::Profile *)new Ogre::TerrainMaterialGenerator::Profile();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TerrainMaterialGenerator___(void * jarg1) {
  Ogre::TerrainMaterialGenerator *arg1 = (Ogre::TerrainMaterialGenerator *) 0 ;
  
  arg1 = (Ogre::TerrainMaterialGenerator *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGenerator_getActiveProfile___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainMaterialGenerator *arg1 = (Ogre::TerrainMaterialGenerator *) 0 ;
  Ogre::TerrainMaterialGenerator::Profile *result = 0 ;
  
  arg1 = (Ogre::TerrainMaterialGenerator *)jarg1; 
  {
    try {
      result = (Ogre::TerrainMaterialGenerator::Profile *)((Ogre::TerrainMaterialGenerator const *)arg1)->getActiveProfile();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGenerator__markChanged___(void * jarg1) {
  Ogre::TerrainMaterialGenerator *arg1 = (Ogre::TerrainMaterialGenerator *) 0 ;
  
  arg1 = (Ogre::TerrainMaterialGenerator *)jarg1; 
  {
    try {
      (arg1)->_markChanged();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGenerator_getChangeCount___(void * jarg1) {
  unsigned long long jresult ;
  Ogre::TerrainMaterialGenerator *arg1 = (Ogre::TerrainMaterialGenerator *) 0 ;
  unsigned long long result;
  
  arg1 = (Ogre::TerrainMaterialGenerator *)jarg1; 
  {
    try {
      result = (unsigned long long)((Ogre::TerrainMaterialGenerator const *)arg1)->getChangeCount();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGenerator_getLayerDeclaration___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainMaterialGenerator *arg1 = (Ogre::TerrainMaterialGenerator *) 0 ;
  Ogre::TerrainLayerDeclaration *result = 0 ;
  
  arg1 = (Ogre::TerrainMaterialGenerator *)jarg1; 
  {
    try {
      result = (Ogre::TerrainLayerDeclaration *) &((Ogre::TerrainMaterialGenerator const *)arg1)->getLayerDeclaration();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGenerator_isVertexCompressionSupported___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainMaterialGenerator *arg1 = (Ogre::TerrainMaterialGenerator *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainMaterialGenerator *)jarg1; 
  {
    try {
      result = (bool)((Ogre::TerrainMaterialGenerator const *)arg1)->isVertexCompressionSupported();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGenerator_requestOptions___(void * jarg1, void * jarg2) {
  Ogre::TerrainMaterialGenerator *arg1 = (Ogre::TerrainMaterialGenerator *) 0 ;
  Ogre::Terrain *arg2 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::TerrainMaterialGenerator *)jarg1; 
  arg2 = (Ogre::Terrain *)jarg2; 
  {
    try {
      (arg1)->requestOptions(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGenerator_generate___(void * jarg1, void * jarg2) {
  void * jresult ;
  Ogre::TerrainMaterialGenerator *arg1 = (Ogre::TerrainMaterialGenerator *) 0 ;
  Ogre::Terrain *arg2 = (Ogre::Terrain *) 0 ;
  Ogre::MaterialPtr result;
  
  arg1 = (Ogre::TerrainMaterialGenerator *)jarg1; 
  arg2 = (Ogre::Terrain *)jarg2; 
  {
    try {
      result = (arg1)->generate((Ogre::Terrain const *)arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::MaterialPtr((const Ogre::MaterialPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGenerator_generateForCompositeMap___(void * jarg1, void * jarg2) {
  void * jresult ;
  Ogre::TerrainMaterialGenerator *arg1 = (Ogre::TerrainMaterialGenerator *) 0 ;
  Ogre::Terrain *arg2 = (Ogre::Terrain *) 0 ;
  Ogre::MaterialPtr result;
  
  arg1 = (Ogre::TerrainMaterialGenerator *)jarg1; 
  arg2 = (Ogre::Terrain *)jarg2; 
  {
    try {
      result = (arg1)->generateForCompositeMap((Ogre::Terrain const *)arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::MaterialPtr((const Ogre::MaterialPtr &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGenerator_setLightmapEnabled___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainMaterialGenerator *arg1 = (Ogre::TerrainMaterialGenerator *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainMaterialGenerator *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setLightmapEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGenerator_getMaxLayers___(void * jarg1, void * jarg2) {
  unsigned char jresult ;
  Ogre::TerrainMaterialGenerator *arg1 = (Ogre::TerrainMaterialGenerator *) 0 ;
  Ogre::Terrain *arg2 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 result;
  
  arg1 = (Ogre::TerrainMaterialGenerator *)jarg1; 
  arg2 = (Ogre::Terrain *)jarg2; 
  {
    try {
      result = (Ogre::uint8)((Ogre::TerrainMaterialGenerator const *)arg1)->getMaxLayers((Ogre::Terrain const *)arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGenerator_updateCompositeMap___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::TerrainMaterialGenerator *arg1 = (Ogre::TerrainMaterialGenerator *) 0 ;
  Ogre::Terrain *arg2 = (Ogre::Terrain *) 0 ;
  Ogre::Rect *arg3 = 0 ;
  
  arg1 = (Ogre::TerrainMaterialGenerator *)jarg1; 
  arg2 = (Ogre::Terrain *)jarg2; 
  arg3 = (Ogre::Rect *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->updateCompositeMap((Ogre::Terrain const *)arg2,(Ogre::Rect const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGenerator_updateParams___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::TerrainMaterialGenerator *arg1 = (Ogre::TerrainMaterialGenerator *) 0 ;
  Ogre::MaterialPtr *arg2 = 0 ;
  Ogre::Terrain *arg3 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::TerrainMaterialGenerator *)jarg1; 
  arg2 = (Ogre::MaterialPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Terrain *)jarg3; 
  {
    try {
      (arg1)->updateParams((Ogre::MaterialPtr const &)*arg2,(Ogre::Terrain const *)arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGenerator_updateParamsForCompositeMap___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::TerrainMaterialGenerator *arg1 = (Ogre::TerrainMaterialGenerator *) 0 ;
  Ogre::MaterialPtr *arg2 = 0 ;
  Ogre::Terrain *arg3 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::TerrainMaterialGenerator *)jarg1; 
  arg2 = (Ogre::MaterialPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Terrain *)jarg3; 
  {
    try {
      (arg1)->updateParamsForCompositeMap((Ogre::MaterialPtr const &)*arg2,(Ogre::Terrain const *)arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGenerator_setDebugLevel___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainMaterialGenerator *arg1 = (Ogre::TerrainMaterialGenerator *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Ogre::TerrainMaterialGenerator *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->setDebugLevel(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGenerator_getDebugLevel___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainMaterialGenerator *arg1 = (Ogre::TerrainMaterialGenerator *) 0 ;
  unsigned int result;
  
  arg1 = (Ogre::TerrainMaterialGenerator *)jarg1; 
  {
    try {
      result = (unsigned int)((Ogre::TerrainMaterialGenerator const *)arg1)->getDebugLevel();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGenerator__renderCompositeMap___(void * jarg1, unsigned long jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Ogre::TerrainMaterialGenerator *arg1 = (Ogre::TerrainMaterialGenerator *) 0 ;
  size_t arg2 ;
  Ogre::Rect *arg3 = 0 ;
  Ogre::MaterialPtr *arg4 = 0 ;
  Ogre::TexturePtr *arg5 = 0 ;
  
  arg1 = (Ogre::TerrainMaterialGenerator *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (Ogre::Rect *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return ;
  } 
  arg4 = (Ogre::MaterialPtr *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  arg5 = (Ogre::TexturePtr *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::TexturePtr const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->_renderCompositeMap(arg2,(Ogre::Rect const &)*arg3,(Ogre::MaterialPtr const &)*arg4,(Ogre::TexturePtr const &)*arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGenerator__getCompositeMapRTT___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainMaterialGenerator *arg1 = (Ogre::TerrainMaterialGenerator *) 0 ;
  Ogre::Texture *result = 0 ;
  
  arg1 = (Ogre::TerrainMaterialGenerator *)jarg1; 
  {
    try {
      result = (Ogre::Texture *)(arg1)->_getCompositeMapRTT();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainMaterialGeneratorA___() {
  void * jresult ;
  Ogre::TerrainMaterialGeneratorA *result = 0 ;
  
  {
    try {
      result = (Ogre::TerrainMaterialGeneratorA *)new Ogre::TerrainMaterialGeneratorA();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TerrainMaterialGeneratorA___(void * jarg1) {
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_getMainRenderState___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  Ogre::RTShader::RenderState *result = 0 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  {
    try {
      result = (Ogre::RTShader::RenderState *)((Ogre::TerrainMaterialGeneratorA const *)arg1)->getMainRenderState();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainMaterialGeneratorA_SM2Profile___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  Ogre::TerrainMaterialGeneratorA::SM2Profile *result = 0 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  {
    try {
      result = (Ogre::TerrainMaterialGeneratorA::SM2Profile *)new Ogre::TerrainMaterialGeneratorA::SM2Profile(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TerrainMaterialGeneratorA_SM2Profile___(void * jarg1) {
  Ogre::TerrainMaterialGeneratorA::SM2Profile *arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *) 0 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_SM2Profile_generate___(void * jarg1, void * jarg2) {
  void * jresult ;
  Ogre::TerrainMaterialGeneratorA::SM2Profile *arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *) 0 ;
  Ogre::Terrain *arg2 = (Ogre::Terrain *) 0 ;
  Ogre::MaterialPtr result;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *)jarg1; 
  arg2 = (Ogre::Terrain *)jarg2; 
  {
    try {
      result = (arg1)->generate((Ogre::Terrain const *)arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::MaterialPtr((const Ogre::MaterialPtr &)result); 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_SM2Profile_getMaxLayers___(void * jarg1, void * jarg2) {
  unsigned char jresult ;
  Ogre::TerrainMaterialGeneratorA::SM2Profile *arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *) 0 ;
  Ogre::Terrain *arg2 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 result;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *)jarg1; 
  arg2 = (Ogre::Terrain *)jarg2; 
  {
    try {
      result = (Ogre::uint8)((Ogre::TerrainMaterialGeneratorA::SM2Profile const *)arg1)->getMaxLayers((Ogre::Terrain const *)arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_SM2Profile_isLayerNormalMappingEnabled___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainMaterialGeneratorA::SM2Profile *arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *)jarg1; 
  {
    try {
      result = (bool)((Ogre::TerrainMaterialGeneratorA::SM2Profile const *)arg1)->isLayerNormalMappingEnabled();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_SM2Profile_setLayerNormalMappingEnabled___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainMaterialGeneratorA::SM2Profile *arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setLayerNormalMappingEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_SM2Profile_isLayerParallaxMappingEnabled___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainMaterialGeneratorA::SM2Profile *arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *)jarg1; 
  {
    try {
      result = (bool)((Ogre::TerrainMaterialGeneratorA::SM2Profile const *)arg1)->isLayerParallaxMappingEnabled();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_SM2Profile_setLayerParallaxMappingEnabled___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainMaterialGeneratorA::SM2Profile *arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setLayerParallaxMappingEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_SM2Profile_setLayerParallaxOcclusionMappingEnabled___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainMaterialGeneratorA::SM2Profile *arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setLayerParallaxOcclusionMappingEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_SM2Profile_isLayerOcclusionMappingEnabled___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainMaterialGeneratorA::SM2Profile *arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *)jarg1; 
  {
    try {
      result = (bool)((Ogre::TerrainMaterialGeneratorA::SM2Profile const *)arg1)->isLayerOcclusionMappingEnabled();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_SM2Profile_isLayerSpecularMappingEnabled___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainMaterialGeneratorA::SM2Profile *arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *)jarg1; 
  {
    try {
      result = (bool)((Ogre::TerrainMaterialGeneratorA::SM2Profile const *)arg1)->isLayerSpecularMappingEnabled();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_SM2Profile_setLayerSpecularMappingEnabled___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainMaterialGeneratorA::SM2Profile *arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setLayerSpecularMappingEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_SM2Profile_setReceiveDynamicShadowsPSSM___(void * jarg1, void * jarg2) {
  Ogre::TerrainMaterialGeneratorA::SM2Profile *arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *) 0 ;
  Ogre::PSSMShadowCameraSetup *arg2 = (Ogre::PSSMShadowCameraSetup *) 0 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *)jarg1; 
  arg2 = (Ogre::PSSMShadowCameraSetup *)jarg2; 
  {
    try {
      (arg1)->setReceiveDynamicShadowsPSSM(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_SM2Profile_getReceiveDynamicShadowsPSSM___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainMaterialGeneratorA::SM2Profile *arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *) 0 ;
  Ogre::PSSMShadowCameraSetup *result = 0 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *)jarg1; 
  {
    try {
      result = (Ogre::PSSMShadowCameraSetup *)((Ogre::TerrainMaterialGeneratorA::SM2Profile const *)arg1)->getReceiveDynamicShadowsPSSM();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_SM2Profile_setLightmapEnabled___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainMaterialGeneratorA::SM2Profile *arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setLightmapEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_SM2Profile_setCompositeMapEnabled___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainMaterialGeneratorA::SM2Profile *arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setCompositeMapEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_SM2Profile_setReceiveDynamicShadowsEnabled___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainMaterialGeneratorA::SM2Profile *arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setReceiveDynamicShadowsEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_SM2Profile_setReceiveDynamicShadowsLowLod___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainMaterialGeneratorA::SM2Profile *arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA::SM2Profile *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setReceiveDynamicShadowsLowLod(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_setLayerNormalMappingEnabled___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setLayerNormalMappingEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_setLayerSpecularMappingEnabled___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setLayerSpecularMappingEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_getReceiveDynamicShadowsEnabled___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  {
    try {
      result = (bool)((Ogre::TerrainMaterialGeneratorA const *)arg1)->getReceiveDynamicShadowsEnabled();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_setReceiveDynamicShadowsEnabled___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setReceiveDynamicShadowsEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_setReceiveDynamicShadowsLowLod___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setReceiveDynamicShadowsLowLod(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_getReceiveDynamicShadowsLowLod___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  {
    try {
      result = (bool)((Ogre::TerrainMaterialGeneratorA const *)arg1)->getReceiveDynamicShadowsLowLod();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_isLightmapEnabled___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  {
    try {
      result = (bool)((Ogre::TerrainMaterialGeneratorA const *)arg1)->isLightmapEnabled();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_setCompositeMapEnabled___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setCompositeMapEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_isCompositeMapEnabled___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  {
    try {
      result = (bool)((Ogre::TerrainMaterialGeneratorA const *)arg1)->isCompositeMapEnabled();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_getActiveProfile___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  Ogre::TerrainMaterialGenerator::Profile *result = 0 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  {
    try {
      result = (Ogre::TerrainMaterialGenerator::Profile *)((Ogre::TerrainMaterialGeneratorA const *)arg1)->getActiveProfile();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_isVertexCompressionSupported___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  {
    try {
      result = (bool)((Ogre::TerrainMaterialGeneratorA const *)arg1)->isVertexCompressionSupported();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_requestOptions___(void * jarg1, void * jarg2) {
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  Ogre::Terrain *arg2 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  arg2 = (Ogre::Terrain *)jarg2; 
  {
    try {
      (arg1)->requestOptions(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_generate___(void * jarg1, void * jarg2) {
  void * jresult ;
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  Ogre::Terrain *arg2 = (Ogre::Terrain *) 0 ;
  Ogre::MaterialPtr result;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  arg2 = (Ogre::Terrain *)jarg2; 
  {
    try {
      result = (arg1)->generate((Ogre::Terrain const *)arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::MaterialPtr((const Ogre::MaterialPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_generateForCompositeMap___(void * jarg1, void * jarg2) {
  void * jresult ;
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  Ogre::Terrain *arg2 = (Ogre::Terrain *) 0 ;
  Ogre::MaterialPtr result;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  arg2 = (Ogre::Terrain *)jarg2; 
  {
    try {
      result = (arg1)->generateForCompositeMap((Ogre::Terrain const *)arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::MaterialPtr((const Ogre::MaterialPtr &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_setLightmapEnabled___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setLightmapEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_getMaxLayers___(void * jarg1, void * jarg2) {
  unsigned char jresult ;
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  Ogre::Terrain *arg2 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 result;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  arg2 = (Ogre::Terrain *)jarg2; 
  {
    try {
      result = (Ogre::uint8)((Ogre::TerrainMaterialGeneratorA const *)arg1)->getMaxLayers((Ogre::Terrain const *)arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_updateParams___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  Ogre::MaterialPtr *arg2 = 0 ;
  Ogre::Terrain *arg3 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  arg2 = (Ogre::MaterialPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Terrain *)jarg3; 
  {
    try {
      (arg1)->updateParams((Ogre::MaterialPtr const &)*arg2,(Ogre::Terrain const *)arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_updateParamsForCompositeMap___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::TerrainMaterialGeneratorA *arg1 = (Ogre::TerrainMaterialGeneratorA *) 0 ;
  Ogre::MaterialPtr *arg2 = 0 ;
  Ogre::Terrain *arg3 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::TerrainMaterialGeneratorA *)jarg1; 
  arg2 = (Ogre::MaterialPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Terrain *)jarg3; 
  {
    try {
      (arg1)->updateParamsForCompositeMap((Ogre::MaterialPtr const &)*arg2,(Ogre::Terrain const *)arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainLayerBlendMap___(void * jarg1, unsigned char jarg2, void * jarg3) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  Ogre::HardwarePixelBuffer *arg3 = (Ogre::HardwarePixelBuffer *) 0 ;
  Ogre::TerrainLayerBlendMap *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  arg3 = (Ogre::HardwarePixelBuffer *)jarg3; 
  {
    try {
      result = (Ogre::TerrainLayerBlendMap *)new Ogre::TerrainLayerBlendMap(arg1,arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TerrainLayerBlendMap___(void * jarg1) {
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_getParent___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  Ogre::Terrain *result = 0 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  {
    try {
      result = (Ogre::Terrain *)((Ogre::TerrainLayerBlendMap const *)arg1)->getParent();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_getLayerIndex___(void * jarg1) {
  unsigned char jresult ;
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  Ogre::uint8 result;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  {
    try {
      result = (Ogre::uint8)((Ogre::TerrainLayerBlendMap const *)arg1)->getLayerIndex();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_convertWorldToUVSpace___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Real *arg3 = (Ogre::Real *) 0 ;
  Ogre::Real *arg4 = (Ogre::Real *) 0 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Real *)jarg3; 
  arg4 = (Ogre::Real *)jarg4; 
  {
    try {
      (arg1)->convertWorldToUVSpace((Ogre::Vector3 const &)*arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_convertUVToWorldSpace___(void * jarg1, float jarg2, float jarg3, void * jarg4) {
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Vector3 *arg4 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Vector3 *)jarg4; 
  {
    try {
      (arg1)->convertUVToWorldSpace(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_convertUVToImageSpace___(void * jarg1, float jarg2, float jarg3, void * jarg4, void * jarg5) {
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  size_t *arg4 = (size_t *) 0 ;
  size_t *arg5 = (size_t *) 0 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (size_t *)jarg4; 
  arg5 = (size_t *)jarg5; 
  {
    try {
      (arg1)->convertUVToImageSpace(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_convertImageToUVSpace___(void * jarg1, unsigned long jarg2, unsigned long jarg3, void * jarg4, void * jarg5) {
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Ogre::Real *arg4 = (Ogre::Real *) 0 ;
  Ogre::Real *arg5 = (Ogre::Real *) 0 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (Ogre::Real *)jarg4; 
  arg5 = (Ogre::Real *)jarg5; 
  {
    try {
      (arg1)->convertImageToUVSpace(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_convertImageToTerrainSpace___(void * jarg1, unsigned long jarg2, unsigned long jarg3, void * jarg4, void * jarg5) {
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Ogre::Real *arg4 = (Ogre::Real *) 0 ;
  Ogre::Real *arg5 = (Ogre::Real *) 0 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (Ogre::Real *)jarg4; 
  arg5 = (Ogre::Real *)jarg5; 
  {
    try {
      (arg1)->convertImageToTerrainSpace(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_convertTerrainToImageSpace___(void * jarg1, float jarg2, float jarg3, void * jarg4, void * jarg5) {
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  size_t *arg4 = (size_t *) 0 ;
  size_t *arg5 = (size_t *) 0 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (size_t *)jarg4; 
  arg5 = (size_t *)jarg5; 
  {
    try {
      (arg1)->convertTerrainToImageSpace(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_getBlendValue___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  float jresult ;
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  Ogre::uint32 arg2 ;
  Ogre::uint32 arg3 ;
  float result;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  arg3 = (Ogre::uint32)jarg3; 
  {
    try {
      result = (float)(arg1)->getBlendValue(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_setBlendValue___(void * jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4) {
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  Ogre::uint32 arg2 ;
  Ogre::uint32 arg3 ;
  float arg4 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  arg3 = (Ogre::uint32)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      (arg1)->setBlendValue(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_getBlendPointer___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  float *result = 0 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  {
    try {
      result = (float *)(arg1)->getBlendPointer();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_dirty___(void * jarg1) {
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  {
    try {
      (arg1)->dirty();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_dirtyRect___(void * jarg1, void * jarg2) {
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  Ogre::Rect *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  arg2 = (Ogre::Rect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->dirtyRect((Ogre::Rect const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_blit__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  Ogre::PixelBox *arg2 = 0 ;
  Ogre::Box *arg3 = 0 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  arg2 = (Ogre::PixelBox *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::PixelBox const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Box *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Box const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->blit((Ogre::PixelBox const &)*arg2,(Ogre::Box const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_blit__SWIG_1___(void * jarg1, void * jarg2) {
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  Ogre::PixelBox *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  arg2 = (Ogre::PixelBox *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::PixelBox const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->blit((Ogre::PixelBox const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_loadImage__SWIG_0___(void * jarg1, void * jarg2) {
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  Ogre::Image *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  arg2 = (Ogre::Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Image const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->loadImage((Ogre::Image const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_loadImage__SWIG_1___(void * jarg1, void * jarg2, char * jarg3) {
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  Ogre::DataStreamPtr *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  arg2 = (Ogre::DataStreamPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::DataStreamPtr & type is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->loadImage(*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_loadImage__SWIG_2___(void * jarg1, void * jarg2) {
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  Ogre::DataStreamPtr *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  arg2 = (Ogre::DataStreamPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::DataStreamPtr & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->loadImage(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_loadImage__SWIG_3___(void * jarg1, char * jarg2, char * jarg3) {
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->loadImage((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLayerBlendMap_update___(void * jarg1) {
  Ogre::TerrainLayerBlendMap *arg1 = (Ogre::TerrainLayerBlendMap *) 0 ;
  
  arg1 = (Ogre::TerrainLayerBlendMap *)jarg1; 
  {
    try {
      (arg1)->update();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainQuadTreeNode___(void * jarg1, void * jarg2, unsigned short jarg3, unsigned short jarg4, unsigned short jarg5, unsigned short jarg6, unsigned short jarg7) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::TerrainQuadTreeNode *arg2 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::uint16 arg3 ;
  Ogre::uint16 arg4 ;
  Ogre::uint16 arg5 ;
  Ogre::uint16 arg6 ;
  Ogre::uint16 arg7 ;
  Ogre::TerrainQuadTreeNode *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::TerrainQuadTreeNode *)jarg2; 
  arg3 = (Ogre::uint16)jarg3; 
  arg4 = (Ogre::uint16)jarg4; 
  arg5 = (Ogre::uint16)jarg5; 
  arg6 = (Ogre::uint16)jarg6; 
  arg7 = (Ogre::uint16)jarg7; 
  {
    try {
      result = (Ogre::TerrainQuadTreeNode *)new Ogre::TerrainQuadTreeNode(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TerrainQuadTreeNode___(void * jarg1) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_getXOffset___(void * jarg1) {
  unsigned short jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      result = (Ogre::uint16)((Ogre::TerrainQuadTreeNode const *)arg1)->getXOffset();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_getYOffset___(void * jarg1) {
  unsigned short jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      result = (Ogre::uint16)((Ogre::TerrainQuadTreeNode const *)arg1)->getYOffset();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_isLeaf___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      result = (bool)((Ogre::TerrainQuadTreeNode const *)arg1)->isLeaf();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_getBaseLod___(void * jarg1) {
  unsigned short jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      result = (Ogre::uint16)((Ogre::TerrainQuadTreeNode const *)arg1)->getBaseLod();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_getLodCount___(void * jarg1) {
  unsigned short jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      result = (Ogre::uint16)((Ogre::TerrainQuadTreeNode const *)arg1)->getLodCount();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_getChild___(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  unsigned short arg2 ;
  Ogre::TerrainQuadTreeNode *result = 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  {
    try {
      result = (Ogre::TerrainQuadTreeNode *)((Ogre::TerrainQuadTreeNode const *)arg1)->getChild(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_getParent___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::TerrainQuadTreeNode *result = 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      result = (Ogre::TerrainQuadTreeNode *)((Ogre::TerrainQuadTreeNode const *)arg1)->getParent();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_getTerrain___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::Terrain *result = 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      result = (Ogre::Terrain *)((Ogre::TerrainQuadTreeNode const *)arg1)->getTerrain();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_prepare__SWIG_0___(void * jarg1) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      (arg1)->prepare();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_prepare__SWIG_1___(void * jarg1, void * jarg2) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::StreamSerialiser *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (Ogre::StreamSerialiser *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::StreamSerialiser & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->prepare(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_load__SWIG_0___(void * jarg1) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      (arg1)->load();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_load__SWIG_1___(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::uint16 arg2 ;
  Ogre::uint16 arg3 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  arg3 = (Ogre::uint16)jarg3; 
  {
    try {
      (arg1)->load(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_loadSelf___(void * jarg1) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      (arg1)->loadSelf();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_unload__SWIG_0___(void * jarg1) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      (arg1)->unload();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_unload__SWIG_1___(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::uint16 arg2 ;
  Ogre::uint16 arg3 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  arg3 = (Ogre::uint16)jarg3; 
  {
    try {
      (arg1)->unload(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_unprepare___(void * jarg1) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      (arg1)->unprepare();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_save___(void * jarg1, void * jarg2) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::StreamSerialiser *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (Ogre::StreamSerialiser *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::StreamSerialiser & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->save(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_LodLevel_batchSize_set___(void * jarg1, unsigned short jarg2) {
  Ogre::TerrainQuadTreeNode::LodLevel *arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *) 0 ;
  Ogre::uint16 arg2 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  if (arg1) (arg1)->batchSize = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_LodLevel_batchSize_get___(void * jarg1) {
  unsigned short jresult ;
  Ogre::TerrainQuadTreeNode::LodLevel *arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *)jarg1; 
  result = (Ogre::uint16) ((arg1)->batchSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_LodLevel_gpuIndexData_set___(void * jarg1, void * jarg2) {
  Ogre::TerrainQuadTreeNode::LodLevel *arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *) 0 ;
  Ogre::IndexData *arg2 = (Ogre::IndexData *) 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *)jarg1; 
  arg2 = (Ogre::IndexData *)jarg2; 
  if (arg1) (arg1)->gpuIndexData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_LodLevel_gpuIndexData_get___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainQuadTreeNode::LodLevel *arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *) 0 ;
  Ogre::IndexData *result = 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *)jarg1; 
  result = (Ogre::IndexData *) ((arg1)->gpuIndexData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_LodLevel_maxHeightDelta_set___(void * jarg1, float jarg2) {
  Ogre::TerrainQuadTreeNode::LodLevel *arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  if (arg1) (arg1)->maxHeightDelta = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_LodLevel_maxHeightDelta_get___(void * jarg1) {
  float jresult ;
  Ogre::TerrainQuadTreeNode::LodLevel *arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *)jarg1; 
  result = (Ogre::Real) ((arg1)->maxHeightDelta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_LodLevel_calcMaxHeightDelta_set___(void * jarg1, float jarg2) {
  Ogre::TerrainQuadTreeNode::LodLevel *arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  if (arg1) (arg1)->calcMaxHeightDelta = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_LodLevel_calcMaxHeightDelta_get___(void * jarg1) {
  float jresult ;
  Ogre::TerrainQuadTreeNode::LodLevel *arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *)jarg1; 
  result = (Ogre::Real) ((arg1)->calcMaxHeightDelta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_LodLevel_lastTransitionDist_set___(void * jarg1, float jarg2) {
  Ogre::TerrainQuadTreeNode::LodLevel *arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  if (arg1) (arg1)->lastTransitionDist = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_LodLevel_lastTransitionDist_get___(void * jarg1) {
  float jresult ;
  Ogre::TerrainQuadTreeNode::LodLevel *arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *)jarg1; 
  result = (Ogre::Real) ((arg1)->lastTransitionDist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_LodLevel_lastCFactor_set___(void * jarg1, float jarg2) {
  Ogre::TerrainQuadTreeNode::LodLevel *arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  if (arg1) (arg1)->lastCFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_LodLevel_lastCFactor_get___(void * jarg1) {
  float jresult ;
  Ogre::TerrainQuadTreeNode::LodLevel *arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *)jarg1; 
  result = (Ogre::Real) ((arg1)->lastCFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainQuadTreeNode_LodLevel___() {
  void * jresult ;
  Ogre::TerrainQuadTreeNode::LodLevel *result = 0 ;
  
  {
    try {
      result = (Ogre::TerrainQuadTreeNode::LodLevel *)new Ogre::TerrainQuadTreeNode::LodLevel();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TerrainQuadTreeNode_LodLevel___(void * jarg1) {
  Ogre::TerrainQuadTreeNode::LodLevel *arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *) 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode::LodLevel *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_getLodLevel___(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::uint16 arg2 ;
  Ogre::TerrainQuadTreeNode::LodLevel *result = 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  {
    try {
      result = (Ogre::TerrainQuadTreeNode::LodLevel *)(arg1)->getLodLevel(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_preDeltaCalculation___(void * jarg1, void * jarg2) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::Rect *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (Ogre::Rect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->preDeltaCalculation((Ogre::Rect const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_notifyDelta___(void * jarg1, unsigned short jarg2, unsigned short jarg3, unsigned short jarg4, float jarg5) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::uint16 arg2 ;
  Ogre::uint16 arg3 ;
  Ogre::uint16 arg4 ;
  Ogre::Real arg5 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  arg3 = (Ogre::uint16)jarg3; 
  arg4 = (Ogre::uint16)jarg4; 
  arg5 = (Ogre::Real)jarg5; 
  {
    try {
      (arg1)->notifyDelta(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_postDeltaCalculation___(void * jarg1, void * jarg2) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::Rect *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (Ogre::Rect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->postDeltaCalculation((Ogre::Rect const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_finaliseDeltaValues___(void * jarg1, void * jarg2) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::Rect *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (Ogre::Rect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->finaliseDeltaValues((Ogre::Rect const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_assignVertexData___(void * jarg1, unsigned short jarg2, unsigned short jarg3, unsigned short jarg4, unsigned int jarg5) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::uint16 arg2 ;
  Ogre::uint16 arg3 ;
  Ogre::uint16 arg4 ;
  Ogre::uint arg5 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  arg3 = (Ogre::uint16)jarg3; 
  arg4 = (Ogre::uint16)jarg4; 
  arg5 = (Ogre::uint)jarg5; 
  {
    try {
      (arg1)->assignVertexData(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_useAncestorVertexData___(void * jarg1, void * jarg2, unsigned short jarg3, unsigned short jarg4) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::TerrainQuadTreeNode *arg2 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::uint16 arg3 ;
  Ogre::uint16 arg4 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (Ogre::TerrainQuadTreeNode *)jarg2; 
  arg3 = (Ogre::uint16)jarg3; 
  arg4 = (Ogre::uint16)jarg4; 
  {
    try {
      (arg1)->useAncestorVertexData(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_updateVertexData___(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  bool arg2 ;
  bool arg3 ;
  Ogre::Rect *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = (Ogre::Rect *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->updateVertexData(arg2,arg3,(Ogre::Rect const &)*arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_mergeIntoBounds___(void * jarg1, long jarg2, long jarg3, void * jarg4) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  long arg2 ;
  long arg3 ;
  Ogre::Vector3 *arg4 = 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (Ogre::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->mergeIntoBounds(arg2,arg3,(Ogre::Vector3 const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_resetBounds___(void * jarg1, void * jarg2) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::Rect *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (Ogre::Rect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->resetBounds((Ogre::Rect const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_rectIntersectsNode___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::Rect *arg2 = 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (Ogre::Rect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->rectIntersectsNode((Ogre::Rect const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_rectContainsNode___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::Rect *arg2 = 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (Ogre::Rect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->rectContainsNode((Ogre::Rect const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_pointIntersectsNode___(void * jarg1, long jarg2, long jarg3) {
  unsigned int jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  long arg2 ;
  long arg3 ;
  bool result;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  {
    try {
      result = (bool)(arg1)->pointIntersectsNode(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_getBoundingBox___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::AxisAlignedBox *result = 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      result = (Ogre::AxisAlignedBox *) &((Ogre::TerrainQuadTreeNode const *)arg1)->getBoundingBox();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_getBoundingRadius___(void * jarg1) {
  float jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::TerrainQuadTreeNode const *)arg1)->getBoundingRadius();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_getLocalCentre___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      result = (Ogre::Vector3 *) &((Ogre::TerrainQuadTreeNode const *)arg1)->getLocalCentre();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_getMinHeight___(void * jarg1) {
  float jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::TerrainQuadTreeNode const *)arg1)->getMinHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_getMaxHeight___(void * jarg1) {
  float jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::TerrainQuadTreeNode const *)arg1)->getMaxHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_calculateCurrentLod___(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  Ogre::Camera *arg2 = (Ogre::Camera *) 0 ;
  Ogre::Real arg3 ;
  bool result;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (Ogre::Camera *)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (bool)(arg1)->calculateCurrentLod((Ogre::Camera const *)arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_getCurrentLod___(void * jarg1) {
  int jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  int result;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      result = (int)((Ogre::TerrainQuadTreeNode const *)arg1)->getCurrentLod();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_isRenderedAtCurrentLod___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      result = (bool)((Ogre::TerrainQuadTreeNode const *)arg1)->isRenderedAtCurrentLod();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_isSelfOrChildRenderedAtCurrentLod___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      result = (bool)((Ogre::TerrainQuadTreeNode const *)arg1)->isSelfOrChildRenderedAtCurrentLod();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_setCurrentLod___(void * jarg1, int jarg2) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  int arg2 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setCurrentLod(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_getLodTransition___(void * jarg1) {
  float jresult ;
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  float result;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  {
    try {
      result = (float)((Ogre::TerrainQuadTreeNode const *)arg1)->getLodTransition();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_setLodTransition___(void * jarg1, float jarg2) {
  Ogre::TerrainQuadTreeNode *arg1 = (Ogre::TerrainQuadTreeNode *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::TerrainQuadTreeNode *)jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      (arg1)->setLodTransition(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_POSITION_BUFFER_set___(unsigned short jarg1) {
  unsigned short arg1 ;
  
  arg1 = (unsigned short)jarg1; 
  Ogre::TerrainQuadTreeNode::POSITION_BUFFER = arg1;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_POSITION_BUFFER_get___() {
  unsigned short jresult ;
  unsigned short result;
  
  result = (unsigned short)Ogre::TerrainQuadTreeNode::POSITION_BUFFER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_DELTA_BUFFER_set___(unsigned short jarg1) {
  unsigned short arg1 ;
  
  arg1 = (unsigned short)jarg1; 
  Ogre::TerrainQuadTreeNode::DELTA_BUFFER = arg1;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TerrainQuadTreeNode_DELTA_BUFFER_get___() {
  unsigned short jresult ;
  unsigned short result;
  
  result = (unsigned short)Ogre::TerrainQuadTreeNode::DELTA_BUFFER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_LayerInstanceList_Clear___(void * jarg1) {
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = (std::vector< Ogre::Terrain::LayerInstance > *) 0 ;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_LayerInstanceList_Add___(void * jarg1, void * jarg2) {
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = (std::vector< Ogre::Terrain::LayerInstance > *) 0 ;
  Ogre::Terrain::LayerInstance *arg2 = 0 ;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1; 
  arg2 = (Ogre::Terrain::LayerInstance *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Terrain::LayerInstance const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->push_back((Ogre::Terrain::LayerInstance const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_orgfogre_LayerInstanceList_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = (std::vector< Ogre::Terrain::LayerInstance > *) 0 ;
  std::vector< Ogre::Terrain::LayerInstance >::size_type result;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1; 
  {
    try {
      result = ((std::vector< Ogre::Terrain::LayerInstance > const *)arg1)->size();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_orgfogre_LayerInstanceList_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = (std::vector< Ogre::Terrain::LayerInstance > *) 0 ;
  std::vector< Ogre::Terrain::LayerInstance >::size_type result;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1; 
  {
    try {
      result = ((std::vector< Ogre::Terrain::LayerInstance > const *)arg1)->capacity();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_LayerInstanceList_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = (std::vector< Ogre::Terrain::LayerInstance > *) 0 ;
  std::vector< Ogre::Terrain::LayerInstance >::size_type arg2 ;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1; 
  arg2 = (std::vector< Ogre::Terrain::LayerInstance >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_LayerInstanceList__SWIG_0___() {
  void * jresult ;
  std::vector< Ogre::Terrain::LayerInstance > *result = 0 ;
  
  {
    try {
      result = (std::vector< Ogre::Terrain::LayerInstance > *)new std::vector< Ogre::Terrain::LayerInstance >();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_LayerInstanceList__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = 0 ;
  std::vector< Ogre::Terrain::LayerInstance > *result = 0 ;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Ogre::Terrain::LayerInstance > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< Ogre::Terrain::LayerInstance > *)new std::vector< Ogre::Terrain::LayerInstance >((std::vector< Ogre::Terrain::LayerInstance > const &)*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_LayerInstanceList__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Ogre::Terrain::LayerInstance > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< Ogre::Terrain::LayerInstance > *)new_std_vector_Sl_Ogre_Terrain_LayerInstance_Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_LayerInstanceList_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = (std::vector< Ogre::Terrain::LayerInstance > *) 0 ;
  int arg2 ;
  Ogre::Terrain::LayerInstance result;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::Terrain::LayerInstance((const Ogre::Terrain::LayerInstance &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_LayerInstanceList_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = (std::vector< Ogre::Terrain::LayerInstance > *) 0 ;
  int arg2 ;
  std::vector< Ogre::Terrain::LayerInstance >::value_type *result = 0 ;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< Ogre::Terrain::LayerInstance >::value_type *) &std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_LayerInstanceList_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = (std::vector< Ogre::Terrain::LayerInstance > *) 0 ;
  int arg2 ;
  Ogre::Terrain::LayerInstance *arg3 = 0 ;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Ogre::Terrain::LayerInstance *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Terrain::LayerInstance const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__setitem(arg1,arg2,(Ogre::Terrain::LayerInstance const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_LayerInstanceList_AddRange___(void * jarg1, void * jarg2) {
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = (std::vector< Ogre::Terrain::LayerInstance > *) 0 ;
  std::vector< Ogre::Terrain::LayerInstance > *arg2 = 0 ;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1; 
  arg2 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Ogre::Terrain::LayerInstance > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__AddRange(arg1,(std::vector< Ogre::Terrain::LayerInstance > const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_LayerInstanceList_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = (std::vector< Ogre::Terrain::LayerInstance > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Ogre::Terrain::LayerInstance > *result = 0 ;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< Ogre::Terrain::LayerInstance > *)std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_LayerInstanceList_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = (std::vector< Ogre::Terrain::LayerInstance > *) 0 ;
  int arg2 ;
  Ogre::Terrain::LayerInstance *arg3 = 0 ;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Ogre::Terrain::LayerInstance *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Terrain::LayerInstance const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__Insert(arg1,arg2,(Ogre::Terrain::LayerInstance const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_LayerInstanceList_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = (std::vector< Ogre::Terrain::LayerInstance > *) 0 ;
  int arg2 ;
  std::vector< Ogre::Terrain::LayerInstance > *arg3 = 0 ;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Ogre::Terrain::LayerInstance > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__InsertRange(arg1,arg2,(std::vector< Ogre::Terrain::LayerInstance > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_LayerInstanceList_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = (std::vector< Ogre::Terrain::LayerInstance > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_LayerInstanceList_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = (std::vector< Ogre::Terrain::LayerInstance > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_LayerInstanceList_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  Ogre::Terrain::LayerInstance *arg1 = 0 ;
  int arg2 ;
  std::vector< Ogre::Terrain::LayerInstance > *result = 0 ;
  
  arg1 = (Ogre::Terrain::LayerInstance *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Terrain::LayerInstance const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< Ogre::Terrain::LayerInstance > *)std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__Repeat((Ogre::Terrain::LayerInstance const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_LayerInstanceList_Reverse__SWIG_0___(void * jarg1) {
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = (std::vector< Ogre::Terrain::LayerInstance > *) 0 ;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1; 
  {
    try {
      std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__Reverse__SWIG_0(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_LayerInstanceList_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = (std::vector< Ogre::Terrain::LayerInstance > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_LayerInstanceList_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = (std::vector< Ogre::Terrain::LayerInstance > *) 0 ;
  int arg2 ;
  std::vector< Ogre::Terrain::LayerInstance > *arg3 = 0 ;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Ogre::Terrain::LayerInstance > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_Ogre_Terrain_LayerInstance_Sg__SetRange(arg1,arg2,(std::vector< Ogre::Terrain::LayerInstance > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_LayerInstanceList___(void * jarg1) {
  std::vector< Ogre::Terrain::LayerInstance > *arg1 = (std::vector< Ogre::Terrain::LayerInstance > *) 0 ;
  
  arg1 = (std::vector< Ogre::Terrain::LayerInstance > *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainRayResult__SWIG_0___() {
  void * jresult ;
  std::pair< bool,Ogre::Vector3 > *result = 0 ;
  
  {
    try {
      result = (std::pair< bool,Ogre::Vector3 > *)new std::pair< bool,Ogre::Vector3 >();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainRayResult__SWIG_1___(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  bool arg1 ;
  Ogre::Vector< 3,float > arg2 ;
  Ogre::Vector< 3,float > *argp2 ;
  std::pair< bool,Ogre::Vector3 > *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  argp2 = (Ogre::Vector< 3,float > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ogre::Vector< 3,float >", 0);
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< bool,Ogre::Vector3 > *)new std::pair< bool,Ogre::Vector3 >(arg1,arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainRayResult__SWIG_2___(void * jarg1) {
  void * jresult ;
  std::pair< bool,Ogre::Vector3 > *arg1 = 0 ;
  std::pair< bool,Ogre::Vector3 > *result = 0 ;
  
  arg1 = (std::pair< bool,Ogre::Vector3 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< bool,Ogre::Vector3 > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::pair< bool,Ogre::Vector3 > *)new std::pair< bool,Ogre::Vector3 >((std::pair< bool,Ogre::Vector3 > const &)*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainRayResult_first_set___(void * jarg1, unsigned int jarg2) {
  std::pair< bool,Ogre::Vector3 > *arg1 = (std::pair< bool,Ogre::Vector3 > *) 0 ;
  bool arg2 ;
  
  arg1 = (std::pair< bool,Ogre::Vector3 > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainRayResult_first_get___(void * jarg1) {
  unsigned int jresult ;
  std::pair< bool,Ogre::Vector3 > *arg1 = (std::pair< bool,Ogre::Vector3 > *) 0 ;
  bool result;
  
  arg1 = (std::pair< bool,Ogre::Vector3 > *)jarg1; 
  result = (bool) ((arg1)->first);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainRayResult_second_set___(void * jarg1, void * jarg2) {
  std::pair< bool,Ogre::Vector3 > *arg1 = (std::pair< bool,Ogre::Vector3 > *) 0 ;
  Ogre::Vector< 3,float > *arg2 = (Ogre::Vector< 3,float > *) 0 ;
  
  arg1 = (std::pair< bool,Ogre::Vector3 > *)jarg1; 
  arg2 = (Ogre::Vector< 3,float > *)jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainRayResult_second_get___(void * jarg1) {
  void * jresult ;
  std::pair< bool,Ogre::Vector3 > *arg1 = (std::pair< bool,Ogre::Vector3 > *) 0 ;
  Ogre::Vector< 3,float > *result = 0 ;
  
  arg1 = (std::pair< bool,Ogre::Vector3 > *)jarg1; 
  result = (Ogre::Vector< 3,float > *)& ((arg1)->second);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TerrainRayResult___(void * jarg1) {
  std::pair< bool,Ogre::Vector3 > *arg1 = (std::pair< bool,Ogre::Vector3 > *) 0 ;
  
  arg1 = (std::pair< bool,Ogre::Vector3 > *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_Terrain___(void * jarg1) {
  void * jresult ;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::Terrain *result = 0 ;
  
  arg1 = (Ogre::SceneManager *)jarg1; 
  {
    try {
      result = (Ogre::Terrain *)new Ogre::Terrain(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_Terrain___(void * jarg1) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_TERRAIN_CHUNK_ID_get___() {
  unsigned int jresult ;
  Ogre::uint32 result;
  
  result = (Ogre::uint32)(Ogre::uint32)Ogre::Terrain::TERRAIN_CHUNK_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_TERRAIN_CHUNK_VERSION_get___() {
  unsigned short jresult ;
  Ogre::uint16 result;
  
  result = (Ogre::uint16)(Ogre::uint16)Ogre::Terrain::TERRAIN_CHUNK_VERSION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_TERRAIN_MAX_BATCH_SIZE_get___() {
  unsigned short jresult ;
  Ogre::uint16 result;
  
  result = (Ogre::uint16)(Ogre::uint16)Ogre::Terrain::TERRAIN_MAX_BATCH_SIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_TERRAINLAYERDECLARATION_CHUNK_ID_get___() {
  unsigned int jresult ;
  Ogre::uint32 result;
  
  result = (Ogre::uint32)(Ogre::uint32)Ogre::Terrain::TERRAINLAYERDECLARATION_CHUNK_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_TERRAINLAYERDECLARATION_CHUNK_VERSION_get___() {
  unsigned short jresult ;
  Ogre::uint16 result;
  
  result = (Ogre::uint16)(Ogre::uint16)Ogre::Terrain::TERRAINLAYERDECLARATION_CHUNK_VERSION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_TERRAINLAYERSAMPLER_CHUNK_ID_get___() {
  unsigned int jresult ;
  Ogre::uint32 result;
  
  result = (Ogre::uint32)(Ogre::uint32)Ogre::Terrain::TERRAINLAYERSAMPLER_CHUNK_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_TERRAINLAYERSAMPLER_CHUNK_VERSION_get___() {
  unsigned short jresult ;
  Ogre::uint16 result;
  
  result = (Ogre::uint16)(Ogre::uint16)Ogre::Terrain::TERRAINLAYERSAMPLER_CHUNK_VERSION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_TERRAINLAYERSAMPLERELEMENT_CHUNK_ID_get___() {
  unsigned int jresult ;
  Ogre::uint32 result;
  
  result = (Ogre::uint32)(Ogre::uint32)Ogre::Terrain::TERRAINLAYERSAMPLERELEMENT_CHUNK_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_TERRAINLAYERSAMPLERELEMENT_CHUNK_VERSION_get___() {
  unsigned short jresult ;
  Ogre::uint16 result;
  
  result = (Ogre::uint16)(Ogre::uint16)Ogre::Terrain::TERRAINLAYERSAMPLERELEMENT_CHUNK_VERSION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_TERRAINLAYERINSTANCE_CHUNK_ID_get___() {
  unsigned int jresult ;
  Ogre::uint32 result;
  
  result = (Ogre::uint32)(Ogre::uint32)Ogre::Terrain::TERRAINLAYERINSTANCE_CHUNK_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_TERRAINLAYERINSTANCE_CHUNK_VERSION_get___() {
  unsigned short jresult ;
  Ogre::uint16 result;
  
  result = (Ogre::uint16)(Ogre::uint16)Ogre::Terrain::TERRAINLAYERINSTANCE_CHUNK_VERSION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_TERRAINDERIVEDDATA_CHUNK_ID_get___() {
  unsigned int jresult ;
  Ogre::uint32 result;
  
  result = (Ogre::uint32)(Ogre::uint32)Ogre::Terrain::TERRAINDERIVEDDATA_CHUNK_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_TERRAINDERIVEDDATA_CHUNK_VERSION_get___() {
  unsigned short jresult ;
  Ogre::uint16 result;
  
  result = (Ogre::uint16)(Ogre::uint16)Ogre::Terrain::TERRAINDERIVEDDATA_CHUNK_VERSION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_TERRAINGENERALINFO_CHUNK_ID_get___() {
  unsigned int jresult ;
  Ogre::uint32 result;
  
  result = (Ogre::uint32)(Ogre::uint32)Ogre::Terrain::TERRAINGENERALINFO_CHUNK_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_TERRAINGENERALINFO_CHUNK_VERSION_get___() {
  unsigned short jresult ;
  Ogre::uint16 result;
  
  result = (Ogre::uint16)(Ogre::uint16)Ogre::Terrain::TERRAINGENERALINFO_CHUNK_VERSION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_LOD_MORPH_CUSTOM_PARAM_get___() {
  unsigned int jresult ;
  Ogre::uint32 result;
  
  result = (Ogre::uint32)(Ogre::uint32)Ogre::Terrain::LOD_MORPH_CUSTOM_PARAM;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_LayerInstance_worldSize_set___(void * jarg1, float jarg2) {
  Ogre::Terrain::LayerInstance *arg1 = (Ogre::Terrain::LayerInstance *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::Terrain::LayerInstance *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  if (arg1) (arg1)->worldSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Terrain_LayerInstance_worldSize_get___(void * jarg1) {
  float jresult ;
  Ogre::Terrain::LayerInstance *arg1 = (Ogre::Terrain::LayerInstance *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::Terrain::LayerInstance *)jarg1; 
  result = (Ogre::Real) ((arg1)->worldSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_LayerInstance_textureNames_set___(void * jarg1, void * jarg2) {
  Ogre::Terrain::LayerInstance *arg1 = (Ogre::Terrain::LayerInstance *) 0 ;
  Ogre::StringVector *arg2 = (Ogre::StringVector *) 0 ;
  
  arg1 = (Ogre::Terrain::LayerInstance *)jarg1; 
  arg2 = (Ogre::StringVector *)jarg2; 
  if (arg1) (arg1)->textureNames = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_LayerInstance_textureNames_get___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain::LayerInstance *arg1 = (Ogre::Terrain::LayerInstance *) 0 ;
  Ogre::StringVector *result = 0 ;
  
  arg1 = (Ogre::Terrain::LayerInstance *)jarg1; 
  result = (Ogre::StringVector *)& ((arg1)->textureNames);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_Terrain_LayerInstance___() {
  void * jresult ;
  Ogre::Terrain::LayerInstance *result = 0 ;
  
  {
    try {
      result = (Ogre::Terrain::LayerInstance *)new Ogre::Terrain::LayerInstance();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_Terrain_LayerInstance___(void * jarg1) {
  Ogre::Terrain::LayerInstance *arg1 = (Ogre::Terrain::LayerInstance *) 0 ;
  
  arg1 = (Ogre::Terrain::LayerInstance *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_terrainAlign_set___(void * jarg1, int jarg2) {
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::Terrain::Alignment arg2 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  arg2 = (Ogre::Terrain::Alignment)jarg2; 
  if (arg1) (arg1)->terrainAlign = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_terrainAlign_get___(void * jarg1) {
  int jresult ;
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::Terrain::Alignment result;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  result = (Ogre::Terrain::Alignment) ((arg1)->terrainAlign);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_terrainSize_set___(void * jarg1, unsigned short jarg2) {
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::uint16 arg2 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  if (arg1) (arg1)->terrainSize = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_terrainSize_get___(void * jarg1) {
  unsigned short jresult ;
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  result = (Ogre::uint16) ((arg1)->terrainSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_maxBatchSize_set___(void * jarg1, unsigned short jarg2) {
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::uint16 arg2 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  if (arg1) (arg1)->maxBatchSize = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_maxBatchSize_get___(void * jarg1) {
  unsigned short jresult ;
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  result = (Ogre::uint16) ((arg1)->maxBatchSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_minBatchSize_set___(void * jarg1, unsigned short jarg2) {
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::uint16 arg2 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  if (arg1) (arg1)->minBatchSize = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_minBatchSize_get___(void * jarg1) {
  unsigned short jresult ;
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  result = (Ogre::uint16) ((arg1)->minBatchSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_pos_set___(void * jarg1, void * jarg2) {
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::Vector3 *arg2 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_pos_get___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  result = (Ogre::Vector3 *)& ((arg1)->pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_worldSize_set___(void * jarg1, float jarg2) {
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  if (arg1) (arg1)->worldSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_worldSize_get___(void * jarg1) {
  float jresult ;
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  result = (Ogre::Real) ((arg1)->worldSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_inputImage_set___(void * jarg1, void * jarg2) {
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::Image *arg2 = (Ogre::Image *) 0 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  arg2 = (Ogre::Image *)jarg2; 
  if (arg1) (arg1)->inputImage = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_inputImage_get___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::Image *result = 0 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  result = (Ogre::Image *) ((arg1)->inputImage);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_inputFloat_set___(void * jarg1, void * jarg2) {
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->inputFloat = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_inputFloat_get___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  float *result = 0 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  result = (float *) ((arg1)->inputFloat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_constantHeight_set___(void * jarg1, float jarg2) {
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->constantHeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_constantHeight_get___(void * jarg1) {
  float jresult ;
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  float result;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  result = (float) ((arg1)->constantHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_deleteInputData_set___(void * jarg1, unsigned int jarg2) {
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->deleteInputData = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_deleteInputData_get___(void * jarg1) {
  unsigned int jresult ;
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  bool result;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  result = (bool) ((arg1)->deleteInputData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_inputScale_set___(void * jarg1, float jarg2) {
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  if (arg1) (arg1)->inputScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_inputScale_get___(void * jarg1) {
  float jresult ;
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  result = (Ogre::Real) ((arg1)->inputScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_inputBias_set___(void * jarg1, float jarg2) {
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  if (arg1) (arg1)->inputBias = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_inputBias_get___(void * jarg1) {
  float jresult ;
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  result = (Ogre::Real) ((arg1)->inputBias);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_layerDeclaration_set___(void * jarg1, void * jarg2) {
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::TerrainLayerDeclaration *arg2 = (Ogre::TerrainLayerDeclaration *) 0 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  arg2 = (Ogre::TerrainLayerDeclaration *)jarg2; 
  if (arg1) (arg1)->layerDeclaration = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_layerDeclaration_get___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::TerrainLayerDeclaration *result = 0 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  result = (Ogre::TerrainLayerDeclaration *)& ((arg1)->layerDeclaration);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_layerList_set___(void * jarg1, void * jarg2) {
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::Terrain::LayerInstanceList *arg2 = (Ogre::Terrain::LayerInstanceList *) 0 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  arg2 = (Ogre::Terrain::LayerInstanceList *)jarg2; 
  if (arg1) (arg1)->layerList = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_layerList_get___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  Ogre::Terrain::LayerInstanceList *result = 0 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  result = (Ogre::Terrain::LayerInstanceList *)& ((arg1)->layerList);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_Terrain_ImportData__SWIG_0___() {
  void * jresult ;
  Ogre::Terrain::ImportData *result = 0 ;
  
  {
    try {
      result = (Ogre::Terrain::ImportData *)new Ogre::Terrain::ImportData();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_Terrain_ImportData__SWIG_1___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain::ImportData *arg1 = 0 ;
  Ogre::Terrain::ImportData *result = 0 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Terrain::ImportData const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Ogre::Terrain::ImportData *)new Ogre::Terrain::ImportData((Ogre::Terrain::ImportData const &)*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_ImportData_destroy___(void * jarg1) {
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  {
    try {
      (arg1)->destroy();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_Terrain_ImportData___(void * jarg1) {
  Ogre::Terrain::ImportData *arg1 = (Ogre::Terrain::ImportData *) 0 ;
  
  arg1 = (Ogre::Terrain::ImportData *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getSceneManager___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::SceneManager *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::SceneManager *)((Ogre::Terrain const *)arg1)->getSceneManager();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_Terrain_GpuBufferAllocator___(void * jarg1) {
  Ogre::Terrain::GpuBufferAllocator *arg1 = (Ogre::Terrain::GpuBufferAllocator *) 0 ;
  
  arg1 = (Ogre::Terrain::GpuBufferAllocator *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_GpuBufferAllocator_allocateVertexBuffers___(void * jarg1, void * jarg2, unsigned long jarg3, void * jarg4, void * jarg5) {
  Ogre::Terrain::GpuBufferAllocator *arg1 = (Ogre::Terrain::GpuBufferAllocator *) 0 ;
  Ogre::Terrain *arg2 = (Ogre::Terrain *) 0 ;
  size_t arg3 ;
  Ogre::HardwareVertexBufferSharedPtr *arg4 = 0 ;
  Ogre::HardwareVertexBufferSharedPtr *arg5 = 0 ;
  
  arg1 = (Ogre::Terrain::GpuBufferAllocator *)jarg1; 
  arg2 = (Ogre::Terrain *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (Ogre::HardwareVertexBufferSharedPtr *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::HardwareVertexBufferSharedPtr & type is null", 0);
    return ;
  } 
  arg5 = (Ogre::HardwareVertexBufferSharedPtr *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::HardwareVertexBufferSharedPtr & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->allocateVertexBuffers(arg2,arg3,*arg4,*arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_GpuBufferAllocator_freeVertexBuffers___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::Terrain::GpuBufferAllocator *arg1 = (Ogre::Terrain::GpuBufferAllocator *) 0 ;
  Ogre::HardwareVertexBufferSharedPtr *arg2 = 0 ;
  Ogre::HardwareVertexBufferSharedPtr *arg3 = 0 ;
  
  arg1 = (Ogre::Terrain::GpuBufferAllocator *)jarg1; 
  arg2 = (Ogre::HardwareVertexBufferSharedPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::HardwareVertexBufferSharedPtr const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::HardwareVertexBufferSharedPtr *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::HardwareVertexBufferSharedPtr const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->freeVertexBuffers((Ogre::HardwareVertexBufferSharedPtr const &)*arg2,(Ogre::HardwareVertexBufferSharedPtr const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_GpuBufferAllocator_getSharedIndexBuffer___(void * jarg1, unsigned short jarg2, unsigned short jarg3, unsigned long jarg4, unsigned short jarg5, unsigned short jarg6, unsigned short jarg7, unsigned short jarg8) {
  void * jresult ;
  Ogre::Terrain::GpuBufferAllocator *arg1 = (Ogre::Terrain::GpuBufferAllocator *) 0 ;
  Ogre::uint16 arg2 ;
  Ogre::uint16 arg3 ;
  size_t arg4 ;
  Ogre::uint16 arg5 ;
  Ogre::uint16 arg6 ;
  Ogre::uint16 arg7 ;
  Ogre::uint16 arg8 ;
  Ogre::HardwareIndexBufferSharedPtr result;
  
  arg1 = (Ogre::Terrain::GpuBufferAllocator *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  arg3 = (Ogre::uint16)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (Ogre::uint16)jarg5; 
  arg6 = (Ogre::uint16)jarg6; 
  arg7 = (Ogre::uint16)jarg7; 
  arg8 = (Ogre::uint16)jarg8; 
  {
    try {
      result = (arg1)->getSharedIndexBuffer(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::HardwareIndexBufferSharedPtr((const Ogre::HardwareIndexBufferSharedPtr &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_GpuBufferAllocator_freeAllBuffers___(void * jarg1) {
  Ogre::Terrain::GpuBufferAllocator *arg1 = (Ogre::Terrain::GpuBufferAllocator *) 0 ;
  
  arg1 = (Ogre::Terrain::GpuBufferAllocator *)jarg1; 
  {
    try {
      (arg1)->freeAllBuffers();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_Terrain_DefaultGpuBufferAllocator___() {
  void * jresult ;
  Ogre::Terrain::DefaultGpuBufferAllocator *result = 0 ;
  
  {
    try {
      result = (Ogre::Terrain::DefaultGpuBufferAllocator *)new Ogre::Terrain::DefaultGpuBufferAllocator();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_Terrain_DefaultGpuBufferAllocator___(void * jarg1) {
  Ogre::Terrain::DefaultGpuBufferAllocator *arg1 = (Ogre::Terrain::DefaultGpuBufferAllocator *) 0 ;
  
  arg1 = (Ogre::Terrain::DefaultGpuBufferAllocator *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_DefaultGpuBufferAllocator_allocateVertexBuffers___(void * jarg1, void * jarg2, unsigned long jarg3, void * jarg4, void * jarg5) {
  Ogre::Terrain::DefaultGpuBufferAllocator *arg1 = (Ogre::Terrain::DefaultGpuBufferAllocator *) 0 ;
  Ogre::Terrain *arg2 = (Ogre::Terrain *) 0 ;
  size_t arg3 ;
  Ogre::HardwareVertexBufferSharedPtr *arg4 = 0 ;
  Ogre::HardwareVertexBufferSharedPtr *arg5 = 0 ;
  
  arg1 = (Ogre::Terrain::DefaultGpuBufferAllocator *)jarg1; 
  arg2 = (Ogre::Terrain *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (Ogre::HardwareVertexBufferSharedPtr *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::HardwareVertexBufferSharedPtr & type is null", 0);
    return ;
  } 
  arg5 = (Ogre::HardwareVertexBufferSharedPtr *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::HardwareVertexBufferSharedPtr & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->allocateVertexBuffers(arg2,arg3,*arg4,*arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_DefaultGpuBufferAllocator_freeVertexBuffers___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::Terrain::DefaultGpuBufferAllocator *arg1 = (Ogre::Terrain::DefaultGpuBufferAllocator *) 0 ;
  Ogre::HardwareVertexBufferSharedPtr *arg2 = 0 ;
  Ogre::HardwareVertexBufferSharedPtr *arg3 = 0 ;
  
  arg1 = (Ogre::Terrain::DefaultGpuBufferAllocator *)jarg1; 
  arg2 = (Ogre::HardwareVertexBufferSharedPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::HardwareVertexBufferSharedPtr const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::HardwareVertexBufferSharedPtr *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::HardwareVertexBufferSharedPtr const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->freeVertexBuffers((Ogre::HardwareVertexBufferSharedPtr const &)*arg2,(Ogre::HardwareVertexBufferSharedPtr const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_DefaultGpuBufferAllocator_getSharedIndexBuffer___(void * jarg1, unsigned short jarg2, unsigned short jarg3, unsigned long jarg4, unsigned short jarg5, unsigned short jarg6, unsigned short jarg7, unsigned short jarg8) {
  void * jresult ;
  Ogre::Terrain::DefaultGpuBufferAllocator *arg1 = (Ogre::Terrain::DefaultGpuBufferAllocator *) 0 ;
  Ogre::uint16 arg2 ;
  Ogre::uint16 arg3 ;
  size_t arg4 ;
  Ogre::uint16 arg5 ;
  Ogre::uint16 arg6 ;
  Ogre::uint16 arg7 ;
  Ogre::uint16 arg8 ;
  Ogre::HardwareIndexBufferSharedPtr result;
  
  arg1 = (Ogre::Terrain::DefaultGpuBufferAllocator *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  arg3 = (Ogre::uint16)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (Ogre::uint16)jarg5; 
  arg6 = (Ogre::uint16)jarg6; 
  arg7 = (Ogre::uint16)jarg7; 
  arg8 = (Ogre::uint16)jarg8; 
  {
    try {
      result = (arg1)->getSharedIndexBuffer(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::HardwareIndexBufferSharedPtr((const Ogre::HardwareIndexBufferSharedPtr &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_DefaultGpuBufferAllocator_freeAllBuffers___(void * jarg1) {
  Ogre::Terrain::DefaultGpuBufferAllocator *arg1 = (Ogre::Terrain::DefaultGpuBufferAllocator *) 0 ;
  
  arg1 = (Ogre::Terrain::DefaultGpuBufferAllocator *)jarg1; 
  {
    try {
      (arg1)->freeAllBuffers();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_DefaultGpuBufferAllocator_warmStart___(void * jarg1, unsigned long jarg2, unsigned short jarg3, unsigned short jarg4, unsigned short jarg5) {
  Ogre::Terrain::DefaultGpuBufferAllocator *arg1 = (Ogre::Terrain::DefaultGpuBufferAllocator *) 0 ;
  size_t arg2 ;
  Ogre::uint16 arg3 ;
  Ogre::uint16 arg4 ;
  Ogre::uint16 arg5 ;
  
  arg1 = (Ogre::Terrain::DefaultGpuBufferAllocator *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (Ogre::uint16)jarg3; 
  arg4 = (Ogre::uint16)jarg4; 
  arg5 = (Ogre::uint16)jarg5; 
  {
    try {
      (arg1)->warmStart(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_setGpuBufferAllocator___(void * jarg1, void * jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Terrain::GpuBufferAllocator *arg2 = (Ogre::Terrain::GpuBufferAllocator *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Terrain::GpuBufferAllocator *)jarg2; 
  {
    try {
      (arg1)->setGpuBufferAllocator(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getGpuBufferAllocator___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Terrain::GpuBufferAllocator *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::Terrain::GpuBufferAllocator *)(arg1)->getGpuBufferAllocator();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_orgfogre_Terrain__getNumIndexesForBatchSize___(unsigned short jarg1) {
  unsigned long jresult ;
  Ogre::uint16 arg1 ;
  size_t result;
  
  arg1 = (Ogre::uint16)jarg1; 
  {
    try {
      result = Ogre::Terrain::_getNumIndexesForBatchSize(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain__populateIndexBuffer___(void * jarg1, unsigned short jarg2, unsigned short jarg3, unsigned short jarg4, unsigned short jarg5, unsigned short jarg6, unsigned short jarg7, unsigned short jarg8) {
  Ogre::uint16 *arg1 = (Ogre::uint16 *) 0 ;
  Ogre::uint16 arg2 ;
  Ogre::uint16 arg3 ;
  Ogre::uint16 arg4 ;
  Ogre::uint16 arg5 ;
  Ogre::uint16 arg6 ;
  Ogre::uint16 arg7 ;
  Ogre::uint16 arg8 ;
  
  arg1 = (Ogre::uint16 *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  arg3 = (Ogre::uint16)jarg3; 
  arg4 = (Ogre::uint16)jarg4; 
  arg5 = (Ogre::uint16)jarg5; 
  arg6 = (Ogre::uint16)jarg6; 
  arg7 = (Ogre::uint16)jarg7; 
  arg8 = (Ogre::uint16)jarg8; 
  {
    try {
      Ogre::Terrain::_populateIndexBuffer(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain__calcSkirtVertexIndex___(unsigned short jarg1, unsigned short jarg2, unsigned int jarg3, unsigned short jarg4, unsigned short jarg5) {
  unsigned short jresult ;
  Ogre::uint16 arg1 ;
  Ogre::uint16 arg2 ;
  bool arg3 ;
  Ogre::uint16 arg4 ;
  Ogre::uint16 arg5 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::uint16)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (Ogre::uint16)jarg4; 
  arg5 = (Ogre::uint16)jarg5; 
  {
    try {
      result = (Ogre::uint16)Ogre::Terrain::_calcSkirtVertexIndex(arg1,arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_convertPosition__SWIG_0___(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Terrain::Space arg2 ;
  Ogre::Vector3 *arg3 = 0 ;
  Ogre::Terrain::Space arg4 ;
  Ogre::Vector3 *arg5 = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Terrain::Space)jarg2; 
  arg3 = (Ogre::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Ogre::Terrain::Space)jarg4; 
  arg5 = (Ogre::Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 & type is null", 0);
    return ;
  } 
  {
    try {
      ((Ogre::Terrain const *)arg1)->convertPosition(arg2,(Ogre::Vector3 const &)*arg3,arg4,*arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_convertPosition__SWIG_1___(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Terrain::Space arg2 ;
  Ogre::Vector3 *arg3 = 0 ;
  Ogre::Terrain::Space arg4 ;
  Ogre::Vector3 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Terrain::Space)jarg2; 
  arg3 = (Ogre::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Ogre::Terrain::Space)jarg4; 
  {
    try {
      result = ((Ogre::Terrain const *)arg1)->convertPosition(arg2,(Ogre::Vector3 const &)*arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::Vector3((const Ogre::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_convertDirection__SWIG_0___(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Terrain::Space arg2 ;
  Ogre::Vector3 *arg3 = 0 ;
  Ogre::Terrain::Space arg4 ;
  Ogre::Vector3 *arg5 = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Terrain::Space)jarg2; 
  arg3 = (Ogre::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Ogre::Terrain::Space)jarg4; 
  arg5 = (Ogre::Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 & type is null", 0);
    return ;
  } 
  {
    try {
      ((Ogre::Terrain const *)arg1)->convertDirection(arg2,(Ogre::Vector3 const &)*arg3,arg4,*arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_convertDirection__SWIG_1___(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Terrain::Space arg2 ;
  Ogre::Vector3 *arg3 = 0 ;
  Ogre::Terrain::Space arg4 ;
  Ogre::Vector3 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Terrain::Space)jarg2; 
  arg3 = (Ogre::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Ogre::Terrain::Space)jarg4; 
  {
    try {
      result = ((Ogre::Terrain const *)arg1)->convertDirection(arg2,(Ogre::Vector3 const &)*arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::Vector3((const Ogre::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_setResourceGroup___(void * jarg1, char * jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setResourceGroup((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_Terrain_getResourceGroup___(void * jarg1) {
  char * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::Terrain const *)arg1)->getResourceGroup();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_Terrain__getDerivedResourceGroup___(void * jarg1) {
  char * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::Terrain const *)arg1)->_getDerivedResourceGroup();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_save__SWIG_0___(void * jarg1, char * jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->save((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_save__SWIG_1___(void * jarg1, void * jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::StreamSerialiser *arg2 = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::StreamSerialiser *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::StreamSerialiser & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->save(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_prepare__SWIG_0___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::String *arg2 = 0 ;
  bool result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)(arg1)->prepare((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_prepare__SWIG_1___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::DataStreamPtr *arg2 = 0 ;
  bool result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::DataStreamPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::DataStreamPtr & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->prepare(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_prepare__SWIG_2___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::StreamSerialiser *arg2 = 0 ;
  bool result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::StreamSerialiser *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::StreamSerialiser & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->prepare(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_prepare__SWIG_3___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Terrain::ImportData *arg2 = 0 ;
  bool result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Terrain::ImportData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Terrain::ImportData const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->prepare((Ogre::Terrain::ImportData const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_load__SWIG_0___(void * jarg1, char * jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->load((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_load__SWIG_1___(void * jarg1, void * jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::StreamSerialiser *arg2 = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::StreamSerialiser *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::StreamSerialiser & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->load(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_load__SWIG_2___(void * jarg1, int jarg2, unsigned int jarg3) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->load(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_load__SWIG_3___(void * jarg1, int jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  int arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->load(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_load__SWIG_4___(void * jarg1) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      (arg1)->load();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_isLoaded___(void * jarg1) {
  unsigned int jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  bool result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (bool)((Ogre::Terrain const *)arg1)->isLoaded();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_isModified___(void * jarg1) {
  unsigned int jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  bool result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (bool)((Ogre::Terrain const *)arg1)->isModified();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_isHeightDataModified___(void * jarg1) {
  unsigned int jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  bool result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (bool)((Ogre::Terrain const *)arg1)->isHeightDataModified();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_unload___(void * jarg1) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      (arg1)->unload();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_unprepare___(void * jarg1) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      (arg1)->unprepare();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getHeightData__SWIG_0___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  float *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (float *)((Ogre::Terrain const *)arg1)->getHeightData();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getHeightData__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint32 arg2 ;
  Ogre::uint32 arg3 ;
  float *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  arg3 = (Ogre::uint32)jarg3; 
  {
    try {
      result = (float *)((Ogre::Terrain const *)arg1)->getHeightData(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Terrain_getHeightAtPoint___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  float jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint32 arg2 ;
  Ogre::uint32 arg3 ;
  float result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  arg3 = (Ogre::uint32)jarg3; 
  {
    try {
      result = (float)((Ogre::Terrain const *)arg1)->getHeightAtPoint(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_setHeightAtPoint___(void * jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint32 arg2 ;
  Ogre::uint32 arg3 ;
  float arg4 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  arg3 = (Ogre::uint32)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      (arg1)->setHeightAtPoint(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Terrain_getHeightAtTerrainPosition___(void * jarg1, float jarg2, float jarg3) {
  float jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  float result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (float)((Ogre::Terrain const *)arg1)->getHeightAtTerrainPosition(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Terrain_getHeightAtWorldPosition__SWIG_0___(void * jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  float result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  {
    try {
      result = (float)((Ogre::Terrain const *)arg1)->getHeightAtWorldPosition(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Terrain_getHeightAtWorldPosition__SWIG_1___(void * jarg1, void * jarg2) {
  float jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  float result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (float)((Ogre::Terrain const *)arg1)->getHeightAtWorldPosition((Ogre::Vector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getDeltaData__SWIG_0___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  float *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (float *)((Ogre::Terrain const *)arg1)->getDeltaData();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getDeltaData__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint32 arg2 ;
  Ogre::uint32 arg3 ;
  float *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  arg3 = (Ogre::uint32)jarg3; 
  {
    try {
      result = (float *)((Ogre::Terrain const *)arg1)->getDeltaData(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getPoint__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint32 arg2 ;
  Ogre::uint32 arg3 ;
  Ogre::Vector3 *arg4 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  arg3 = (Ogre::uint32)jarg3; 
  arg4 = (Ogre::Vector3 *)jarg4; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getPoint(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getPointFromSelfOrNeighbour___(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::int32 arg2 ;
  Ogre::int32 arg3 ;
  Ogre::Vector3 *arg4 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::int32)jarg2; 
  arg3 = (Ogre::int32)jarg3; 
  arg4 = (Ogre::Vector3 *)jarg4; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getPointFromSelfOrNeighbour(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getPoint__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4, void * jarg5) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint32 arg2 ;
  Ogre::uint32 arg3 ;
  float arg4 ;
  Ogre::Vector3 *arg5 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  arg3 = (Ogre::uint32)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (Ogre::Vector3 *)jarg5; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getPoint(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getPointTransform___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Affine3 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = ((Ogre::Terrain const *)arg1)->getPointTransform();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::Affine3((const Ogre::Affine3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getTerrainVector__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Vector3 *arg3 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Vector3 *)jarg3; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getTerrainVector((Ogre::Vector3 const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getTerrainVector__SWIG_1___(void * jarg1, float jarg2, float jarg3, float jarg4, void * jarg5) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Vector3 *arg5 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = (Ogre::Vector3 *)jarg5; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getTerrainVector(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getTerrainVectorAlign__SWIG_0___(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Terrain::Alignment arg3 ;
  Ogre::Vector3 *arg4 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Terrain::Alignment)jarg3; 
  arg4 = (Ogre::Vector3 *)jarg4; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getTerrainVectorAlign((Ogre::Vector3 const &)*arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getTerrainVectorAlign__SWIG_1___(void * jarg1, float jarg2, float jarg3, float jarg4, int jarg5, void * jarg6) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Terrain::Alignment arg5 ;
  Ogre::Vector3 *arg6 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = (Ogre::Terrain::Alignment)jarg5; 
  arg6 = (Ogre::Vector3 *)jarg6; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getTerrainVectorAlign(arg2,arg3,arg4,arg5,arg6);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getVector__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Vector3 *arg3 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Vector3 *)jarg3; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getVector((Ogre::Vector3 const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getVector__SWIG_1___(void * jarg1, float jarg2, float jarg3, float jarg4, void * jarg5) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Vector3 *arg5 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = (Ogre::Vector3 *)jarg5; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getVector(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getVectorAlign__SWIG_0___(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Terrain::Alignment arg3 ;
  Ogre::Vector3 *arg4 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Terrain::Alignment)jarg3; 
  arg4 = (Ogre::Vector3 *)jarg4; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getVectorAlign((Ogre::Vector3 const &)*arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getVectorAlign__SWIG_1___(void * jarg1, float jarg2, float jarg3, float jarg4, int jarg5, void * jarg6) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Terrain::Alignment arg5 ;
  Ogre::Vector3 *arg6 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = (Ogre::Terrain::Alignment)jarg5; 
  arg6 = (Ogre::Vector3 *)jarg6; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getVectorAlign(arg2,arg3,arg4,arg5,arg6);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getPosition__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Vector3 *arg3 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Vector3 *)jarg3; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getPosition((Ogre::Vector3 const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getPosition__SWIG_1___(void * jarg1, float jarg2, float jarg3, float jarg4, void * jarg5) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Vector3 *arg5 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = (Ogre::Vector3 *)jarg5; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getPosition(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getTerrainPosition__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Vector3 *arg3 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Vector3 *)jarg3; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getTerrainPosition((Ogre::Vector3 const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getTerrainPosition__SWIG_1___(void * jarg1, float jarg2, float jarg3, float jarg4, void * jarg5) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Vector3 *arg5 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = (Ogre::Vector3 *)jarg5; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getTerrainPosition(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getPositionAlign__SWIG_0___(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Terrain::Alignment arg3 ;
  Ogre::Vector3 *arg4 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Terrain::Alignment)jarg3; 
  arg4 = (Ogre::Vector3 *)jarg4; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getPositionAlign((Ogre::Vector3 const &)*arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getPositionAlign__SWIG_1___(void * jarg1, float jarg2, float jarg3, float jarg4, int jarg5, void * jarg6) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Terrain::Alignment arg5 ;
  Ogre::Vector3 *arg6 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = (Ogre::Terrain::Alignment)jarg5; 
  arg6 = (Ogre::Vector3 *)jarg6; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getPositionAlign(arg2,arg3,arg4,arg5,arg6);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getTerrainPositionAlign__SWIG_0___(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Terrain::Alignment arg3 ;
  Ogre::Vector3 *arg4 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Terrain::Alignment)jarg3; 
  arg4 = (Ogre::Vector3 *)jarg4; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getTerrainPositionAlign((Ogre::Vector3 const &)*arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_getTerrainPositionAlign__SWIG_1___(void * jarg1, float jarg2, float jarg3, float jarg4, int jarg5, void * jarg6) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Terrain::Alignment arg5 ;
  Ogre::Vector3 *arg6 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = (Ogre::Terrain::Alignment)jarg5; 
  arg6 = (Ogre::Vector3 *)jarg6; 
  {
    try {
      ((Ogre::Terrain const *)arg1)->getTerrainPositionAlign(arg2,arg3,arg4,arg5,arg6);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_Terrain_getAlignment___(void * jarg1) {
  int jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Terrain::Alignment result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::Terrain::Alignment)((Ogre::Terrain const *)arg1)->getAlignment();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_getSize___(void * jarg1) {
  unsigned short jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::uint16)((Ogre::Terrain const *)arg1)->getSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_setSize___(void * jarg1, unsigned short jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint16 arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  {
    try {
      (arg1)->setSize(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_getMaxBatchSize___(void * jarg1) {
  unsigned short jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::uint16)((Ogre::Terrain const *)arg1)->getMaxBatchSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_getMinBatchSize___(void * jarg1) {
  unsigned short jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::uint16)((Ogre::Terrain const *)arg1)->getMinBatchSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Terrain_getWorldSize___(void * jarg1) {
  float jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::Terrain const *)arg1)->getWorldSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_setWorldSize___(void * jarg1, float jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setWorldSize(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_orgfogre_Terrain_getLayerCount___(void * jarg1) {
  unsigned char jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::uint8)((Ogre::Terrain const *)arg1)->getLayerCount();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getLayerDeclaration___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::TerrainLayerDeclaration *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::TerrainLayerDeclaration *) &((Ogre::Terrain const *)arg1)->getLayerDeclaration();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_addLayer__SWIG_0___(void * jarg1, float jarg2, void * jarg3) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real arg2 ;
  Ogre::StringVector *arg3 = (Ogre::StringVector *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::StringVector *)jarg3; 
  {
    try {
      (arg1)->addLayer(arg2,(Ogre::StringVector const *)arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_addLayer__SWIG_1___(void * jarg1, float jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->addLayer(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_addLayer__SWIG_2___(void * jarg1) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      (arg1)->addLayer();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_addLayer__SWIG_3___(void * jarg1, unsigned char jarg2, float jarg3, void * jarg4) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  Ogre::Real arg3 ;
  Ogre::StringVector *arg4 = (Ogre::StringVector *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::StringVector *)jarg4; 
  {
    try {
      (arg1)->addLayer(arg2,arg3,(Ogre::StringVector const *)arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_addLayer__SWIG_4___(void * jarg1, unsigned char jarg2, float jarg3) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->addLayer(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_addLayer__SWIG_5___(void * jarg1, unsigned char jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  {
    try {
      (arg1)->addLayer(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_removeLayer___(void * jarg1, unsigned char jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  {
    try {
      (arg1)->removeLayer(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_replaceLayer__SWIG_0___(void * jarg1, unsigned char jarg2, unsigned int jarg3, float jarg4, void * jarg5) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  bool arg3 ;
  Ogre::Real arg4 ;
  Ogre::StringVector *arg5 = (Ogre::StringVector *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = (Ogre::StringVector *)jarg5; 
  {
    try {
      (arg1)->replaceLayer(arg2,arg3,arg4,(Ogre::StringVector const *)arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_replaceLayer__SWIG_1___(void * jarg1, unsigned char jarg2, unsigned int jarg3, float jarg4) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  bool arg3 ;
  Ogre::Real arg4 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (Ogre::Real)jarg4; 
  {
    try {
      (arg1)->replaceLayer(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_replaceLayer__SWIG_2___(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  bool arg3 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->replaceLayer(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_orgfogre_Terrain_getMaxLayers___(void * jarg1) {
  unsigned char jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::uint8)((Ogre::Terrain const *)arg1)->getMaxLayers();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Terrain_getLayerWorldSize___(void * jarg1, unsigned char jarg2) {
  float jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  Ogre::Real result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  {
    try {
      result = (Ogre::Real)((Ogre::Terrain const *)arg1)->getLayerWorldSize(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_setLayerWorldSize___(void * jarg1, unsigned char jarg2, float jarg3) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->setLayerWorldSize(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Terrain_getLayerUVMultiplier___(void * jarg1, unsigned char jarg2) {
  float jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  Ogre::Real result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  {
    try {
      result = (Ogre::Real)((Ogre::Terrain const *)arg1)->getLayerUVMultiplier(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_Terrain_getLayerTextureName___(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  char * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  Ogre::uint8 arg3 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  arg3 = (Ogre::uint8)jarg3; 
  {
    try {
      result = (Ogre::String *) &((Ogre::Terrain const *)arg1)->getLayerTextureName(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_setLayerTextureName___(void * jarg1, unsigned char jarg2, unsigned char jarg3, char * jarg4) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  Ogre::uint8 arg3 ;
  Ogre::String *arg4 = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  arg3 = (Ogre::uint8)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      (arg1)->setLayerTextureName(arg2,arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_getLayerBlendMapSize___(void * jarg1) {
  unsigned short jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::uint16)((Ogre::Terrain const *)arg1)->getLayerBlendMapSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_getLightmapSize___(void * jarg1) {
  unsigned short jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::uint16)((Ogre::Terrain const *)arg1)->getLightmapSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getLightmap___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::TexturePtr *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::TexturePtr *) &((Ogre::Terrain const *)arg1)->getLightmap();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_getCompositeMapSize___(void * jarg1) {
  unsigned short jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::uint16)((Ogre::Terrain const *)arg1)->getCompositeMapSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getCompositeMap___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::TexturePtr *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::TexturePtr *) &((Ogre::Terrain const *)arg1)->getCompositeMap();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getPosition__SWIG_2___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::Vector3 *) &((Ogre::Terrain const *)arg1)->getPosition();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_setPosition___(void * jarg1, void * jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setPosition((Ogre::Vector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain__getRootSceneNode___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::SceneNode *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::SceneNode *)((Ogre::Terrain const *)arg1)->_getRootSceneNode();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_dirty___(void * jarg1) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      (arg1)->dirty();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_dirtyRect___(void * jarg1, void * jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Rect *arg2 = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Rect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->dirtyRect((Ogre::Rect const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain__dirtyCompositeMapRect___(void * jarg1, void * jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Rect *arg2 = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Rect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->_dirtyCompositeMapRect((Ogre::Rect const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_dirtyLightmapRect___(void * jarg1, void * jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Rect *arg2 = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Rect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->dirtyLightmapRect((Ogre::Rect const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_dirtyLightmap___(void * jarg1) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      (arg1)->dirtyLightmap();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_update__SWIG_0___(void * jarg1, unsigned int jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->update(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_update__SWIG_1___(void * jarg1) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      (arg1)->update();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_updateGeometry___(void * jarg1) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      (arg1)->updateGeometry();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_updateGeometryWithoutNotifyNeighbours___(void * jarg1) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      (arg1)->updateGeometryWithoutNotifyNeighbours();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_orgfogre_Terrain_DERIVED_DATA_DELTAS_get___() {
  unsigned char jresult ;
  Ogre::uint8 result;
  
  result = (Ogre::uint8)(Ogre::uint8)Ogre::Terrain::DERIVED_DATA_DELTAS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_orgfogre_Terrain_DERIVED_DATA_NORMALS_get___() {
  unsigned char jresult ;
  Ogre::uint8 result;
  
  result = (Ogre::uint8)(Ogre::uint8)Ogre::Terrain::DERIVED_DATA_NORMALS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_orgfogre_Terrain_DERIVED_DATA_LIGHTMAP_get___() {
  unsigned char jresult ;
  Ogre::uint8 result;
  
  result = (Ogre::uint8)(Ogre::uint8)Ogre::Terrain::DERIVED_DATA_LIGHTMAP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_orgfogre_Terrain_DERIVED_DATA_ALL_get___() {
  unsigned char jresult ;
  Ogre::uint8 result;
  
  result = (Ogre::uint8)(Ogre::uint8)Ogre::Terrain::DERIVED_DATA_ALL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_updateDerivedData__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned char jarg3) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  bool arg2 ;
  Ogre::uint8 arg3 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (Ogre::uint8)jarg3; 
  {
    try {
      (arg1)->updateDerivedData(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_updateDerivedData__SWIG_1___(void * jarg1, unsigned int jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->updateDerivedData(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_updateDerivedData__SWIG_2___(void * jarg1) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      (arg1)->updateDerivedData();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_updateCompositeMap___(void * jarg1) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      (arg1)->updateCompositeMap();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_updateCompositeMapWithDelay__SWIG_0___(void * jarg1, float jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->updateCompositeMapWithDelay(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_updateCompositeMapWithDelay__SWIG_1___(void * jarg1) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      (arg1)->updateCompositeMapWithDelay();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Terrain_getSkirtSize___(void * jarg1) {
  float jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::Terrain const *)arg1)->getSkirtSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_getNumLodLevels___(void * jarg1) {
  unsigned short jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::uint16)((Ogre::Terrain const *)arg1)->getNumLodLevels();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_getNumLodLevelsPerLeaf___(void * jarg1) {
  unsigned short jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::uint16)((Ogre::Terrain const *)arg1)->getNumLodLevelsPerLeaf();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_calculateHeightDeltas___(void * jarg1, void * jarg2) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Rect *arg2 = 0 ;
  SwigValueWrapper< Ogre::TRect< int > > result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Rect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (arg1)->calculateHeightDeltas((Ogre::Rect const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::Rect((const Ogre::Rect &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_finaliseHeightDeltas___(void * jarg1, void * jarg2, unsigned int jarg3) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Rect *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Rect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->finaliseHeightDeltas((Ogre::Rect const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_calculateNormals___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Rect *arg2 = 0 ;
  Ogre::Rect *arg3 = 0 ;
  Ogre::PixelBox *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Rect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return 0;
  } 
  arg3 = (Ogre::Rect *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Ogre::PixelBox *)(arg1)->calculateNormals((Ogre::Rect const &)*arg2,*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_finaliseNormals___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Rect *arg2 = 0 ;
  Ogre::PixelBox *arg3 = (Ogre::PixelBox *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Rect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::PixelBox *)jarg3; 
  {
    try {
      (arg1)->finaliseNormals((Ogre::Rect const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_calculateLightmap___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Rect *arg2 = 0 ;
  Ogre::Rect *arg3 = 0 ;
  Ogre::Rect *arg4 = 0 ;
  Ogre::PixelBox *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Rect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return 0;
  } 
  arg3 = (Ogre::Rect *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return 0;
  } 
  arg4 = (Ogre::Rect *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Ogre::PixelBox *)(arg1)->calculateLightmap((Ogre::Rect const &)*arg2,(Ogre::Rect const &)*arg3,*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_finaliseLightmap___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Rect *arg2 = 0 ;
  Ogre::PixelBox *arg3 = (Ogre::PixelBox *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Rect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::PixelBox *)jarg3; 
  {
    try {
      (arg1)->finaliseLightmap((Ogre::Rect const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_getResolutionAtLod___(void * jarg1, unsigned short jarg2) {
  unsigned short jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint16 arg2 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  {
    try {
      result = (Ogre::uint16)((Ogre::Terrain const *)arg1)->getResolutionAtLod(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_rayIntersects__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Ray *arg2 = 0 ;
  bool arg3 ;
  Ogre::Real arg4 ;
  std::pair< bool,Ogre::Vector3 > result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Ray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Ray const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (Ogre::Real)jarg4; 
  {
    try {
      result = (arg1)->rayIntersects((Ogre::Ray const &)*arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::pair< bool,Ogre::Vector3 >((const std::pair< bool,Ogre::Vector3 > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_rayIntersects__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Ray *arg2 = 0 ;
  bool arg3 ;
  std::pair< bool,Ogre::Vector3 > result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Ray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Ray const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (arg1)->rayIntersects((Ogre::Ray const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::pair< bool,Ogre::Vector3 >((const std::pair< bool,Ogre::Vector3 > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_rayIntersects__SWIG_2___(void * jarg1, void * jarg2) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Ray *arg2 = 0 ;
  std::pair< bool,Ogre::Vector3 > result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Ray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Ray const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (arg1)->rayIntersects((Ogre::Ray const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::pair< bool,Ogre::Vector3 >((const std::pair< bool,Ogre::Vector3 > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getAABB___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::AxisAlignedBox *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::AxisAlignedBox *) &((Ogre::Terrain const *)arg1)->getAABB();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getWorldAABB___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::AxisAlignedBox result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = ((Ogre::Terrain const *)arg1)->getWorldAABB();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::AxisAlignedBox((const Ogre::AxisAlignedBox &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Terrain_getMinHeight___(void * jarg1) {
  float jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::Terrain const *)arg1)->getMinHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Terrain_getMaxHeight___(void * jarg1) {
  float jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::Terrain const *)arg1)->getMaxHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Terrain_getBoundingRadius___(void * jarg1) {
  float jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::Terrain const *)arg1)->getBoundingRadius();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getMaterial___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::MaterialPtr *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::MaterialPtr *) &((Ogre::Terrain const *)arg1)->getMaterial();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain__getMaterial___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::MaterialPtr *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::MaterialPtr *) &((Ogre::Terrain const *)arg1)->_getMaterial();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getCompositeMapMaterial___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::MaterialPtr *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::MaterialPtr *) &((Ogre::Terrain const *)arg1)->getCompositeMapMaterial();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain__getCompositeMapMaterial___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::MaterialPtr *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::MaterialPtr *) &((Ogre::Terrain const *)arg1)->_getCompositeMapMaterial();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_Terrain_getMaterialName___(void * jarg1) {
  char * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::Terrain const *)arg1)->getMaterialName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_preFindVisibleObjects___(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  Ogre::SceneManager::IlluminationRenderStage arg3 ;
  Ogre::Viewport *arg4 = (Ogre::Viewport *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::SceneManager *)jarg2; 
  arg3 = (Ogre::SceneManager::IlluminationRenderStage)jarg3; 
  arg4 = (Ogre::Viewport *)jarg4; 
  {
    try {
      (arg1)->preFindVisibleObjects(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_sceneManagerDestroyed___(void * jarg1, void * jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::SceneManager *)jarg2; 
  {
    try {
      (arg1)->sceneManagerDestroyed(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_orgfogre_Terrain_getRenderQueueGroup___(void * jarg1) {
  unsigned char jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::uint8)((Ogre::Terrain const *)arg1)->getRenderQueueGroup();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_setRenderQueueGroup___(void * jarg1, unsigned char jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  {
    try {
      (arg1)->setRenderQueueGroup(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_getVisibilityFlags___(void * jarg1) {
  unsigned int jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint32 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::uint32)((Ogre::Terrain const *)arg1)->getVisibilityFlags();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_setVisibilityFlags___(void * jarg1, unsigned int jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint32 arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  {
    try {
      (arg1)->setVisibilityFlags(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_getQueryFlags___(void * jarg1) {
  unsigned int jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint32 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::uint32)((Ogre::Terrain const *)arg1)->getQueryFlags();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_setQueryFlags___(void * jarg1, unsigned int jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint32 arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  {
    try {
      (arg1)->setQueryFlags(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_addQueryFlags___(void * jarg1, unsigned int jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint32 arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  {
    try {
      (arg1)->addQueryFlags(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_removeQueryFlags___(void * jarg1, unsigned int jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint32 arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  {
    try {
      (arg1)->removeQueryFlags(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getLayerBlendMap___(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  Ogre::TerrainLayerBlendMap *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  {
    try {
      result = (Ogre::TerrainLayerBlendMap *)(arg1)->getLayerBlendMap(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_orgfogre_Terrain_getBlendTextureIndex___(void * jarg1, unsigned char jarg2) {
  unsigned char jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  Ogre::uint8 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  {
    try {
      result = (Ogre::uint8)((Ogre::Terrain const *)arg1)->getBlendTextureIndex(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_orgfogre_Terrain_getBlendTextureCount__SWIG_0___(void * jarg1) {
  unsigned char jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::uint8)((Ogre::Terrain const *)arg1)->getBlendTextureCount();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_orgfogre_Terrain_getBlendTextureCount__SWIG_1___(unsigned char jarg1) {
  unsigned char jresult ;
  Ogre::uint8 arg1 ;
  Ogre::uint8 result;
  
  arg1 = (Ogre::uint8)jarg1; 
  {
    try {
      result = (Ogre::uint8)Ogre::Terrain::getBlendTextureCount(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getBlendTextures___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  std::vector< Ogre::TexturePtr > *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (std::vector< Ogre::TexturePtr > *) &((Ogre::Terrain const *)arg1)->getBlendTextures();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_Terrain_getBlendTextureName___(void * jarg1, unsigned char jarg2) {
  char * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  {
    try {
      result = (Ogre::String *) &((Ogre::Terrain const *)arg1)->getBlendTextureName(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_setGlobalColourMapEnabled__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned short jarg3) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  bool arg2 ;
  Ogre::uint16 arg3 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (Ogre::uint16)jarg3; 
  {
    try {
      (arg1)->setGlobalColourMapEnabled(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_setGlobalColourMapEnabled__SWIG_1___(void * jarg1, unsigned int jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setGlobalColourMapEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_getGlobalColourMapEnabled___(void * jarg1) {
  unsigned int jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  bool result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (bool)((Ogre::Terrain const *)arg1)->getGlobalColourMapEnabled();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_getGlobalColourMapSize___(void * jarg1) {
  unsigned short jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::uint16)((Ogre::Terrain const *)arg1)->getGlobalColourMapSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getGlobalColourMap___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::TexturePtr *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::TexturePtr *) &((Ogre::Terrain const *)arg1)->getGlobalColourMap();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_widenRectByVector__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Rect *arg3 = 0 ;
  Ogre::Rect *arg4 = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Rect *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return ;
  } 
  arg4 = (Ogre::Rect *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->widenRectByVector((Ogre::Vector3 const &)*arg2,(Ogre::Rect const &)*arg3,*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_widenRectByVector__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, void * jarg6) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Rect *arg3 = 0 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  Ogre::Rect *arg6 = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Rect *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return ;
  } 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = (Ogre::Real)jarg5; 
  arg6 = (Ogre::Rect *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->widenRectByVector((Ogre::Vector3 const &)*arg2,(Ogre::Rect const &)*arg3,arg4,arg5,*arg6);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_freeTemporaryResources___(void * jarg1) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      (arg1)->freeTemporaryResources();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getLayerBlendTexture___(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  Ogre::TexturePtr *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  {
    try {
      result = (Ogre::TexturePtr *) &((Ogre::Terrain const *)arg1)->getLayerBlendTexture(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getLayerBlendTextureIndex___(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::uint8 arg2 ;
  SwigValueWrapper< std::pair< unsigned char,unsigned char > > result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  {
    try {
      result = ((Ogre::Terrain const *)arg1)->getLayerBlendTextureIndex(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::pair< Ogre::uint8,Ogre::uint8 >((const std::pair< Ogre::uint8,Ogre::uint8 > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain__setMorphRequired___(void * jarg1, unsigned int jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->_setMorphRequired(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain__getMorphRequired___(void * jarg1) {
  unsigned int jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  bool result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (bool)((Ogre::Terrain const *)arg1)->_getMorphRequired();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain__setNormalMapRequired___(void * jarg1, unsigned int jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->_setNormalMapRequired(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain__setLightMapRequired__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->_setLightMapRequired(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain__setLightMapRequired__SWIG_1___(void * jarg1, unsigned int jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->_setLightMapRequired(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain__setCompositeMapRequired___(void * jarg1, unsigned int jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->_setCompositeMapRequired(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain__getUseVertexCompression___(void * jarg1) {
  unsigned int jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  bool result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (bool)((Ogre::Terrain const *)arg1)->_getUseVertexCompression();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_getLODLevelWhenVertexEliminated__SWIG_0___(void * jarg1, long jarg2, long jarg3) {
  unsigned short jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  long arg2 ;
  long arg3 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  {
    try {
      result = (Ogre::uint16)((Ogre::Terrain const *)arg1)->getLODLevelWhenVertexEliminated(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Terrain_getLODLevelWhenVertexEliminated__SWIG_1___(void * jarg1, long jarg2) {
  unsigned short jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  long arg2 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (long)jarg2; 
  {
    try {
      result = (Ogre::uint16)((Ogre::Terrain const *)arg1)->getLODLevelWhenVertexEliminated(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getQuadTree___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::TerrainQuadTreeNode *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::TerrainQuadTreeNode *)(arg1)->getQuadTree();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getTerrainNormalMap___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::TexturePtr result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = ((Ogre::Terrain const *)arg1)->getTerrainNormalMap();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::TexturePtr((const Ogre::TexturePtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_getNeighbour___(void * jarg1, int jarg2) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Terrain::NeighbourIndex arg2 ;
  Ogre::Terrain *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Terrain::NeighbourIndex)jarg2; 
  {
    try {
      result = (Ogre::Terrain *)((Ogre::Terrain const *)arg1)->getNeighbour(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_setNeighbour__SWIG_0___(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Terrain::NeighbourIndex arg2 ;
  Ogre::Terrain *arg3 = (Ogre::Terrain *) 0 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Terrain::NeighbourIndex)jarg2; 
  arg3 = (Ogre::Terrain *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->setNeighbour(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_setNeighbour__SWIG_1___(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Terrain::NeighbourIndex arg2 ;
  Ogre::Terrain *arg3 = (Ogre::Terrain *) 0 ;
  bool arg4 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Terrain::NeighbourIndex)jarg2; 
  arg3 = (Ogre::Terrain *)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->setNeighbour(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_setNeighbour__SWIG_2___(void * jarg1, int jarg2, void * jarg3) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Terrain::NeighbourIndex arg2 ;
  Ogre::Terrain *arg3 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Terrain::NeighbourIndex)jarg2; 
  arg3 = (Ogre::Terrain *)jarg3; 
  {
    try {
      (arg1)->setNeighbour(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_Terrain_getOppositeNeighbour___(int jarg1) {
  int jresult ;
  Ogre::Terrain::NeighbourIndex arg1 ;
  Ogre::Terrain::NeighbourIndex result;
  
  arg1 = (Ogre::Terrain::NeighbourIndex)jarg1; 
  {
    try {
      result = (Ogre::Terrain::NeighbourIndex)Ogre::Terrain::getOppositeNeighbour(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_Terrain_getNeighbourIndex___(long jarg1, long jarg2) {
  int jresult ;
  long arg1 ;
  long arg2 ;
  Ogre::Terrain::NeighbourIndex result;
  
  arg1 = (long)jarg1; 
  arg2 = (long)jarg2; 
  {
    try {
      result = (Ogre::Terrain::NeighbourIndex)Ogre::Terrain::getNeighbourIndex(arg1,arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_notifyNeighbours___(void * jarg1) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      (arg1)->notifyNeighbours();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_neighbourModified___(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Terrain::NeighbourIndex arg2 ;
  Ogre::Rect *arg3 = 0 ;
  Ogre::Rect *arg4 = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Terrain::NeighbourIndex)jarg2; 
  arg3 = (Ogre::Rect *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return ;
  } 
  arg4 = (Ogre::Rect *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Rect const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->neighbourModified(arg2,(Ogre::Rect const &)*arg3,(Ogre::Rect const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_raySelectNeighbour__SWIG_0___(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Ray *arg2 = 0 ;
  Ogre::Real arg3 ;
  Ogre::Terrain *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Ray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Ray const & type is null", 0);
    return 0;
  } 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (Ogre::Terrain *)(arg1)->raySelectNeighbour((Ogre::Ray const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Terrain_raySelectNeighbour__SWIG_1___(void * jarg1, void * jarg2) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::Ray *arg2 = 0 ;
  Ogre::Terrain *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::Ray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Ray const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Ogre::Terrain *)(arg1)->raySelectNeighbour((Ogre::Ray const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain__dumpTextures___(void * jarg1, char * jarg2, char * jarg3) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->_dumpTextures((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_isDerivedDataUpdateInProgress___(void * jarg1) {
  unsigned int jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  bool result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (bool)((Ogre::Terrain const *)arg1)->isDerivedDataUpdateInProgress();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_convertWorldToTerrainAxes___(int jarg1, void * jarg2, void * jarg3) {
  Ogre::Terrain::Alignment arg1 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Vector3 *arg3 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain::Alignment)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Vector3 *)jarg3; 
  {
    try {
      Ogre::Terrain::convertWorldToTerrainAxes(arg1,(Ogre::Vector< 3,float > const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_convertTerrainToWorldAxes___(int jarg1, void * jarg2, void * jarg3) {
  Ogre::Terrain::Alignment arg1 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Vector3 *arg3 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::Terrain::Alignment)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Vector3 *)jarg3; 
  {
    try {
      Ogre::Terrain::convertTerrainToWorldAxes(arg1,(Ogre::Vector< 3,float > const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_writeLayerDeclaration___(void * jarg1, void * jarg2) {
  Ogre::TerrainLayerDeclaration *arg1 = 0 ;
  Ogre::StreamSerialiser *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainLayerDeclaration *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::TerrainLayerDeclaration const & type is null", 0);
    return ;
  } 
  arg2 = (Ogre::StreamSerialiser *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::StreamSerialiser & type is null", 0);
    return ;
  } 
  {
    try {
      Ogre::Terrain::writeLayerDeclaration((std::vector< Ogre::TerrainLayerSampler > const &)*arg1,*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_readLayerDeclaration___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Ogre::StreamSerialiser *arg1 = 0 ;
  Ogre::TerrainLayerDeclaration *arg2 = 0 ;
  bool result;
  
  arg1 = (Ogre::StreamSerialiser *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::StreamSerialiser & type is null", 0);
    return 0;
  } 
  arg2 = (Ogre::TerrainLayerDeclaration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::TerrainLayerDeclaration & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)Ogre::Terrain::readLayerDeclaration(*arg1,*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_writeLayerInstanceList___(void * jarg1, void * jarg2) {
  Ogre::Terrain::LayerInstanceList *arg1 = 0 ;
  Ogre::StreamSerialiser *arg2 = 0 ;
  
  arg1 = (Ogre::Terrain::LayerInstanceList *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Terrain::LayerInstanceList const & type is null", 0);
    return ;
  } 
  arg2 = (Ogre::StreamSerialiser *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::StreamSerialiser & type is null", 0);
    return ;
  } 
  {
    try {
      Ogre::Terrain::writeLayerInstanceList((std::vector< Ogre::Terrain::LayerInstance > const &)*arg1,*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Terrain_readLayerInstanceList___(void * jarg1, unsigned long jarg2, void * jarg3) {
  unsigned int jresult ;
  Ogre::StreamSerialiser *arg1 = 0 ;
  size_t arg2 ;
  Ogre::Terrain::LayerInstanceList *arg3 = 0 ;
  bool result;
  
  arg1 = (Ogre::StreamSerialiser *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::StreamSerialiser & type is null", 0);
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (Ogre::Terrain::LayerInstanceList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Terrain::LayerInstanceList & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)Ogre::Terrain::readLayerInstanceList(*arg1,arg2,*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_waitForDerivedProcesses___(void * jarg1) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      (arg1)->waitForDerivedProcesses();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_increaseLodLevel__SWIG_0___(void * jarg1, unsigned int jarg2) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->increaseLodLevel(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_increaseLodLevel__SWIG_1___(void * jarg1) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      (arg1)->increaseLodLevel();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Terrain_decreaseLodLevel___(void * jarg1) {
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      (arg1)->decreaseLodLevel();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_Terrain_getHighestLodPrepared___(void * jarg1) {
  int jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  int result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (int)((Ogre::Terrain const *)arg1)->getHighestLodPrepared();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_Terrain_getHighestLodLoaded___(void * jarg1) {
  int jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  int result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (int)((Ogre::Terrain const *)arg1)->getHighestLodLoaded();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_Terrain_getTargetLodLevel___(void * jarg1) {
  int jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  int result;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (int)((Ogre::Terrain const *)arg1)->getTargetLodLevel();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainGlobalOptions___() {
  void * jresult ;
  Ogre::TerrainGlobalOptions *result = 0 ;
  
  {
    try {
      result = (Ogre::TerrainGlobalOptions *)new Ogre::TerrainGlobalOptions();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TerrainGlobalOptions___(void * jarg1) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getSkirtSize___(void * jarg1) {
  float jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::TerrainGlobalOptions const *)arg1)->getSkirtSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setSkirtSize___(void * jarg1, float jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setSkirtSize(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getLightMapDirection___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (Ogre::Vector3 *) &((Ogre::TerrainGlobalOptions const *)arg1)->getLightMapDirection();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setLightMapDirection___(void * jarg1, void * jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setLightMapDirection((Ogre::Vector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getCompositeMapAmbient___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (Ogre::ColourValue *) &((Ogre::TerrainGlobalOptions const *)arg1)->getCompositeMapAmbient();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setCompositeMapAmbient___(void * jarg1, void * jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = (Ogre::ColourValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::ColourValue const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setCompositeMapAmbient((Ogre::ColourValue const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getCompositeMapDiffuse___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (Ogre::ColourValue *) &((Ogre::TerrainGlobalOptions const *)arg1)->getCompositeMapDiffuse();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setCompositeMapDiffuse___(void * jarg1, void * jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = (Ogre::ColourValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::ColourValue const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setCompositeMapDiffuse((Ogre::ColourValue const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getCompositeMapDistance___(void * jarg1) {
  float jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::TerrainGlobalOptions const *)arg1)->getCompositeMapDistance();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setCompositeMapDistance___(void * jarg1, float jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setCompositeMapDistance(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getCastsDynamicShadows___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (bool)((Ogre::TerrainGlobalOptions const *)arg1)->getCastsDynamicShadows();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setCastsDynamicShadows___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setCastsDynamicShadows(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getMaxPixelError___(void * jarg1) {
  float jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::TerrainGlobalOptions const *)arg1)->getMaxPixelError();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setMaxPixelError___(void * jarg1, float jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setMaxPixelError(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getRenderQueueGroup___(void * jarg1) {
  unsigned char jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::uint8 result;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (Ogre::uint8)((Ogre::TerrainGlobalOptions const *)arg1)->getRenderQueueGroup();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setRenderQueueGroup___(void * jarg1, unsigned char jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::uint8 arg2 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  {
    try {
      (arg1)->setRenderQueueGroup(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getVisibilityFlags___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::uint32 result;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (Ogre::uint32)((Ogre::TerrainGlobalOptions const *)arg1)->getVisibilityFlags();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setVisibilityFlags___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::uint32 arg2 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  {
    try {
      (arg1)->setVisibilityFlags(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setQueryFlags___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::uint32 arg2 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  {
    try {
      (arg1)->setQueryFlags(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getQueryFlags___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::uint32 result;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (Ogre::uint32)((Ogre::TerrainGlobalOptions const *)arg1)->getQueryFlags();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_addQueryFlags___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::uint32 arg2 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  {
    try {
      (arg1)->addQueryFlags(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_removeQueryFlags___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::uint32 arg2 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  {
    try {
      (arg1)->removeQueryFlags(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getUseRayBoxDistanceCalculation___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (bool)((Ogre::TerrainGlobalOptions const *)arg1)->getUseRayBoxDistanceCalculation();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setUseRayBoxDistanceCalculation___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setUseRayBoxDistanceCalculation(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getDefaultMaterialGenerator___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  SwigValueWrapper< Ogre::SharedPtr< Ogre::TerrainMaterialGenerator > > result;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (arg1)->getDefaultMaterialGenerator();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::TerrainMaterialGeneratorPtr((const Ogre::TerrainMaterialGeneratorPtr &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setDefaultMaterialGenerator___(void * jarg1, void * jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::TerrainMaterialGeneratorPtr *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = (Ogre::TerrainMaterialGeneratorPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::TerrainMaterialGeneratorPtr const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setDefaultMaterialGenerator((Ogre::TerrainMaterialGeneratorPtr const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getLayerBlendMapSize___(void * jarg1) {
  unsigned short jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (Ogre::uint16)((Ogre::TerrainGlobalOptions const *)arg1)->getLayerBlendMapSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setLayerBlendMapSize___(void * jarg1, unsigned short jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::uint16 arg2 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  {
    try {
      (arg1)->setLayerBlendMapSize(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getDefaultLayerTextureWorldSize___(void * jarg1) {
  float jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::TerrainGlobalOptions const *)arg1)->getDefaultLayerTextureWorldSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setDefaultLayerTextureWorldSize___(void * jarg1, float jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setDefaultLayerTextureWorldSize(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getDefaultGlobalColourMapSize___(void * jarg1) {
  unsigned short jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (Ogre::uint16)((Ogre::TerrainGlobalOptions const *)arg1)->getDefaultGlobalColourMapSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setDefaultGlobalColourMapSize___(void * jarg1, unsigned short jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::uint16 arg2 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  {
    try {
      (arg1)->setDefaultGlobalColourMapSize(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getLightMapSize___(void * jarg1) {
  unsigned short jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (Ogre::uint16)((Ogre::TerrainGlobalOptions const *)arg1)->getLightMapSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setLightMapSize___(void * jarg1, unsigned short jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::uint16 arg2 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  {
    try {
      (arg1)->setLightMapSize(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getCompositeMapSize___(void * jarg1) {
  unsigned short jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (Ogre::uint16)((Ogre::TerrainGlobalOptions const *)arg1)->getCompositeMapSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setCompositeMapSize___(void * jarg1, unsigned short jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::uint16 arg2 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  {
    try {
      (arg1)->setCompositeMapSize(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setDefaultResourceGroup___(void * jarg1, char * jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setDefaultResourceGroup((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getDefaultResourceGroup___(void * jarg1) {
  char * jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::TerrainGlobalOptions const *)arg1)->getDefaultResourceGroup();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getUseVertexCompressionWhenAvailable___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  {
    try {
      result = (bool)((Ogre::TerrainGlobalOptions const *)arg1)->getUseVertexCompressionWhenAvailable();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_setUseVertexCompressionWhenAvailable___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainGlobalOptions *arg1 = (Ogre::TerrainGlobalOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainGlobalOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setUseVertexCompressionWhenAvailable(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainGlobalOptions_getSingleton___() {
  void * jresult ;
  Ogre::TerrainGlobalOptions *result = 0 ;
  
  {
    try {
      result = (Ogre::TerrainGlobalOptions *) &Ogre::TerrainGlobalOptions::getSingleton();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainGroup__SWIG_0___(void * jarg1, int jarg2, unsigned short jarg3, float jarg4) {
  void * jresult ;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::Terrain::Alignment arg2 ;
  Ogre::uint16 arg3 ;
  Ogre::Real arg4 ;
  Ogre::TerrainGroup *result = 0 ;
  
  arg1 = (Ogre::SceneManager *)jarg1; 
  arg2 = (Ogre::Terrain::Alignment)jarg2; 
  arg3 = (Ogre::uint16)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  {
    try {
      result = (Ogre::TerrainGroup *)new Ogre::TerrainGroup(arg1,arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainGroup__SWIG_1___(void * jarg1) {
  void * jresult ;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  Ogre::TerrainGroup *result = 0 ;
  
  arg1 = (Ogre::SceneManager *)jarg1; 
  {
    try {
      result = (Ogre::TerrainGroup *)new Ogre::TerrainGroup(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TerrainGroup___(void * jarg1) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainGroup_getDefaultImportSettings___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::Terrain::ImportData *result = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      result = (Ogre::Terrain::ImportData *) &(arg1)->getDefaultImportSettings();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_setOrigin___(void * jarg1, void * jarg2) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setOrigin((Ogre::Vector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainGroup_getOrigin___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      result = (Ogre::Vector3 *) &((Ogre::TerrainGroup const *)arg1)->getOrigin();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_TerrainGroup_getAlignment___(void * jarg1) {
  int jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::Terrain::Alignment result;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      result = (Ogre::Terrain::Alignment)((Ogre::TerrainGroup const *)arg1)->getAlignment();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TerrainGroup_getTerrainWorldSize___(void * jarg1) {
  float jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::TerrainGroup const *)arg1)->getTerrainWorldSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_setTerrainWorldSize___(void * jarg1, float jarg2) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setTerrainWorldSize(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TerrainGroup_getTerrainSize___(void * jarg1) {
  unsigned short jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      result = (Ogre::uint16)((Ogre::TerrainGroup const *)arg1)->getTerrainSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_setTerrainSize___(void * jarg1, unsigned short jarg2) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::uint16 arg2 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  {
    try {
      (arg1)->setTerrainSize(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainGroup_getSceneManager___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::SceneManager *result = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      result = (Ogre::SceneManager *)((Ogre::TerrainGroup const *)arg1)->getSceneManager();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_setFilenameConvention___(void * jarg1, char * jarg2, char * jarg3) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->setFilenameConvention((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_setFilenamePrefix___(void * jarg1, char * jarg2) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setFilenamePrefix((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_setFilenameExtension___(void * jarg1, char * jarg2) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setFilenameExtension((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_TerrainGroup_getFilenamePrefix___(void * jarg1) {
  char * jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::TerrainGroup const *)arg1)->getFilenamePrefix();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_TerrainGroup_getFilenameExtension___(void * jarg1) {
  char * jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::TerrainGroup const *)arg1)->getFilenameExtension();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_setResourceGroup___(void * jarg1, char * jarg2) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setResourceGroup((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_TerrainGroup_getResourceGroup___(void * jarg1) {
  char * jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::TerrainGroup const *)arg1)->getResourceGroup();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_defineTerrain__SWIG_0___(void * jarg1, long jarg2, long jarg3) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  {
    try {
      (arg1)->defineTerrain(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_defineTerrain__SWIG_1___(void * jarg1, long jarg2, long jarg3, float jarg4) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  float arg4 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      (arg1)->defineTerrain(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_defineTerrain__SWIG_2___(void * jarg1, long jarg2, long jarg3, void * jarg4) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  Ogre::Terrain::ImportData *arg4 = (Ogre::Terrain::ImportData *) 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (Ogre::Terrain::ImportData *)jarg4; 
  {
    try {
      (arg1)->defineTerrain(arg2,arg3,(Ogre::Terrain::ImportData const *)arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_defineTerrain__SWIG_3___(void * jarg1, long jarg2, long jarg3, void * jarg4, void * jarg5) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  Ogre::Image *arg4 = (Ogre::Image *) 0 ;
  Ogre::Terrain::LayerInstanceList *arg5 = (Ogre::Terrain::LayerInstanceList *) 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (Ogre::Image *)jarg4; 
  arg5 = (Ogre::Terrain::LayerInstanceList *)jarg5; 
  {
    try {
      (arg1)->defineTerrain(arg2,arg3,(Ogre::Image const *)arg4,(Ogre::Terrain::LayerInstanceList const *)arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_defineTerrain__SWIG_4___(void * jarg1, long jarg2, long jarg3, void * jarg4) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  Ogre::Image *arg4 = (Ogre::Image *) 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (Ogre::Image *)jarg4; 
  {
    try {
      (arg1)->defineTerrain(arg2,arg3,(Ogre::Image const *)arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_defineTerrain__SWIG_5___(void * jarg1, long jarg2, long jarg3, void * jarg4, void * jarg5) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  float *arg4 = (float *) 0 ;
  Ogre::Terrain::LayerInstanceList *arg5 = (Ogre::Terrain::LayerInstanceList *) 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (Ogre::Terrain::LayerInstanceList *)jarg5; 
  {
    try {
      (arg1)->defineTerrain(arg2,arg3,(float const *)arg4,(Ogre::Terrain::LayerInstanceList const *)arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_defineTerrain__SWIG_6___(void * jarg1, long jarg2, long jarg3, void * jarg4) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  float *arg4 = (float *) 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (float *)jarg4; 
  {
    try {
      (arg1)->defineTerrain(arg2,arg3,(float const *)arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_defineTerrain__SWIG_7___(void * jarg1, long jarg2, long jarg3, char * jarg4) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  Ogre::String *arg4 = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      (arg1)->defineTerrain(arg2,arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_loadAllTerrains__SWIG_0___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->loadAllTerrains(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_loadAllTerrains__SWIG_1___(void * jarg1) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      (arg1)->loadAllTerrains();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_loadTerrain__SWIG_0___(void * jarg1, long jarg2, long jarg3, unsigned int jarg4) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  bool arg4 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->loadTerrain(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_loadTerrain__SWIG_1___(void * jarg1, long jarg2, long jarg3) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  {
    try {
      (arg1)->loadTerrain(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_loadLegacyTerrain__SWIG_0___(void * jarg1, char * jarg2, long jarg3, long jarg4, unsigned int jarg5) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::String *arg2 = 0 ;
  long arg3 ;
  long arg4 ;
  bool arg5 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->loadLegacyTerrain((Ogre::String const &)*arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_loadLegacyTerrain__SWIG_1___(void * jarg1, char * jarg2, long jarg3, long jarg4) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::String *arg2 = 0 ;
  long arg3 ;
  long arg4 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  {
    try {
      (arg1)->loadLegacyTerrain((Ogre::String const &)*arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_loadLegacyTerrain__SWIG_2___(void * jarg1, char * jarg2, long jarg3) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::String *arg2 = 0 ;
  long arg3 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (long)jarg3; 
  {
    try {
      (arg1)->loadLegacyTerrain((Ogre::String const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_loadLegacyTerrain__SWIG_3___(void * jarg1, char * jarg2) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->loadLegacyTerrain((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_loadLegacyTerrain__SWIG_4___(void * jarg1, void * jarg2, long jarg3, long jarg4, unsigned int jarg5) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::ConfigFile *arg2 = 0 ;
  long arg3 ;
  long arg4 ;
  bool arg5 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (Ogre::ConfigFile *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::ConfigFile const & type is null", 0);
    return ;
  } 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->loadLegacyTerrain((Ogre::ConfigFile const &)*arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_loadLegacyTerrain__SWIG_5___(void * jarg1, void * jarg2, long jarg3, long jarg4) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::ConfigFile *arg2 = 0 ;
  long arg3 ;
  long arg4 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (Ogre::ConfigFile *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::ConfigFile const & type is null", 0);
    return ;
  } 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  {
    try {
      (arg1)->loadLegacyTerrain((Ogre::ConfigFile const &)*arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_loadLegacyTerrain__SWIG_6___(void * jarg1, void * jarg2, long jarg3) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::ConfigFile *arg2 = 0 ;
  long arg3 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (Ogre::ConfigFile *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::ConfigFile const & type is null", 0);
    return ;
  } 
  arg3 = (long)jarg3; 
  {
    try {
      (arg1)->loadLegacyTerrain((Ogre::ConfigFile const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_loadLegacyTerrain__SWIG_7___(void * jarg1, void * jarg2) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::ConfigFile *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (Ogre::ConfigFile *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::ConfigFile const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->loadLegacyTerrain((Ogre::ConfigFile const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_unloadTerrain___(void * jarg1, long jarg2, long jarg3) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  {
    try {
      (arg1)->unloadTerrain(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_removeTerrain___(void * jarg1, long jarg2, long jarg3) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  {
    try {
      (arg1)->removeTerrain(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_removeAllTerrains___(void * jarg1) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      (arg1)->removeAllTerrains();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_saveAllTerrains__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->saveAllTerrains(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_saveAllTerrains__SWIG_1___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->saveAllTerrains(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_TerrainSlotDefinition_filename_set___(void * jarg1, char * jarg2) {
  Ogre::TerrainGroup::TerrainSlotDefinition *arg1 = (Ogre::TerrainGroup::TerrainSlotDefinition *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainGroup::TerrainSlotDefinition *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->filename = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_TerrainGroup_TerrainSlotDefinition_filename_get___(void * jarg1) {
  char * jresult ;
  Ogre::TerrainGroup::TerrainSlotDefinition *arg1 = (Ogre::TerrainGroup::TerrainSlotDefinition *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::TerrainGroup::TerrainSlotDefinition *)jarg1; 
  result = (Ogre::String *) & ((arg1)->filename);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_TerrainSlotDefinition_importData_set___(void * jarg1, void * jarg2) {
  Ogre::TerrainGroup::TerrainSlotDefinition *arg1 = (Ogre::TerrainGroup::TerrainSlotDefinition *) 0 ;
  Ogre::Terrain::ImportData *arg2 = (Ogre::Terrain::ImportData *) 0 ;
  
  arg1 = (Ogre::TerrainGroup::TerrainSlotDefinition *)jarg1; 
  arg2 = (Ogre::Terrain::ImportData *)jarg2; 
  if (arg1) (arg1)->importData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainGroup_TerrainSlotDefinition_importData_get___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainGroup::TerrainSlotDefinition *arg1 = (Ogre::TerrainGroup::TerrainSlotDefinition *) 0 ;
  Ogre::Terrain::ImportData *result = 0 ;
  
  arg1 = (Ogre::TerrainGroup::TerrainSlotDefinition *)jarg1; 
  result = (Ogre::Terrain::ImportData *) ((arg1)->importData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainGroup_TerrainSlotDefinition___() {
  void * jresult ;
  Ogre::TerrainGroup::TerrainSlotDefinition *result = 0 ;
  
  {
    try {
      result = (Ogre::TerrainGroup::TerrainSlotDefinition *)new Ogre::TerrainGroup::TerrainSlotDefinition();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TerrainGroup_TerrainSlotDefinition___(void * jarg1) {
  Ogre::TerrainGroup::TerrainSlotDefinition *arg1 = (Ogre::TerrainGroup::TerrainSlotDefinition *) 0 ;
  
  arg1 = (Ogre::TerrainGroup::TerrainSlotDefinition *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_TerrainSlotDefinition_useImportData___(void * jarg1) {
  Ogre::TerrainGroup::TerrainSlotDefinition *arg1 = (Ogre::TerrainGroup::TerrainSlotDefinition *) 0 ;
  
  arg1 = (Ogre::TerrainGroup::TerrainSlotDefinition *)jarg1; 
  {
    try {
      (arg1)->useImportData();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_TerrainSlotDefinition_useFilename___(void * jarg1) {
  Ogre::TerrainGroup::TerrainSlotDefinition *arg1 = (Ogre::TerrainGroup::TerrainSlotDefinition *) 0 ;
  
  arg1 = (Ogre::TerrainGroup::TerrainSlotDefinition *)jarg1; 
  {
    try {
      (arg1)->useFilename();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_TerrainSlotDefinition_freeImportData___(void * jarg1) {
  Ogre::TerrainGroup::TerrainSlotDefinition *arg1 = (Ogre::TerrainGroup::TerrainSlotDefinition *) 0 ;
  
  arg1 = (Ogre::TerrainGroup::TerrainSlotDefinition *)jarg1; 
  {
    try {
      (arg1)->freeImportData();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_TerrainSlot_x_set___(void * jarg1, long jarg2) {
  Ogre::TerrainGroup::TerrainSlot *arg1 = (Ogre::TerrainGroup::TerrainSlot *) 0 ;
  long arg2 ;
  
  arg1 = (Ogre::TerrainGroup::TerrainSlot *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_orgfogre_TerrainGroup_TerrainSlot_x_get___(void * jarg1) {
  long jresult ;
  Ogre::TerrainGroup::TerrainSlot *arg1 = (Ogre::TerrainGroup::TerrainSlot *) 0 ;
  long result;
  
  arg1 = (Ogre::TerrainGroup::TerrainSlot *)jarg1; 
  result = (long) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_TerrainSlot_y_set___(void * jarg1, long jarg2) {
  Ogre::TerrainGroup::TerrainSlot *arg1 = (Ogre::TerrainGroup::TerrainSlot *) 0 ;
  long arg2 ;
  
  arg1 = (Ogre::TerrainGroup::TerrainSlot *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_orgfogre_TerrainGroup_TerrainSlot_y_get___(void * jarg1) {
  long jresult ;
  Ogre::TerrainGroup::TerrainSlot *arg1 = (Ogre::TerrainGroup::TerrainSlot *) 0 ;
  long result;
  
  arg1 = (Ogre::TerrainGroup::TerrainSlot *)jarg1; 
  result = (long) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_TerrainSlot_def_set___(void * jarg1, void * jarg2) {
  Ogre::TerrainGroup::TerrainSlot *arg1 = (Ogre::TerrainGroup::TerrainSlot *) 0 ;
  Ogre::TerrainGroup::TerrainSlotDefinition *arg2 = (Ogre::TerrainGroup::TerrainSlotDefinition *) 0 ;
  
  arg1 = (Ogre::TerrainGroup::TerrainSlot *)jarg1; 
  arg2 = (Ogre::TerrainGroup::TerrainSlotDefinition *)jarg2; 
  if (arg1) (arg1)->def = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainGroup_TerrainSlot_def_get___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainGroup::TerrainSlot *arg1 = (Ogre::TerrainGroup::TerrainSlot *) 0 ;
  Ogre::TerrainGroup::TerrainSlotDefinition *result = 0 ;
  
  arg1 = (Ogre::TerrainGroup::TerrainSlot *)jarg1; 
  result = (Ogre::TerrainGroup::TerrainSlotDefinition *)& ((arg1)->def);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_TerrainSlot_instance_set___(void * jarg1, void * jarg2) {
  Ogre::TerrainGroup::TerrainSlot *arg1 = (Ogre::TerrainGroup::TerrainSlot *) 0 ;
  Ogre::Terrain *arg2 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::TerrainGroup::TerrainSlot *)jarg1; 
  arg2 = (Ogre::Terrain *)jarg2; 
  if (arg1) (arg1)->instance = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainGroup_TerrainSlot_instance_get___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainGroup::TerrainSlot *arg1 = (Ogre::TerrainGroup::TerrainSlot *) 0 ;
  Ogre::Terrain *result = 0 ;
  
  arg1 = (Ogre::TerrainGroup::TerrainSlot *)jarg1; 
  result = (Ogre::Terrain *) ((arg1)->instance);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainGroup_TerrainSlot___(long jarg1, long jarg2) {
  void * jresult ;
  long arg1 ;
  long arg2 ;
  Ogre::TerrainGroup::TerrainSlot *result = 0 ;
  
  arg1 = (long)jarg1; 
  arg2 = (long)jarg2; 
  {
    try {
      result = (Ogre::TerrainGroup::TerrainSlot *)new Ogre::TerrainGroup::TerrainSlot(arg1,arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TerrainGroup_TerrainSlot___(void * jarg1) {
  Ogre::TerrainGroup::TerrainSlot *arg1 = (Ogre::TerrainGroup::TerrainSlot *) 0 ;
  
  arg1 = (Ogre::TerrainGroup::TerrainSlot *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_TerrainSlot_freeInstance___(void * jarg1) {
  Ogre::TerrainGroup::TerrainSlot *arg1 = (Ogre::TerrainGroup::TerrainSlot *) 0 ;
  
  arg1 = (Ogre::TerrainGroup::TerrainSlot *)jarg1; 
  {
    try {
      (arg1)->freeInstance();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainGroup_getTerrainDefinition___(void * jarg1, long jarg2, long jarg3) {
  void * jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  Ogre::TerrainGroup::TerrainSlotDefinition *result = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  {
    try {
      result = (Ogre::TerrainGroup::TerrainSlotDefinition *)((Ogre::TerrainGroup const *)arg1)->getTerrainDefinition(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainGroup_getTerrain___(void * jarg1, long jarg2, long jarg3) {
  void * jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  Ogre::Terrain *result = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  {
    try {
      result = (Ogre::Terrain *)((Ogre::TerrainGroup const *)arg1)->getTerrain(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_freeTemporaryResources___(void * jarg1) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      (arg1)->freeTemporaryResources();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_update__SWIG_0___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->update(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_update__SWIG_1___(void * jarg1) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      (arg1)->update();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_updateGeometry___(void * jarg1) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      (arg1)->updateGeometry();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_updateDerivedData__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned char jarg3) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  bool arg2 ;
  Ogre::uint8 arg3 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (Ogre::uint8)jarg3; 
  {
    try {
      (arg1)->updateDerivedData(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_updateDerivedData__SWIG_1___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->updateDerivedData(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_updateDerivedData__SWIG_2___(void * jarg1) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      (arg1)->updateDerivedData();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_RayResult_hit_set___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainGroup::RayResult *arg1 = (Ogre::TerrainGroup::RayResult *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainGroup::RayResult *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hit = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainGroup_RayResult_hit_get___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainGroup::RayResult *arg1 = (Ogre::TerrainGroup::RayResult *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainGroup::RayResult *)jarg1; 
  result = (bool) ((arg1)->hit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_RayResult_terrain_set___(void * jarg1, void * jarg2) {
  Ogre::TerrainGroup::RayResult *arg1 = (Ogre::TerrainGroup::RayResult *) 0 ;
  Ogre::Terrain *arg2 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::TerrainGroup::RayResult *)jarg1; 
  arg2 = (Ogre::Terrain *)jarg2; 
  if (arg1) (arg1)->terrain = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainGroup_RayResult_terrain_get___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainGroup::RayResult *arg1 = (Ogre::TerrainGroup::RayResult *) 0 ;
  Ogre::Terrain *result = 0 ;
  
  arg1 = (Ogre::TerrainGroup::RayResult *)jarg1; 
  result = (Ogre::Terrain *) ((arg1)->terrain);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_RayResult_position_set___(void * jarg1, void * jarg2) {
  Ogre::TerrainGroup::RayResult *arg1 = (Ogre::TerrainGroup::RayResult *) 0 ;
  Ogre::Vector3 *arg2 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::TerrainGroup::RayResult *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainGroup_RayResult_position_get___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainGroup::RayResult *arg1 = (Ogre::TerrainGroup::RayResult *) 0 ;
  Ogre::Vector3 *result = 0 ;
  
  arg1 = (Ogre::TerrainGroup::RayResult *)jarg1; 
  result = (Ogre::Vector3 *)& ((arg1)->position);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainGroup_RayResult___(unsigned int jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  bool arg1 ;
  Ogre::Terrain *arg2 = (Ogre::Terrain *) 0 ;
  Ogre::Vector3 *arg3 = 0 ;
  Ogre::TerrainGroup::RayResult *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (Ogre::Terrain *)jarg2; 
  arg3 = (Ogre::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Ogre::TerrainGroup::RayResult *)new Ogre::TerrainGroup::RayResult(arg1,arg2,(Ogre::Vector3 const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TerrainGroup_RayResult___(void * jarg1) {
  Ogre::TerrainGroup::RayResult *arg1 = (Ogre::TerrainGroup::RayResult *) 0 ;
  
  arg1 = (Ogre::TerrainGroup::RayResult *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TerrainGroup_getHeightAtWorldPosition__SWIG_0___(void * jarg1, float jarg2, float jarg3, float jarg4, void * jarg5) {
  float jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Terrain **arg5 = (Ogre::Terrain **) 0 ;
  float result;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = (Ogre::Terrain **)jarg5; 
  {
    try {
      result = (float)(arg1)->getHeightAtWorldPosition(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TerrainGroup_getHeightAtWorldPosition__SWIG_1___(void * jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  float result;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  {
    try {
      result = (float)(arg1)->getHeightAtWorldPosition(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TerrainGroup_getHeightAtWorldPosition__SWIG_2___(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Terrain **arg3 = (Ogre::Terrain **) 0 ;
  float result;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Ogre::Terrain **)jarg3; 
  {
    try {
      result = (float)(arg1)->getHeightAtWorldPosition((Ogre::Vector3 const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TerrainGroup_getHeightAtWorldPosition__SWIG_3___(void * jarg1, void * jarg2) {
  float jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  float result;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (float)(arg1)->getHeightAtWorldPosition((Ogre::Vector3 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_boxIntersects___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::AxisAlignedBox *arg2 = 0 ;
  Ogre::TerrainGroup::TerrainList *arg3 = (Ogre::TerrainGroup::TerrainList *) 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (Ogre::AxisAlignedBox *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::AxisAlignedBox const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::TerrainGroup::TerrainList *)jarg3; 
  {
    try {
      ((Ogre::TerrainGroup const *)arg1)->boxIntersects((Ogre::AxisAlignedBox const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_sphereIntersects___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::Sphere *arg2 = 0 ;
  Ogre::TerrainGroup::TerrainList *arg3 = (Ogre::TerrainGroup::TerrainList *) 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (Ogre::Sphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Sphere const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::TerrainGroup::TerrainList *)jarg3; 
  {
    try {
      ((Ogre::TerrainGroup const *)arg1)->sphereIntersects((Ogre::Sphere const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_convertWorldPositionToTerrainSlot___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (Ogre::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (long *)jarg3; 
  arg4 = (long *)jarg4; 
  {
    try {
      ((Ogre::TerrainGroup const *)arg1)->convertWorldPositionToTerrainSlot((Ogre::Vector3 const &)*arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_convertTerrainSlotToWorldPosition___(void * jarg1, long jarg2, long jarg3, void * jarg4) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  Ogre::Vector3 *arg4 = (Ogre::Vector3 *) 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (Ogre::Vector3 *)jarg4; 
  {
    try {
      ((Ogre::TerrainGroup const *)arg1)->convertTerrainSlotToWorldPosition(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainGroup_isDerivedDataUpdateInProgress___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      result = (bool)((Ogre::TerrainGroup const *)arg1)->isDerivedDataUpdateInProgress();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainGroup_getTerrainSlots___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::TerrainGroup::TerrainSlotMap *result = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      result = (Ogre::TerrainGroup::TerrainSlotMap *) &((Ogre::TerrainGroup const *)arg1)->getTerrainSlots();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainGroup_packIndex___(void * jarg1, long jarg2, long jarg3) {
  unsigned int jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  Ogre::uint32 result;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  {
    try {
      result = (Ogre::uint32)((Ogre::TerrainGroup const *)arg1)->packIndex(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_unpackIndex___(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::uint32 arg2 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  arg3 = (long *)jarg3; 
  arg4 = (long *)jarg4; 
  {
    try {
      (arg1)->unpackIndex(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_TerrainGroup_generateFilename___(void * jarg1, long jarg2, long jarg3) {
  char * jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  Ogre::String result;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  {
    try {
      result = ((Ogre::TerrainGroup const *)arg1)->generateFilename(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_saveGroupDefinition__SWIG_0___(void * jarg1, char * jarg2) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->saveGroupDefinition((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_saveGroupDefinition__SWIG_1___(void * jarg1, void * jarg2) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::StreamSerialiser *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (Ogre::StreamSerialiser *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::StreamSerialiser & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->saveGroupDefinition(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_loadGroupDefinition__SWIG_0___(void * jarg1, char * jarg2) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->loadGroupDefinition((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_loadGroupDefinition__SWIG_1___(void * jarg1, void * jarg2) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::StreamSerialiser *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (Ogre::StreamSerialiser *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::StreamSerialiser & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->loadGroupDefinition(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainGroup_CHUNK_ID_get___() {
  unsigned int jresult ;
  Ogre::uint32 result;
  
  result = (Ogre::uint32)(Ogre::uint32)Ogre::TerrainGroup::CHUNK_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TerrainGroup_CHUNK_VERSION_get___() {
  unsigned short jresult ;
  Ogre::uint16 result;
  
  result = (Ogre::uint16)(Ogre::uint16)Ogre::TerrainGroup::CHUNK_VERSION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_increaseLodLevel__SWIG_0___(void * jarg1, long jarg2, long jarg3, unsigned int jarg4) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  bool arg4 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->increaseLodLevel(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_increaseLodLevel__SWIG_1___(void * jarg1, long jarg2, long jarg3) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  {
    try {
      (arg1)->increaseLodLevel(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_decreaseLodLevel___(void * jarg1, long jarg2, long jarg3) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  {
    try {
      (arg1)->decreaseLodLevel(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_setAutoUpdateLod___(void * jarg1, void * jarg2) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  Ogre::TerrainAutoUpdateLod *arg2 = (Ogre::TerrainAutoUpdateLod *) 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (Ogre::TerrainAutoUpdateLod *)jarg2; 
  {
    try {
      (arg1)->setAutoUpdateLod(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_autoUpdateLod___(void * jarg1, long jarg2, long jarg3, unsigned int jarg4, void * jarg5) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  long arg2 ;
  long arg3 ;
  bool arg4 ;
  Ogre::Any *arg5 = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (Ogre::Any *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Any const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->autoUpdateLod(arg2,arg3,arg4,(Ogre::Any const &)*arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainGroup_autoUpdateLodAll___(void * jarg1, unsigned int jarg2, void * jarg3) {
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  bool arg2 ;
  Ogre::Any *arg3 = 0 ;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (Ogre::Any *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Any const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->autoUpdateLodAll(arg2,(Ogre::Any const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_orgfogre_TerrainGroup_getNumTerrainPrepareRequests___(void * jarg1) {
  unsigned long jresult ;
  Ogre::TerrainGroup *arg1 = (Ogre::TerrainGroup *) 0 ;
  size_t result;
  
  arg1 = (Ogre::TerrainGroup *)jarg1; 
  {
    try {
      result = ((Ogre::TerrainGroup const *)arg1)->getNumTerrainPrepareRequests();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_TERRAINLODDATA_CHUNK_ID_get___() {
  unsigned int jresult ;
  Ogre::uint32 result;
  
  result = (Ogre::uint32)(Ogre::uint32)Ogre::TerrainLodManager::TERRAINLODDATA_CHUNK_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_TERRAINLODDATA_CHUNK_VERSION_get___() {
  unsigned short jresult ;
  Ogre::uint16 result;
  
  result = (Ogre::uint16)(Ogre::uint16)Ogre::TerrainLodManager::TERRAINLODDATA_CHUNK_VERSION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainLodManager_LoadLodRequest___(void * jarg1, unsigned short jarg2, unsigned short jarg3, unsigned short jarg4) {
  void * jresult ;
  Ogre::TerrainLodManager *arg1 = (Ogre::TerrainLodManager *) 0 ;
  Ogre::uint16 arg2 ;
  Ogre::uint16 arg3 ;
  Ogre::uint16 arg4 ;
  Ogre::TerrainLodManager::LoadLodRequest *result = 0 ;
  
  arg1 = (Ogre::TerrainLodManager *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  arg3 = (Ogre::uint16)jarg3; 
  arg4 = (Ogre::uint16)jarg4; 
  {
    try {
      result = (Ogre::TerrainLodManager::LoadLodRequest *)new Ogre::TerrainLodManager::LoadLodRequest(arg1,arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_LoadLodRequest_requestee_set___(void * jarg1, void * jarg2) {
  Ogre::TerrainLodManager::LoadLodRequest *arg1 = (Ogre::TerrainLodManager::LoadLodRequest *) 0 ;
  Ogre::TerrainLodManager *arg2 = (Ogre::TerrainLodManager *) 0 ;
  
  arg1 = (Ogre::TerrainLodManager::LoadLodRequest *)jarg1; 
  arg2 = (Ogre::TerrainLodManager *)jarg2; 
  if (arg1) (arg1)->requestee = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_LoadLodRequest_requestee_get___(void * jarg1) {
  void * jresult ;
  Ogre::TerrainLodManager::LoadLodRequest *arg1 = (Ogre::TerrainLodManager::LoadLodRequest *) 0 ;
  Ogre::TerrainLodManager *result = 0 ;
  
  arg1 = (Ogre::TerrainLodManager::LoadLodRequest *)jarg1; 
  result = (Ogre::TerrainLodManager *) ((arg1)->requestee);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_LoadLodRequest_currentPreparedLod_set___(void * jarg1, unsigned short jarg2) {
  Ogre::TerrainLodManager::LoadLodRequest *arg1 = (Ogre::TerrainLodManager::LoadLodRequest *) 0 ;
  Ogre::uint16 arg2 ;
  
  arg1 = (Ogre::TerrainLodManager::LoadLodRequest *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  if (arg1) (arg1)->currentPreparedLod = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_LoadLodRequest_currentPreparedLod_get___(void * jarg1) {
  unsigned short jresult ;
  Ogre::TerrainLodManager::LoadLodRequest *arg1 = (Ogre::TerrainLodManager::LoadLodRequest *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::TerrainLodManager::LoadLodRequest *)jarg1; 
  result = (Ogre::uint16) ((arg1)->currentPreparedLod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_LoadLodRequest_currentLoadedLod_set___(void * jarg1, unsigned short jarg2) {
  Ogre::TerrainLodManager::LoadLodRequest *arg1 = (Ogre::TerrainLodManager::LoadLodRequest *) 0 ;
  Ogre::uint16 arg2 ;
  
  arg1 = (Ogre::TerrainLodManager::LoadLodRequest *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  if (arg1) (arg1)->currentLoadedLod = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_LoadLodRequest_currentLoadedLod_get___(void * jarg1) {
  unsigned short jresult ;
  Ogre::TerrainLodManager::LoadLodRequest *arg1 = (Ogre::TerrainLodManager::LoadLodRequest *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::TerrainLodManager::LoadLodRequest *)jarg1; 
  result = (Ogre::uint16) ((arg1)->currentLoadedLod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_LoadLodRequest_requestedLod_set___(void * jarg1, unsigned short jarg2) {
  Ogre::TerrainLodManager::LoadLodRequest *arg1 = (Ogre::TerrainLodManager::LoadLodRequest *) 0 ;
  Ogre::uint16 arg2 ;
  
  arg1 = (Ogre::TerrainLodManager::LoadLodRequest *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  if (arg1) (arg1)->requestedLod = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_LoadLodRequest_requestedLod_get___(void * jarg1) {
  unsigned short jresult ;
  Ogre::TerrainLodManager::LoadLodRequest *arg1 = (Ogre::TerrainLodManager::LoadLodRequest *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::TerrainLodManager::LoadLodRequest *)jarg1; 
  result = (Ogre::uint16) ((arg1)->requestedLod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TerrainLodManager_LoadLodRequest___(void * jarg1) {
  Ogre::TerrainLodManager::LoadLodRequest *arg1 = (Ogre::TerrainLodManager::LoadLodRequest *) 0 ;
  
  arg1 = (Ogre::TerrainLodManager::LoadLodRequest *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_LodInfo_treeStart_set___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainLodManager::LodInfo *arg1 = (Ogre::TerrainLodManager::LodInfo *) 0 ;
  Ogre::uint arg2 ;
  
  arg1 = (Ogre::TerrainLodManager::LodInfo *)jarg1; 
  arg2 = (Ogre::uint)jarg2; 
  if (arg1) (arg1)->treeStart = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_LodInfo_treeStart_get___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainLodManager::LodInfo *arg1 = (Ogre::TerrainLodManager::LodInfo *) 0 ;
  Ogre::uint result;
  
  arg1 = (Ogre::TerrainLodManager::LodInfo *)jarg1; 
  result = (Ogre::uint) ((arg1)->treeStart);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_LodInfo_treeEnd_set___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainLodManager::LodInfo *arg1 = (Ogre::TerrainLodManager::LodInfo *) 0 ;
  Ogre::uint arg2 ;
  
  arg1 = (Ogre::TerrainLodManager::LodInfo *)jarg1; 
  arg2 = (Ogre::uint)jarg2; 
  if (arg1) (arg1)->treeEnd = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_LodInfo_treeEnd_get___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainLodManager::LodInfo *arg1 = (Ogre::TerrainLodManager::LodInfo *) 0 ;
  Ogre::uint result;
  
  arg1 = (Ogre::TerrainLodManager::LodInfo *)jarg1; 
  result = (Ogre::uint) ((arg1)->treeEnd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_LodInfo_isLast_set___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainLodManager::LodInfo *arg1 = (Ogre::TerrainLodManager::LodInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::TerrainLodManager::LodInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isLast = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_LodInfo_isLast_get___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainLodManager::LodInfo *arg1 = (Ogre::TerrainLodManager::LodInfo *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainLodManager::LodInfo *)jarg1; 
  result = (bool) ((arg1)->isLast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_LodInfo_resolution_set___(void * jarg1, unsigned short jarg2) {
  Ogre::TerrainLodManager::LodInfo *arg1 = (Ogre::TerrainLodManager::LodInfo *) 0 ;
  Ogre::uint16 arg2 ;
  
  arg1 = (Ogre::TerrainLodManager::LodInfo *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  if (arg1) (arg1)->resolution = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_LodInfo_resolution_get___(void * jarg1) {
  unsigned short jresult ;
  Ogre::TerrainLodManager::LodInfo *arg1 = (Ogre::TerrainLodManager::LodInfo *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::TerrainLodManager::LodInfo *)jarg1; 
  result = (Ogre::uint16) ((arg1)->resolution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_LodInfo_size_set___(void * jarg1, unsigned int jarg2) {
  Ogre::TerrainLodManager::LodInfo *arg1 = (Ogre::TerrainLodManager::LodInfo *) 0 ;
  Ogre::uint arg2 ;
  
  arg1 = (Ogre::TerrainLodManager::LodInfo *)jarg1; 
  arg2 = (Ogre::uint)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_LodInfo_size_get___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainLodManager::LodInfo *arg1 = (Ogre::TerrainLodManager::LodInfo *) 0 ;
  Ogre::uint result;
  
  arg1 = (Ogre::TerrainLodManager::LodInfo *)jarg1; 
  result = (Ogre::uint) ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainLodManager_LodInfo___() {
  void * jresult ;
  Ogre::TerrainLodManager::LodInfo *result = 0 ;
  
  {
    try {
      result = (Ogre::TerrainLodManager::LodInfo *)new Ogre::TerrainLodManager::LodInfo();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TerrainLodManager_LodInfo___(void * jarg1) {
  Ogre::TerrainLodManager::LodInfo *arg1 = (Ogre::TerrainLodManager::LodInfo *) 0 ;
  
  arg1 = (Ogre::TerrainLodManager::LodInfo *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainLodManager__SWIG_0___(void * jarg1, void * jarg2) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::DataStreamPtr *arg2 = 0 ;
  Ogre::TerrainLodManager *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  arg2 = (Ogre::DataStreamPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::DataStreamPtr & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Ogre::TerrainLodManager *)new Ogre::TerrainLodManager(arg1,*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainLodManager__SWIG_1___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::TerrainLodManager *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::TerrainLodManager *)new Ogre::TerrainLodManager(arg1,(Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TerrainLodManager__SWIG_2___(void * jarg1) {
  void * jresult ;
  Ogre::Terrain *arg1 = (Ogre::Terrain *) 0 ;
  Ogre::TerrainLodManager *result = 0 ;
  
  arg1 = (Ogre::Terrain *)jarg1; 
  {
    try {
      result = (Ogre::TerrainLodManager *)new Ogre::TerrainLodManager(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TerrainLodManager___(void * jarg1) {
  Ogre::TerrainLodManager *arg1 = (Ogre::TerrainLodManager *) 0 ;
  
  arg1 = (Ogre::TerrainLodManager *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_open___(void * jarg1, char * jarg2) {
  Ogre::TerrainLodManager *arg1 = (Ogre::TerrainLodManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::TerrainLodManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->open((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_close___(void * jarg1) {
  Ogre::TerrainLodManager *arg1 = (Ogre::TerrainLodManager *) 0 ;
  
  arg1 = (Ogre::TerrainLodManager *)jarg1; 
  {
    try {
      (arg1)->close();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_isOpen___(void * jarg1) {
  unsigned int jresult ;
  Ogre::TerrainLodManager *arg1 = (Ogre::TerrainLodManager *) 0 ;
  bool result;
  
  arg1 = (Ogre::TerrainLodManager *)jarg1; 
  {
    try {
      result = (bool)((Ogre::TerrainLodManager const *)arg1)->isOpen();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_updateToLodLevel__SWIG_0___(void * jarg1, int jarg2, unsigned int jarg3) {
  Ogre::TerrainLodManager *arg1 = (Ogre::TerrainLodManager *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Ogre::TerrainLodManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->updateToLodLevel(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_updateToLodLevel__SWIG_1___(void * jarg1, int jarg2) {
  Ogre::TerrainLodManager *arg1 = (Ogre::TerrainLodManager *) 0 ;
  int arg2 ;
  
  arg1 = (Ogre::TerrainLodManager *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->updateToLodLevel(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_saveLodData___(void * jarg1, void * jarg2) {
  Ogre::StreamSerialiser *arg1 = 0 ;
  Ogre::Terrain *arg2 = (Ogre::Terrain *) 0 ;
  
  arg1 = (Ogre::StreamSerialiser *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::StreamSerialiser & type is null", 0);
    return ;
  } 
  arg2 = (Ogre::Terrain *)jarg2; 
  {
    try {
      Ogre::TerrainLodManager::saveLodData(*arg1,arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_fillBufferAtLod___(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  Ogre::TerrainLodManager *arg1 = (Ogre::TerrainLodManager *) 0 ;
  Ogre::uint arg2 ;
  float *arg3 = (float *) 0 ;
  Ogre::uint arg4 ;
  
  arg1 = (Ogre::TerrainLodManager *)jarg1; 
  arg2 = (Ogre::uint)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (Ogre::uint)jarg4; 
  {
    try {
      (arg1)->fillBufferAtLod(arg2,(float const *)arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_readLodData___(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  Ogre::TerrainLodManager *arg1 = (Ogre::TerrainLodManager *) 0 ;
  Ogre::uint16 arg2 ;
  Ogre::uint16 arg3 ;
  
  arg1 = (Ogre::TerrainLodManager *)jarg1; 
  arg2 = (Ogre::uint16)jarg2; 
  arg3 = (Ogre::uint16)jarg3; 
  {
    try {
      (arg1)->readLodData(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_waitForDerivedProcesses___(void * jarg1) {
  Ogre::TerrainLodManager *arg1 = (Ogre::TerrainLodManager *) 0 ;
  
  arg1 = (Ogre::TerrainLodManager *)jarg1; 
  {
    try {
      (arg1)->waitForDerivedProcesses();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_getHighestLodPrepared___(void * jarg1) {
  int jresult ;
  Ogre::TerrainLodManager *arg1 = (Ogre::TerrainLodManager *) 0 ;
  int result;
  
  arg1 = (Ogre::TerrainLodManager *)jarg1; 
  {
    try {
      result = (int)(arg1)->getHighestLodPrepared();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_getHighestLodLoaded___(void * jarg1) {
  int jresult ;
  Ogre::TerrainLodManager *arg1 = (Ogre::TerrainLodManager *) 0 ;
  int result;
  
  arg1 = (Ogre::TerrainLodManager *)jarg1; 
  {
    try {
      result = (int)(arg1)->getHighestLodLoaded();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_getTargetLodLevel___(void * jarg1) {
  int jresult ;
  Ogre::TerrainLodManager *arg1 = (Ogre::TerrainLodManager *) 0 ;
  int result;
  
  arg1 = (Ogre::TerrainLodManager *)jarg1; 
  {
    try {
      result = (int)(arg1)->getTargetLodLevel();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TerrainLodManager_getLodInfo___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Ogre::TerrainLodManager *arg1 = (Ogre::TerrainLodManager *) 0 ;
  Ogre::uint arg2 ;
  Ogre::TerrainLodManager::LodInfo *result = 0 ;
  
  arg1 = (Ogre::TerrainLodManager *)jarg1; 
  arg2 = (Ogre::uint)jarg2; 
  {
    try {
      result = (Ogre::TerrainLodManager::LodInfo *) &(arg1)->getLodInfo(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT Ogre::TerrainMaterialGenerator::Profile * SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_SM2Profile_SWIGUpcast___(Ogre::TerrainMaterialGeneratorA::SM2Profile *jarg1) {
    return (Ogre::TerrainMaterialGenerator::Profile *)jarg1;
}

SWIGEXPORT Ogre::TerrainMaterialGenerator * SWIGSTDCALL CSharp_orgfogre_TerrainMaterialGeneratorA_SWIGUpcast___(Ogre::TerrainMaterialGeneratorA *jarg1) {
    return (Ogre::TerrainMaterialGenerator *)jarg1;
}

SWIGEXPORT Ogre::Terrain::GpuBufferAllocator * SWIGSTDCALL CSharp_orgfogre_Terrain_DefaultGpuBufferAllocator_SWIGUpcast___(Ogre::Terrain::DefaultGpuBufferAllocator *jarg1) {
    return (Ogre::Terrain::GpuBufferAllocator *)jarg1;
}

SWIGEXPORT Ogre::SceneManager::Listener * SWIGSTDCALL CSharp_orgfogre_Terrain_SWIGUpcast___(Ogre::Terrain *jarg1) {
    return (Ogre::SceneManager::Listener *)jarg1;
}

#ifdef __cplusplus
}
#endif

