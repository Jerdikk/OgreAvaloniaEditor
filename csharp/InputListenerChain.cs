//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class InputListenerChain : InputListener {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal InputListenerChain(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BitesPINVOKE.InputListenerChain_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(InputListenerChain obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BitesPINVOKE.delete_InputListenerChain(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public InputListenerChain() : this(BitesPINVOKE.new_InputListenerChain__SWIG_0(), true) {
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
  }

  public InputListenerChain(InputListenerList chain) : this(BitesPINVOKE.new_InputListenerChain__SWIG_1(InputListenerList.getCPtr(chain)), true) {
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool keyPressed(KeyboardEvent evt) {
    bool ret = BitesPINVOKE.InputListenerChain_keyPressed(swigCPtr, KeyboardEvent.getCPtr(evt));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool keyReleased(KeyboardEvent evt) {
    bool ret = BitesPINVOKE.InputListenerChain_keyReleased(swigCPtr, KeyboardEvent.getCPtr(evt));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool touchMoved(TouchFingerEvent evt) {
    bool ret = BitesPINVOKE.InputListenerChain_touchMoved(swigCPtr, TouchFingerEvent.getCPtr(evt));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool touchPressed(TouchFingerEvent evt) {
    bool ret = BitesPINVOKE.InputListenerChain_touchPressed(swigCPtr, TouchFingerEvent.getCPtr(evt));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool touchReleased(TouchFingerEvent evt) {
    bool ret = BitesPINVOKE.InputListenerChain_touchReleased(swigCPtr, TouchFingerEvent.getCPtr(evt));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool mouseMoved(MouseMotionEvent evt) {
    bool ret = BitesPINVOKE.InputListenerChain_mouseMoved(swigCPtr, MouseMotionEvent.getCPtr(evt));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool mouseWheelRolled(MouseWheelEvent evt) {
    bool ret = BitesPINVOKE.InputListenerChain_mouseWheelRolled(swigCPtr, MouseWheelEvent.getCPtr(evt));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool mousePressed(MouseButtonEvent evt) {
    bool ret = BitesPINVOKE.InputListenerChain_mousePressed(swigCPtr, MouseButtonEvent.getCPtr(evt));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool mouseReleased(MouseButtonEvent evt) {
    bool ret = BitesPINVOKE.InputListenerChain_mouseReleased(swigCPtr, MouseButtonEvent.getCPtr(evt));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool textInput(TextInputEvent evt) {
    bool ret = BitesPINVOKE.InputListenerChain_textInput(swigCPtr, TextInputEvent.getCPtr(evt));
    if (BitesPINVOKE.SWIGPendingException.Pending) throw BitesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
