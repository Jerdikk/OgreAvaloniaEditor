/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_OgreOverlay(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_OgreOverlay(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_OgreOverlay(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


/* Includes the header in the wrapper code */
#include "Ogre.h"

#include "OgreOverlayPrerequisites.h"
#include "OgreFont.h"
#include "OgreFontManager.h"
#include "OgreOverlay.h"
#include "OgreOverlaySystem.h"
#include "OgreOverlayContainer.h"
#include "OgreOverlayElement.h"
#include "OgreOverlayElementFactory.h"
#include "OgreOverlayManager.h"
#include "OgrePanelOverlayElement.h"
#include "OgreTextAreaOverlayElement.h"



#include "OgreImGuiOverlay.h"


#include <string>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>

SWIGINTERN Ogre::OverlayContainer *Ogre_OverlayElement_castOverlayContainer(Ogre::OverlayElement *self){
    return dynamic_cast<Ogre::OverlayContainer*>(self);
  }
SWIGINTERN Ogre::PanelOverlayElement *Ogre_OverlayElement_castPanelOverlayElement(Ogre::OverlayElement *self){
    return dynamic_cast<Ogre::PanelOverlayElement*>(self);
  }
SWIGINTERN Ogre::TextAreaOverlayElement *Ogre_OverlayElement_castTextAreaOverlayElement(Ogre::OverlayElement *self){
    return dynamic_cast<Ogre::TextAreaOverlayElement*>(self);
  }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "OgreOverlayCSHARP_wrap.h"

SwigDirector_OverlayElementFactory::SwigDirector_OverlayElementFactory() : Ogre::OverlayElementFactory(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OverlayElementFactory::~SwigDirector_OverlayElementFactory() {
  
}


Ogre::OverlayElement *SwigDirector_OverlayElementFactory::createOverlayElement(Ogre::String const &instanceName) {
  Ogre::OverlayElement *c_result = 0 ;
  void * jresult = 0 ;
  char * jinstanceName = 0 ;
  
  if (!swig_callbackcreateOverlayElement) {
    Swig::DirectorPureVirtualException::raise("Ogre::OverlayElementFactory::createOverlayElement");
    return c_result;
  } else {
    jinstanceName = SWIG_csharp_string_callback((&instanceName)->c_str()); 
    jresult = (void *) swig_callbackcreateOverlayElement(jinstanceName);
    c_result = (Ogre::OverlayElement *)jresult; 
  }
  return c_result;
}

void SwigDirector_OverlayElementFactory::destroyOverlayElement(Ogre::OverlayElement *pElement) {
  void * jpElement = 0 ;
  
  if (!swig_callbackdestroyOverlayElement) {
    Ogre::OverlayElementFactory::destroyOverlayElement(pElement);
    return;
  } else {
    jpElement = (void *) pElement; 
    swig_callbackdestroyOverlayElement(jpElement);
  }
}

Ogre::String const &SwigDirector_OverlayElementFactory::getTypeName() const {
  static Ogre::String result_default ;
  Ogre::String * c_result ;
  char * jresult = 0 ;
  
  result_default = SwigValueInit< Ogre::String >();
  c_result = &result_default;
  if (!swig_callbackgetTypeName) {
    Swig::DirectorPureVirtualException::raise("Ogre::OverlayElementFactory::getTypeName");
    return (Ogre::String const &)*c_result;
  } else {
    jresult = (char *) swig_callbackgetTypeName();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return (Ogre::String const &)*c_result;
    }
    /* possible thread/reentrant code problem */
    static Ogre::String c_result_str;
    c_result_str = jresult;
    c_result = &c_result_str; 
  }
  return (Ogre::String const &)*c_result;
}

void SwigDirector_OverlayElementFactory::swig_connect_director(SWIG_Callback0_t callbackcreateOverlayElement, SWIG_Callback1_t callbackdestroyOverlayElement, SWIG_Callback2_t callbackgetTypeName) {
  swig_callbackcreateOverlayElement = callbackcreateOverlayElement;
  swig_callbackdestroyOverlayElement = callbackdestroyOverlayElement;
  swig_callbackgetTypeName = callbackgetTypeName;
}

void SwigDirector_OverlayElementFactory::swig_init_callbacks() {
  swig_callbackcreateOverlayElement = 0;
  swig_callbackdestroyOverlayElement = 0;
  swig_callbackgetTypeName = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_FontPtr__SWIG_0___(void * jarg1) {
  void * jresult ;
  std::nullptr_t arg1 ;
  std::nullptr_t *argp1 ;
  Ogre::SharedPtr< Ogre::Font > *result = 0 ;
  
  argp1 = (std::nullptr_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::nullptr_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (Ogre::SharedPtr< Ogre::Font > *)new Ogre::SharedPtr< Ogre::Font >(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_FontPtr__SWIG_1___() {
  void * jresult ;
  Ogre::SharedPtr< Ogre::Font > *result = 0 ;
  
  {
    try {
      result = (Ogre::SharedPtr< Ogre::Font > *)new Ogre::SharedPtr< Ogre::Font >();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_FontPtr__SWIG_2___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = 0 ;
  Ogre::SharedPtr< Ogre::Font > *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::SharedPtr< Ogre::Font > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Ogre::SharedPtr< Ogre::Font > *)new Ogre::SharedPtr< Ogre::Font >((Ogre::SharedPtr< Ogre::Font > const &)*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_FontPtr___deref_____(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::Font *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (Ogre::Font *)((Ogre::SharedPtr< Ogre::Font > const *)arg1)->operator ->();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_FontPtr___(void * jarg1) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_setType___(void * jarg1, int jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::FontType arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::FontType)jarg2; 
  {
    try {
      (*arg1)->setType(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_FontPtr_getType___(void * jarg1) {
  int jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::FontType result;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (Ogre::FontType)(*arg1)->getType();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_setSource___(void * jarg1, char * jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (*arg1)->setSource((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_FontPtr_getSource___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (Ogre::String *) &(*arg1)->getSource();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_setTrueTypeSize___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setTrueTypeSize(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_setTrueTypeResolution___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::uint arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::uint)jarg2; 
  {
    try {
      (*arg1)->setTrueTypeResolution(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_FontPtr_getTrueTypeSize___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getTrueTypeSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_FontPtr_getTrueTypeResolution___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::uint result;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (Ogre::uint)(*arg1)->getTrueTypeResolution();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_FontPtr_getTrueTypeMaxBearingY___(void * jarg1) {
  int jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  int result;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (int)(*arg1)->getTrueTypeMaxBearingY();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_FontPtr_getGlyphTexCoords___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::Font::CodePoint arg2 ;
  Ogre::Font::UVRect *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::Font::CodePoint)jarg2; 
  {
    try {
      result = (Ogre::Font::UVRect *) &(*arg1)->getGlyphTexCoords(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_setGlyphInfoFromTexCoords__SWIG_0___(void * jarg1, unsigned int jarg2, void * jarg3, float jarg4) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::Font::CodePoint arg2 ;
  Ogre::Font::UVRect *arg3 = 0 ;
  float arg4 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::Font::CodePoint)jarg2; 
  arg3 = (Ogre::Font::UVRect *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Font::UVRect const & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  {
    try {
      (*arg1)->setGlyphInfoFromTexCoords(arg2,(Ogre::Font::UVRect const &)*arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_setGlyphInfoFromTexCoords__SWIG_1___(void * jarg1, unsigned int jarg2, void * jarg3) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::Font::CodePoint arg2 ;
  Ogre::Font::UVRect *arg3 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::Font::CodePoint)jarg2; 
  arg3 = (Ogre::Font::UVRect *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Font::UVRect const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setGlyphInfoFromTexCoords(arg2,(Ogre::Font::UVRect const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_setGlyphInfo___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::GlyphInfo *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::GlyphInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::GlyphInfo const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setGlyphInfo((Ogre::GlyphInfo const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_FontPtr_getGlyphAspectRatio___(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::Font::CodePoint arg2 ;
  float result;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::Font::CodePoint)jarg2; 
  {
    try {
      result = (float)(*arg1)->getGlyphAspectRatio(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_setGlyphAspectRatio___(void * jarg1, unsigned int jarg2, float jarg3) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::Font::CodePoint arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::Font::CodePoint)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (*arg1)->setGlyphAspectRatio(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_FontPtr_getGlyphInfo___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::Font::CodePoint arg2 ;
  Ogre::GlyphInfo *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::Font::CodePoint)jarg2; 
  {
    try {
      result = (Ogre::GlyphInfo *) &(*arg1)->getGlyphInfo(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_addCodePointRange___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::Font::CodePointRange *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::Font::CodePointRange *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Font::CodePointRange const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->addCodePointRange((Ogre::Font::CodePointRange const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_clearCodePointRanges___(void * jarg1) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      (*arg1)->clearCodePointRanges();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_FontPtr_getCodePointRangeList___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::Font::CodePointRangeList *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (Ogre::Font::CodePointRangeList *) &(*arg1)->getCodePointRangeList();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_FontPtr_getMaterial___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::MaterialPtr *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (Ogre::MaterialPtr *) &(*arg1)->getMaterial();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_putText__SWIG_0___(void * jarg1, void * jarg2, char * jarg3, float jarg4, void * jarg5) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::BillboardSet *arg2 = (Ogre::BillboardSet *) 0 ;
  Ogre::String arg3 ;
  float arg4 ;
  Ogre::ColourValue *arg5 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::BillboardSet *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (float)jarg4; 
  arg5 = (Ogre::ColourValue *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::ColourValue const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->putText(arg2,arg3,arg4,(Ogre::ColourValue const &)*arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_putText__SWIG_1___(void * jarg1, void * jarg2, char * jarg3, float jarg4) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::BillboardSet *arg2 = (Ogre::BillboardSet *) 0 ;
  Ogre::String arg3 ;
  float arg4 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::BillboardSet *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (float)jarg4; 
  {
    try {
      (*arg1)->putText(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_setAntialiasColour___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setAntialiasColour(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_FontPtr_getAntialiasColour___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->getAntialiasColour();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_loadResource___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::Resource *arg2 = (Ogre::Resource *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::Resource *)jarg2; 
  {
    try {
      (*arg1)->loadResource(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr__setMaterial___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::MaterialPtr *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::MaterialPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->_setMaterial((Ogre::MaterialPtr const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_prepare__SWIG_0___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->prepare(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_prepare__SWIG_1___(void * jarg1) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      (*arg1)->prepare();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_load__SWIG_0___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->load(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_load__SWIG_1___(void * jarg1) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      (*arg1)->load();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_reload__SWIG_0___(void * jarg1, int jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::Resource::LoadingFlags arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::Resource::LoadingFlags)jarg2; 
  {
    try {
      (*arg1)->reload(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_reload__SWIG_1___(void * jarg1) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      (*arg1)->reload();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_FontPtr_isReloadable___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isReloadable();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_FontPtr_isManuallyLoaded___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isManuallyLoaded();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_unload___(void * jarg1) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      (*arg1)->unload();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_orgfogre_FontPtr_getSize___(void * jarg1) {
  unsigned long jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  size_t result;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (*arg1)->getSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_touch___(void * jarg1) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      (*arg1)->touch();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_FontPtr_getName___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (Ogre::String *) &(*arg1)->getName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_orgfogre_FontPtr_getHandle___(void * jarg1) {
  unsigned long jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::ResourceHandle result;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (*arg1)->getHandle();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_FontPtr_isPrepared___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isPrepared();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_FontPtr_isLoaded___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isLoaded();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_FontPtr_isLoading___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isLoading();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_FontPtr_getLoadingState___(void * jarg1) {
  int jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::Resource::LoadingState result;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (Ogre::Resource::LoadingState)(*arg1)->getLoadingState();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_FontPtr_isBackgroundLoaded___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isBackgroundLoaded();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_setBackgroundLoaded___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setBackgroundLoaded(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_escalateLoading___(void * jarg1) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      (*arg1)->escalateLoading();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_addListener___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::Resource::Listener *arg2 = (Ogre::Resource::Listener *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::Resource::Listener *)jarg2; 
  {
    try {
      (*arg1)->addListener(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_removeListener___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::Resource::Listener *arg2 = (Ogre::Resource::Listener *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::Resource::Listener *)jarg2; 
  {
    try {
      (*arg1)->removeListener(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_FontPtr_getGroup___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (Ogre::String *) &(*arg1)->getGroup();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_changeGroupOwnership___(void * jarg1, char * jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (*arg1)->changeGroupOwnership((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_FontPtr_getCreator___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::ResourceManager *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (Ogre::ResourceManager *)(*arg1)->getCreator();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_FontPtr_getOrigin___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (Ogre::String *) &(*arg1)->getOrigin();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr__notifyOrigin___(void * jarg1, char * jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (*arg1)->_notifyOrigin((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_orgfogre_FontPtr_getStateCount___(void * jarg1) {
  unsigned long jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  size_t result;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (*arg1)->getStateCount();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr__dirtyState___(void * jarg1) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      (*arg1)->_dirtyState();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr__fireLoadingComplete__SWIG_0___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->_fireLoadingComplete(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr__fireLoadingComplete__SWIG_1___(void * jarg1) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      (*arg1)->_fireLoadingComplete();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr__firePreparingComplete__SWIG_0___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->_firePreparingComplete(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr__firePreparingComplete__SWIG_1___(void * jarg1) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      (*arg1)->_firePreparingComplete();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr__fireUnloadingComplete___(void * jarg1) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      (*arg1)->_fireUnloadingComplete();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_FontPtr_getParamDictionary__SWIG_0___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::ParamDictionary *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (Ogre::ParamDictionary *)(*arg1)->getParamDictionary();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_FontPtr_getParameters___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::ParameterList *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      result = (Ogre::ParameterList *) &(*arg1)->getParameters();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_FontPtr_setParameter___(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (bool)(*arg1)->setParameter((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_setParameterList___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::NameValuePairList *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::NameValuePairList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::NameValuePairList const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setParameterList((Ogre::NameValuePairList const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_FontPtr_getParameter___(void * jarg1, char * jarg2) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String result;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (*arg1)->getParameter((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_copyParametersTo___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::StringInterface *arg2 = (Ogre::StringInterface *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::StringInterface *)jarg2; 
  {
    try {
      (*arg1)->copyParametersTo(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_cleanupDictionary___(void * jarg1) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  {
    try {
      (*arg1)->cleanupDictionary();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_FontPtr_prepareResource___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::Font > *arg1 = (Ogre::SharedPtr< Ogre::Font > *) 0 ;
  Ogre::Resource *arg2 = (Ogre::Resource *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::Font > *)jarg1; 
  arg2 = (Ogre::Resource *)jarg2; 
  {
    try {
      (*arg1)->prepareResource(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_utftoc32___(char * jarg1) {
  void * jresult ;
  Ogre::String arg1 ;
  std::vector< Ogre::uint32 > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  {
    try {
      result = Ogre::utftoc32(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< Ogre::uint32 >((const std::vector< Ogre::uint32 > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_GlyphInfo_codePoint_set___(void * jarg1, unsigned int jarg2) {
  Ogre::GlyphInfo *arg1 = (Ogre::GlyphInfo *) 0 ;
  Ogre::GlyphInfo::CodePoint arg2 ;
  
  arg1 = (Ogre::GlyphInfo *)jarg1; 
  arg2 = (Ogre::GlyphInfo::CodePoint)jarg2; 
  if (arg1) (arg1)->codePoint = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_GlyphInfo_codePoint_get___(void * jarg1) {
  unsigned int jresult ;
  Ogre::GlyphInfo *arg1 = (Ogre::GlyphInfo *) 0 ;
  Ogre::GlyphInfo::CodePoint result;
  
  arg1 = (Ogre::GlyphInfo *)jarg1; 
  result = (Ogre::GlyphInfo::CodePoint) ((arg1)->codePoint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_GlyphInfo_uvRect_set___(void * jarg1, void * jarg2) {
  Ogre::GlyphInfo *arg1 = (Ogre::GlyphInfo *) 0 ;
  Ogre::GlyphInfo::UVRect *arg2 = (Ogre::GlyphInfo::UVRect *) 0 ;
  
  arg1 = (Ogre::GlyphInfo *)jarg1; 
  arg2 = (Ogre::GlyphInfo::UVRect *)jarg2; 
  if (arg1) (arg1)->uvRect = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_GlyphInfo_uvRect_get___(void * jarg1) {
  void * jresult ;
  Ogre::GlyphInfo *arg1 = (Ogre::GlyphInfo *) 0 ;
  Ogre::GlyphInfo::UVRect *result = 0 ;
  
  arg1 = (Ogre::GlyphInfo *)jarg1; 
  result = (Ogre::GlyphInfo::UVRect *)& ((arg1)->uvRect);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_GlyphInfo_aspectRatio_set___(void * jarg1, float jarg2) {
  Ogre::GlyphInfo *arg1 = (Ogre::GlyphInfo *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::GlyphInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->aspectRatio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_GlyphInfo_aspectRatio_get___(void * jarg1) {
  float jresult ;
  Ogre::GlyphInfo *arg1 = (Ogre::GlyphInfo *) 0 ;
  float result;
  
  arg1 = (Ogre::GlyphInfo *)jarg1; 
  result = (float) ((arg1)->aspectRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_GlyphInfo_bearing_set___(void * jarg1, float jarg2) {
  Ogre::GlyphInfo *arg1 = (Ogre::GlyphInfo *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::GlyphInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->bearing = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_GlyphInfo_bearing_get___(void * jarg1) {
  float jresult ;
  Ogre::GlyphInfo *arg1 = (Ogre::GlyphInfo *) 0 ;
  float result;
  
  arg1 = (Ogre::GlyphInfo *)jarg1; 
  result = (float) ((arg1)->bearing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_GlyphInfo_advance_set___(void * jarg1, float jarg2) {
  Ogre::GlyphInfo *arg1 = (Ogre::GlyphInfo *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::GlyphInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->advance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_GlyphInfo_advance_get___(void * jarg1) {
  float jresult ;
  Ogre::GlyphInfo *arg1 = (Ogre::GlyphInfo *) 0 ;
  float result;
  
  arg1 = (Ogre::GlyphInfo *)jarg1; 
  result = (float) ((arg1)->advance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_GlyphInfo___() {
  void * jresult ;
  Ogre::GlyphInfo *result = 0 ;
  
  {
    try {
      result = (Ogre::GlyphInfo *)new Ogre::GlyphInfo();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_GlyphInfo___(void * jarg1) {
  Ogre::GlyphInfo *arg1 = (Ogre::GlyphInfo *) 0 ;
  
  arg1 = (Ogre::GlyphInfo *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_Font__SWIG_0___(void * jarg1, char * jarg2, unsigned long jarg3, char * jarg4, unsigned int jarg5, void * jarg6) {
  void * jresult ;
  Ogre::ResourceManager *arg1 = (Ogre::ResourceManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::ResourceHandle arg3 ;
  Ogre::String *arg4 = 0 ;
  bool arg5 ;
  Ogre::ManualResourceLoader *arg6 = (Ogre::ManualResourceLoader *) 0 ;
  Ogre::Font *result = 0 ;
  
  arg1 = (Ogre::ResourceManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Ogre::ResourceHandle)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false; 
  arg6 = (Ogre::ManualResourceLoader *)jarg6; 
  {
    try {
      result = (Ogre::Font *)new Ogre::Font(arg1,(Ogre::String const &)*arg2,arg3,(Ogre::String const &)*arg4,arg5,arg6);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_Font__SWIG_1___(void * jarg1, char * jarg2, unsigned long jarg3, char * jarg4, unsigned int jarg5) {
  void * jresult ;
  Ogre::ResourceManager *arg1 = (Ogre::ResourceManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::ResourceHandle arg3 ;
  Ogre::String *arg4 = 0 ;
  bool arg5 ;
  Ogre::Font *result = 0 ;
  
  arg1 = (Ogre::ResourceManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Ogre::ResourceHandle)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (Ogre::Font *)new Ogre::Font(arg1,(Ogre::String const &)*arg2,arg3,(Ogre::String const &)*arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_Font__SWIG_2___(void * jarg1, char * jarg2, unsigned long jarg3, char * jarg4) {
  void * jresult ;
  Ogre::ResourceManager *arg1 = (Ogre::ResourceManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::ResourceHandle arg3 ;
  Ogre::String *arg4 = 0 ;
  Ogre::Font *result = 0 ;
  
  arg1 = (Ogre::ResourceManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Ogre::ResourceHandle)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (Ogre::Font *)new Ogre::Font(arg1,(Ogre::String const &)*arg2,arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_Font___(void * jarg1) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Font_setType___(void * jarg1, int jarg2) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::FontType arg2 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  arg2 = (Ogre::FontType)jarg2; 
  {
    try {
      (arg1)->setType(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_Font_getType___(void * jarg1) {
  int jresult ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::FontType result;
  
  arg1 = (Ogre::Font *)jarg1; 
  {
    try {
      result = (Ogre::FontType)((Ogre::Font const *)arg1)->getType();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Font_setSource___(void * jarg1, char * jarg2) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setSource((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_Font_getSource___(void * jarg1) {
  char * jresult ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::Font const *)arg1)->getSource();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Font_setTrueTypeSize___(void * jarg1, float jarg2) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setTrueTypeSize(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Font_setTrueTypeResolution___(void * jarg1, unsigned int jarg2) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::uint arg2 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  arg2 = (Ogre::uint)jarg2; 
  {
    try {
      (arg1)->setTrueTypeResolution(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Font_getTrueTypeSize___(void * jarg1) {
  float jresult ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::Font *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::Font const *)arg1)->getTrueTypeSize();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Font_getTrueTypeResolution___(void * jarg1) {
  unsigned int jresult ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::uint result;
  
  arg1 = (Ogre::Font *)jarg1; 
  {
    try {
      result = (Ogre::uint)((Ogre::Font const *)arg1)->getTrueTypeResolution();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_Font_getTrueTypeMaxBearingY___(void * jarg1) {
  int jresult ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  int result;
  
  arg1 = (Ogre::Font *)jarg1; 
  {
    try {
      result = (int)((Ogre::Font const *)arg1)->getTrueTypeMaxBearingY();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Font_getGlyphTexCoords___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Font::CodePoint arg2 ;
  Ogre::Font::UVRect *result = 0 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  arg2 = (Ogre::Font::CodePoint)jarg2; 
  {
    try {
      result = (Ogre::Font::UVRect *) &((Ogre::Font const *)arg1)->getGlyphTexCoords(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Font_setGlyphInfoFromTexCoords__SWIG_0___(void * jarg1, unsigned int jarg2, void * jarg3, float jarg4) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Font::CodePoint arg2 ;
  Ogre::Font::UVRect *arg3 = 0 ;
  float arg4 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  arg2 = (Ogre::Font::CodePoint)jarg2; 
  arg3 = (Ogre::Font::UVRect *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Font::UVRect const & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  {
    try {
      (arg1)->setGlyphInfoFromTexCoords(arg2,(Ogre::Font::UVRect const &)*arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Font_setGlyphInfoFromTexCoords__SWIG_1___(void * jarg1, unsigned int jarg2, void * jarg3) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Font::CodePoint arg2 ;
  Ogre::Font::UVRect *arg3 = 0 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  arg2 = (Ogre::Font::CodePoint)jarg2; 
  arg3 = (Ogre::Font::UVRect *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Font::UVRect const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setGlyphInfoFromTexCoords(arg2,(Ogre::Font::UVRect const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Font_setGlyphInfo___(void * jarg1, void * jarg2) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::GlyphInfo *arg2 = 0 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  arg2 = (Ogre::GlyphInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::GlyphInfo const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setGlyphInfo((Ogre::GlyphInfo const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Font_getGlyphAspectRatio___(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Font::CodePoint arg2 ;
  float result;
  
  arg1 = (Ogre::Font *)jarg1; 
  arg2 = (Ogre::Font::CodePoint)jarg2; 
  {
    try {
      result = (float)((Ogre::Font const *)arg1)->getGlyphAspectRatio(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Font_setGlyphAspectRatio___(void * jarg1, unsigned int jarg2, float jarg3) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Font::CodePoint arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  arg2 = (Ogre::Font::CodePoint)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->setGlyphAspectRatio(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Font_getGlyphInfo___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Font::CodePoint arg2 ;
  Ogre::GlyphInfo *result = 0 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  arg2 = (Ogre::Font::CodePoint)jarg2; 
  {
    try {
      result = (Ogre::GlyphInfo *) &((Ogre::Font const *)arg1)->getGlyphInfo(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Font_addCodePointRange___(void * jarg1, void * jarg2) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Font::CodePointRange *arg2 = 0 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  arg2 = (Ogre::Font::CodePointRange *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Font::CodePointRange const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->addCodePointRange((Ogre::Font::CodePointRange const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Font_clearCodePointRanges___(void * jarg1) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  {
    try {
      (arg1)->clearCodePointRanges();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Font_getCodePointRangeList___(void * jarg1) {
  void * jresult ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Font::CodePointRangeList *result = 0 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  {
    try {
      result = (Ogre::Font::CodePointRangeList *) &((Ogre::Font const *)arg1)->getCodePointRangeList();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Font_getMaterial___(void * jarg1) {
  void * jresult ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::MaterialPtr *result = 0 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  {
    try {
      result = (Ogre::MaterialPtr *) &((Ogre::Font const *)arg1)->getMaterial();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Font_putText__SWIG_0___(void * jarg1, void * jarg2, char * jarg3, float jarg4, void * jarg5) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::BillboardSet *arg2 = (Ogre::BillboardSet *) 0 ;
  Ogre::String arg3 ;
  float arg4 ;
  Ogre::ColourValue *arg5 = 0 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  arg2 = (Ogre::BillboardSet *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (float)jarg4; 
  arg5 = (Ogre::ColourValue *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::ColourValue const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->putText(arg2,arg3,arg4,(Ogre::ColourValue const &)*arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Font_putText__SWIG_1___(void * jarg1, void * jarg2, char * jarg3, float jarg4) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::BillboardSet *arg2 = (Ogre::BillboardSet *) 0 ;
  Ogre::String arg3 ;
  float arg4 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  arg2 = (Ogre::BillboardSet *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (float)jarg4; 
  {
    try {
      (arg1)->putText(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Font_setAntialiasColour___(void * jarg1, unsigned int jarg2) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setAntialiasColour(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Font_getAntialiasColour___(void * jarg1) {
  unsigned int jresult ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  bool result;
  
  arg1 = (Ogre::Font *)jarg1; 
  {
    try {
      result = (bool)((Ogre::Font const *)arg1)->getAntialiasColour();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Font_loadResource___(void * jarg1, void * jarg2) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Resource *arg2 = (Ogre::Resource *) 0 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  arg2 = (Ogre::Resource *)jarg2; 
  {
    try {
      (arg1)->loadResource(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Font__setMaterial___(void * jarg1, void * jarg2) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::MaterialPtr *arg2 = 0 ;
  
  arg1 = (Ogre::Font *)jarg1; 
  arg2 = (Ogre::MaterialPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->_setMaterial((Ogre::MaterialPtr const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_FontManager___() {
  void * jresult ;
  Ogre::FontManager *result = 0 ;
  
  {
    try {
      result = (Ogre::FontManager *)new Ogre::FontManager();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_FontManager___(void * jarg1) {
  Ogre::FontManager *arg1 = (Ogre::FontManager *) 0 ;
  
  arg1 = (Ogre::FontManager *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_FontManager_create__SWIG_0___(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  Ogre::FontManager *arg1 = (Ogre::FontManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  bool arg4 ;
  Ogre::ManualResourceLoader *arg5 = (Ogre::ManualResourceLoader *) 0 ;
  Ogre::NameValuePairList *arg6 = (Ogre::NameValuePairList *) 0 ;
  Ogre::FontPtr result;
  
  arg1 = (Ogre::FontManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = jarg4 ? true : false; 
  arg5 = (Ogre::ManualResourceLoader *)jarg5; 
  arg6 = (Ogre::NameValuePairList *)jarg6; 
  {
    try {
      result = (arg1)->create((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,arg4,arg5,(Ogre::NameValuePairList const *)arg6);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::FontPtr((const Ogre::FontPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_FontManager_create__SWIG_1___(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, void * jarg5) {
  void * jresult ;
  Ogre::FontManager *arg1 = (Ogre::FontManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  bool arg4 ;
  Ogre::ManualResourceLoader *arg5 = (Ogre::ManualResourceLoader *) 0 ;
  Ogre::FontPtr result;
  
  arg1 = (Ogre::FontManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = jarg4 ? true : false; 
  arg5 = (Ogre::ManualResourceLoader *)jarg5; 
  {
    try {
      result = (arg1)->create((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::FontPtr((const Ogre::FontPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_FontManager_create__SWIG_2___(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  Ogre::FontManager *arg1 = (Ogre::FontManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  bool arg4 ;
  Ogre::FontPtr result;
  
  arg1 = (Ogre::FontManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (arg1)->create((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::FontPtr((const Ogre::FontPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_FontManager_create__SWIG_3___(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Ogre::FontManager *arg1 = (Ogre::FontManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::FontPtr result;
  
  arg1 = (Ogre::FontManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (arg1)->create((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::FontPtr((const Ogre::FontPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_FontManager_getByName__SWIG_0___(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Ogre::FontManager *arg1 = (Ogre::FontManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::FontPtr result;
  
  arg1 = (Ogre::FontManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = ((Ogre::FontManager const *)arg1)->getByName((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::FontPtr((const Ogre::FontPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_FontManager_getByName__SWIG_1___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::FontManager *arg1 = (Ogre::FontManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::FontPtr result;
  
  arg1 = (Ogre::FontManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = ((Ogre::FontManager const *)arg1)->getByName((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new Ogre::FontPtr((const Ogre::FontPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_FontManager_getSingleton___() {
  void * jresult ;
  Ogre::FontManager *result = 0 ;
  
  {
    try {
      result = (Ogre::FontManager *) &Ogre::FontManager::getSingleton();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_Overlay___(char * jarg1) {
  void * jresult ;
  Ogre::String *arg1 = 0 ;
  Ogre::Overlay *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (Ogre::Overlay *)new Ogre::Overlay((Ogre::String const &)*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_Overlay___(void * jarg1) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Overlay_getChild___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayContainer *result = 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::OverlayContainer *)(arg1)->getChild((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_Overlay_getName___(void * jarg1) {
  char * jresult ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::Overlay const *)arg1)->getName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Overlay_setZOrder___(void * jarg1, unsigned short jarg2) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::ushort arg2 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      (arg1)->setZOrder(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_Overlay_getZOrder___(void * jarg1) {
  unsigned short jresult ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::ushort result;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  {
    try {
      result = (Ogre::ushort)((Ogre::Overlay const *)arg1)->getZOrder();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Overlay_isVisible___(void * jarg1) {
  unsigned int jresult ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  bool result;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  {
    try {
      result = (bool)((Ogre::Overlay const *)arg1)->isVisible();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_Overlay_isInitialised___(void * jarg1) {
  unsigned int jresult ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  bool result;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  {
    try {
      result = (bool)((Ogre::Overlay const *)arg1)->isInitialised();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Overlay_show___(void * jarg1) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  {
    try {
      (arg1)->show();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Overlay_hide___(void * jarg1) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  {
    try {
      (arg1)->hide();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Overlay_setVisible___(void * jarg1, unsigned int jarg2) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setVisible(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Overlay_add2D___(void * jarg1, void * jarg2) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  arg2 = (Ogre::OverlayContainer *)jarg2; 
  {
    try {
      (arg1)->add2D(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Overlay_remove2D___(void * jarg1, void * jarg2) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  arg2 = (Ogre::OverlayContainer *)jarg2; 
  {
    try {
      (arg1)->remove2D(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Overlay_add3D___(void * jarg1, void * jarg2) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::SceneNode *arg2 = (Ogre::SceneNode *) 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  arg2 = (Ogre::SceneNode *)jarg2; 
  {
    try {
      (arg1)->add3D(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Overlay_remove3D___(void * jarg1, void * jarg2) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::SceneNode *arg2 = (Ogre::SceneNode *) 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  arg2 = (Ogre::SceneNode *)jarg2; 
  {
    try {
      (arg1)->remove3D(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Overlay_clear___(void * jarg1) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Overlay_setScroll___(void * jarg1, float jarg2, float jarg3) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->setScroll(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Overlay_getScrollX___(void * jarg1) {
  float jresult ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::Overlay const *)arg1)->getScrollX();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Overlay_getScrollY___(void * jarg1) {
  float jresult ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::Overlay const *)arg1)->getScrollY();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Overlay_scroll___(void * jarg1, float jarg2, float jarg3) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->scroll(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Overlay_setRotate___(void * jarg1, void * jarg2) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Radian *arg2 = 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  arg2 = (Ogre::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Radian const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setRotate((Ogre::Radian const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Overlay_getRotate___(void * jarg1) {
  void * jresult ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Radian *result = 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  {
    try {
      result = (Ogre::Radian *) &((Ogre::Overlay const *)arg1)->getRotate();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Overlay_rotate___(void * jarg1, void * jarg2) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Radian *arg2 = 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  arg2 = (Ogre::Radian *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Radian const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->rotate((Ogre::Radian const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Overlay_setScale___(void * jarg1, float jarg2, float jarg3) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->setScale(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Overlay_getScaleX___(void * jarg1) {
  float jresult ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::Overlay const *)arg1)->getScaleX();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_Overlay_getScaleY___(void * jarg1) {
  float jresult ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::Overlay const *)arg1)->getScaleY();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Overlay__getWorldTransforms___(void * jarg1, void * jarg2) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Matrix4 *arg2 = (Ogre::Matrix4 *) 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  arg2 = (Ogre::Matrix4 *)jarg2; 
  {
    try {
      ((Ogre::Overlay const *)arg1)->_getWorldTransforms(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Overlay__findVisibleObjects___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Camera *arg2 = (Ogre::Camera *) 0 ;
  Ogre::RenderQueue *arg3 = (Ogre::RenderQueue *) 0 ;
  Ogre::Viewport *arg4 = (Ogre::Viewport *) 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  arg2 = (Ogre::Camera *)jarg2; 
  arg3 = (Ogre::RenderQueue *)jarg3; 
  arg4 = (Ogre::Viewport *)jarg4; 
  {
    try {
      (arg1)->_findVisibleObjects(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Overlay_findElementAt___(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->findElementAt(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_Overlay_get2DElements___(void * jarg1) {
  void * jresult ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Overlay::OverlayContainerList *result = 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  {
    try {
      result = (Ogre::Overlay::OverlayContainerList *) &((Ogre::Overlay const *)arg1)->get2DElements();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_Overlay_getOrigin___(void * jarg1) {
  char * jresult ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::Overlay const *)arg1)->getOrigin();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_Overlay__notifyOrigin___(void * jarg1, char * jarg2) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::Overlay *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->_notifyOrigin((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_OverlayElementPtr__SWIG_0___(void * jarg1) {
  void * jresult ;
  std::nullptr_t arg1 ;
  std::nullptr_t *argp1 ;
  Ogre::SharedPtr< Ogre::OverlayElement > *result = 0 ;
  
  argp1 = (std::nullptr_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::nullptr_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (Ogre::SharedPtr< Ogre::OverlayElement > *)new Ogre::SharedPtr< Ogre::OverlayElement >(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_OverlayElementPtr__SWIG_1___() {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *result = 0 ;
  
  {
    try {
      result = (Ogre::SharedPtr< Ogre::OverlayElement > *)new Ogre::SharedPtr< Ogre::OverlayElement >();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_OverlayElementPtr__SWIG_2___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = 0 ;
  Ogre::SharedPtr< Ogre::OverlayElement > *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::SharedPtr< Ogre::OverlayElement > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Ogre::SharedPtr< Ogre::OverlayElement > *)new Ogre::SharedPtr< Ogre::OverlayElement >((Ogre::SharedPtr< Ogre::OverlayElement > const &)*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr___deref_____(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::OverlayElement *)((Ogre::SharedPtr< Ogre::OverlayElement > const *)arg1)->operator ->();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_OverlayElementPtr___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_DEFAULT_RESOURCE_GROUP_get___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::String *) &(Ogre::String const &) (Ogre::OverlayElement::DEFAULT_RESOURCE_GROUP);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_initialise___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->initialise();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__releaseManualHardwareResources___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->_releaseManualHardwareResources();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__restoreManualHardwareResources___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->_restoreManualHardwareResources();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getName___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::String *) &(*arg1)->getName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_show___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->show();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_hide___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->hide();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setVisible___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setVisible(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_isVisible___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isVisible();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_isEnabled___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isEnabled();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setEnabled___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setDimensions___(void * jarg1, float jarg2, float jarg3) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (*arg1)->setDimensions(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setPosition___(void * jarg1, float jarg2, float jarg3) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (*arg1)->setPosition(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setWidth___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setWidth(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getWidth___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getWidth();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setHeight___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setHeight(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getHeight___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setLeft___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setLeft(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getLeft___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getLeft();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setTop___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setTop(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getTop___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getTop();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__getLeft___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getLeft();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__getTop___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getTop();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__getWidth___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getWidth();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__getHeight___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__setLeft___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->_setLeft(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__setTop___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->_setTop(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__setWidth___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->_setWidth(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__setHeight___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->_setHeight(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__setPosition___(void * jarg1, float jarg2, float jarg3) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (*arg1)->_setPosition(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__setDimensions___(void * jarg1, float jarg2, float jarg3) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (*arg1)->_setDimensions(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getMaterialName___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::String *) &(*arg1)->getMaterialName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setMaterial___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::MaterialPtr *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::MaterialPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setMaterial((Ogre::MaterialPtr const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setMaterialName__SWIG_0___(void * jarg1, char * jarg2, char * jarg3) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (*arg1)->setMaterialName((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setMaterialName__SWIG_1___(void * jarg1, char * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (*arg1)->setMaterialName((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getMaterial___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::MaterialPtr *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::MaterialPtr *) &(*arg1)->getMaterial();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getWorldTransforms___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Matrix4 *arg2 = (Ogre::Matrix4 *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Matrix4 *)jarg2; 
  {
    try {
      (*arg1)->getWorldTransforms(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__positionsOutOfDate___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->_positionsOutOfDate();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__update___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->_update();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__updateFromParent___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->_updateFromParent();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__notifyParent___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  Ogre::Overlay *arg3 = (Ogre::Overlay *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::OverlayContainer *)jarg2; 
  arg3 = (Ogre::Overlay *)jarg3; 
  {
    try {
      (*arg1)->_notifyParent(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__getDerivedLeft___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getDerivedLeft();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__getDerivedTop___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getDerivedTop();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__getRelativeWidth___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getRelativeWidth();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__getRelativeHeight___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getRelativeHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__getClippingRegion___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::RealRect *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::RealRect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::RealRect & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->_getClippingRegion(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__notifyZOrder___(void * jarg1, unsigned short jarg2) {
  unsigned short jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::ushort arg2 ;
  Ogre::ushort result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      result = (Ogre::ushort)(*arg1)->_notifyZOrder(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__notifyWorldTransforms___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Matrix4 *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Matrix4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Matrix4 const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->_notifyWorldTransforms((Ogre::Matrix4 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__notifyViewport___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->_notifyViewport();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__updateRenderQueue___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::RenderQueue *arg2 = (Ogre::RenderQueue *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::RenderQueue *)jarg2; 
  {
    try {
      (*arg1)->_updateRenderQueue(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_visitRenderables__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Renderable::Visitor *arg2 = (Ogre::Renderable::Visitor *) 0 ;
  bool arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Renderable::Visitor *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (*arg1)->visitRenderables(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_visitRenderables__SWIG_1___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Renderable::Visitor *arg2 = (Ogre::Renderable::Visitor *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Renderable::Visitor *)jarg2; 
  {
    try {
      (*arg1)->visitRenderables(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getTypeName___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::String *) &(*arg1)->getTypeName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setCaption___(void * jarg1, char * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::DisplayString arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (*arg1)->setCaption((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getCaption___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::DisplayString *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::DisplayString *) &(*arg1)->getCaption();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setColour___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::ColourValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::ColourValue const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setColour((Ogre::ColourValue const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getColour___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::ColourValue *) &(*arg1)->getColour();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setMetricsMode___(void * jarg1, int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::GuiMetricsMode arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::GuiMetricsMode)jarg2; 
  {
    try {
      (*arg1)->setMetricsMode(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getMetricsMode___(void * jarg1) {
  int jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::GuiMetricsMode result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::GuiMetricsMode)(*arg1)->getMetricsMode();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setHorizontalAlignment___(void * jarg1, int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::GuiHorizontalAlignment arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::GuiHorizontalAlignment)jarg2; 
  {
    try {
      (*arg1)->setHorizontalAlignment(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getHorizontalAlignment___(void * jarg1) {
  int jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::GuiHorizontalAlignment result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::GuiHorizontalAlignment)(*arg1)->getHorizontalAlignment();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setVerticalAlignment___(void * jarg1, int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::GuiVerticalAlignment arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::GuiVerticalAlignment)jarg2; 
  {
    try {
      (*arg1)->setVerticalAlignment(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getVerticalAlignment___(void * jarg1) {
  int jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::GuiVerticalAlignment result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::GuiVerticalAlignment)(*arg1)->getVerticalAlignment();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_contains___(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (bool)(*arg1)->contains(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_findElementAt___(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (Ogre::OverlayElement *)(*arg1)->findElementAt(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_isContainer___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isContainer();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_isKeyEnabled___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isKeyEnabled();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_isCloneable___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isCloneable();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setCloneable___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setCloneable(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getParent___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::OverlayContainer *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::OverlayContainer *)(*arg1)->getParent();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__setParent___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::OverlayContainer *)jarg2; 
  {
    try {
      (*arg1)->_setParent(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getZOrder___(void * jarg1) {
  unsigned short jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::ushort result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::ushort)(*arg1)->getZOrder();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getSquaredViewDepth___(void * jarg1, void * jarg2) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Camera *arg2 = (Ogre::Camera *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::Camera *)jarg2; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getSquaredViewDepth((Ogre::Camera const *)arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getLights___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::LightList *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::LightList *) &(*arg1)->getLights();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_copyFromTemplate___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (*arg1)->copyFromTemplate(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_clone___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::OverlayElement *)(*arg1)->clone((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_castOverlayContainer___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::OverlayContainer *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::OverlayContainer *)Ogre_OverlayElement_castOverlayContainer((Ogre::OverlayElement*)(arg1)->operator ->());
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_castPanelOverlayElement___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::PanelOverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::PanelOverlayElement *)Ogre_OverlayElement_castPanelOverlayElement((Ogre::OverlayElement*)(arg1)->operator ->());
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_castTextAreaOverlayElement___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::TextAreaOverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::TextAreaOverlayElement *)Ogre_OverlayElement_castTextAreaOverlayElement((Ogre::OverlayElement*)(arg1)->operator ->());
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getParamDictionary__SWIG_0___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::ParamDictionary *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::ParamDictionary *)(*arg1)->getParamDictionary();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getParameters___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::ParameterList *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::ParameterList *) &(*arg1)->getParameters();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setParameter___(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (bool)(*arg1)->setParameter((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setParameterList___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::NameValuePairList *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::NameValuePairList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::NameValuePairList const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setParameterList((Ogre::NameValuePairList const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getParameter___(void * jarg1, char * jarg2) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (*arg1)->getParameter((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_copyParametersTo___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::StringInterface *arg2 = (Ogre::StringInterface *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::StringInterface *)jarg2; 
  {
    try {
      (*arg1)->copyParametersTo(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_cleanupDictionary___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->cleanupDictionary();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getTechnique___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::Technique *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Technique *)(*arg1)->getTechnique();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getRenderOperation___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::RenderOperation *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::RenderOperation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::RenderOperation & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->getRenderOperation(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__getMaterialLodIndex___(void * jarg1) {
  unsigned short jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::uint16)(*arg1)->_getMaterialLodIndex();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_preRender___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  Ogre::RenderSystem *arg3 = (Ogre::RenderSystem *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::SceneManager *)jarg2; 
  arg3 = (Ogre::RenderSystem *)jarg3; 
  {
    try {
      result = (bool)(*arg1)->preRender(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_postRender___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  Ogre::RenderSystem *arg3 = (Ogre::RenderSystem *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::SceneManager *)jarg2; 
  arg3 = (Ogre::RenderSystem *)jarg3; 
  {
    try {
      (*arg1)->postRender(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getNumWorldTransforms___(void * jarg1) {
  unsigned short jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::uint16)(*arg1)->getNumWorldTransforms();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setUseIdentityProjection___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setUseIdentityProjection(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getUseIdentityProjection___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->getUseIdentityProjection();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setUseIdentityView___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setUseIdentityView(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getUseIdentityView___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->getUseIdentityView();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getCastsShadows___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->getCastsShadows();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setCustomParameter___(void * jarg1, unsigned long jarg2, void * jarg3) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  size_t arg2 ;
  Ogre::Vector4f *arg3 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (Ogre::Vector4f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector4f const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setCustomParameter(arg2,(Ogre::Vector4f const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_removeCustomParameter___(void * jarg1, unsigned long jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  size_t arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (*arg1)->removeCustomParameter(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_hasCustomParameter___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (bool)(*arg1)->hasCustomParameter(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getCustomParameter___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  size_t arg2 ;
  Ogre::Vector4f *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (Ogre::Vector4f *) &(*arg1)->getCustomParameter(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr__updateCustomGpuParameter___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::GpuProgramParameters::AutoConstantEntry *arg2 = 0 ;
  Ogre::GpuProgramParameters *arg3 = (Ogre::GpuProgramParameters *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = (Ogre::GpuProgramParameters::AutoConstantEntry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::GpuProgramParameters::AutoConstantEntry const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::GpuProgramParameters *)jarg3; 
  {
    try {
      (*arg1)->_updateCustomGpuParameter((Ogre::GpuProgramParameters::AutoConstantEntry const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_setPolygonModeOverrideable___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setPolygonModeOverrideable(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getPolygonModeOverrideable___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->getPolygonModeOverrideable();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElementPtr_getUserObjectBindings__SWIG_0___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *) 0 ;
  Ogre::UserObjectBindings *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::UserObjectBindings *) &(*arg1)->getUserObjectBindings();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_OverlayElement_DEFAULT_RESOURCE_GROUP_get___() {
  char * jresult ;
  Ogre::String *result = 0 ;
  
  result = (Ogre::String *) &(Ogre::String const &)Ogre::OverlayElement::DEFAULT_RESOURCE_GROUP;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_OverlayElement___(void * jarg1) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_initialise___(void * jarg1) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      (arg1)->initialise();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement__releaseManualHardwareResources___(void * jarg1) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      (arg1)->_releaseManualHardwareResources();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement__restoreManualHardwareResources___(void * jarg1) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      (arg1)->_restoreManualHardwareResources();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_OverlayElement_getName___(void * jarg1) {
  char * jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::OverlayElement const *)arg1)->getName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_show___(void * jarg1) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      (arg1)->show();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_hide___(void * jarg1) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      (arg1)->hide();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_setVisible___(void * jarg1, unsigned int jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setVisible(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElement_isVisible___(void * jarg1) {
  unsigned int jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  bool result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (bool)((Ogre::OverlayElement const *)arg1)->isVisible();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElement_isEnabled___(void * jarg1) {
  unsigned int jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  bool result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (bool)((Ogre::OverlayElement const *)arg1)->isEnabled();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_setEnabled___(void * jarg1, unsigned int jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_setDimensions___(void * jarg1, float jarg2, float jarg3) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->setDimensions(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_setPosition___(void * jarg1, float jarg2, float jarg3) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->setPosition(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_setWidth___(void * jarg1, float jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setWidth(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElement_getWidth___(void * jarg1) {
  float jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayElement const *)arg1)->getWidth();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_setHeight___(void * jarg1, float jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setHeight(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElement_getHeight___(void * jarg1) {
  float jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayElement const *)arg1)->getHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_setLeft___(void * jarg1, float jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setLeft(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElement_getLeft___(void * jarg1) {
  float jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayElement const *)arg1)->getLeft();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_setTop___(void * jarg1, float jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setTop(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElement_getTop___(void * jarg1) {
  float jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayElement const *)arg1)->getTop();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElement__getLeft___(void * jarg1) {
  float jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayElement const *)arg1)->_getLeft();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElement__getTop___(void * jarg1) {
  float jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayElement const *)arg1)->_getTop();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElement__getWidth___(void * jarg1) {
  float jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayElement const *)arg1)->_getWidth();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElement__getHeight___(void * jarg1) {
  float jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayElement const *)arg1)->_getHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement__setLeft___(void * jarg1, float jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->_setLeft(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement__setTop___(void * jarg1, float jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->_setTop(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement__setWidth___(void * jarg1, float jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->_setWidth(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement__setHeight___(void * jarg1, float jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->_setHeight(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement__setPosition___(void * jarg1, float jarg2, float jarg3) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->_setPosition(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement__setDimensions___(void * jarg1, float jarg2, float jarg3) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->_setDimensions(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_OverlayElement_getMaterialName___(void * jarg1) {
  char * jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::OverlayElement const *)arg1)->getMaterialName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_setMaterial___(void * jarg1, void * jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::MaterialPtr *arg2 = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::MaterialPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setMaterial((Ogre::MaterialPtr const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_setMaterialName__SWIG_0___(void * jarg1, char * jarg2, char * jarg3) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->setMaterialName((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_setMaterialName__SWIG_1___(void * jarg1, char * jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setMaterialName((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElement_getMaterial___(void * jarg1) {
  void * jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::MaterialPtr *result = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::MaterialPtr *) &((Ogre::OverlayElement const *)arg1)->getMaterial();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_getWorldTransforms___(void * jarg1, void * jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Matrix4 *arg2 = (Ogre::Matrix4 *) 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Matrix4 *)jarg2; 
  {
    try {
      ((Ogre::OverlayElement const *)arg1)->getWorldTransforms(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement__positionsOutOfDate___(void * jarg1) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      (arg1)->_positionsOutOfDate();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement__update___(void * jarg1) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      (arg1)->_update();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement__updateFromParent___(void * jarg1) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      (arg1)->_updateFromParent();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement__notifyParent___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  Ogre::Overlay *arg3 = (Ogre::Overlay *) 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::OverlayContainer *)jarg2; 
  arg3 = (Ogre::Overlay *)jarg3; 
  {
    try {
      (arg1)->_notifyParent(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElement__getDerivedLeft___(void * jarg1) {
  float jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::Real)(arg1)->_getDerivedLeft();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElement__getDerivedTop___(void * jarg1) {
  float jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::Real)(arg1)->_getDerivedTop();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElement__getRelativeWidth___(void * jarg1) {
  float jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::Real)(arg1)->_getRelativeWidth();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElement__getRelativeHeight___(void * jarg1) {
  float jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::Real)(arg1)->_getRelativeHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement__getClippingRegion___(void * jarg1, void * jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::RealRect *arg2 = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::RealRect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::RealRect & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->_getClippingRegion(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_OverlayElement__notifyZOrder___(void * jarg1, unsigned short jarg2) {
  unsigned short jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::ushort arg2 ;
  Ogre::ushort result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      result = (Ogre::ushort)(arg1)->_notifyZOrder(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement__notifyWorldTransforms___(void * jarg1, void * jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Matrix4 *arg2 = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Matrix4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Matrix4 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->_notifyWorldTransforms((Ogre::Matrix4 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement__notifyViewport___(void * jarg1) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      (arg1)->_notifyViewport();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement__updateRenderQueue___(void * jarg1, void * jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::RenderQueue *arg2 = (Ogre::RenderQueue *) 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::RenderQueue *)jarg2; 
  {
    try {
      (arg1)->_updateRenderQueue(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_visitRenderables__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Renderable::Visitor *arg2 = (Ogre::Renderable::Visitor *) 0 ;
  bool arg3 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Renderable::Visitor *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->visitRenderables(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_visitRenderables__SWIG_1___(void * jarg1, void * jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Renderable::Visitor *arg2 = (Ogre::Renderable::Visitor *) 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Renderable::Visitor *)jarg2; 
  {
    try {
      (arg1)->visitRenderables(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_OverlayElement_getTypeName___(void * jarg1) {
  char * jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::OverlayElement const *)arg1)->getTypeName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_setCaption___(void * jarg1, char * jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::DisplayString arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setCaption((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_OverlayElement_getCaption___(void * jarg1) {
  char * jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::DisplayString *result = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::DisplayString *) &((Ogre::OverlayElement const *)arg1)->getCaption();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_setColour___(void * jarg1, void * jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::ColourValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::ColourValue const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setColour((Ogre::ColourValue const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElement_getColour___(void * jarg1) {
  void * jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::ColourValue *) &((Ogre::OverlayElement const *)arg1)->getColour();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_setMetricsMode___(void * jarg1, int jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::GuiMetricsMode arg2 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::GuiMetricsMode)jarg2; 
  {
    try {
      (arg1)->setMetricsMode(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_OverlayElement_getMetricsMode___(void * jarg1) {
  int jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::GuiMetricsMode result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::GuiMetricsMode)((Ogre::OverlayElement const *)arg1)->getMetricsMode();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_setHorizontalAlignment___(void * jarg1, int jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::GuiHorizontalAlignment arg2 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::GuiHorizontalAlignment)jarg2; 
  {
    try {
      (arg1)->setHorizontalAlignment(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_OverlayElement_getHorizontalAlignment___(void * jarg1) {
  int jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::GuiHorizontalAlignment result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::GuiHorizontalAlignment)((Ogre::OverlayElement const *)arg1)->getHorizontalAlignment();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_setVerticalAlignment___(void * jarg1, int jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::GuiVerticalAlignment arg2 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::GuiVerticalAlignment)jarg2; 
  {
    try {
      (arg1)->setVerticalAlignment(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_OverlayElement_getVerticalAlignment___(void * jarg1) {
  int jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::GuiVerticalAlignment result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::GuiVerticalAlignment)((Ogre::OverlayElement const *)arg1)->getVerticalAlignment();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElement_contains___(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  bool result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (bool)((Ogre::OverlayElement const *)arg1)->contains(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElement_findElementAt___(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->findElementAt(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElement_isContainer___(void * jarg1) {
  unsigned int jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  bool result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (bool)((Ogre::OverlayElement const *)arg1)->isContainer();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElement_isKeyEnabled___(void * jarg1) {
  unsigned int jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  bool result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (bool)((Ogre::OverlayElement const *)arg1)->isKeyEnabled();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayElement_isCloneable___(void * jarg1) {
  unsigned int jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  bool result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (bool)((Ogre::OverlayElement const *)arg1)->isCloneable();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_setCloneable___(void * jarg1, unsigned int jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setCloneable(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElement_getParent___(void * jarg1) {
  void * jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::OverlayContainer *result = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::OverlayContainer *)(arg1)->getParent();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement__setParent___(void * jarg1, void * jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::OverlayContainer *)jarg2; 
  {
    try {
      (arg1)->_setParent(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_OverlayElement_getZOrder___(void * jarg1) {
  unsigned short jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::ushort result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::ushort)((Ogre::OverlayElement const *)arg1)->getZOrder();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayElement_getSquaredViewDepth___(void * jarg1, void * jarg2) {
  float jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Camera *arg2 = (Ogre::Camera *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::Camera *)jarg2; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayElement const *)arg1)->getSquaredViewDepth((Ogre::Camera const *)arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElement_getLights___(void * jarg1) {
  void * jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::LightList *result = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::LightList *) &((Ogre::OverlayElement const *)arg1)->getLights();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElement_copyFromTemplate___(void * jarg1, void * jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (arg1)->copyFromTemplate(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElement_clone___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->clone((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElement_castOverlayContainer___(void * jarg1) {
  void * jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::OverlayContainer *result = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::OverlayContainer *)Ogre_OverlayElement_castOverlayContainer(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElement_castPanelOverlayElement___(void * jarg1) {
  void * jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::PanelOverlayElement *result = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::PanelOverlayElement *)Ogre_OverlayElement_castPanelOverlayElement(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElement_castTextAreaOverlayElement___(void * jarg1) {
  void * jresult ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::TextAreaOverlayElement *result = 0 ;
  
  arg1 = (Ogre::OverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::TextAreaOverlayElement *)Ogre_OverlayElement_castTextAreaOverlayElement(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_OverlayElementFactory___(void * jarg1) {
  Ogre::OverlayElementFactory *arg1 = (Ogre::OverlayElementFactory *) 0 ;
  
  arg1 = (Ogre::OverlayElementFactory *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayElementFactory_createOverlayElement___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::OverlayElementFactory *arg1 = (Ogre::OverlayElementFactory *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::OverlayElementFactory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->createOverlayElement((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementFactory_destroyOverlayElement___(void * jarg1, void * jarg2) {
  Ogre::OverlayElementFactory *arg1 = (Ogre::OverlayElementFactory *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayElementFactory *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (arg1)->destroyOverlayElement(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementFactory_destroyOverlayElementSwigExplicitOverlayElementFactory___(void * jarg1, void * jarg2) {
  Ogre::OverlayElementFactory *arg1 = (Ogre::OverlayElementFactory *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayElementFactory *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (arg1)->Ogre::OverlayElementFactory::destroyOverlayElement(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_OverlayElementFactory_getTypeName___(void * jarg1) {
  char * jresult ;
  Ogre::OverlayElementFactory *arg1 = (Ogre::OverlayElementFactory *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::OverlayElementFactory *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::OverlayElementFactory const *)arg1)->getTypeName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_OverlayElementFactory___() {
  void * jresult ;
  Ogre::OverlayElementFactory *result = 0 ;
  
  {
    try {
      result = (Ogre::OverlayElementFactory *)new SwigDirector_OverlayElementFactory();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayElementFactory_director_connect___(void *objarg, SwigDirector_OverlayElementFactory::SWIG_Callback0_t callback0, SwigDirector_OverlayElementFactory::SWIG_Callback1_t callback1, SwigDirector_OverlayElementFactory::SWIG_Callback2_t callback2) {
  Ogre::OverlayElementFactory *obj = (Ogre::OverlayElementFactory *)objarg;
  SwigDirector_OverlayElementFactory *director = static_cast<SwigDirector_OverlayElementFactory *>(obj);
  director->swig_connect_director(callback0, callback1, callback2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_OverlayContainerPtr__SWIG_0___(void * jarg1) {
  void * jresult ;
  std::nullptr_t arg1 ;
  std::nullptr_t *argp1 ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *result = 0 ;
  
  argp1 = (std::nullptr_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::nullptr_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (Ogre::SharedPtr< Ogre::OverlayContainer > *)new Ogre::SharedPtr< Ogre::OverlayContainer >(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_OverlayContainerPtr__SWIG_1___() {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *result = 0 ;
  
  {
    try {
      result = (Ogre::SharedPtr< Ogre::OverlayContainer > *)new Ogre::SharedPtr< Ogre::OverlayContainer >();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_OverlayContainerPtr__SWIG_2___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = 0 ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::SharedPtr< Ogre::OverlayContainer > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Ogre::SharedPtr< Ogre::OverlayContainer > *)new Ogre::SharedPtr< Ogre::OverlayContainer >((Ogre::SharedPtr< Ogre::OverlayContainer > const &)*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr___deref_____(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::OverlayContainer *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::OverlayContainer *)((Ogre::SharedPtr< Ogre::OverlayContainer > const *)arg1)->operator ->();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_OverlayContainerPtr___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_addChild___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (*arg1)->addChild(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_addChildImpl__SWIG_0___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (*arg1)->addChildImpl(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_addChildImpl__SWIG_1___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::OverlayContainer *)jarg2; 
  {
    try {
      (*arg1)->addChildImpl(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_removeChild___(void * jarg1, char * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (*arg1)->removeChild((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getChild___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::OverlayElement *)(*arg1)->getChild((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_initialise___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      (*arg1)->initialise();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__addChild___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (*arg1)->_addChild(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__removeChild__SWIG_0___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (*arg1)->_removeChild(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__removeChild__SWIG_1___(void * jarg1, char * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (*arg1)->_removeChild((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getChildren___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::OverlayContainer::ChildMap *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::OverlayContainer::ChildMap *) &(*arg1)->getChildren();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__positionsOutOfDate___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      (*arg1)->_positionsOutOfDate();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__update___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      (*arg1)->_update();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__notifyZOrder___(void * jarg1, unsigned short jarg2) {
  unsigned short jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::ushort arg2 ;
  Ogre::ushort result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      result = (Ogre::ushort)(*arg1)->_notifyZOrder(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__notifyViewport___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      (*arg1)->_notifyViewport();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__notifyWorldTransforms___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Matrix4 *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Matrix4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Matrix4 const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->_notifyWorldTransforms((Ogre::Matrix4 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__notifyParent___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  Ogre::Overlay *arg3 = (Ogre::Overlay *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::OverlayContainer *)jarg2; 
  arg3 = (Ogre::Overlay *)jarg3; 
  {
    try {
      (*arg1)->_notifyParent(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__updateRenderQueue___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::RenderQueue *arg2 = (Ogre::RenderQueue *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::RenderQueue *)jarg2; 
  {
    try {
      (*arg1)->_updateRenderQueue(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_isContainer___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isContainer();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_isChildrenProcessEvents___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isChildrenProcessEvents();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setChildrenProcessEvents___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setChildrenProcessEvents(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_findElementAt___(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (Ogre::OverlayElement *)(*arg1)->findElementAt(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_copyFromTemplate___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (*arg1)->copyFromTemplate(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_clone___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::OverlayElement *)(*arg1)->clone((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_DEFAULT_RESOURCE_GROUP_get___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  result = (Ogre::String *) &(Ogre::String const &) (Ogre::OverlayElement::DEFAULT_RESOURCE_GROUP);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__releaseManualHardwareResources___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      (*arg1)->_releaseManualHardwareResources();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__restoreManualHardwareResources___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      (*arg1)->_restoreManualHardwareResources();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getName___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::String *) &(*arg1)->getName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_show___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      (*arg1)->show();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_hide___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      (*arg1)->hide();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setVisible___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setVisible(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_isVisible___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isVisible();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_isEnabled___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isEnabled();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setEnabled___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setDimensions___(void * jarg1, float jarg2, float jarg3) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (*arg1)->setDimensions(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setPosition___(void * jarg1, float jarg2, float jarg3) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (*arg1)->setPosition(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setWidth___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setWidth(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getWidth___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getWidth();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setHeight___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setHeight(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getHeight___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setLeft___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setLeft(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getLeft___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getLeft();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setTop___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setTop(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getTop___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getTop();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__getLeft___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getLeft();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__getTop___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getTop();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__getWidth___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getWidth();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__getHeight___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__setLeft___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->_setLeft(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__setTop___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->_setTop(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__setWidth___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->_setWidth(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__setHeight___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->_setHeight(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__setPosition___(void * jarg1, float jarg2, float jarg3) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (*arg1)->_setPosition(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__setDimensions___(void * jarg1, float jarg2, float jarg3) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (*arg1)->_setDimensions(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getMaterialName___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::String *) &(*arg1)->getMaterialName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setMaterial___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::MaterialPtr *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::MaterialPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setMaterial((Ogre::MaterialPtr const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setMaterialName__SWIG_0___(void * jarg1, char * jarg2, char * jarg3) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (*arg1)->setMaterialName((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setMaterialName__SWIG_1___(void * jarg1, char * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (*arg1)->setMaterialName((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getMaterial___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::MaterialPtr *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::MaterialPtr *) &(*arg1)->getMaterial();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getWorldTransforms___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Matrix4 *arg2 = (Ogre::Matrix4 *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Matrix4 *)jarg2; 
  {
    try {
      (*arg1)->getWorldTransforms(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__updateFromParent___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      (*arg1)->_updateFromParent();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__getDerivedLeft___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getDerivedLeft();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__getDerivedTop___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getDerivedTop();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__getRelativeWidth___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getRelativeWidth();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__getRelativeHeight___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getRelativeHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__getClippingRegion___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::RealRect *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::RealRect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::RealRect & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->_getClippingRegion(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_visitRenderables__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Renderable::Visitor *arg2 = (Ogre::Renderable::Visitor *) 0 ;
  bool arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Renderable::Visitor *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (*arg1)->visitRenderables(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_visitRenderables__SWIG_1___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Renderable::Visitor *arg2 = (Ogre::Renderable::Visitor *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Renderable::Visitor *)jarg2; 
  {
    try {
      (*arg1)->visitRenderables(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getTypeName___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::String *) &(*arg1)->getTypeName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setCaption___(void * jarg1, char * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::DisplayString arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (*arg1)->setCaption((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getCaption___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::DisplayString *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::DisplayString *) &(*arg1)->getCaption();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setColour___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::ColourValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::ColourValue const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setColour((Ogre::ColourValue const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getColour___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::ColourValue *) &(*arg1)->getColour();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setMetricsMode___(void * jarg1, int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::GuiMetricsMode arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::GuiMetricsMode)jarg2; 
  {
    try {
      (*arg1)->setMetricsMode(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getMetricsMode___(void * jarg1) {
  int jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::GuiMetricsMode result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::GuiMetricsMode)(*arg1)->getMetricsMode();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setHorizontalAlignment___(void * jarg1, int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::GuiHorizontalAlignment arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::GuiHorizontalAlignment)jarg2; 
  {
    try {
      (*arg1)->setHorizontalAlignment(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getHorizontalAlignment___(void * jarg1) {
  int jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::GuiHorizontalAlignment result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::GuiHorizontalAlignment)(*arg1)->getHorizontalAlignment();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setVerticalAlignment___(void * jarg1, int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::GuiVerticalAlignment arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::GuiVerticalAlignment)jarg2; 
  {
    try {
      (*arg1)->setVerticalAlignment(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getVerticalAlignment___(void * jarg1) {
  int jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::GuiVerticalAlignment result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::GuiVerticalAlignment)(*arg1)->getVerticalAlignment();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_contains___(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (bool)(*arg1)->contains(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_isKeyEnabled___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isKeyEnabled();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_isCloneable___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isCloneable();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setCloneable___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setCloneable(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getParent___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::OverlayContainer *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::OverlayContainer *)(*arg1)->getParent();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__setParent___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::OverlayContainer *)jarg2; 
  {
    try {
      (*arg1)->_setParent(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getZOrder___(void * jarg1) {
  unsigned short jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::ushort result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::ushort)(*arg1)->getZOrder();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getSquaredViewDepth___(void * jarg1, void * jarg2) {
  float jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Camera *arg2 = (Ogre::Camera *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::Camera *)jarg2; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getSquaredViewDepth((Ogre::Camera const *)arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getLights___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::LightList *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::LightList *) &(*arg1)->getLights();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_castOverlayContainer___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::OverlayContainer *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::OverlayContainer *)Ogre_OverlayElement_castOverlayContainer((Ogre::OverlayElement*)(arg1)->operator ->());
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_castPanelOverlayElement___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::PanelOverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::PanelOverlayElement *)Ogre_OverlayElement_castPanelOverlayElement((Ogre::OverlayElement*)(arg1)->operator ->());
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_castTextAreaOverlayElement___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::TextAreaOverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::TextAreaOverlayElement *)Ogre_OverlayElement_castTextAreaOverlayElement((Ogre::OverlayElement*)(arg1)->operator ->());
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getParamDictionary__SWIG_0___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::ParamDictionary *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::ParamDictionary *)(*arg1)->getParamDictionary();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getParameters___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::ParameterList *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::ParameterList *) &(*arg1)->getParameters();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setParameter___(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (bool)(*arg1)->setParameter((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setParameterList___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::NameValuePairList *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::NameValuePairList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::NameValuePairList const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setParameterList((Ogre::NameValuePairList const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getParameter___(void * jarg1, char * jarg2) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (*arg1)->getParameter((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_copyParametersTo___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::StringInterface *arg2 = (Ogre::StringInterface *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::StringInterface *)jarg2; 
  {
    try {
      (*arg1)->copyParametersTo(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_cleanupDictionary___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      (*arg1)->cleanupDictionary();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getTechnique___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::Technique *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::Technique *)(*arg1)->getTechnique();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getRenderOperation___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::RenderOperation *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::RenderOperation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::RenderOperation & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->getRenderOperation(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__getMaterialLodIndex___(void * jarg1) {
  unsigned short jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::uint16)(*arg1)->_getMaterialLodIndex();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_preRender___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  Ogre::RenderSystem *arg3 = (Ogre::RenderSystem *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::SceneManager *)jarg2; 
  arg3 = (Ogre::RenderSystem *)jarg3; 
  {
    try {
      result = (bool)(*arg1)->preRender(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_postRender___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  Ogre::RenderSystem *arg3 = (Ogre::RenderSystem *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::SceneManager *)jarg2; 
  arg3 = (Ogre::RenderSystem *)jarg3; 
  {
    try {
      (*arg1)->postRender(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getNumWorldTransforms___(void * jarg1) {
  unsigned short jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::uint16)(*arg1)->getNumWorldTransforms();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setUseIdentityProjection___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setUseIdentityProjection(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getUseIdentityProjection___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->getUseIdentityProjection();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setUseIdentityView___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setUseIdentityView(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getUseIdentityView___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->getUseIdentityView();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getCastsShadows___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->getCastsShadows();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setCustomParameter___(void * jarg1, unsigned long jarg2, void * jarg3) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  size_t arg2 ;
  Ogre::Vector4f *arg3 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (Ogre::Vector4f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector4f const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setCustomParameter(arg2,(Ogre::Vector4f const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_removeCustomParameter___(void * jarg1, unsigned long jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  size_t arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (*arg1)->removeCustomParameter(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_hasCustomParameter___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (bool)(*arg1)->hasCustomParameter(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getCustomParameter___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  size_t arg2 ;
  Ogre::Vector4f *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (Ogre::Vector4f *) &(*arg1)->getCustomParameter(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr__updateCustomGpuParameter___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::GpuProgramParameters::AutoConstantEntry *arg2 = 0 ;
  Ogre::GpuProgramParameters *arg3 = (Ogre::GpuProgramParameters *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = (Ogre::GpuProgramParameters::AutoConstantEntry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::GpuProgramParameters::AutoConstantEntry const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::GpuProgramParameters *)jarg3; 
  {
    try {
      (*arg1)->_updateCustomGpuParameter((Ogre::GpuProgramParameters::AutoConstantEntry const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_setPolygonModeOverrideable___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setPolygonModeOverrideable(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getPolygonModeOverrideable___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->getPolygonModeOverrideable();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainerPtr_getUserObjectBindings__SWIG_0___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlayContainer > *arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *) 0 ;
  Ogre::UserObjectBindings *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlayContainer > *)jarg1; 
  {
    try {
      result = (Ogre::UserObjectBindings *) &(*arg1)->getUserObjectBindings();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_OverlayContainer___(void * jarg1) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainer_addChild___(void * jarg1, void * jarg2) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (arg1)->addChild(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainer_addChildImpl__SWIG_0___(void * jarg1, void * jarg2) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (arg1)->addChildImpl(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainer_addChildImpl__SWIG_1___(void * jarg1, void * jarg2) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  arg2 = (Ogre::OverlayContainer *)jarg2; 
  {
    try {
      (arg1)->addChildImpl(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainer_removeChild___(void * jarg1, char * jarg2) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->removeChild((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainer_getChild___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->getChild((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainer_initialise___(void * jarg1) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  {
    try {
      (arg1)->initialise();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainer__addChild___(void * jarg1, void * jarg2) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (arg1)->_addChild(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainer__removeChild__SWIG_0___(void * jarg1, void * jarg2) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (arg1)->_removeChild(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainer__removeChild__SWIG_1___(void * jarg1, char * jarg2) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->_removeChild((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainer_getChildren___(void * jarg1) {
  void * jresult ;
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::OverlayContainer::ChildMap *result = 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  {
    try {
      result = (Ogre::OverlayContainer::ChildMap *) &((Ogre::OverlayContainer const *)arg1)->getChildren();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainer__positionsOutOfDate___(void * jarg1) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  {
    try {
      (arg1)->_positionsOutOfDate();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainer__update___(void * jarg1) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  {
    try {
      (arg1)->_update();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_OverlayContainer__notifyZOrder___(void * jarg1, unsigned short jarg2) {
  unsigned short jresult ;
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::ushort arg2 ;
  Ogre::ushort result;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      result = (Ogre::ushort)(arg1)->_notifyZOrder(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainer__notifyViewport___(void * jarg1) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  {
    try {
      (arg1)->_notifyViewport();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainer__notifyWorldTransforms___(void * jarg1, void * jarg2) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::Matrix4 *arg2 = 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  arg2 = (Ogre::Matrix4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Matrix4 const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->_notifyWorldTransforms((Ogre::Matrix4 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainer__notifyParent___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  Ogre::Overlay *arg3 = (Ogre::Overlay *) 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  arg2 = (Ogre::OverlayContainer *)jarg2; 
  arg3 = (Ogre::Overlay *)jarg3; 
  {
    try {
      (arg1)->_notifyParent(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainer__updateRenderQueue___(void * jarg1, void * jarg2) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::RenderQueue *arg2 = (Ogre::RenderQueue *) 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  arg2 = (Ogre::RenderQueue *)jarg2; 
  {
    try {
      (arg1)->_updateRenderQueue(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayContainer_isContainer___(void * jarg1) {
  unsigned int jresult ;
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  bool result;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  {
    try {
      result = (bool)((Ogre::OverlayContainer const *)arg1)->isContainer();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayContainer_isChildrenProcessEvents___(void * jarg1) {
  unsigned int jresult ;
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  bool result;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  {
    try {
      result = (bool)((Ogre::OverlayContainer const *)arg1)->isChildrenProcessEvents();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainer_setChildrenProcessEvents___(void * jarg1, unsigned int jarg2) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setChildrenProcessEvents(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainer_findElementAt___(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->findElementAt(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayContainer_copyFromTemplate___(void * jarg1, void * jarg2) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (arg1)->copyFromTemplate(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayContainer_clone___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::OverlayContainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->clone((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_OverlayManager___() {
  void * jresult ;
  Ogre::OverlayManager *result = 0 ;
  
  {
    try {
      result = (Ogre::OverlayManager *)new Ogre::OverlayManager();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_OverlayManager___(void * jarg1) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayManager__releaseManualHardwareResources___(void * jarg1) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  {
    try {
      (arg1)->_releaseManualHardwareResources();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayManager__restoreManualHardwareResources___(void * jarg1) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  {
    try {
      (arg1)->_restoreManualHardwareResources();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayManager_getScriptPatterns___(void * jarg1) {
  void * jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::StringVector *result = 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  {
    try {
      result = (Ogre::StringVector *) &((Ogre::OverlayManager const *)arg1)->getScriptPatterns();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayManager_parseScript___(void * jarg1, void * jarg2, char * jarg3) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::DataStreamPtr *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  arg2 = (Ogre::DataStreamPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::DataStreamPtr & type is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->parseScript(*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayManager_getLoadingOrder___(void * jarg1) {
  float jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayManager const *)arg1)->getLoadingOrder();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayManager_addOverlay___(void * jarg1, void * jarg2) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::Overlay *arg2 = (Ogre::Overlay *) 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  arg2 = (Ogre::Overlay *)jarg2; 
  {
    try {
      (arg1)->addOverlay(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayManager_create___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::Overlay *result = 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::Overlay *)(arg1)->create((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayManager_getByName___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::Overlay *result = 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::Overlay *)(arg1)->getByName((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayManager_destroy__SWIG_0___(void * jarg1, char * jarg2) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->destroy((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayManager_destroy__SWIG_1___(void * jarg1, void * jarg2) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::Overlay *arg2 = (Ogre::Overlay *) 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  arg2 = (Ogre::Overlay *)jarg2; 
  {
    try {
      (arg1)->destroy(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayManager_destroyAll___(void * jarg1) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  {
    try {
      (arg1)->destroyAll();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayManager__queueOverlaysForRendering___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::Camera *arg2 = (Ogre::Camera *) 0 ;
  Ogre::RenderQueue *arg3 = (Ogre::RenderQueue *) 0 ;
  Ogre::Viewport *arg4 = (Ogre::Viewport *) 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  arg2 = (Ogre::Camera *)jarg2; 
  arg3 = (Ogre::RenderQueue *)jarg3; 
  arg4 = (Ogre::Viewport *)jarg4; 
  {
    try {
      (arg1)->_queueOverlaysForRendering(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_OverlayManager_getViewportHeight___(void * jarg1) {
  int jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  int result;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  {
    try {
      result = (int)((Ogre::OverlayManager const *)arg1)->getViewportHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_OverlayManager_getViewportWidth___(void * jarg1) {
  int jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  int result;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  {
    try {
      result = (int)((Ogre::OverlayManager const *)arg1)->getViewportWidth();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayManager_getViewportAspectRatio___(void * jarg1) {
  float jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayManager const *)arg1)->getViewportAspectRatio();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayManager_setPixelRatio___(void * jarg1, float jarg2) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      (arg1)->setPixelRatio(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_OverlayManager_getPixelRatio___(void * jarg1) {
  float jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  float result;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  {
    try {
      result = (float)((Ogre::OverlayManager const *)arg1)->getPixelRatio();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayManager_createOverlayElement__SWIG_0___(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  bool arg4 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->createOverlayElement((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayManager_createOverlayElement__SWIG_1___(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->createOverlayElement((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayManager_getOverlayElement__SWIG_0___(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  bool arg3 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->getOverlayElement((Ogre::String const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayManager_getOverlayElement__SWIG_1___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->getOverlayElement((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayManager_hasOverlayElement__SWIG_0___(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (bool)(arg1)->hasOverlayElement((Ogre::String const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_OverlayManager_hasOverlayElement__SWIG_1___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  bool result;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)(arg1)->hasOverlayElement((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayManager_destroyOverlayElement__SWIG_0___(void * jarg1, char * jarg2, unsigned int jarg3) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->destroyOverlayElement((Ogre::String const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayManager_destroyOverlayElement__SWIG_1___(void * jarg1, char * jarg2) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->destroyOverlayElement((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayManager_destroyOverlayElement__SWIG_2___(void * jarg1, void * jarg2, unsigned int jarg3) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  bool arg3 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->destroyOverlayElement(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayManager_destroyOverlayElement__SWIG_3___(void * jarg1, void * jarg2) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (arg1)->destroyOverlayElement(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayManager_destroyAllOverlayElements__SWIG_0___(void * jarg1, unsigned int jarg2) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->destroyAllOverlayElements(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayManager_destroyAllOverlayElements__SWIG_1___(void * jarg1) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  {
    try {
      (arg1)->destroyAllOverlayElements();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlayManager_addOverlayElementFactory___(void * jarg1, void * jarg2) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::OverlayElementFactory *arg2 = (Ogre::OverlayElementFactory *) 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  arg2 = (Ogre::OverlayElementFactory *)jarg2; 
  {
    try {
      (arg1)->addOverlayElementFactory(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayManager_getOverlayElementFactoryMap___(void * jarg1) {
  void * jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::OverlayManager::FactoryMap *result = 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  {
    try {
      result = (Ogre::OverlayManager::FactoryMap *) &((Ogre::OverlayManager const *)arg1)->getOverlayElementFactoryMap();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayManager_createOverlayElementFromTemplate__SWIG_0___(void * jarg1, char * jarg2, char * jarg3, char * jarg4, unsigned int jarg5) {
  void * jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  bool arg5 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->createOverlayElementFromTemplate((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayManager_createOverlayElementFromTemplate__SWIG_1___(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->createOverlayElementFromTemplate((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayManager_cloneOverlayElementFromTemplate___(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->cloneOverlayElementFromTemplate((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayManager_createOverlayElementFromFactory___(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::OverlayManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->createOverlayElementFromFactory((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlayManager_getSingleton___() {
  void * jresult ;
  Ogre::OverlayManager *result = 0 ;
  
  {
    try {
      result = (Ogre::OverlayManager *) &Ogre::OverlayManager::getSingleton();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_OverlaySystemPtr__SWIG_0___(void * jarg1) {
  void * jresult ;
  std::nullptr_t arg1 ;
  std::nullptr_t *argp1 ;
  Ogre::SharedPtr< Ogre::OverlaySystem > *result = 0 ;
  
  argp1 = (std::nullptr_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::nullptr_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (Ogre::SharedPtr< Ogre::OverlaySystem > *)new Ogre::SharedPtr< Ogre::OverlaySystem >(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_OverlaySystemPtr__SWIG_1___() {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlaySystem > *result = 0 ;
  
  {
    try {
      result = (Ogre::SharedPtr< Ogre::OverlaySystem > *)new Ogre::SharedPtr< Ogre::OverlaySystem >();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_OverlaySystemPtr__SWIG_2___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlaySystem > *arg1 = 0 ;
  Ogre::SharedPtr< Ogre::OverlaySystem > *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlaySystem > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::SharedPtr< Ogre::OverlaySystem > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Ogre::SharedPtr< Ogre::OverlaySystem > *)new Ogre::SharedPtr< Ogre::OverlaySystem >((Ogre::SharedPtr< Ogre::OverlaySystem > const &)*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlaySystemPtr___deref_____(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlaySystem > *arg1 = (Ogre::SharedPtr< Ogre::OverlaySystem > *) 0 ;
  Ogre::OverlaySystem *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlaySystem > *)jarg1; 
  {
    try {
      result = (Ogre::OverlaySystem *)((Ogre::SharedPtr< Ogre::OverlaySystem > const *)arg1)->operator ->();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_OverlaySystemPtr___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlaySystem > *arg1 = (Ogre::SharedPtr< Ogre::OverlaySystem > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlaySystem > *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlaySystemPtr_renderQueueStarted___(void * jarg1, unsigned char jarg2, char * jarg3, void * jarg4) {
  Ogre::SharedPtr< Ogre::OverlaySystem > *arg1 = (Ogre::SharedPtr< Ogre::OverlaySystem > *) 0 ;
  Ogre::uint8 arg2 ;
  Ogre::String *arg3 = 0 ;
  bool *arg4 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlaySystem > *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (bool *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->renderQueueStarted(arg2,(Ogre::String const &)*arg3,*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlaySystemPtr_eventOccurred___(void * jarg1, char * jarg2, void * jarg3) {
  Ogre::SharedPtr< Ogre::OverlaySystem > *arg1 = (Ogre::SharedPtr< Ogre::OverlaySystem > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::NameValuePairList *arg3 = (Ogre::NameValuePairList *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlaySystem > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Ogre::NameValuePairList *)jarg3; 
  {
    try {
      (*arg1)->eventOccurred((Ogre::String const &)*arg2,(Ogre::NameValuePairList const *)arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlaySystemPtr_getSingleton___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::OverlaySystem > *arg1 = (Ogre::SharedPtr< Ogre::OverlaySystem > *) 0 ;
  Ogre::OverlaySystem *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlaySystem > *)jarg1; 
  {
    try {
      result = (Ogre::OverlaySystem *) &(*arg1)->getSingleton();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlaySystemPtr_preRenderQueues___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlaySystem > *arg1 = (Ogre::SharedPtr< Ogre::OverlaySystem > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlaySystem > *)jarg1; 
  {
    try {
      (*arg1)->preRenderQueues();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlaySystemPtr_postRenderQueues___(void * jarg1) {
  Ogre::SharedPtr< Ogre::OverlaySystem > *arg1 = (Ogre::SharedPtr< Ogre::OverlaySystem > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlaySystem > *)jarg1; 
  {
    try {
      (*arg1)->postRenderQueues();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlaySystemPtr_renderQueueEnded___(void * jarg1, unsigned char jarg2, char * jarg3, void * jarg4) {
  Ogre::SharedPtr< Ogre::OverlaySystem > *arg1 = (Ogre::SharedPtr< Ogre::OverlaySystem > *) 0 ;
  Ogre::uint8 arg2 ;
  Ogre::String *arg3 = 0 ;
  bool *arg4 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::OverlaySystem > *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (bool *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->renderQueueEnded(arg2,(Ogre::String const &)*arg3,*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_OverlaySystem___(void * jarg1) {
  Ogre::OverlaySystem *arg1 = (Ogre::OverlaySystem *) 0 ;
  
  arg1 = (Ogre::OverlaySystem *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlaySystem_renderQueueStarted___(void * jarg1, unsigned char jarg2, char * jarg3, void * jarg4) {
  Ogre::OverlaySystem *arg1 = (Ogre::OverlaySystem *) 0 ;
  Ogre::uint8 arg2 ;
  Ogre::String *arg3 = 0 ;
  bool *arg4 = 0 ;
  
  arg1 = (Ogre::OverlaySystem *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (bool *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->renderQueueStarted(arg2,(Ogre::String const &)*arg3,*arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_OverlaySystem_eventOccurred___(void * jarg1, char * jarg2, void * jarg3) {
  Ogre::OverlaySystem *arg1 = (Ogre::OverlaySystem *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::NameValuePairList *arg3 = (Ogre::NameValuePairList *) 0 ;
  
  arg1 = (Ogre::OverlaySystem *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Ogre::NameValuePairList *)jarg3; 
  {
    try {
      (arg1)->eventOccurred((Ogre::String const &)*arg2,(Ogre::NameValuePairList const *)arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_OverlaySystem_getSingleton___() {
  void * jresult ;
  Ogre::OverlaySystem *result = 0 ;
  
  {
    try {
      result = (Ogre::OverlaySystem *) &Ogre::OverlaySystem::getSingleton();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_PanelOverlayElementPtr__SWIG_0___(void * jarg1) {
  void * jresult ;
  std::nullptr_t arg1 ;
  std::nullptr_t *argp1 ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *result = 0 ;
  
  argp1 = (std::nullptr_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::nullptr_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)new Ogre::SharedPtr< Ogre::PanelOverlayElement >(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_PanelOverlayElementPtr__SWIG_1___() {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *result = 0 ;
  
  {
    try {
      result = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)new Ogre::SharedPtr< Ogre::PanelOverlayElement >();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_PanelOverlayElementPtr__SWIG_2___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = 0 ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::SharedPtr< Ogre::PanelOverlayElement > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)new Ogre::SharedPtr< Ogre::PanelOverlayElement >((Ogre::SharedPtr< Ogre::PanelOverlayElement > const &)*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr___deref_____(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::PanelOverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::PanelOverlayElement *)((Ogre::SharedPtr< Ogre::PanelOverlayElement > const *)arg1)->operator ->();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_PanelOverlayElementPtr___(void * jarg1) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_initialise___(void * jarg1) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->initialise();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__releaseManualHardwareResources___(void * jarg1) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->_releaseManualHardwareResources();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__restoreManualHardwareResources___(void * jarg1) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->_restoreManualHardwareResources();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setTiling__SWIG_0___(void * jarg1, float jarg2, float jarg3, unsigned short jarg4) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::ushort arg4 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::ushort)jarg4; 
  {
    try {
      (*arg1)->setTiling(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setTiling__SWIG_1___(void * jarg1, float jarg2, float jarg3) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (*arg1)->setTiling(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getTileX__SWIG_0___(void * jarg1, unsigned short jarg2) {
  float jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::ushort arg2 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getTileX(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getTileX__SWIG_1___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getTileX();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getTileY__SWIG_0___(void * jarg1, unsigned short jarg2) {
  float jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::ushort arg2 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getTileY(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getTileY__SWIG_1___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getTileY();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setUV___(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = (Ogre::Real)jarg5; 
  {
    try {
      (*arg1)->setUV(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getUV___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real *arg2 = 0 ;
  Ogre::Real *arg3 = 0 ;
  Ogre::Real *arg4 = 0 ;
  Ogre::Real *arg5 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Real & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Real *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Real & type is null", 0);
    return ;
  } 
  arg4 = (Ogre::Real *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Real & type is null", 0);
    return ;
  } 
  arg5 = (Ogre::Real *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Real & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->getUV(*arg2,*arg3,*arg4,*arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setTransparent___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setTransparent(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_isTransparent___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isTransparent();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getTypeName___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::String *) &(*arg1)->getTypeName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getRenderOperation___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::RenderOperation *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::RenderOperation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::RenderOperation & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->getRenderOperation(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__updateRenderQueue___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::RenderQueue *arg2 = (Ogre::RenderQueue *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::RenderQueue *)jarg2; 
  {
    try {
      (*arg1)->_updateRenderQueue(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_addChild___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (*arg1)->addChild(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_addChildImpl__SWIG_0___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (*arg1)->addChildImpl(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_addChildImpl__SWIG_1___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::OverlayContainer *)jarg2; 
  {
    try {
      (*arg1)->addChildImpl(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_removeChild___(void * jarg1, char * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (*arg1)->removeChild((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getChild___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::OverlayElement *)(*arg1)->getChild((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__addChild___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (*arg1)->_addChild(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__removeChild__SWIG_0___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (*arg1)->_removeChild(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__removeChild__SWIG_1___(void * jarg1, char * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (*arg1)->_removeChild((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getChildren___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::OverlayContainer::ChildMap *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::OverlayContainer::ChildMap *) &(*arg1)->getChildren();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__positionsOutOfDate___(void * jarg1) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->_positionsOutOfDate();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__update___(void * jarg1) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->_update();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__notifyZOrder___(void * jarg1, unsigned short jarg2) {
  unsigned short jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::ushort arg2 ;
  Ogre::ushort result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      result = (Ogre::ushort)(*arg1)->_notifyZOrder(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__notifyViewport___(void * jarg1) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->_notifyViewport();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__notifyWorldTransforms___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Matrix4 *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Matrix4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Matrix4 const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->_notifyWorldTransforms((Ogre::Matrix4 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__notifyParent___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  Ogre::Overlay *arg3 = (Ogre::Overlay *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::OverlayContainer *)jarg2; 
  arg3 = (Ogre::Overlay *)jarg3; 
  {
    try {
      (*arg1)->_notifyParent(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_isContainer___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isContainer();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_isChildrenProcessEvents___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isChildrenProcessEvents();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setChildrenProcessEvents___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setChildrenProcessEvents(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_findElementAt___(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (Ogre::OverlayElement *)(*arg1)->findElementAt(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_copyFromTemplate___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (*arg1)->copyFromTemplate(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_clone___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::OverlayElement *)(*arg1)->clone((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_DEFAULT_RESOURCE_GROUP_get___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  result = (Ogre::String *) &(Ogre::String const &) (Ogre::OverlayElement::DEFAULT_RESOURCE_GROUP);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getName___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::String *) &(*arg1)->getName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_show___(void * jarg1) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->show();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_hide___(void * jarg1) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->hide();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setVisible___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setVisible(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_isVisible___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isVisible();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_isEnabled___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isEnabled();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setEnabled___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setDimensions___(void * jarg1, float jarg2, float jarg3) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (*arg1)->setDimensions(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setPosition___(void * jarg1, float jarg2, float jarg3) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (*arg1)->setPosition(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setWidth___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setWidth(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getWidth___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getWidth();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setHeight___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setHeight(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getHeight___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setLeft___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setLeft(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getLeft___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getLeft();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setTop___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setTop(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getTop___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getTop();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__getLeft___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getLeft();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__getTop___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getTop();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__getWidth___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getWidth();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__getHeight___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__setLeft___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->_setLeft(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__setTop___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->_setTop(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__setWidth___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->_setWidth(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__setHeight___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->_setHeight(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__setPosition___(void * jarg1, float jarg2, float jarg3) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (*arg1)->_setPosition(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__setDimensions___(void * jarg1, float jarg2, float jarg3) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (*arg1)->_setDimensions(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getMaterialName___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::String *) &(*arg1)->getMaterialName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setMaterial___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::MaterialPtr *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::MaterialPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setMaterial((Ogre::MaterialPtr const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setMaterialName__SWIG_0___(void * jarg1, char * jarg2, char * jarg3) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (*arg1)->setMaterialName((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setMaterialName__SWIG_1___(void * jarg1, char * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (*arg1)->setMaterialName((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getMaterial___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::MaterialPtr *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::MaterialPtr *) &(*arg1)->getMaterial();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getWorldTransforms___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Matrix4 *arg2 = (Ogre::Matrix4 *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Matrix4 *)jarg2; 
  {
    try {
      (*arg1)->getWorldTransforms(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__updateFromParent___(void * jarg1) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->_updateFromParent();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__getDerivedLeft___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getDerivedLeft();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__getDerivedTop___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getDerivedTop();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__getRelativeWidth___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getRelativeWidth();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__getRelativeHeight___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getRelativeHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__getClippingRegion___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::RealRect *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::RealRect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::RealRect & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->_getClippingRegion(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_visitRenderables__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Renderable::Visitor *arg2 = (Ogre::Renderable::Visitor *) 0 ;
  bool arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Renderable::Visitor *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (*arg1)->visitRenderables(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_visitRenderables__SWIG_1___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Renderable::Visitor *arg2 = (Ogre::Renderable::Visitor *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Renderable::Visitor *)jarg2; 
  {
    try {
      (*arg1)->visitRenderables(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setCaption___(void * jarg1, char * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::DisplayString arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (*arg1)->setCaption((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getCaption___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::DisplayString *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::DisplayString *) &(*arg1)->getCaption();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setColour___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::ColourValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::ColourValue const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setColour((Ogre::ColourValue const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getColour___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::ColourValue *) &(*arg1)->getColour();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setMetricsMode___(void * jarg1, int jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::GuiMetricsMode arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::GuiMetricsMode)jarg2; 
  {
    try {
      (*arg1)->setMetricsMode(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getMetricsMode___(void * jarg1) {
  int jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::GuiMetricsMode result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::GuiMetricsMode)(*arg1)->getMetricsMode();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setHorizontalAlignment___(void * jarg1, int jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::GuiHorizontalAlignment arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::GuiHorizontalAlignment)jarg2; 
  {
    try {
      (*arg1)->setHorizontalAlignment(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getHorizontalAlignment___(void * jarg1) {
  int jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::GuiHorizontalAlignment result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::GuiHorizontalAlignment)(*arg1)->getHorizontalAlignment();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setVerticalAlignment___(void * jarg1, int jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::GuiVerticalAlignment arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::GuiVerticalAlignment)jarg2; 
  {
    try {
      (*arg1)->setVerticalAlignment(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getVerticalAlignment___(void * jarg1) {
  int jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::GuiVerticalAlignment result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::GuiVerticalAlignment)(*arg1)->getVerticalAlignment();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_contains___(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (bool)(*arg1)->contains(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_isKeyEnabled___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isKeyEnabled();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_isCloneable___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isCloneable();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setCloneable___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setCloneable(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getParent___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::OverlayContainer *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::OverlayContainer *)(*arg1)->getParent();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__setParent___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::OverlayContainer *)jarg2; 
  {
    try {
      (*arg1)->_setParent(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getZOrder___(void * jarg1) {
  unsigned short jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::ushort result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::ushort)(*arg1)->getZOrder();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getSquaredViewDepth___(void * jarg1, void * jarg2) {
  float jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Camera *arg2 = (Ogre::Camera *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::Camera *)jarg2; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getSquaredViewDepth((Ogre::Camera const *)arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getLights___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::LightList *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::LightList *) &(*arg1)->getLights();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_castOverlayContainer___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::OverlayContainer *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::OverlayContainer *)Ogre_OverlayElement_castOverlayContainer((Ogre::OverlayElement*)(arg1)->operator ->());
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_castPanelOverlayElement___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::PanelOverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::PanelOverlayElement *)Ogre_OverlayElement_castPanelOverlayElement((Ogre::OverlayElement*)(arg1)->operator ->());
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_castTextAreaOverlayElement___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::TextAreaOverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::TextAreaOverlayElement *)Ogre_OverlayElement_castTextAreaOverlayElement((Ogre::OverlayElement*)(arg1)->operator ->());
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getParamDictionary__SWIG_0___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::ParamDictionary *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::ParamDictionary *)(*arg1)->getParamDictionary();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getParameters___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::ParameterList *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::ParameterList *) &(*arg1)->getParameters();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setParameter___(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (bool)(*arg1)->setParameter((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setParameterList___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::NameValuePairList *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::NameValuePairList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::NameValuePairList const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setParameterList((Ogre::NameValuePairList const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getParameter___(void * jarg1, char * jarg2) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (*arg1)->getParameter((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_copyParametersTo___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::StringInterface *arg2 = (Ogre::StringInterface *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::StringInterface *)jarg2; 
  {
    try {
      (*arg1)->copyParametersTo(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_cleanupDictionary___(void * jarg1) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->cleanupDictionary();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getTechnique___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::Technique *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Technique *)(*arg1)->getTechnique();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__getMaterialLodIndex___(void * jarg1) {
  unsigned short jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::uint16)(*arg1)->_getMaterialLodIndex();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_preRender___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  Ogre::RenderSystem *arg3 = (Ogre::RenderSystem *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::SceneManager *)jarg2; 
  arg3 = (Ogre::RenderSystem *)jarg3; 
  {
    try {
      result = (bool)(*arg1)->preRender(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_postRender___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  Ogre::RenderSystem *arg3 = (Ogre::RenderSystem *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::SceneManager *)jarg2; 
  arg3 = (Ogre::RenderSystem *)jarg3; 
  {
    try {
      (*arg1)->postRender(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getNumWorldTransforms___(void * jarg1) {
  unsigned short jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::uint16)(*arg1)->getNumWorldTransforms();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setUseIdentityProjection___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setUseIdentityProjection(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getUseIdentityProjection___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->getUseIdentityProjection();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setUseIdentityView___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setUseIdentityView(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getUseIdentityView___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->getUseIdentityView();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getCastsShadows___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->getCastsShadows();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setCustomParameter___(void * jarg1, unsigned long jarg2, void * jarg3) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  size_t arg2 ;
  Ogre::Vector4f *arg3 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (Ogre::Vector4f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector4f const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setCustomParameter(arg2,(Ogre::Vector4f const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_removeCustomParameter___(void * jarg1, unsigned long jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  size_t arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (*arg1)->removeCustomParameter(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_hasCustomParameter___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (bool)(*arg1)->hasCustomParameter(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getCustomParameter___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  size_t arg2 ;
  Ogre::Vector4f *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (Ogre::Vector4f *) &(*arg1)->getCustomParameter(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr__updateCustomGpuParameter___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::GpuProgramParameters::AutoConstantEntry *arg2 = 0 ;
  Ogre::GpuProgramParameters *arg3 = (Ogre::GpuProgramParameters *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = (Ogre::GpuProgramParameters::AutoConstantEntry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::GpuProgramParameters::AutoConstantEntry const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::GpuProgramParameters *)jarg3; 
  {
    try {
      (*arg1)->_updateCustomGpuParameter((Ogre::GpuProgramParameters::AutoConstantEntry const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_setPolygonModeOverrideable___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setPolygonModeOverrideable(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getPolygonModeOverrideable___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->getPolygonModeOverrideable();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElementPtr_getUserObjectBindings__SWIG_0___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::PanelOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *) 0 ;
  Ogre::UserObjectBindings *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::PanelOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::UserObjectBindings *) &(*arg1)->getUserObjectBindings();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_PanelOverlayElement___(char * jarg1) {
  void * jresult ;
  Ogre::String *arg1 = 0 ;
  Ogre::PanelOverlayElement *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (Ogre::PanelOverlayElement *)new Ogre::PanelOverlayElement((Ogre::String const &)*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_PanelOverlayElement___(void * jarg1) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  
  arg1 = (Ogre::PanelOverlayElement *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElement_initialise___(void * jarg1) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  
  arg1 = (Ogre::PanelOverlayElement *)jarg1; 
  {
    try {
      (arg1)->initialise();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElement__releaseManualHardwareResources___(void * jarg1) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  
  arg1 = (Ogre::PanelOverlayElement *)jarg1; 
  {
    try {
      (arg1)->_releaseManualHardwareResources();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElement__restoreManualHardwareResources___(void * jarg1) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  
  arg1 = (Ogre::PanelOverlayElement *)jarg1; 
  {
    try {
      (arg1)->_restoreManualHardwareResources();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElement_setTiling__SWIG_0___(void * jarg1, float jarg2, float jarg3, unsigned short jarg4) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::ushort arg4 ;
  
  arg1 = (Ogre::PanelOverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::ushort)jarg4; 
  {
    try {
      (arg1)->setTiling(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElement_setTiling__SWIG_1___(void * jarg1, float jarg2, float jarg3) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::PanelOverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->setTiling(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElement_getTileX__SWIG_0___(void * jarg1, unsigned short jarg2) {
  float jresult ;
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::ushort arg2 ;
  Ogre::Real result;
  
  arg1 = (Ogre::PanelOverlayElement *)jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      result = (Ogre::Real)((Ogre::PanelOverlayElement const *)arg1)->getTileX(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElement_getTileX__SWIG_1___(void * jarg1) {
  float jresult ;
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::PanelOverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::PanelOverlayElement const *)arg1)->getTileX();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElement_getTileY__SWIG_0___(void * jarg1, unsigned short jarg2) {
  float jresult ;
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::ushort arg2 ;
  Ogre::Real result;
  
  arg1 = (Ogre::PanelOverlayElement *)jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      result = (Ogre::Real)((Ogre::PanelOverlayElement const *)arg1)->getTileY(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_PanelOverlayElement_getTileY__SWIG_1___(void * jarg1) {
  float jresult ;
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::PanelOverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::PanelOverlayElement const *)arg1)->getTileY();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElement_setUV___(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  
  arg1 = (Ogre::PanelOverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = (Ogre::Real)jarg5; 
  {
    try {
      (arg1)->setUV(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElement_getUV___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::Real *arg2 = 0 ;
  Ogre::Real *arg3 = 0 ;
  Ogre::Real *arg4 = 0 ;
  Ogre::Real *arg5 = 0 ;
  
  arg1 = (Ogre::PanelOverlayElement *)jarg1; 
  arg2 = (Ogre::Real *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Real & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::Real *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Real & type is null", 0);
    return ;
  } 
  arg4 = (Ogre::Real *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Real & type is null", 0);
    return ;
  } 
  arg5 = (Ogre::Real *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Real & type is null", 0);
    return ;
  } 
  {
    try {
      ((Ogre::PanelOverlayElement const *)arg1)->getUV(*arg2,*arg3,*arg4,*arg5);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElement_setTransparent___(void * jarg1, unsigned int jarg2) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::PanelOverlayElement *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setTransparent(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_PanelOverlayElement_isTransparent___(void * jarg1) {
  unsigned int jresult ;
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  bool result;
  
  arg1 = (Ogre::PanelOverlayElement *)jarg1; 
  {
    try {
      result = (bool)((Ogre::PanelOverlayElement const *)arg1)->isTransparent();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElement_getTypeName___(void * jarg1) {
  char * jresult ;
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::PanelOverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::PanelOverlayElement const *)arg1)->getTypeName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElement_getRenderOperation___(void * jarg1, void * jarg2) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::RenderOperation *arg2 = 0 ;
  
  arg1 = (Ogre::PanelOverlayElement *)jarg1; 
  arg2 = (Ogre::RenderOperation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::RenderOperation & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->getRenderOperation(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_PanelOverlayElement__updateRenderQueue___(void * jarg1, void * jarg2) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::RenderQueue *arg2 = (Ogre::RenderQueue *) 0 ;
  
  arg1 = (Ogre::PanelOverlayElement *)jarg1; 
  arg2 = (Ogre::RenderQueue *)jarg2; 
  {
    try {
      (arg1)->_updateRenderQueue(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TextAreaOverlayElementPtr__SWIG_0___(void * jarg1) {
  void * jresult ;
  std::nullptr_t arg1 ;
  std::nullptr_t *argp1 ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *result = 0 ;
  
  argp1 = (std::nullptr_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::nullptr_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)new Ogre::SharedPtr< Ogre::TextAreaOverlayElement >(arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TextAreaOverlayElementPtr__SWIG_1___() {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *result = 0 ;
  
  {
    try {
      result = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)new Ogre::SharedPtr< Ogre::TextAreaOverlayElement >();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TextAreaOverlayElementPtr__SWIG_2___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = 0 ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::SharedPtr< Ogre::TextAreaOverlayElement > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)new Ogre::SharedPtr< Ogre::TextAreaOverlayElement >((Ogre::SharedPtr< Ogre::TextAreaOverlayElement > const &)*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr___deref_____(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::TextAreaOverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::TextAreaOverlayElement *)((Ogre::SharedPtr< Ogre::TextAreaOverlayElement > const *)arg1)->operator ->();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TextAreaOverlayElementPtr___(void * jarg1) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_initialise___(void * jarg1) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->initialise();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__releaseManualHardwareResources___(void * jarg1) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->_releaseManualHardwareResources();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__restoreManualHardwareResources___(void * jarg1) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->_restoreManualHardwareResources();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setCaption___(void * jarg1, char * jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::DisplayString arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (*arg1)->setCaption((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setCharHeight___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setCharHeight(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getCharHeight___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getCharHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setSpaceWidth___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setSpaceWidth(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getSpaceWidth___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getSpaceWidth();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setFontName__SWIG_0___(void * jarg1, char * jarg2, char * jarg3) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (*arg1)->setFontName((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setFontName__SWIG_1___(void * jarg1, char * jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (*arg1)->setFontName((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getFont___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::FontPtr *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::FontPtr *) &(*arg1)->getFont();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getTypeName___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::String *) &(*arg1)->getTypeName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getMaterial___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::MaterialPtr *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::MaterialPtr *) &(*arg1)->getMaterial();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getRenderOperation___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::RenderOperation *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::RenderOperation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::RenderOperation & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->getRenderOperation(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setColour___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::ColourValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::ColourValue const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setColour((Ogre::ColourValue const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getColour___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::ColourValue *) &(*arg1)->getColour();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setColourBottom___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::ColourValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::ColourValue const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setColourBottom((Ogre::ColourValue const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getColourBottom___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::ColourValue *) &(*arg1)->getColourBottom();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setColourTop___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::ColourValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::ColourValue const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setColourTop((Ogre::ColourValue const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getColourTop___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::ColourValue *) &(*arg1)->getColourTop();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setAlignment___(void * jarg1, int jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::TextAreaOverlayElement::Alignment arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::TextAreaOverlayElement::Alignment)jarg2; 
  {
    try {
      (*arg1)->setAlignment(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getAlignment___(void * jarg1) {
  int jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::TextAreaOverlayElement::Alignment result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::TextAreaOverlayElement::Alignment)(*arg1)->getAlignment();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setMetricsMode___(void * jarg1, int jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::GuiMetricsMode arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::GuiMetricsMode)jarg2; 
  {
    try {
      (*arg1)->setMetricsMode(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__update___(void * jarg1) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->_update();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_DEFAULT_RESOURCE_GROUP_get___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  result = (Ogre::String *) &(Ogre::String const &) (Ogre::OverlayElement::DEFAULT_RESOURCE_GROUP);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getName___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::String *) &(*arg1)->getName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_show___(void * jarg1) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->show();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_hide___(void * jarg1) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->hide();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setVisible___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setVisible(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_isVisible___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isVisible();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_isEnabled___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isEnabled();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setEnabled___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setEnabled(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setDimensions___(void * jarg1, float jarg2, float jarg3) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (*arg1)->setDimensions(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setPosition___(void * jarg1, float jarg2, float jarg3) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (*arg1)->setPosition(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setWidth___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setWidth(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getWidth___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getWidth();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setHeight___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setHeight(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getHeight___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setLeft___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setLeft(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getLeft___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getLeft();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setTop___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->setTop(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getTop___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getTop();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__getLeft___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getLeft();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__getTop___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getTop();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__getWidth___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getWidth();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__getHeight___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__setLeft___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->_setLeft(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__setTop___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->_setTop(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__setWidth___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->_setWidth(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__setHeight___(void * jarg1, float jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (*arg1)->_setHeight(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__setPosition___(void * jarg1, float jarg2, float jarg3) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (*arg1)->_setPosition(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__setDimensions___(void * jarg1, float jarg2, float jarg3) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (*arg1)->_setDimensions(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getMaterialName___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::String *) &(*arg1)->getMaterialName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setMaterial___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::MaterialPtr *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::MaterialPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::MaterialPtr const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setMaterial((Ogre::MaterialPtr const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setMaterialName__SWIG_0___(void * jarg1, char * jarg2, char * jarg3) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (*arg1)->setMaterialName((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setMaterialName__SWIG_1___(void * jarg1, char * jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (*arg1)->setMaterialName((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getWorldTransforms___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Matrix4 *arg2 = (Ogre::Matrix4 *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Matrix4 *)jarg2; 
  {
    try {
      (*arg1)->getWorldTransforms(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__positionsOutOfDate___(void * jarg1) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->_positionsOutOfDate();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__updateFromParent___(void * jarg1) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->_updateFromParent();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__notifyParent___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  Ogre::Overlay *arg3 = (Ogre::Overlay *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::OverlayContainer *)jarg2; 
  arg3 = (Ogre::Overlay *)jarg3; 
  {
    try {
      (*arg1)->_notifyParent(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__getDerivedLeft___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getDerivedLeft();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__getDerivedTop___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getDerivedTop();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__getRelativeWidth___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getRelativeWidth();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__getRelativeHeight___(void * jarg1) {
  float jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Real)(*arg1)->_getRelativeHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__getClippingRegion___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::RealRect *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::RealRect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::RealRect & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->_getClippingRegion(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__notifyZOrder___(void * jarg1, unsigned short jarg2) {
  unsigned short jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::ushort arg2 ;
  Ogre::ushort result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      result = (Ogre::ushort)(*arg1)->_notifyZOrder(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__notifyWorldTransforms___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Matrix4 *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Matrix4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Matrix4 const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->_notifyWorldTransforms((Ogre::Matrix4 const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__notifyViewport___(void * jarg1) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->_notifyViewport();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__updateRenderQueue___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::RenderQueue *arg2 = (Ogre::RenderQueue *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::RenderQueue *)jarg2; 
  {
    try {
      (*arg1)->_updateRenderQueue(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_visitRenderables__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Renderable::Visitor *arg2 = (Ogre::Renderable::Visitor *) 0 ;
  bool arg3 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Renderable::Visitor *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (*arg1)->visitRenderables(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_visitRenderables__SWIG_1___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Renderable::Visitor *arg2 = (Ogre::Renderable::Visitor *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Renderable::Visitor *)jarg2; 
  {
    try {
      (*arg1)->visitRenderables(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getCaption___(void * jarg1) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::DisplayString *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::DisplayString *) &(*arg1)->getCaption();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getMetricsMode___(void * jarg1) {
  int jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::GuiMetricsMode result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::GuiMetricsMode)(*arg1)->getMetricsMode();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setHorizontalAlignment___(void * jarg1, int jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::GuiHorizontalAlignment arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::GuiHorizontalAlignment)jarg2; 
  {
    try {
      (*arg1)->setHorizontalAlignment(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getHorizontalAlignment___(void * jarg1) {
  int jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::GuiHorizontalAlignment result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::GuiHorizontalAlignment)(*arg1)->getHorizontalAlignment();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setVerticalAlignment___(void * jarg1, int jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::GuiVerticalAlignment arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::GuiVerticalAlignment)jarg2; 
  {
    try {
      (*arg1)->setVerticalAlignment(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getVerticalAlignment___(void * jarg1) {
  int jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::GuiVerticalAlignment result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::GuiVerticalAlignment)(*arg1)->getVerticalAlignment();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_contains___(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (bool)(*arg1)->contains(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_findElementAt___(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (Ogre::OverlayElement *)(*arg1)->findElementAt(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_isContainer___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isContainer();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_isKeyEnabled___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isKeyEnabled();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_isCloneable___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->isCloneable();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setCloneable___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setCloneable(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getParent___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::OverlayContainer *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::OverlayContainer *)(*arg1)->getParent();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__setParent___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::OverlayContainer *)jarg2; 
  {
    try {
      (*arg1)->_setParent(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getZOrder___(void * jarg1) {
  unsigned short jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::ushort result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::ushort)(*arg1)->getZOrder();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getSquaredViewDepth___(void * jarg1, void * jarg2) {
  float jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Camera *arg2 = (Ogre::Camera *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::Camera *)jarg2; 
  {
    try {
      result = (Ogre::Real)(*arg1)->getSquaredViewDepth((Ogre::Camera const *)arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getLights___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::LightList *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::LightList *) &(*arg1)->getLights();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_copyFromTemplate___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::OverlayElement *)jarg2; 
  {
    try {
      (*arg1)->copyFromTemplate(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_clone___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (Ogre::OverlayElement *)(*arg1)->clone((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_castOverlayContainer___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::OverlayContainer *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::OverlayContainer *)Ogre_OverlayElement_castOverlayContainer((Ogre::OverlayElement*)(arg1)->operator ->());
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_castPanelOverlayElement___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::PanelOverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::PanelOverlayElement *)Ogre_OverlayElement_castPanelOverlayElement((Ogre::OverlayElement*)(arg1)->operator ->());
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_castTextAreaOverlayElement___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::TextAreaOverlayElement *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::TextAreaOverlayElement *)Ogre_OverlayElement_castTextAreaOverlayElement((Ogre::OverlayElement*)(arg1)->operator ->());
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getParamDictionary__SWIG_0___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::ParamDictionary *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::ParamDictionary *)(*arg1)->getParamDictionary();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getParameters___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::ParameterList *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::ParameterList *) &(*arg1)->getParameters();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setParameter___(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (bool)(*arg1)->setParameter((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setParameterList___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::NameValuePairList *arg2 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::NameValuePairList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::NameValuePairList const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setParameterList((Ogre::NameValuePairList const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getParameter___(void * jarg1, char * jarg2) {
  char * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (*arg1)->getParameter((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_copyParametersTo___(void * jarg1, void * jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::StringInterface *arg2 = (Ogre::StringInterface *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::StringInterface *)jarg2; 
  {
    try {
      (*arg1)->copyParametersTo(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_cleanupDictionary___(void * jarg1) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      (*arg1)->cleanupDictionary();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getTechnique___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::Technique *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::Technique *)(*arg1)->getTechnique();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__getMaterialLodIndex___(void * jarg1) {
  unsigned short jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::uint16)(*arg1)->_getMaterialLodIndex();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_preRender___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  Ogre::RenderSystem *arg3 = (Ogre::RenderSystem *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::SceneManager *)jarg2; 
  arg3 = (Ogre::RenderSystem *)jarg3; 
  {
    try {
      result = (bool)(*arg1)->preRender(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_postRender___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  Ogre::RenderSystem *arg3 = (Ogre::RenderSystem *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::SceneManager *)jarg2; 
  arg3 = (Ogre::RenderSystem *)jarg3; 
  {
    try {
      (*arg1)->postRender(arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getNumWorldTransforms___(void * jarg1) {
  unsigned short jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::uint16 result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::uint16)(*arg1)->getNumWorldTransforms();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setUseIdentityProjection___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setUseIdentityProjection(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getUseIdentityProjection___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->getUseIdentityProjection();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setUseIdentityView___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setUseIdentityView(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getUseIdentityView___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->getUseIdentityView();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getCastsShadows___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->getCastsShadows();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setCustomParameter___(void * jarg1, unsigned long jarg2, void * jarg3) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  size_t arg2 ;
  Ogre::Vector4f *arg3 = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (Ogre::Vector4f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::Vector4f const & type is null", 0);
    return ;
  } 
  {
    try {
      (*arg1)->setCustomParameter(arg2,(Ogre::Vector4f const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_removeCustomParameter___(void * jarg1, unsigned long jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  size_t arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (*arg1)->removeCustomParameter(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_hasCustomParameter___(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (bool)(*arg1)->hasCustomParameter(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getCustomParameter___(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  size_t arg2 ;
  Ogre::Vector4f *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (Ogre::Vector4f *) &(*arg1)->getCustomParameter(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr__updateCustomGpuParameter___(void * jarg1, void * jarg2, void * jarg3) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::GpuProgramParameters::AutoConstantEntry *arg2 = 0 ;
  Ogre::GpuProgramParameters *arg3 = (Ogre::GpuProgramParameters *) 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = (Ogre::GpuProgramParameters::AutoConstantEntry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::GpuProgramParameters::AutoConstantEntry const & type is null", 0);
    return ;
  } 
  arg3 = (Ogre::GpuProgramParameters *)jarg3; 
  {
    try {
      (*arg1)->_updateCustomGpuParameter((Ogre::GpuProgramParameters::AutoConstantEntry const &)*arg2,arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_setPolygonModeOverrideable___(void * jarg1, unsigned int jarg2) {
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (*arg1)->setPolygonModeOverrideable(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getPolygonModeOverrideable___(void * jarg1) {
  unsigned int jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  bool result;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (bool)(*arg1)->getPolygonModeOverrideable();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElementPtr_getUserObjectBindings__SWIG_0___(void * jarg1) {
  void * jresult ;
  Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *) 0 ;
  Ogre::UserObjectBindings *result = 0 ;
  
  arg1 = (Ogre::SharedPtr< Ogre::TextAreaOverlayElement > *)jarg1; 
  {
    try {
      result = (Ogre::UserObjectBindings *) &(*arg1)->getUserObjectBindings();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_TextAreaOverlayElement___(char * jarg1) {
  void * jresult ;
  Ogre::String *arg1 = 0 ;
  Ogre::TextAreaOverlayElement *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (Ogre::TextAreaOverlayElement *)new Ogre::TextAreaOverlayElement((Ogre::String const &)*arg1);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_TextAreaOverlayElement___(void * jarg1) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_initialise___(void * jarg1) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  {
    try {
      (arg1)->initialise();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement__releaseManualHardwareResources___(void * jarg1) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  {
    try {
      (arg1)->_releaseManualHardwareResources();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement__restoreManualHardwareResources___(void * jarg1) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  {
    try {
      (arg1)->_restoreManualHardwareResources();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_setCaption___(void * jarg1, char * jarg2) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::DisplayString arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setCaption((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_setCharHeight___(void * jarg1, float jarg2) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setCharHeight(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_getCharHeight___(void * jarg1) {
  float jresult ;
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::TextAreaOverlayElement const *)arg1)->getCharHeight();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_setSpaceWidth___(void * jarg1, float jarg2) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setSpaceWidth(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_getSpaceWidth___(void * jarg1) {
  float jresult ;
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::TextAreaOverlayElement const *)arg1)->getSpaceWidth();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_setFontName__SWIG_0___(void * jarg1, char * jarg2, char * jarg3) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->setFontName((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_setFontName__SWIG_1___(void * jarg1, char * jarg2) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setFontName((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_getFont___(void * jarg1) {
  void * jresult ;
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::FontPtr *result = 0 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::FontPtr *) &((Ogre::TextAreaOverlayElement const *)arg1)->getFont();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_getTypeName___(void * jarg1) {
  char * jresult ;
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::TextAreaOverlayElement const *)arg1)->getTypeName();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_getMaterial___(void * jarg1) {
  void * jresult ;
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::MaterialPtr *result = 0 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::MaterialPtr *) &((Ogre::TextAreaOverlayElement const *)arg1)->getMaterial();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_getRenderOperation___(void * jarg1, void * jarg2) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::RenderOperation *arg2 = 0 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  arg2 = (Ogre::RenderOperation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::RenderOperation & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->getRenderOperation(*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_setColour___(void * jarg1, void * jarg2) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  arg2 = (Ogre::ColourValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::ColourValue const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setColour((Ogre::ColourValue const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_getColour___(void * jarg1) {
  void * jresult ;
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::ColourValue *) &((Ogre::TextAreaOverlayElement const *)arg1)->getColour();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_setColourBottom___(void * jarg1, void * jarg2) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  arg2 = (Ogre::ColourValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::ColourValue const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setColourBottom((Ogre::ColourValue const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_getColourBottom___(void * jarg1) {
  void * jresult ;
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::ColourValue *) &((Ogre::TextAreaOverlayElement const *)arg1)->getColourBottom();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_setColourTop___(void * jarg1, void * jarg2) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  arg2 = (Ogre::ColourValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::ColourValue const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setColourTop((Ogre::ColourValue const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_getColourTop___(void * jarg1) {
  void * jresult ;
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::ColourValue *) &((Ogre::TextAreaOverlayElement const *)arg1)->getColourTop();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_setAlignment___(void * jarg1, int jarg2) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::TextAreaOverlayElement::Alignment arg2 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  arg2 = (Ogre::TextAreaOverlayElement::Alignment)jarg2; 
  {
    try {
      (arg1)->setAlignment(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_getAlignment___(void * jarg1) {
  int jresult ;
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::TextAreaOverlayElement::Alignment result;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  {
    try {
      result = (Ogre::TextAreaOverlayElement::Alignment)((Ogre::TextAreaOverlayElement const *)arg1)->getAlignment();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_setMetricsMode___(void * jarg1, int jarg2) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::GuiMetricsMode arg2 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  arg2 = (Ogre::GuiMetricsMode)jarg2; 
  {
    try {
      (arg1)->setMetricsMode(arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement__update___(void * jarg1) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  
  arg1 = (Ogre::TextAreaOverlayElement *)jarg1; 
  {
    try {
      (arg1)->_update();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_new_ImGuiOverlay___() {
  void * jresult ;
  Ogre::ImGuiOverlay *result = 0 ;
  
  {
    try {
      result = (Ogre::ImGuiOverlay *)new Ogre::ImGuiOverlay();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_delete_ImGuiOverlay___(void * jarg1) {
  Ogre::ImGuiOverlay *arg1 = (Ogre::ImGuiOverlay *) 0 ;
  
  arg1 = (Ogre::ImGuiOverlay *)jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_ImGuiOverlay_addFont__SWIG_0___(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Ogre::ImGuiOverlay *arg1 = (Ogre::ImGuiOverlay *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  ImFont *result = 0 ;
  
  arg1 = (Ogre::ImGuiOverlay *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (ImFont *)(arg1)->addFont((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_orgfogre_ImGuiOverlay_addFont__SWIG_1___(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::ImGuiOverlay *arg1 = (Ogre::ImGuiOverlay *) 0 ;
  Ogre::String *arg2 = 0 ;
  ImFont *result = 0 ;
  
  arg1 = (Ogre::ImGuiOverlay *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Ogre::String arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (ImFont *)(arg1)->addFont((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ImGuiOverlay_NewFrame___() {
  {
    try {
      Ogre::ImGuiOverlay::NewFrame();
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_orgfogre_ImGuiOverlay__findVisibleObjects___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Ogre::ImGuiOverlay *arg1 = (Ogre::ImGuiOverlay *) 0 ;
  Ogre::Camera *arg2 = (Ogre::Camera *) 0 ;
  Ogre::RenderQueue *arg3 = (Ogre::RenderQueue *) 0 ;
  Ogre::Viewport *arg4 = (Ogre::Viewport *) 0 ;
  
  arg1 = (Ogre::ImGuiOverlay *)jarg1; 
  arg2 = (Ogre::Camera *)jarg2; 
  arg3 = (Ogre::RenderQueue *)jarg3; 
  arg4 = (Ogre::Viewport *)jarg4; 
  {
    try {
      (arg1)->_findVisibleObjects(arg2,arg3,arg4);
    }
    
    
    
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT Ogre::Resource * SWIGSTDCALL CSharp_orgfogre_Font_SWIGUpcast___(Ogre::Font *jarg1) {
    return (Ogre::Resource *)jarg1;
}

SWIGEXPORT Ogre::ResourceManager * SWIGSTDCALL CSharp_orgfogre_FontManager_SWIGUpcast___(Ogre::FontManager *jarg1) {
    return (Ogre::ResourceManager *)jarg1;
}

SWIGEXPORT Ogre::StringInterface * SWIGSTDCALL CSharp_orgfogre_OverlayElement_SWIGUpcast___(Ogre::OverlayElement *jarg1) {
    return (Ogre::StringInterface *)jarg1;
}

SWIGEXPORT Ogre::OverlayElement * SWIGSTDCALL CSharp_orgfogre_OverlayContainer_SWIGUpcast___(Ogre::OverlayContainer *jarg1) {
    return (Ogre::OverlayElement *)jarg1;
}

SWIGEXPORT Ogre::ScriptLoader * SWIGSTDCALL CSharp_orgfogre_OverlayManager_SWIGUpcast___(Ogre::OverlayManager *jarg1) {
    return (Ogre::ScriptLoader *)jarg1;
}

SWIGEXPORT Ogre::RenderQueueListener * SWIGSTDCALL CSharp_orgfogre_OverlaySystem_SWIGUpcast___(Ogre::OverlaySystem *jarg1) {
    return (Ogre::RenderQueueListener *)jarg1;
}

SWIGEXPORT Ogre::OverlayContainer * SWIGSTDCALL CSharp_orgfogre_PanelOverlayElement_SWIGUpcast___(Ogre::PanelOverlayElement *jarg1) {
    return (Ogre::OverlayContainer *)jarg1;
}

SWIGEXPORT Ogre::OverlayElement * SWIGSTDCALL CSharp_orgfogre_TextAreaOverlayElement_SWIGUpcast___(Ogre::TextAreaOverlayElement *jarg1) {
    return (Ogre::OverlayElement *)jarg1;
}

SWIGEXPORT Ogre::Overlay * SWIGSTDCALL CSharp_orgfogre_ImGuiOverlay_SWIGUpcast___(Ogre::ImGuiOverlay *jarg1) {
    return (Ogre::Overlay *)jarg1;
}

#ifdef __cplusplus
}
#endif

