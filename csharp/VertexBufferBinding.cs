//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class VertexBufferBinding : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VertexBufferBinding(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VertexBufferBinding obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~VertexBufferBinding() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_VertexBufferBinding(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public VertexBufferBinding() : this(OgrePINVOKE.new_VertexBufferBinding(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBinding(ushort index, HardwareVertexBufferPtr buffer) {
    OgrePINVOKE.VertexBufferBinding_setBinding(swigCPtr, index, HardwareVertexBufferPtr.getCPtr(buffer));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void unsetBinding(ushort index) {
    OgrePINVOKE.VertexBufferBinding_unsetBinding(swigCPtr, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void unsetAllBindings() {
    OgrePINVOKE.VertexBufferBinding_unsetAllBindings(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__mapT_unsigned_short_Ogre__SharedPtrT_Ogre__HardwareVertexBuffer_t_std__lessT_unsigned_short_t_t getBindings() {
    SWIGTYPE_p_std__mapT_unsigned_short_Ogre__SharedPtrT_Ogre__HardwareVertexBuffer_t_std__lessT_unsigned_short_t_t ret = new SWIGTYPE_p_std__mapT_unsigned_short_Ogre__SharedPtrT_Ogre__HardwareVertexBuffer_t_std__lessT_unsigned_short_t_t(OgrePINVOKE.VertexBufferBinding_getBindings(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public HardwareVertexBufferPtr getBuffer(ushort index) {
    HardwareVertexBufferPtr ret = new HardwareVertexBufferPtr(OgrePINVOKE.VertexBufferBinding_getBuffer(swigCPtr, index), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isBufferBound(ushort index) {
    bool ret = OgrePINVOKE.VertexBufferBinding_isBufferBound(swigCPtr, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getBufferCount() {
    uint ret = OgrePINVOKE.VertexBufferBinding_getBufferCount(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getNextIndex() {
    ushort ret = OgrePINVOKE.VertexBufferBinding_getNextIndex(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getLastBoundIndex() {
    ushort ret = OgrePINVOKE.VertexBufferBinding_getLastBoundIndex(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasGaps() {
    bool ret = OgrePINVOKE.VertexBufferBinding_hasGaps(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void closeGaps(SWIGTYPE_p_std__mapT_unsigned_short_unsigned_short_std__lessT_unsigned_short_t_t bindingIndexMap) {
    OgrePINVOKE.VertexBufferBinding_closeGaps(swigCPtr, SWIGTYPE_p_std__mapT_unsigned_short_unsigned_short_std__lessT_unsigned_short_t_t.getCPtr(bindingIndexMap));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasInstanceData() {
    bool ret = OgrePINVOKE.VertexBufferBinding_hasInstanceData(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
