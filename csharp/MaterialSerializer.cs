//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class MaterialSerializer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MaterialSerializer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MaterialSerializer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MaterialSerializer() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_MaterialSerializer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public class Listener : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Listener(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Listener obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Listener() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_MaterialSerializer_Listener(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public virtual void materialEventRaised(MaterialSerializer ser, MaterialSerializer.SerializeEvent event_, SWIGTYPE_p_bool skip, Material mat) {
      if (SwigDerivedClassHasMethod("materialEventRaised", swigMethodTypes0)) OgrePINVOKE.MaterialSerializer_Listener_materialEventRaisedSwigExplicitListener(swigCPtr, MaterialSerializer.getCPtr(ser), (int)event_, SWIGTYPE_p_bool.getCPtr(skip), Material.getCPtr(mat)); else OgrePINVOKE.MaterialSerializer_Listener_materialEventRaised(swigCPtr, MaterialSerializer.getCPtr(ser), (int)event_, SWIGTYPE_p_bool.getCPtr(skip), Material.getCPtr(mat));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public virtual void techniqueEventRaised(MaterialSerializer ser, MaterialSerializer.SerializeEvent event_, SWIGTYPE_p_bool skip, Technique tech) {
      if (SwigDerivedClassHasMethod("techniqueEventRaised", swigMethodTypes1)) OgrePINVOKE.MaterialSerializer_Listener_techniqueEventRaisedSwigExplicitListener(swigCPtr, MaterialSerializer.getCPtr(ser), (int)event_, SWIGTYPE_p_bool.getCPtr(skip), Technique.getCPtr(tech)); else OgrePINVOKE.MaterialSerializer_Listener_techniqueEventRaised(swigCPtr, MaterialSerializer.getCPtr(ser), (int)event_, SWIGTYPE_p_bool.getCPtr(skip), Technique.getCPtr(tech));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public virtual void passEventRaised(MaterialSerializer ser, MaterialSerializer.SerializeEvent event_, SWIGTYPE_p_bool skip, Pass pass) {
      if (SwigDerivedClassHasMethod("passEventRaised", swigMethodTypes2)) OgrePINVOKE.MaterialSerializer_Listener_passEventRaisedSwigExplicitListener(swigCPtr, MaterialSerializer.getCPtr(ser), (int)event_, SWIGTYPE_p_bool.getCPtr(skip), Pass.getCPtr(pass)); else OgrePINVOKE.MaterialSerializer_Listener_passEventRaised(swigCPtr, MaterialSerializer.getCPtr(ser), (int)event_, SWIGTYPE_p_bool.getCPtr(skip), Pass.getCPtr(pass));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void gpuProgramRefEventRaised(MaterialSerializer ser, MaterialSerializer.SerializeEvent event_, SWIGTYPE_p_bool skip, string attrib, GpuProgramPtr program, GpuProgramParametersPtr params_, GpuProgramParameters defaultParams) {
      OgrePINVOKE.MaterialSerializer_Listener_gpuProgramRefEventRaised(swigCPtr, MaterialSerializer.getCPtr(ser), (int)event_, SWIGTYPE_p_bool.getCPtr(skip), attrib, GpuProgramPtr.getCPtr(program), GpuProgramParametersPtr.getCPtr(params_), GpuProgramParameters.getCPtr(defaultParams));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public virtual void textureUnitStateEventRaised(MaterialSerializer ser, MaterialSerializer.SerializeEvent event_, SWIGTYPE_p_bool skip, TextureUnitState textureUnit) {
      if (SwigDerivedClassHasMethod("textureUnitStateEventRaised", swigMethodTypes3)) OgrePINVOKE.MaterialSerializer_Listener_textureUnitStateEventRaisedSwigExplicitListener(swigCPtr, MaterialSerializer.getCPtr(ser), (int)event_, SWIGTYPE_p_bool.getCPtr(skip), TextureUnitState.getCPtr(textureUnit)); else OgrePINVOKE.MaterialSerializer_Listener_textureUnitStateEventRaised(swigCPtr, MaterialSerializer.getCPtr(ser), (int)event_, SWIGTYPE_p_bool.getCPtr(skip), TextureUnitState.getCPtr(textureUnit));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public Listener() : this(OgrePINVOKE.new_MaterialSerializer_Listener(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      SwigDirectorConnect();
    }
  
    private void SwigDirectorConnect() {
      if (SwigDerivedClassHasMethod("materialEventRaised", swigMethodTypes0))
        swigDelegate0 = new SwigDelegateListener_0(SwigDirectorMethodmaterialEventRaised);
      if (SwigDerivedClassHasMethod("techniqueEventRaised", swigMethodTypes1))
        swigDelegate1 = new SwigDelegateListener_1(SwigDirectorMethodtechniqueEventRaised);
      if (SwigDerivedClassHasMethod("passEventRaised", swigMethodTypes2))
        swigDelegate2 = new SwigDelegateListener_2(SwigDirectorMethodpassEventRaised);
      if (SwigDerivedClassHasMethod("textureUnitStateEventRaised", swigMethodTypes3))
        swigDelegate3 = new SwigDelegateListener_3(SwigDirectorMethodtextureUnitStateEventRaised);
      OgrePINVOKE.MaterialSerializer_Listener_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3);
    }
  
    private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
      global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
      bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Listener));
      return hasDerivedMethod;
    }
  
    private void SwigDirectorMethodmaterialEventRaised(global::System.IntPtr ser, int event_, global::System.IntPtr skip, global::System.IntPtr mat) {
      materialEventRaised((ser == global::System.IntPtr.Zero) ? null : new MaterialSerializer(ser, false), (MaterialSerializer.SerializeEvent)event_, new SWIGTYPE_p_bool(skip, false), (mat == global::System.IntPtr.Zero) ? null : new Material(mat, false));
    }
  
    private void SwigDirectorMethodtechniqueEventRaised(global::System.IntPtr ser, int event_, global::System.IntPtr skip, global::System.IntPtr tech) {
      techniqueEventRaised((ser == global::System.IntPtr.Zero) ? null : new MaterialSerializer(ser, false), (MaterialSerializer.SerializeEvent)event_, new SWIGTYPE_p_bool(skip, false), (tech == global::System.IntPtr.Zero) ? null : new Technique(tech, false));
    }
  
    private void SwigDirectorMethodpassEventRaised(global::System.IntPtr ser, int event_, global::System.IntPtr skip, global::System.IntPtr pass) {
      passEventRaised((ser == global::System.IntPtr.Zero) ? null : new MaterialSerializer(ser, false), (MaterialSerializer.SerializeEvent)event_, new SWIGTYPE_p_bool(skip, false), (pass == global::System.IntPtr.Zero) ? null : new Pass(pass, false));
    }
  
    private void SwigDirectorMethodtextureUnitStateEventRaised(global::System.IntPtr ser, int event_, global::System.IntPtr skip, global::System.IntPtr textureUnit) {
      textureUnitStateEventRaised((ser == global::System.IntPtr.Zero) ? null : new MaterialSerializer(ser, false), (MaterialSerializer.SerializeEvent)event_, new SWIGTYPE_p_bool(skip, false), (textureUnit == global::System.IntPtr.Zero) ? null : new TextureUnitState(textureUnit, false));
    }
  
    public delegate void SwigDelegateListener_0(global::System.IntPtr ser, int event_, global::System.IntPtr skip, global::System.IntPtr mat);
    public delegate void SwigDelegateListener_1(global::System.IntPtr ser, int event_, global::System.IntPtr skip, global::System.IntPtr tech);
    public delegate void SwigDelegateListener_2(global::System.IntPtr ser, int event_, global::System.IntPtr skip, global::System.IntPtr pass);
    public delegate void SwigDelegateListener_3(global::System.IntPtr ser, int event_, global::System.IntPtr skip, global::System.IntPtr textureUnit);
  
    private SwigDelegateListener_0 swigDelegate0;
    private SwigDelegateListener_1 swigDelegate1;
    private SwigDelegateListener_2 swigDelegate2;
    private SwigDelegateListener_3 swigDelegate3;
  
    private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(MaterialSerializer), typeof(MaterialSerializer.SerializeEvent), typeof(SWIGTYPE_p_bool), typeof(Material) };
    private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(MaterialSerializer), typeof(MaterialSerializer.SerializeEvent), typeof(SWIGTYPE_p_bool), typeof(Technique) };
    private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(MaterialSerializer), typeof(MaterialSerializer.SerializeEvent), typeof(SWIGTYPE_p_bool), typeof(Pass) };
    private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(MaterialSerializer), typeof(MaterialSerializer.SerializeEvent), typeof(SWIGTYPE_p_bool), typeof(TextureUnitState) };
  }

  public MaterialSerializer() : this(OgrePINVOKE.new_MaterialSerializer(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void queueForExport(MaterialPtr pMat, bool clearQueued, bool exportDefaults, string materialName) {
    OgrePINVOKE.MaterialSerializer_queueForExport__SWIG_0(swigCPtr, MaterialPtr.getCPtr(pMat), clearQueued, exportDefaults, materialName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void queueForExport(MaterialPtr pMat, bool clearQueued, bool exportDefaults) {
    OgrePINVOKE.MaterialSerializer_queueForExport__SWIG_1(swigCPtr, MaterialPtr.getCPtr(pMat), clearQueued, exportDefaults);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void queueForExport(MaterialPtr pMat, bool clearQueued) {
    OgrePINVOKE.MaterialSerializer_queueForExport__SWIG_2(swigCPtr, MaterialPtr.getCPtr(pMat), clearQueued);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void queueForExport(MaterialPtr pMat) {
    OgrePINVOKE.MaterialSerializer_queueForExport__SWIG_3(swigCPtr, MaterialPtr.getCPtr(pMat));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void exportQueued(string filename, bool includeProgDef, string programFilename) {
    OgrePINVOKE.MaterialSerializer_exportQueued__SWIG_0(swigCPtr, filename, includeProgDef, programFilename);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void exportQueued(string filename, bool includeProgDef) {
    OgrePINVOKE.MaterialSerializer_exportQueued__SWIG_1(swigCPtr, filename, includeProgDef);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void exportQueued(string filename) {
    OgrePINVOKE.MaterialSerializer_exportQueued__SWIG_2(swigCPtr, filename);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void exportMaterial(MaterialPtr pMat, string filename, bool exportDefaults, bool includeProgDef, string programFilename, string materialName) {
    OgrePINVOKE.MaterialSerializer_exportMaterial__SWIG_0(swigCPtr, MaterialPtr.getCPtr(pMat), filename, exportDefaults, includeProgDef, programFilename, materialName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void exportMaterial(MaterialPtr pMat, string filename, bool exportDefaults, bool includeProgDef, string programFilename) {
    OgrePINVOKE.MaterialSerializer_exportMaterial__SWIG_1(swigCPtr, MaterialPtr.getCPtr(pMat), filename, exportDefaults, includeProgDef, programFilename);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void exportMaterial(MaterialPtr pMat, string filename, bool exportDefaults, bool includeProgDef) {
    OgrePINVOKE.MaterialSerializer_exportMaterial__SWIG_2(swigCPtr, MaterialPtr.getCPtr(pMat), filename, exportDefaults, includeProgDef);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void exportMaterial(MaterialPtr pMat, string filename, bool exportDefaults) {
    OgrePINVOKE.MaterialSerializer_exportMaterial__SWIG_3(swigCPtr, MaterialPtr.getCPtr(pMat), filename, exportDefaults);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void exportMaterial(MaterialPtr pMat, string filename) {
    OgrePINVOKE.MaterialSerializer_exportMaterial__SWIG_4(swigCPtr, MaterialPtr.getCPtr(pMat), filename);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getQueuedAsString() {
    string ret = OgrePINVOKE.MaterialSerializer_getQueuedAsString(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clearQueue() {
    OgrePINVOKE.MaterialSerializer_clearQueue(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addListener(MaterialSerializer.Listener listener) {
    OgrePINVOKE.MaterialSerializer_addListener(swigCPtr, MaterialSerializer.Listener.getCPtr(listener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeListener(MaterialSerializer.Listener listener) {
    OgrePINVOKE.MaterialSerializer_removeListener(swigCPtr, MaterialSerializer.Listener.getCPtr(listener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void beginSection(ushort level, bool useMainBuffer) {
    OgrePINVOKE.MaterialSerializer_beginSection__SWIG_0(swigCPtr, level, useMainBuffer);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void beginSection(ushort level) {
    OgrePINVOKE.MaterialSerializer_beginSection__SWIG_1(swigCPtr, level);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void endSection(ushort level, bool useMainBuffer) {
    OgrePINVOKE.MaterialSerializer_endSection__SWIG_0(swigCPtr, level, useMainBuffer);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void endSection(ushort level) {
    OgrePINVOKE.MaterialSerializer_endSection__SWIG_1(swigCPtr, level);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void writeAttribute(ushort level, string att, bool useMainBuffer) {
    OgrePINVOKE.MaterialSerializer_writeAttribute__SWIG_0(swigCPtr, level, att, useMainBuffer);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void writeAttribute(ushort level, string att) {
    OgrePINVOKE.MaterialSerializer_writeAttribute__SWIG_1(swigCPtr, level, att);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void writeValue(string val, bool useMainBuffer) {
    OgrePINVOKE.MaterialSerializer_writeValue__SWIG_0(swigCPtr, val, useMainBuffer);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void writeValue(string val) {
    OgrePINVOKE.MaterialSerializer_writeValue__SWIG_1(swigCPtr, val);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string quoteWord(string val) {
    string ret = OgrePINVOKE.MaterialSerializer_quoteWord(swigCPtr, val);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void writeComment(ushort level, string comment, bool useMainBuffer) {
    OgrePINVOKE.MaterialSerializer_writeComment__SWIG_0(swigCPtr, level, comment, useMainBuffer);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void writeComment(ushort level, string comment) {
    OgrePINVOKE.MaterialSerializer_writeComment__SWIG_1(swigCPtr, level, comment);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum SerializeEvent {
    MSE_PRE_WRITE,
    MSE_WRITE_BEGIN,
    MSE_WRITE_END,
    MSE_POST_WRITE
  }

}

}
