//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class Pose : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Pose(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Pose obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Pose() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_Pose(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Pose(ushort target, string name) : this(OgrePINVOKE.new_Pose__SWIG_0(target, name), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Pose(ushort target) : this(OgrePINVOKE.new_Pose__SWIG_1(target), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getName() {
    string ret = OgrePINVOKE.Pose_getName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getTarget() {
    ushort ret = OgrePINVOKE.Pose_getTarget(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getIncludesNormals() {
    bool ret = OgrePINVOKE.Pose_getIncludesNormals(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addVertex(uint index, Vector3 offset) {
    OgrePINVOKE.Pose_addVertex__SWIG_0(swigCPtr, index, Vector3.getCPtr(offset));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addVertex(uint index, Vector3 offset, Vector3 normal) {
    OgrePINVOKE.Pose_addVertex__SWIG_1(swigCPtr, index, Vector3.getCPtr(offset), Vector3.getCPtr(normal));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeVertex(uint index) {
    OgrePINVOKE.Pose_removeVertex(swigCPtr, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearVertices() {
    OgrePINVOKE.Pose_clearVertices(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__mapT_unsigned_int_Ogre__VectorT_3_Ogre__Real_t_std__lessT_unsigned_int_t_t getVertexOffsets() {
    SWIGTYPE_p_std__mapT_unsigned_int_Ogre__VectorT_3_Ogre__Real_t_std__lessT_unsigned_int_t_t ret = new SWIGTYPE_p_std__mapT_unsigned_int_Ogre__VectorT_3_Ogre__Real_t_std__lessT_unsigned_int_t_t(OgrePINVOKE.Pose_getVertexOffsets(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__mapT_unsigned_int_Ogre__VectorT_3_Ogre__Real_t_std__lessT_unsigned_int_t_t getNormals() {
    SWIGTYPE_p_std__mapT_unsigned_int_Ogre__VectorT_3_Ogre__Real_t_std__lessT_unsigned_int_t_t ret = new SWIGTYPE_p_std__mapT_unsigned_int_Ogre__VectorT_3_Ogre__Real_t_std__lessT_unsigned_int_t_t(OgrePINVOKE.Pose_getNormals(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__mapT_unsigned_int_Ogre__VectorT_3_Ogre__Real_t_std__lessT_unsigned_int_t_t _getVertexOffsets() {
    SWIGTYPE_p_std__mapT_unsigned_int_Ogre__VectorT_3_Ogre__Real_t_std__lessT_unsigned_int_t_t ret = new SWIGTYPE_p_std__mapT_unsigned_int_Ogre__VectorT_3_Ogre__Real_t_std__lessT_unsigned_int_t_t(OgrePINVOKE.Pose__getVertexOffsets(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__mapT_unsigned_int_Ogre__VectorT_3_Ogre__Real_t_std__lessT_unsigned_int_t_t _getNormals() {
    SWIGTYPE_p_std__mapT_unsigned_int_Ogre__VectorT_3_Ogre__Real_t_std__lessT_unsigned_int_t_t ret = new SWIGTYPE_p_std__mapT_unsigned_int_Ogre__VectorT_3_Ogre__Real_t_std__lessT_unsigned_int_t_t(OgrePINVOKE.Pose__getNormals(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public HardwareVertexBufferPtr _getHardwareVertexBuffer(VertexData origData) {
    HardwareVertexBufferPtr ret = new HardwareVertexBufferPtr(OgrePINVOKE.Pose__getHardwareVertexBuffer(swigCPtr, VertexData.getCPtr(origData)), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Pose clone() {
    global::System.IntPtr cPtr = OgrePINVOKE.Pose_clone(swigCPtr);
    Pose ret = (cPtr == global::System.IntPtr.Zero) ? null : new Pose(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
