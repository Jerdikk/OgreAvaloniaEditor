//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ParticleSystemPtr : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ParticleSystemPtr(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ParticleSystemPtr obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ParticleSystemPtr() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_ParticleSystemPtr(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ParticleSystemPtr(SWIGTYPE_p_std__nullptr_t arg0) : this(OgrePINVOKE.new_ParticleSystemPtr__SWIG_0(SWIGTYPE_p_std__nullptr_t.getCPtr(arg0)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ParticleSystemPtr() : this(OgrePINVOKE.new_ParticleSystemPtr__SWIG_1(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ParticleSystemPtr(ParticleSystemPtr r) : this(OgrePINVOKE.new_ParticleSystemPtr__SWIG_2(ParticleSystemPtr.getCPtr(r)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ParticleSystem __deref__() {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemPtr___deref__(swigCPtr);
    ParticleSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleSystem(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setRenderer(string typeName) {
    OgrePINVOKE.ParticleSystemPtr_setRenderer(swigCPtr, typeName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ParticleSystemRenderer getRenderer() {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemPtr_getRenderer(swigCPtr);
    ParticleSystemRenderer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleSystemRenderer(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getRendererName() {
    string ret = OgrePINVOKE.ParticleSystemPtr_getRendererName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParticleEmitter addEmitter(string emitterType) {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemPtr_addEmitter(swigCPtr, emitterType);
    ParticleEmitter ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleEmitter(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParticleEmitter getEmitter(ushort index) {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemPtr_getEmitter(swigCPtr, index);
    ParticleEmitter ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleEmitter(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getNumEmitters() {
    ushort ret = OgrePINVOKE.ParticleSystemPtr_getNumEmitters(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeEmitter(ushort index) {
    OgrePINVOKE.ParticleSystemPtr_removeEmitter__SWIG_0(swigCPtr, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeEmitter(ParticleEmitter emitter) {
    OgrePINVOKE.ParticleSystemPtr_removeEmitter__SWIG_1(swigCPtr, ParticleEmitter.getCPtr(emitter));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeAllEmitters() {
    OgrePINVOKE.ParticleSystemPtr_removeAllEmitters(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ParticleAffector addAffector(string affectorType) {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemPtr_addAffector(swigCPtr, affectorType);
    ParticleAffector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleAffector(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParticleAffector getAffector(ushort index) {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemPtr_getAffector(swigCPtr, index);
    ParticleAffector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleAffector(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getNumAffectors() {
    ushort ret = OgrePINVOKE.ParticleSystemPtr_getNumAffectors(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeAffector(ushort index) {
    OgrePINVOKE.ParticleSystemPtr_removeAffector(swigCPtr, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeAllAffectors() {
    OgrePINVOKE.ParticleSystemPtr_removeAllAffectors(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    OgrePINVOKE.ParticleSystemPtr_clear(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNumParticles() {
    uint ret = OgrePINVOKE.ParticleSystemPtr_getNumParticles(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Particle createParticle() {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemPtr_createParticle(swigCPtr);
    Particle ret = (cPtr == global::System.IntPtr.Zero) ? null : new Particle(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Particle createEmitterParticle(string emitterName) {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemPtr_createEmitterParticle(swigCPtr, emitterName);
    Particle ret = (cPtr == global::System.IntPtr.Zero) ? null : new Particle(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Particle getParticle(uint index) {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemPtr_getParticle(swigCPtr, index);
    Particle ret = (cPtr == global::System.IntPtr.Zero) ? null : new Particle(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getParticleQuota() {
    uint ret = OgrePINVOKE.ParticleSystemPtr_getParticleQuota(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setParticleQuota(uint quota) {
    OgrePINVOKE.ParticleSystemPtr_setParticleQuota(swigCPtr, quota);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getEmittedEmitterQuota() {
    uint ret = OgrePINVOKE.ParticleSystemPtr_getEmittedEmitterQuota(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setEmittedEmitterQuota(uint quota) {
    OgrePINVOKE.ParticleSystemPtr_setEmittedEmitterQuota(swigCPtr, quota);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _update(float timeElapsed) {
    OgrePINVOKE.ParticleSystemPtr__update(swigCPtr, timeElapsed);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_Ogre__Particle_p_t _getActiveParticles() {
    SWIGTYPE_p_std__vectorT_Ogre__Particle_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__Particle_p_t(OgrePINVOKE.ParticleSystemPtr__getActiveParticles(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMaterialName(string name, string groupName) {
    OgrePINVOKE.ParticleSystemPtr_setMaterialName__SWIG_0(swigCPtr, name, groupName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMaterialName(string name) {
    OgrePINVOKE.ParticleSystemPtr_setMaterialName__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getMaterialName() {
    string ret = OgrePINVOKE.ParticleSystemPtr_getMaterialName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _notifyCurrentCamera(Camera cam) {
    OgrePINVOKE.ParticleSystemPtr__notifyCurrentCamera(swigCPtr, Camera.getCPtr(cam));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyAttached(Node parent, bool isTagPoint) {
    OgrePINVOKE.ParticleSystemPtr__notifyAttached__SWIG_0(swigCPtr, Node.getCPtr(parent), isTagPoint);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyAttached(Node parent) {
    OgrePINVOKE.ParticleSystemPtr__notifyAttached__SWIG_1(swigCPtr, Node.getCPtr(parent));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public AxisAlignedBox getBoundingBox() {
    AxisAlignedBox ret = new AxisAlignedBox(OgrePINVOKE.ParticleSystemPtr_getBoundingBox(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getBoundingRadius() {
    float ret = OgrePINVOKE.ParticleSystemPtr_getBoundingRadius(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _updateRenderQueue(RenderQueue queue) {
    OgrePINVOKE.ParticleSystemPtr__updateRenderQueue(swigCPtr, RenderQueue.getCPtr(queue));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void visitRenderables(Renderable.Visitor visitor, bool debugRenderables) {
    OgrePINVOKE.ParticleSystemPtr_visitRenderables__SWIG_0(swigCPtr, Renderable.Visitor.getCPtr(visitor), debugRenderables);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void visitRenderables(Renderable.Visitor visitor) {
    OgrePINVOKE.ParticleSystemPtr_visitRenderables__SWIG_1(swigCPtr, Renderable.Visitor.getCPtr(visitor));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void fastForward(float time, float interval) {
    OgrePINVOKE.ParticleSystemPtr_fastForward__SWIG_0(swigCPtr, time, interval);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void fastForward(float time) {
    OgrePINVOKE.ParticleSystemPtr_fastForward__SWIG_1(swigCPtr, time);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSpeedFactor(float speedFactor) {
    OgrePINVOKE.ParticleSystemPtr_setSpeedFactor(swigCPtr, speedFactor);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getSpeedFactor() {
    float ret = OgrePINVOKE.ParticleSystemPtr_getSpeedFactor(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setIterationInterval(float iterationInterval) {
    OgrePINVOKE.ParticleSystemPtr_setIterationInterval(swigCPtr, iterationInterval);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getIterationInterval() {
    float ret = OgrePINVOKE.ParticleSystemPtr_getIterationInterval(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDefaultIterationInterval(float iterationInterval) {
    OgrePINVOKE.ParticleSystemPtr_setDefaultIterationInterval(swigCPtr, iterationInterval);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getDefaultIterationInterval() {
    float ret = OgrePINVOKE.ParticleSystemPtr_getDefaultIterationInterval(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setNonVisibleUpdateTimeout(float timeout) {
    OgrePINVOKE.ParticleSystemPtr_setNonVisibleUpdateTimeout(swigCPtr, timeout);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getNonVisibleUpdateTimeout() {
    float ret = OgrePINVOKE.ParticleSystemPtr_getNonVisibleUpdateTimeout(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDefaultNonVisibleUpdateTimeout(float timeout) {
    OgrePINVOKE.ParticleSystemPtr_setDefaultNonVisibleUpdateTimeout(swigCPtr, timeout);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getDefaultNonVisibleUpdateTimeout() {
    float ret = OgrePINVOKE.ParticleSystemPtr_getDefaultNonVisibleUpdateTimeout(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getMovableType() {
    string ret = OgrePINVOKE.ParticleSystemPtr_getMovableType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDefaultDimensions(float width, float height) {
    OgrePINVOKE.ParticleSystemPtr_setDefaultDimensions(swigCPtr, width, height);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDefaultWidth(float width) {
    OgrePINVOKE.ParticleSystemPtr_setDefaultWidth(swigCPtr, width);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getDefaultWidth() {
    float ret = OgrePINVOKE.ParticleSystemPtr_getDefaultWidth(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDefaultHeight(float height) {
    OgrePINVOKE.ParticleSystemPtr_setDefaultHeight(swigCPtr, height);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getDefaultHeight() {
    float ret = OgrePINVOKE.ParticleSystemPtr_getDefaultHeight(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getCullIndividually() {
    bool ret = OgrePINVOKE.ParticleSystemPtr_getCullIndividually(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCullIndividually(bool cullIndividual) {
    OgrePINVOKE.ParticleSystemPtr_setCullIndividually(swigCPtr, cullIndividual);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getResourceGroupName() {
    string ret = OgrePINVOKE.ParticleSystemPtr_getResourceGroupName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getOrigin() {
    string ret = OgrePINVOKE.ParticleSystemPtr_getOrigin(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _notifyOrigin(string origin) {
    OgrePINVOKE.ParticleSystemPtr__notifyOrigin(swigCPtr, origin);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setRenderQueueGroup(byte queueID) {
    OgrePINVOKE.ParticleSystemPtr_setRenderQueueGroup(swigCPtr, queueID);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setRenderQueueGroupAndPriority(byte queueID, ushort priority) {
    OgrePINVOKE.ParticleSystemPtr_setRenderQueueGroupAndPriority(swigCPtr, queueID, priority);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSortingEnabled(bool enabled) {
    OgrePINVOKE.ParticleSystemPtr_setSortingEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getSortingEnabled() {
    bool ret = OgrePINVOKE.ParticleSystemPtr_getSortingEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBounds(AxisAlignedBox aabb) {
    OgrePINVOKE.ParticleSystemPtr_setBounds(swigCPtr, AxisAlignedBox.getCPtr(aabb));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBoundsAutoUpdated(bool autoUpdate, float stopIn) {
    OgrePINVOKE.ParticleSystemPtr_setBoundsAutoUpdated__SWIG_0(swigCPtr, autoUpdate, stopIn);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBoundsAutoUpdated(bool autoUpdate) {
    OgrePINVOKE.ParticleSystemPtr_setBoundsAutoUpdated__SWIG_1(swigCPtr, autoUpdate);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setKeepParticlesInLocalSpace(bool keepLocal) {
    OgrePINVOKE.ParticleSystemPtr_setKeepParticlesInLocalSpace(swigCPtr, keepLocal);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getKeepParticlesInLocalSpace() {
    bool ret = OgrePINVOKE.ParticleSystemPtr_getKeepParticlesInLocalSpace(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _updateBounds() {
    OgrePINVOKE.ParticleSystemPtr__updateBounds(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setEmitting(bool v) {
    OgrePINVOKE.ParticleSystemPtr_setEmitting(swigCPtr, v);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getEmitting() {
    bool ret = OgrePINVOKE.ParticleSystemPtr_getEmitting(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getTypeFlags() {
    uint ret = OgrePINVOKE.ParticleSystemPtr_getTypeFlags(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParamDictionary getParamDictionary() {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemPtr_getParamDictionary__SWIG_0(swigCPtr);
    ParamDictionary ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParamDictionary(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringList getParameters() {
    StringList ret = new StringList(OgrePINVOKE.ParticleSystemPtr_getParameters(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool setParameter(string name, string value) {
    bool ret = OgrePINVOKE.ParticleSystemPtr_setParameter(swigCPtr, name, value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setParameterList(NameValueMap paramList) {
    OgrePINVOKE.ParticleSystemPtr_setParameterList(swigCPtr, NameValueMap.getCPtr(paramList));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getParameter(string name) {
    string ret = OgrePINVOKE.ParticleSystemPtr_getParameter(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void copyParametersTo(StringInterface dest) {
    OgrePINVOKE.ParticleSystemPtr_copyParametersTo(swigCPtr, StringInterface.getCPtr(dest));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void cleanupDictionary() {
    OgrePINVOKE.ParticleSystemPtr_cleanupDictionary(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _notifyCreator(MovableObjectFactory fact) {
    OgrePINVOKE.ParticleSystemPtr__notifyCreator(swigCPtr, MovableObjectFactory.getCPtr(fact));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public MovableObjectFactory _getCreator() {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemPtr__getCreator(swigCPtr);
    MovableObjectFactory ret = (cPtr == global::System.IntPtr.Zero) ? null : new MovableObjectFactory(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _notifyManager(SceneManager man) {
    OgrePINVOKE.ParticleSystemPtr__notifyManager(swigCPtr, SceneManager.getCPtr(man));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SceneManager _getManager() {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemPtr__getManager(swigCPtr);
    SceneManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneManager(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _releaseManualHardwareResources() {
    OgrePINVOKE.ParticleSystemPtr__releaseManualHardwareResources(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _restoreManualHardwareResources() {
    OgrePINVOKE.ParticleSystemPtr__restoreManualHardwareResources(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getName() {
    string ret = OgrePINVOKE.ParticleSystemPtr_getName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Node getParentNode() {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemPtr_getParentNode(swigCPtr);
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneNode getParentSceneNode() {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemPtr_getParentSceneNode(swigCPtr);
    SceneNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneNode(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isParentTagPoint() {
    bool ret = OgrePINVOKE.ParticleSystemPtr_isParentTagPoint(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isAttached() {
    bool ret = OgrePINVOKE.ParticleSystemPtr_isAttached(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void detachFromParent() {
    OgrePINVOKE.ParticleSystemPtr_detachFromParent(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isInScene() {
    bool ret = OgrePINVOKE.ParticleSystemPtr_isInScene(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _notifyMoved() {
    OgrePINVOKE.ParticleSystemPtr__notifyMoved(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getBoundingRadiusScaled() {
    float ret = OgrePINVOKE.ParticleSystemPtr_getBoundingRadiusScaled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AxisAlignedBox getWorldBoundingBox(bool derive) {
    AxisAlignedBox ret = new AxisAlignedBox(OgrePINVOKE.ParticleSystemPtr_getWorldBoundingBox__SWIG_0(swigCPtr, derive), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AxisAlignedBox getWorldBoundingBox() {
    AxisAlignedBox ret = new AxisAlignedBox(OgrePINVOKE.ParticleSystemPtr_getWorldBoundingBox__SWIG_1(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Sphere getWorldBoundingSphere(bool derive) {
    Sphere ret = new Sphere(OgrePINVOKE.ParticleSystemPtr_getWorldBoundingSphere__SWIG_0(swigCPtr, derive), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Sphere getWorldBoundingSphere() {
    Sphere ret = new Sphere(OgrePINVOKE.ParticleSystemPtr_getWorldBoundingSphere__SWIG_1(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setVisible(bool visible) {
    OgrePINVOKE.ParticleSystemPtr_setVisible(swigCPtr, visible);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getVisible() {
    bool ret = OgrePINVOKE.ParticleSystemPtr_getVisible(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isVisible() {
    bool ret = OgrePINVOKE.ParticleSystemPtr_isVisible(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setRenderingDistance(float dist) {
    OgrePINVOKE.ParticleSystemPtr_setRenderingDistance(swigCPtr, dist);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getRenderingDistance() {
    float ret = OgrePINVOKE.ParticleSystemPtr_getRenderingDistance(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setRenderingMinPixelSize(float pixelSize) {
    OgrePINVOKE.ParticleSystemPtr_setRenderingMinPixelSize(swigCPtr, pixelSize);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getRenderingMinPixelSize() {
    float ret = OgrePINVOKE.ParticleSystemPtr_getRenderingMinPixelSize(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UserObjectBindings getUserObjectBindings() {
    UserObjectBindings ret = new UserObjectBindings(OgrePINVOKE.ParticleSystemPtr_getUserObjectBindings__SWIG_0(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte getRenderQueueGroup() {
    byte ret = OgrePINVOKE.ParticleSystemPtr_getRenderQueueGroup(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Affine3 _getParentNodeFullTransform() {
    Affine3 ret = new Affine3(OgrePINVOKE.ParticleSystemPtr__getParentNodeFullTransform(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setQueryFlags(uint flags) {
    OgrePINVOKE.ParticleSystemPtr_setQueryFlags(swigCPtr, flags);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addQueryFlags(uint flags) {
    OgrePINVOKE.ParticleSystemPtr_addQueryFlags(swigCPtr, flags);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeQueryFlags(uint flags) {
    OgrePINVOKE.ParticleSystemPtr_removeQueryFlags(swigCPtr, flags);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getQueryFlags() {
    uint ret = OgrePINVOKE.ParticleSystemPtr_getQueryFlags(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDefaultQueryFlags(uint flags) {
    OgrePINVOKE.ParticleSystemPtr_setDefaultQueryFlags(swigCPtr, flags);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getDefaultQueryFlags() {
    uint ret = OgrePINVOKE.ParticleSystemPtr_getDefaultQueryFlags(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setVisibilityFlags(uint flags) {
    OgrePINVOKE.ParticleSystemPtr_setVisibilityFlags(swigCPtr, flags);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addVisibilityFlags(uint flags) {
    OgrePINVOKE.ParticleSystemPtr_addVisibilityFlags(swigCPtr, flags);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeVisibilityFlags(uint flags) {
    OgrePINVOKE.ParticleSystemPtr_removeVisibilityFlags(swigCPtr, flags);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getVisibilityFlags() {
    uint ret = OgrePINVOKE.ParticleSystemPtr_getVisibilityFlags(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDefaultVisibilityFlags(uint flags) {
    OgrePINVOKE.ParticleSystemPtr_setDefaultVisibilityFlags(swigCPtr, flags);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getDefaultVisibilityFlags() {
    uint ret = OgrePINVOKE.ParticleSystemPtr_getDefaultVisibilityFlags(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setListener(MovableObject.Listener listener) {
    OgrePINVOKE.ParticleSystemPtr_setListener(swigCPtr, MovableObject.Listener.getCPtr(listener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public MovableObject.Listener getListener() {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemPtr_getListener(swigCPtr);
    MovableObject.Listener ret = (cPtr == global::System.IntPtr.Zero) ? null : new MovableObject.Listener(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Ogre__Light_p_t queryLights() {
    SWIGTYPE_p_std__vectorT_Ogre__Light_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__Light_p_t(OgrePINVOKE.ParticleSystemPtr_queryLights(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getLightMask() {
    uint ret = OgrePINVOKE.ParticleSystemPtr_getLightMask(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLightMask(uint lightMask) {
    OgrePINVOKE.ParticleSystemPtr_setLightMask(swigCPtr, lightMask);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_Ogre__Light_p_t _getLightList() {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemPtr__getLightList(swigCPtr);
    SWIGTYPE_p_std__vectorT_Ogre__Light_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_Ogre__Light_p_t(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__EdgeData getEdgeList() {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemPtr_getEdgeList(swigCPtr);
    SWIGTYPE_p_Ogre__EdgeData ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Ogre__EdgeData(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t getShadowVolumeRenderableList(Light light, HardwareIndexBufferPtr indexBuffer, SWIGTYPE_p_size_t indexBufferUsedSize, float extrusionDist, int flags) {
    SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t(OgrePINVOKE.ParticleSystemPtr_getShadowVolumeRenderableList__SWIG_0(swigCPtr, Light.getCPtr(light), HardwareIndexBufferPtr.getCPtr(indexBuffer), SWIGTYPE_p_size_t.getCPtr(indexBufferUsedSize), extrusionDist, flags), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t getShadowVolumeRenderableList(Light light, HardwareIndexBufferPtr indexBuffer, SWIGTYPE_p_size_t indexBufferUsedSize, float extrusionDist) {
    SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t(OgrePINVOKE.ParticleSystemPtr_getShadowVolumeRenderableList__SWIG_1(swigCPtr, Light.getCPtr(light), HardwareIndexBufferPtr.getCPtr(indexBuffer), SWIGTYPE_p_size_t.getCPtr(indexBufferUsedSize), extrusionDist), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AxisAlignedBox getLightCapBounds() {
    AxisAlignedBox ret = new AxisAlignedBox(OgrePINVOKE.ParticleSystemPtr_getLightCapBounds(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AxisAlignedBox getDarkCapBounds(Light light, float dirLightExtrusionDist) {
    AxisAlignedBox ret = new AxisAlignedBox(OgrePINVOKE.ParticleSystemPtr_getDarkCapBounds(swigCPtr, Light.getCPtr(light), dirLightExtrusionDist), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCastShadows(bool enabled) {
    OgrePINVOKE.ParticleSystemPtr_setCastShadows(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getCastShadows() {
    bool ret = OgrePINVOKE.ParticleSystemPtr_getCastShadows(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getReceivesShadows() {
    bool ret = OgrePINVOKE.ParticleSystemPtr_getReceivesShadows(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getPointExtrusionDistance(Light l) {
    float ret = OgrePINVOKE.ParticleSystemPtr_getPointExtrusionDistance(swigCPtr, Light.getCPtr(l));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDebugDisplayEnabled(bool enabled) {
    OgrePINVOKE.ParticleSystemPtr_setDebugDisplayEnabled(swigCPtr, enabled);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isDebugDisplayEnabled() {
    bool ret = OgrePINVOKE.ParticleSystemPtr_isDebugDisplayEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Entity castEntity() {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemPtr_castEntity(swigCPtr);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasEdgeList() {
    bool ret = OgrePINVOKE.ParticleSystemPtr_hasEdgeList(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clearShadowRenderableList(SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t shadowRenderables) {
    OgrePINVOKE.ParticleSystemPtr_clearShadowRenderableList(swigCPtr, SWIGTYPE_p_std__vectorT_Ogre__ShadowRenderable_p_t.getCPtr(shadowRenderables));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void extrudeVertices(HardwareVertexBufferPtr vertexBuffer, uint originalVertexCount, Vector4 lightPos, float extrudeDist) {
    OgrePINVOKE.ParticleSystemPtr_extrudeVertices(swigCPtr, HardwareVertexBufferPtr.getCPtr(vertexBuffer), originalVertexCount, Vector4.getCPtr(lightPos), extrudeDist);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
