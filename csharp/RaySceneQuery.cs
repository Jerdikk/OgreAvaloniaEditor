//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class RaySceneQuery : SceneQuery {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal RaySceneQuery(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.RaySceneQuery_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RaySceneQuery obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_RaySceneQuery(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual void setRay(Ray ray) {
    OgrePINVOKE.RaySceneQuery_setRay(swigCPtr, Ray.getCPtr(ray));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Ray getRay() {
    Ray ret = new Ray(OgrePINVOKE.RaySceneQuery_getRay(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setSortByDistance(bool sort, ushort maxresults) {
    OgrePINVOKE.RaySceneQuery_setSortByDistance__SWIG_0(swigCPtr, sort, maxresults);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setSortByDistance(bool sort) {
    OgrePINVOKE.RaySceneQuery_setSortByDistance__SWIG_1(swigCPtr, sort);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool getSortByDistance() {
    bool ret = OgrePINVOKE.RaySceneQuery_getSortByDistance(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ushort getMaxResults() {
    ushort ret = OgrePINVOKE.RaySceneQuery_getMaxResults(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual RaySceneQueryResult execute() {
    RaySceneQueryResult ret = new RaySceneQueryResult(OgrePINVOKE.RaySceneQuery_execute__SWIG_0(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void execute(RaySceneQueryListener listener) {
    OgrePINVOKE.RaySceneQuery_execute__SWIG_1(swigCPtr, RaySceneQueryListener.getCPtr(listener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public RaySceneQueryResult getLastResults() {
    RaySceneQueryResult ret = new RaySceneQueryResult(OgrePINVOKE.RaySceneQuery_getLastResults(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clearResults() {
    OgrePINVOKE.RaySceneQuery_clearResults(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool queryResult(MovableObject obj, float distance) {
    bool ret = OgrePINVOKE.RaySceneQuery_queryResult__SWIG_0(swigCPtr, MovableObject.getCPtr(obj), distance);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool queryResult(SWIGTYPE_p_Ogre__WorldFragment fragment, float distance) {
    bool ret = OgrePINVOKE.RaySceneQuery_queryResult__SWIG_1(swigCPtr, SWIGTYPE_p_Ogre__WorldFragment.getCPtr(fragment), distance);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
