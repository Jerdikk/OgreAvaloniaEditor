//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class EmbeddedZipArchiveFactory : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EmbeddedZipArchiveFactory(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EmbeddedZipArchiveFactory obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EmbeddedZipArchiveFactory() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_EmbeddedZipArchiveFactory(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public string getType() {
    string ret = OgrePINVOKE.EmbeddedZipArchiveFactory_getType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Archive createInstance(string name, bool readOnly) {
    global::System.IntPtr cPtr = OgrePINVOKE.EmbeddedZipArchiveFactory_createInstance__SWIG_0_0(swigCPtr, name, readOnly);
    Archive ret = (cPtr == global::System.IntPtr.Zero) ? null : new Archive(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Archive createInstance(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.EmbeddedZipArchiveFactory_createInstance__SWIG_0_1(swigCPtr, name);
    Archive ret = (cPtr == global::System.IntPtr.Zero) ? null : new Archive(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyInstance(Archive ptr) {
    OgrePINVOKE.EmbeddedZipArchiveFactory_destroyInstance(swigCPtr, Archive.getCPtr(ptr));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addEmbbeddedFile(string name, SWIGTYPE_p_unsigned_char fileData, uint fileSize, SWIGTYPE_p_f_size_t_p_void_size_t__bool decryptFunc) {
    OgrePINVOKE.EmbeddedZipArchiveFactory_addEmbbeddedFile(name, SWIGTYPE_p_unsigned_char.getCPtr(fileData), fileSize, SWIGTYPE_p_f_size_t_p_void_size_t__bool.getCPtr(decryptFunc));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void removeEmbbeddedFile(string name) {
    OgrePINVOKE.EmbeddedZipArchiveFactory_removeEmbbeddedFile(name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
