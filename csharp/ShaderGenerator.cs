//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ShaderGenerator : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ShaderGenerator(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ShaderGenerator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ShaderGenerator() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static bool initialize() {
    bool ret = RTShaderPINVOKE.ShaderGenerator_initialize();
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void destroy() {
    RTShaderPINVOKE.ShaderGenerator_destroy();
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ShaderGenerator getSingleton() {
    ShaderGenerator ret = new ShaderGenerator(RTShaderPINVOKE.ShaderGenerator_getSingleton(), false);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addSceneManager(SceneManager sceneMgr) {
    RTShaderPINVOKE.ShaderGenerator_addSceneManager(swigCPtr, SceneManager.getCPtr(sceneMgr));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeSceneManager(SceneManager sceneMgr) {
    RTShaderPINVOKE.ShaderGenerator_removeSceneManager(swigCPtr, SceneManager.getCPtr(sceneMgr));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public SceneManager getActiveSceneManager() {
    global::System.IntPtr cPtr = RTShaderPINVOKE.ShaderGenerator_getActiveSceneManager(swigCPtr);
    SceneManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneManager(cPtr, false);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _setActiveSceneManager(SceneManager sceneManager) {
    RTShaderPINVOKE.ShaderGenerator__setActiveSceneManager(swigCPtr, SceneManager.getCPtr(sceneManager));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTargetLanguage(string shaderLanguage) {
    RTShaderPINVOKE.ShaderGenerator_setTargetLanguage(swigCPtr, shaderLanguage);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getTargetLanguage() {
    string ret = RTShaderPINVOKE.ShaderGenerator_getTargetLanguage(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShaderProfiles(GpuProgramType type, string shaderProfiles) {
    RTShaderPINVOKE.ShaderGenerator_setShaderProfiles(swigCPtr, (int)type, shaderProfiles);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getShaderProfiles(GpuProgramType type) {
    string ret = RTShaderPINVOKE.ShaderGenerator_getShaderProfiles(swigCPtr, (int)type);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setShaderCachePath(string cachePath) {
    RTShaderPINVOKE.ShaderGenerator_setShaderCachePath(swigCPtr, cachePath);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getShaderCachePath() {
    string ret = RTShaderPINVOKE.ShaderGenerator_getShaderCachePath(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void flushShaderCache() {
    RTShaderPINVOKE.ShaderGenerator_flushShaderCache(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public RenderState getRenderState(string schemeName) {
    global::System.IntPtr cPtr = RTShaderPINVOKE.ShaderGenerator_getRenderState__SWIG_0(swigCPtr, schemeName);
    RenderState ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderState(cPtr, false);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__pairT_Ogre__RTShader__RenderState_p_bool_t createOrRetrieveRenderState(string schemeName) {
    SWIGTYPE_p_std__pairT_Ogre__RTShader__RenderState_p_bool_t ret = new SWIGTYPE_p_std__pairT_Ogre__RTShader__RenderState_p_bool_t(RTShaderPINVOKE.ShaderGenerator_createOrRetrieveRenderState(swigCPtr, schemeName), true);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasRenderState(string schemeName) {
    bool ret = RTShaderPINVOKE.ShaderGenerator_hasRenderState(swigCPtr, schemeName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RenderState getRenderState(string schemeName, string materialName, string groupName, ushort passIndex) {
    global::System.IntPtr cPtr = RTShaderPINVOKE.ShaderGenerator_getRenderState__SWIG_1(swigCPtr, schemeName, materialName, groupName, passIndex);
    RenderState ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderState(cPtr, false);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RenderState getRenderState(string schemeName, Material mat, ushort passIndex) {
    global::System.IntPtr cPtr = RTShaderPINVOKE.ShaderGenerator_getRenderState__SWIG_2(swigCPtr, schemeName, Material.getCPtr(mat), passIndex);
    RenderState ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderState(cPtr, false);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RenderState getRenderState(string schemeName, Material mat) {
    global::System.IntPtr cPtr = RTShaderPINVOKE.ShaderGenerator_getRenderState__SWIG_3(swigCPtr, schemeName, Material.getCPtr(mat));
    RenderState ret = (cPtr == global::System.IntPtr.Zero) ? null : new RenderState(cPtr, false);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addSubRenderStateFactory(SubRenderStateFactory factory) {
    RTShaderPINVOKE.ShaderGenerator_addSubRenderStateFactory(swigCPtr, SubRenderStateFactory.getCPtr(factory));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNumSubRenderStateFactories() {
    uint ret = RTShaderPINVOKE.ShaderGenerator_getNumSubRenderStateFactories(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SubRenderStateFactory getSubRenderStateFactory(uint index) {
    global::System.IntPtr cPtr = RTShaderPINVOKE.ShaderGenerator_getSubRenderStateFactory__SWIG_0(swigCPtr, index);
    SubRenderStateFactory ret = (cPtr == global::System.IntPtr.Zero) ? null : new SubRenderStateFactory(cPtr, false);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SubRenderStateFactory getSubRenderStateFactory(string type) {
    global::System.IntPtr cPtr = RTShaderPINVOKE.ShaderGenerator_getSubRenderStateFactory__SWIG_1(swigCPtr, type);
    SubRenderStateFactory ret = (cPtr == global::System.IntPtr.Zero) ? null : new SubRenderStateFactory(cPtr, false);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeSubRenderStateFactory(SubRenderStateFactory factory) {
    RTShaderPINVOKE.ShaderGenerator_removeSubRenderStateFactory(swigCPtr, SubRenderStateFactory.getCPtr(factory));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public SubRenderState createSubRenderState(string type) {
    global::System.IntPtr cPtr = RTShaderPINVOKE.ShaderGenerator_createSubRenderState(swigCPtr, type);
    SubRenderState ret = (cPtr == global::System.IntPtr.Zero) ? null : new SubRenderState(cPtr, false);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroySubRenderState(SubRenderState subRenderState) {
    RTShaderPINVOKE.ShaderGenerator_destroySubRenderState(swigCPtr, SubRenderState.getCPtr(subRenderState));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasShaderBasedTechnique(string materialName, string groupName, string srcTechniqueSchemeName, string dstTechniqueSchemeName) {
    bool ret = RTShaderPINVOKE.ShaderGenerator_hasShaderBasedTechnique__SWIG_0(swigCPtr, materialName, groupName, srcTechniqueSchemeName, dstTechniqueSchemeName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasShaderBasedTechnique(Material mat, string srcTechniqueSchemeName, string dstTechniqueSchemeName) {
    bool ret = RTShaderPINVOKE.ShaderGenerator_hasShaderBasedTechnique__SWIG_1(swigCPtr, Material.getCPtr(mat), srcTechniqueSchemeName, dstTechniqueSchemeName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool createShaderBasedTechnique(Material srcMat, string srcTechniqueSchemeName, string dstTechniqueSchemeName, bool overProgrammable) {
    bool ret = RTShaderPINVOKE.ShaderGenerator_createShaderBasedTechnique__SWIG_0(swigCPtr, Material.getCPtr(srcMat), srcTechniqueSchemeName, dstTechniqueSchemeName, overProgrammable);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool createShaderBasedTechnique(Material srcMat, string srcTechniqueSchemeName, string dstTechniqueSchemeName) {
    bool ret = RTShaderPINVOKE.ShaderGenerator_createShaderBasedTechnique__SWIG_1(swigCPtr, Material.getCPtr(srcMat), srcTechniqueSchemeName, dstTechniqueSchemeName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool createShaderBasedTechnique(Technique srcTech, string dstTechniqueSchemeName, bool overProgrammable) {
    bool ret = RTShaderPINVOKE.ShaderGenerator_createShaderBasedTechnique__SWIG_2(swigCPtr, Technique.getCPtr(srcTech), dstTechniqueSchemeName, overProgrammable);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool createShaderBasedTechnique(Technique srcTech, string dstTechniqueSchemeName) {
    bool ret = RTShaderPINVOKE.ShaderGenerator_createShaderBasedTechnique__SWIG_3(swigCPtr, Technique.getCPtr(srcTech), dstTechniqueSchemeName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool removeShaderBasedTechnique(Technique srcTech, string dstTechniqueSchemeName) {
    bool ret = RTShaderPINVOKE.ShaderGenerator_removeShaderBasedTechnique(swigCPtr, Technique.getCPtr(srcTech), dstTechniqueSchemeName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool removeAllShaderBasedTechniques(string materialName, string groupName) {
    bool ret = RTShaderPINVOKE.ShaderGenerator_removeAllShaderBasedTechniques__SWIG_0(swigCPtr, materialName, groupName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool removeAllShaderBasedTechniques(string materialName) {
    bool ret = RTShaderPINVOKE.ShaderGenerator_removeAllShaderBasedTechniques__SWIG_1(swigCPtr, materialName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool removeAllShaderBasedTechniques(Material mat) {
    bool ret = RTShaderPINVOKE.ShaderGenerator_removeAllShaderBasedTechniques__SWIG_2(swigCPtr, Material.getCPtr(mat));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool cloneShaderBasedTechniques(Material srcMat, Material dstMat) {
    bool ret = RTShaderPINVOKE.ShaderGenerator_cloneShaderBasedTechniques(swigCPtr, Material.getCPtr(srcMat), Material.getCPtr(dstMat));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeAllShaderBasedTechniques() {
    RTShaderPINVOKE.ShaderGenerator_removeAllShaderBasedTechniques__SWIG_3(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void createScheme(string schemeName) {
    RTShaderPINVOKE.ShaderGenerator_createScheme(swigCPtr, schemeName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void invalidateScheme(string schemeName) {
    RTShaderPINVOKE.ShaderGenerator_invalidateScheme(swigCPtr, schemeName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool validateScheme(string schemeName) {
    bool ret = RTShaderPINVOKE.ShaderGenerator_validateScheme(swigCPtr, schemeName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void invalidateMaterial(string schemeName, string materialName, string groupName) {
    RTShaderPINVOKE.ShaderGenerator_invalidateMaterial__SWIG_0(swigCPtr, schemeName, materialName, groupName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void invalidateMaterial(string schemeName, string materialName) {
    RTShaderPINVOKE.ShaderGenerator_invalidateMaterial__SWIG_1(swigCPtr, schemeName, materialName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void invalidateMaterial(string schemeName, Material mat) {
    RTShaderPINVOKE.ShaderGenerator_invalidateMaterial__SWIG_2(swigCPtr, schemeName, Material.getCPtr(mat));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool validateMaterial(string schemeName, string materialName, string groupName) {
    bool ret = RTShaderPINVOKE.ShaderGenerator_validateMaterial__SWIG_0(swigCPtr, schemeName, materialName, groupName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool validateMaterial(string schemeName, string materialName) {
    bool ret = RTShaderPINVOKE.ShaderGenerator_validateMaterial__SWIG_1(swigCPtr, schemeName, materialName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void validateMaterial(string schemeName, Material mat) {
    RTShaderPINVOKE.ShaderGenerator_validateMaterial__SWIG_2(swigCPtr, schemeName, Material.getCPtr(mat));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void invalidateMaterialIlluminationPasses(string schemeName, string materialName, string groupName) {
    RTShaderPINVOKE.ShaderGenerator_invalidateMaterialIlluminationPasses__SWIG_0(swigCPtr, schemeName, materialName, groupName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void invalidateMaterialIlluminationPasses(string schemeName, string materialName) {
    RTShaderPINVOKE.ShaderGenerator_invalidateMaterialIlluminationPasses__SWIG_1(swigCPtr, schemeName, materialName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool validateMaterialIlluminationPasses(string schemeName, string materialName, string groupName) {
    bool ret = RTShaderPINVOKE.ShaderGenerator_validateMaterialIlluminationPasses__SWIG_0(swigCPtr, schemeName, materialName, groupName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool validateMaterialIlluminationPasses(string schemeName, string materialName) {
    bool ret = RTShaderPINVOKE.ShaderGenerator_validateMaterialIlluminationPasses__SWIG_1(swigCPtr, schemeName, materialName);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialSerializer.Listener getMaterialSerializerListener() {
    global::System.IntPtr cPtr = RTShaderPINVOKE.ShaderGenerator_getMaterialSerializerListener(swigCPtr);
    MaterialSerializer.Listener ret = (cPtr == global::System.IntPtr.Zero) ? null : new MaterialSerializer.Listener(cPtr, false);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getShaderCount(GpuProgramType type) {
    uint ret = RTShaderPINVOKE.ShaderGenerator_getShaderCount(swigCPtr, (int)type);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setVertexShaderOutputsCompactPolicy(VSOutputCompactPolicy policy) {
    RTShaderPINVOKE.ShaderGenerator_setVertexShaderOutputsCompactPolicy(swigCPtr, (int)policy);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public VSOutputCompactPolicy getVertexShaderOutputsCompactPolicy() {
    VSOutputCompactPolicy ret = (VSOutputCompactPolicy)RTShaderPINVOKE.ShaderGenerator_getVertexShaderOutputsCompactPolicy(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCreateShaderOverProgrammablePass(bool value) {
    RTShaderPINVOKE.ShaderGenerator_setCreateShaderOverProgrammablePass(swigCPtr, value);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getCreateShaderOverProgrammablePass() {
    bool ret = RTShaderPINVOKE.ShaderGenerator_getCreateShaderOverProgrammablePass(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getRTShaderSchemeCount() {
    uint ret = RTShaderPINVOKE.ShaderGenerator_getRTShaderSchemeCount(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getRTShaderScheme(uint index) {
    string ret = RTShaderPINVOKE.ShaderGenerator_getRTShaderScheme(swigCPtr, index);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void _markNonFFP(TextureUnitState tu) {
    RTShaderPINVOKE.ShaderGenerator__markNonFFP(TextureUnitState.getCPtr(tu));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string DEFAULT_SCHEME_NAME {
    set {
      RTShaderPINVOKE.ShaderGenerator_DEFAULT_SCHEME_NAME_set(value);
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = RTShaderPINVOKE.ShaderGenerator_DEFAULT_SCHEME_NAME_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
