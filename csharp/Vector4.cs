//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class Vector4 : VectorBase4 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Vector4(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.Vector4_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Vector4 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_Vector4(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Vector4() : this(OgrePINVOKE.new_Vector4__SWIG_0(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector4(float _x, float _y, float _z, float _w) : this(OgrePINVOKE.new_Vector4__SWIG_1(_x, _y, _z, _w), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector4(float s) : this(OgrePINVOKE.new_Vector4__SWIG_2(s), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 xyz() {
    Vector3 ret = new Vector3(OgrePINVOKE.Vector4_xyz(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector2 xy() {
    Vector2 ret = new Vector2(OgrePINVOKE.Vector4_xy(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool positionEquals(Vector4 rhs, float tolerance) {
    bool ret = OgrePINVOKE.Vector4_positionEquals__SWIG_0(swigCPtr, Vector4.getCPtr(rhs), tolerance);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool positionEquals(Vector4 rhs) {
    bool ret = OgrePINVOKE.Vector4_positionEquals__SWIG_1(swigCPtr, Vector4.getCPtr(rhs));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void makeFloor(Vector4 cmp) {
    OgrePINVOKE.Vector4_makeFloor(swigCPtr, Vector4.getCPtr(cmp));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void makeCeil(Vector4 cmp) {
    OgrePINVOKE.Vector4_makeCeil(swigCPtr, Vector4.getCPtr(cmp));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float dotProduct(VectorBase4 vec) {
    float ret = OgrePINVOKE.Vector4_dotProduct(swigCPtr, VectorBase4.getCPtr(vec));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float squaredLength() {
    float ret = OgrePINVOKE.Vector4_squaredLength(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isZeroLength() {
    bool ret = OgrePINVOKE.Vector4_isZeroLength(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float length() {
    float ret = OgrePINVOKE.Vector4_length(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float distance(Vector4 rhs) {
    float ret = OgrePINVOKE.Vector4_distance(swigCPtr, Vector4.getCPtr(rhs));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float squaredDistance(Vector4 rhs) {
    float ret = OgrePINVOKE.Vector4_squaredDistance(swigCPtr, Vector4.getCPtr(rhs));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float normalise() {
    float ret = OgrePINVOKE.Vector4_normalise(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector4 normalisedCopy() {
    Vector4 ret = new Vector4(OgrePINVOKE.Vector4_normalisedCopy(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNaN() {
    bool ret = OgrePINVOKE.Vector4_isNaN(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Radian angleBetween(Vector4 dest) {
    Radian ret = new Radian(OgrePINVOKE.Vector4_angleBetween(swigCPtr, Vector4.getCPtr(dest)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector4 reflect(Vector4 normal) {
    Vector4 ret = new Vector4(OgrePINVOKE.Vector4_reflect(swigCPtr, Vector4.getCPtr(normal)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector4 __sub__() {
    Vector4 ret = new Vector4(OgrePINVOKE.Vector4___sub____SWIG_0(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector4 __add__() {
    Vector4 ret = new Vector4(OgrePINVOKE.Vector4___add____SWIG_0(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector4 __mul__(float s) {
    Vector4 ret = new Vector4(OgrePINVOKE.Vector4___mul____SWIG_0(swigCPtr, s), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector4 __div__(float s) {
    Vector4 ret = new Vector4(OgrePINVOKE.Vector4___div____SWIG_0(swigCPtr, s), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector4 __sub__(float s) {
    Vector4 ret = new Vector4(OgrePINVOKE.Vector4___sub____SWIG_1(swigCPtr, s), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector4 __add__(float s) {
    Vector4 ret = new Vector4(OgrePINVOKE.Vector4___add____SWIG_1(swigCPtr, s), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector4 __add__(Vector4 b) {
    Vector4 ret = new Vector4(OgrePINVOKE.Vector4___add____SWIG_2(swigCPtr, Vector4.getCPtr(b)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector4 __sub__(Vector4 b) {
    Vector4 ret = new Vector4(OgrePINVOKE.Vector4___sub____SWIG_2(swigCPtr, Vector4.getCPtr(b)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector4 __mul__(Vector4 b) {
    Vector4 ret = new Vector4(OgrePINVOKE.Vector4___mul____SWIG_1(swigCPtr, Vector4.getCPtr(b)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector4 __div__(Vector4 b) {
    Vector4 ret = new Vector4(OgrePINVOKE.Vector4___div____SWIG_1(swigCPtr, Vector4.getCPtr(b)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string ToString() {
    string ret = OgrePINVOKE.Vector4_ToString(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void __setitem__(uint i, float v) {
    OgrePINVOKE.Vector4___setitem__(swigCPtr, i, v);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint __len__() {
    uint ret = OgrePINVOKE.Vector4___len__(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float __getitem__(uint i) {
    float ret = OgrePINVOKE.Vector4___getitem__(swigCPtr, i);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

    public static Vector4 operator+(Vector4 lhs, Vector4 rhs) { return lhs.__add__(rhs); }
    public static Vector4 operator-(Vector4 lhs, Vector4 rhs) { return lhs.__sub__(rhs); }
    public static Vector4 operator*(Vector4 lhs, Vector4 rhs) { return lhs.__mul__(rhs); }
    public static Vector4 operator/(Vector4 lhs, Vector4 rhs) { return lhs.__div__(rhs); }
    public float this[uint i] { get { return __getitem__(i); } set { __setitem__(i, value); } }
    
}

}
