//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class CompositionPass : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CompositionPass(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CompositionPass obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CompositionPass() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_CompositionPass(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public CompositionPass(CompositionTargetPass parent) : this(OgrePINVOKE.new_CompositionPass(CompositionTargetPass.getCPtr(parent)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setType(CompositionPass.PassType type) {
    OgrePINVOKE.CompositionPass_setType(swigCPtr, (int)type);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public CompositionPass.PassType getType() {
    CompositionPass.PassType ret = (CompositionPass.PassType)OgrePINVOKE.CompositionPass_getType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setIdentifier(uint id) {
    OgrePINVOKE.CompositionPass_setIdentifier(swigCPtr, id);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getIdentifier() {
    uint ret = OgrePINVOKE.CompositionPass_getIdentifier(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMaterial(MaterialPtr mat) {
    OgrePINVOKE.CompositionPass_setMaterial(swigCPtr, MaterialPtr.getCPtr(mat));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMaterialName(string name) {
    OgrePINVOKE.CompositionPass_setMaterialName(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public MaterialPtr getMaterial() {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.CompositionPass_getMaterial(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setFirstRenderQueue(byte id) {
    OgrePINVOKE.CompositionPass_setFirstRenderQueue(swigCPtr, id);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public byte getFirstRenderQueue() {
    byte ret = OgrePINVOKE.CompositionPass_getFirstRenderQueue(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLastRenderQueue(byte id) {
    OgrePINVOKE.CompositionPass_setLastRenderQueue(swigCPtr, id);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public byte getLastRenderQueue() {
    byte ret = OgrePINVOKE.CompositionPass_getLastRenderQueue(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMaterialScheme(string schemeName) {
    OgrePINVOKE.CompositionPass_setMaterialScheme(swigCPtr, schemeName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getMaterialScheme() {
    string ret = OgrePINVOKE.CompositionPass_getMaterialScheme(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setClearBuffers(uint val) {
    OgrePINVOKE.CompositionPass_setClearBuffers(swigCPtr, val);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getClearBuffers() {
    uint ret = OgrePINVOKE.CompositionPass_getClearBuffers(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setClearColour(ColourValue val) {
    OgrePINVOKE.CompositionPass_setClearColour(swigCPtr, ColourValue.getCPtr(val));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ColourValue getClearColour() {
    ColourValue ret = new ColourValue(OgrePINVOKE.CompositionPass_getClearColour(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAutomaticColour(bool val) {
    OgrePINVOKE.CompositionPass_setAutomaticColour(swigCPtr, val);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getAutomaticColour() {
    bool ret = OgrePINVOKE.CompositionPass_getAutomaticColour(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setClearDepth(float depth) {
    OgrePINVOKE.CompositionPass_setClearDepth(swigCPtr, depth);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getClearDepth() {
    float ret = OgrePINVOKE.CompositionPass_getClearDepth(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setClearStencil(ushort value) {
    OgrePINVOKE.CompositionPass_setClearStencil(swigCPtr, value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getClearStencil() {
    ushort ret = OgrePINVOKE.CompositionPass_getClearStencil(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setStencilCheck(bool value) {
    OgrePINVOKE.CompositionPass_setStencilCheck(swigCPtr, value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getStencilCheck() {
    bool ret = OgrePINVOKE.CompositionPass_getStencilCheck(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setStencilFunc(CompareFunction value) {
    OgrePINVOKE.CompositionPass_setStencilFunc(swigCPtr, (int)value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public CompareFunction getStencilFunc() {
    CompareFunction ret = (CompareFunction)OgrePINVOKE.CompositionPass_getStencilFunc(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setStencilRefValue(uint value) {
    OgrePINVOKE.CompositionPass_setStencilRefValue(swigCPtr, value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getStencilRefValue() {
    uint ret = OgrePINVOKE.CompositionPass_getStencilRefValue(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setStencilMask(uint value) {
    OgrePINVOKE.CompositionPass_setStencilMask(swigCPtr, value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getStencilMask() {
    uint ret = OgrePINVOKE.CompositionPass_getStencilMask(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setStencilFailOp(StencilOperation value) {
    OgrePINVOKE.CompositionPass_setStencilFailOp(swigCPtr, (int)value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public StencilOperation getStencilFailOp() {
    StencilOperation ret = (StencilOperation)OgrePINVOKE.CompositionPass_getStencilFailOp(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setStencilDepthFailOp(StencilOperation value) {
    OgrePINVOKE.CompositionPass_setStencilDepthFailOp(swigCPtr, (int)value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public StencilOperation getStencilDepthFailOp() {
    StencilOperation ret = (StencilOperation)OgrePINVOKE.CompositionPass_getStencilDepthFailOp(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setStencilPassOp(StencilOperation value) {
    OgrePINVOKE.CompositionPass_setStencilPassOp(swigCPtr, (int)value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public StencilOperation getStencilPassOp() {
    StencilOperation ret = (StencilOperation)OgrePINVOKE.CompositionPass_getStencilPassOp(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setStencilTwoSidedOperation(bool value) {
    OgrePINVOKE.CompositionPass_setStencilTwoSidedOperation(swigCPtr, value);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getStencilTwoSidedOperation() {
    bool ret = OgrePINVOKE.CompositionPass_getStencilTwoSidedOperation(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StencilState getStencilState() {
    StencilState ret = new StencilState(OgrePINVOKE.CompositionPass_getStencilState(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public class InputTex : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal InputTex(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(InputTex obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~InputTex() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgrePINVOKE.delete_CompositionPass_InputTex(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public string name {
      set {
        OgrePINVOKE.CompositionPass_InputTex_name_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        string ret = OgrePINVOKE.CompositionPass_InputTex_name_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public uint mrtIndex {
      set {
        OgrePINVOKE.CompositionPass_InputTex_mrtIndex_set(swigCPtr, value);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        uint ret = OgrePINVOKE.CompositionPass_InputTex_mrtIndex_get(swigCPtr);
        if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public InputTex() : this(OgrePINVOKE.new_CompositionPass_InputTex__SWIG_0(), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public InputTex(string _name, uint _mrtIndex) : this(OgrePINVOKE.new_CompositionPass_InputTex__SWIG_1(_name, _mrtIndex), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public InputTex(string _name) : this(OgrePINVOKE.new_CompositionPass_InputTex__SWIG_2(_name), true) {
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public void setInput(uint id, string input, uint mrtIndex) {
    OgrePINVOKE.CompositionPass_setInput__SWIG_0(swigCPtr, id, input, mrtIndex);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setInput(uint id, string input) {
    OgrePINVOKE.CompositionPass_setInput__SWIG_1(swigCPtr, id, input);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setInput(uint id) {
    OgrePINVOKE.CompositionPass_setInput__SWIG_2(swigCPtr, id);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public CompositionPass.InputTex getInput(uint id) {
    CompositionPass.InputTex ret = new CompositionPass.InputTex(OgrePINVOKE.CompositionPass_getInput(swigCPtr, id), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumInputs() {
    uint ret = OgrePINVOKE.CompositionPass_getNumInputs(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clearAllInputs() {
    OgrePINVOKE.CompositionPass_clearAllInputs(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public CompositionTargetPass getParent() {
    global::System.IntPtr cPtr = OgrePINVOKE.CompositionPass_getParent(swigCPtr);
    CompositionTargetPass ret = (cPtr == global::System.IntPtr.Zero) ? null : new CompositionTargetPass(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool _isSupported() {
    bool ret = OgrePINVOKE.CompositionPass__isSupported(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setQuadCorners(FloatRect quad) {
    OgrePINVOKE.CompositionPass_setQuadCorners(swigCPtr, FloatRect.getCPtr(quad));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getQuadCorners(FloatRect quad) {
    bool ret = OgrePINVOKE.CompositionPass_getQuadCorners(swigCPtr, FloatRect.getCPtr(quad));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setQuadFarCorners(bool farCorners, bool farCornersViewSpace) {
    OgrePINVOKE.CompositionPass_setQuadFarCorners(swigCPtr, farCorners, farCornersViewSpace);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getQuadFarCorners() {
    bool ret = OgrePINVOKE.CompositionPass_getQuadFarCorners(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getQuadFarCornersViewSpace() {
    bool ret = OgrePINVOKE.CompositionPass_getQuadFarCornersViewSpace(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCustomType(string customType) {
    OgrePINVOKE.CompositionPass_setCustomType(swigCPtr, customType);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getCustomType() {
    string ret = OgrePINVOKE.CompositionPass_getCustomType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setThreadGroups(Vector3i g) {
    OgrePINVOKE.CompositionPass_setThreadGroups(swigCPtr, Vector3i.getCPtr(g));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3i getThreadGroups() {
    Vector3i ret = new Vector3i(OgrePINVOKE.CompositionPass_getThreadGroups(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCameraName(string name) {
    OgrePINVOKE.CompositionPass_setCameraName(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getCameraName() {
    string ret = OgrePINVOKE.CompositionPass_getCameraName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAlignCameraToFace(bool val) {
    OgrePINVOKE.CompositionPass_setAlignCameraToFace(swigCPtr, val);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getAlignCameraToFace() {
    bool ret = OgrePINVOKE.CompositionPass_getAlignCameraToFace(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum PassType {
    PT_CLEAR,
    PT_STENCIL,
    PT_RENDERSCENE,
    PT_RENDERQUAD,
    PT_RENDERCUSTOM,
    PT_COMPUTE
  }

}

}
