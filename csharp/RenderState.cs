//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class RenderState : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RenderState(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RenderState obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RenderState() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RTShaderPINVOKE.delete_RenderState(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public RenderState() : this(RTShaderPINVOKE.new_RenderState(), true) {
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void resetToBuiltinSubRenderStates() {
    RTShaderPINVOKE.RenderState_resetToBuiltinSubRenderStates(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addTemplateSubRenderState(SubRenderState subRenderState) {
    RTShaderPINVOKE.RenderState_addTemplateSubRenderState(swigCPtr, SubRenderState.getCPtr(subRenderState));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addTemplateSubRenderStates(StringList srsTypes) {
    RTShaderPINVOKE.RenderState_addTemplateSubRenderStates(swigCPtr, StringList.getCPtr(srsTypes));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeSubRenderState(SubRenderState subRenderState) {
    RTShaderPINVOKE.RenderState_removeSubRenderState(swigCPtr, SubRenderState.getCPtr(subRenderState));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_Ogre__RTShader__SubRenderState_p_t getSubRenderStates() {
    SWIGTYPE_p_std__vectorT_Ogre__RTShader__SubRenderState_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__RTShader__SubRenderState_p_t(RTShaderPINVOKE.RenderState_getSubRenderStates(swigCPtr), false);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SubRenderState getSubRenderState(string type) {
    global::System.IntPtr cPtr = RTShaderPINVOKE.RenderState_getSubRenderState(swigCPtr, type);
    SubRenderState ret = (cPtr == global::System.IntPtr.Zero) ? null : new SubRenderState(cPtr, false);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLightCount(int lightCount) {
    RTShaderPINVOKE.RenderState_setLightCount(swigCPtr, lightCount);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getLightCount() {
    int ret = RTShaderPINVOKE.RenderState_getLightCount(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLightCountAutoUpdate(bool autoUpdate) {
    RTShaderPINVOKE.RenderState_setLightCountAutoUpdate(swigCPtr, autoUpdate);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getLightCountAutoUpdate() {
    bool ret = RTShaderPINVOKE.RenderState_getLightCountAutoUpdate(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool haveAreaLights() {
    bool ret = RTShaderPINVOKE.RenderState_haveAreaLights(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setHaveAreaLights(bool val) {
    RTShaderPINVOKE.RenderState_setHaveAreaLights(swigCPtr, val);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
